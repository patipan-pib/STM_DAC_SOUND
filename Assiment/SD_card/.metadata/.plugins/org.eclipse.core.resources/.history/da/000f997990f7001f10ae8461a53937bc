/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

#define WAVE_HEADER_SIZE 44
#define BUFFER_SIZE 512

FATFS FatFs;    // ไฟล์ระบบ FatFs
FRESULT res;    // ตัวแปรเก็บผลการทำงาน
UINT bytesRead;        // ตัวแปรเก็บจำนวนไบต์ที่อ่านได้
FILINFO fno;   // File information object
DIR dir;       // Directory object

//WAV_InfoTypeDef currentAudio;

#define WAV_FILE_NAME "0:/A16_44.wav"
#define DAC_OUTPUT_PIN    GPIO_PIN_4

FIL wavFile;

char buff[100];


uint8_t playFlag = 0;




/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

typedef struct {
    char riff[4];           // "RIFF"
    uint32_t chunkSize;     // ขนาดไฟล์
    char wave[4];           // "WAVE"
    char fmt[4];            // "fmt "
    uint32_t fmtSize;       // ขนาดของข้อมูล format
    uint16_t audioFormat;   // รูปแบบไฟล์ (PCM = 1)
    uint16_t numChannels;   // จำนวน Channel (1 = Mono, 2 = Stereo)
    uint32_t sampleRate;    // Sample Rate เช่น 44100 Hz
    uint32_t byteRate;      // จำนวน bytes per second
    uint16_t blockAlign;    // จำนวน byte ต่อ 1 sample
    uint16_t bitsPerSample; // จำนวน bit ต่อ 1 sample
    char data[4];           // "data"
    uint32_t dataSize;      // ขนาดของข้อมูลเสียง
} WAV_HEADER;

WAV_HEADER wavHeader;


#define BUFFER_SIZE 512
int16_t audioBuffer1[BUFFER_SIZE];
int16_t audioBuffer2[BUFFER_SIZE];
uint8_t activeBuffer = 0;
uint16_t dmaBuffer[BUFFER_SIZE];
volatile uint8_t bufferReady = 0;

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim6;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_DAC_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//void Convert_16bit_to_12bit(uint16_t *buffer, uint32_t length) {
//    for (uint32_t i = 0; i < length; i++) {
//        // ลดขนาดจาก 16-bit เป็น 12-bit และป้องกันค่าที่เกินขอบเขต
//        buffer[i] = (buffer[i] >> 4) & 0x0FFF;  // เฉพาะ 12 บิตแรก
//    }
//}

void Convert_16bit_to_12bit(int16_t *buffer, uint32_t samples) {
    for (uint32_t i = 0; i < samples; i++) {
        buffer[i] = ((int32_t)buffer[i] + 32768) >> 4;  // Shift and normalize
    }
}

//void Convert_16bit_to_12bit(int16_t *input, uint16_t *output, uint32_t samples) {
//    for (uint32_t i = 0; i < samples; i++) {
//        output[i] = ((int32_t)input[i] + 32768) >> 4;  // Convert to 12-bit
//    }
//}


FRESULT open_wav_file() {
    FRESULT res = f_mount(&FatFs, "", 1);

    // Mount SD card
	if (res != FR_OK) {
		memset(buff, 0, sizeof(buff));
		sprintf(buff, "Error mounting SD card! Error code: %d\r\n", res);
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
		return res;
	}

	// เปิดไฟล์ WAV
	res = f_open(&wavFile, WAV_FILE_NAME, FA_READ);
    if (res != FR_OK) {
    	memset(buff, 0, sizeof(buff));
		sprintf(buff, "Error opening WAV file! Error code: %d\r\n", res);
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        return res;
    }

    // อ่าน WAV Header
    f_read(&wavFile, &wavHeader, sizeof(WAV_HEADER), &bytesRead);
	if (bytesRead != sizeof(WAV_HEADER) || wavHeader.audioFormat != 1) {
		memset(buff, 0, sizeof(buff));
		sprintf(buff, "Invalid WAV file!\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
		return FR_INVALID_OBJECT;
	}

	// แสดงข้อมูลของไฟล์ WAV
	memset(buff, 0, sizeof(buff));
	sprintf(buff, "Sample Rate: %lu Hz, Bits Per Sample: %d, Channels: %d\r\n",
	            wavHeader.sampleRate, wavHeader.bitsPerSample, wavHeader.numChannels);
	    HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);

    // ข้าม header ของไฟล์ WAV (44 bytes)
    f_lseek(&wavFile, 44);  // ข้าม header ของ WAV file
    if (res != FR_OK) {
		sprintf(buff, "Error seeking to WAV data chunk! Error code: %d\r\n", res);
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
		return res;
	}
    return FR_OK;
}



// ฟังก์ชันในการแสดงรายการไฟล์ใน SD card
void list_files(const char* path) {
    // Mount SD card
    res = f_mount(&FatFs, "", 0);
    if (res != FR_OK) {
        sprintf(buff, "Error mounting SD card! Error code: %d\r\n", res);
        HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        return;
    }

    // เปิด directory
    res = f_opendir(&dir, path);
    if (res != FR_OK) {
    	sprintf(buff, "Error opening directory! Error code: %d\r\n", res);
    	HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        return;
    }

    // อ่านรายการไฟล์ใน directory
    sprintf(buff, "Files in directory '%s':\r\n", path);
    HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
    while (1) {
        res = f_readdir(&dir, &fno);  // อ่านรายการไฟล์
        if (res != FR_OK || fno.fname[0] == 0) break;  // ไม่มีไฟล์ หรือหมดรายการ

        if (fno.fattrib & AM_DIR) {
            // ถ้าเป็น directory
        	sprintf(buff, "[DIR]  %s\r\n", fno.fname);
        	HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        } else {
            // ถ้าเป็นไฟล์
        	sprintf(buff, "      %s\r\n", fno.fname);
        	HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        }
    }

    // ปิด directory
    f_closedir(&dir);
}

// ฟังก์ชันในการอ่านข้อมูล PCM จากไฟล์ WAV และส่งไปที่ DAC
void play_wav_file() {
    uint16_t pcmData;
    // อ่านข้อมูล PCM จากไฟล์ (16-bit data)
    while (f_read(&wavFile, &pcmData, sizeof(pcmData), &bytesRead) == FR_OK) {
        if (bytesRead == 0) {
            break;  // ถ้าไม่มีข้อมูลให้หยุด
        }
        // ส่งข้อมูลไปที่ DAC
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pcmData);
    }
}



// เริ่มเล่น WAV file
void Play_WAV() {
    if (open_wav_file() != FR_OK) {
        return;
    }

    // โหลด Buffer แรกก่อนเริ่มเล่น
       f_read(&wavFile, audioBuffer1, BUFFER_SIZE * sizeof(uint16_t), &bytesRead);
       // ตรวจสอบว่าแปลงข้อมูลไหม
       Convert_16bit_to_12bit(audioBuffer1, bytesRead / 2);


       f_read(&wavFile, audioBuffer2, BUFFER_SIZE * sizeof(uint16_t), &bytesRead);
       Convert_16bit_to_12bit(audioBuffer2, bytesRead / 2);


//       sprintf(buff, "[audioBuffer1]  %d\r\n", audioBuffer1);
//		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);



       // เริ่ม DAC + DMA (ใช้ Double Buffer)
       HAL_TIM_Base_Start(&htim6);
       HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audioBuffer1, BUFFER_SIZE, DAC_ALIGN_12B_R);

       bufferReady = 0;  // เคลียร์ค่าเริ่มต้น

       while (1) {
           if (bufferReady) {
               int16_t *currentBuffer = (activeBuffer == 0) ? audioBuffer2 : audioBuffer1;

               // โหลดข้อมูลใหม่ใน Buffer ที่ไม่ได้ใช้งาน
               f_read(&wavFile, currentBuffer, BUFFER_SIZE * sizeof(uint16_t), &bytesRead);
               Convert_16bit_to_12bit(currentBuffer, bytesRead / 2);


               if (bytesRead == 0) {
                   break;  // ไฟล์จบแล้ว
               }

               bufferReady = 0;  // รอ Callback เรียกอีกครั้ง
           }
       }

       // หยุด DAC และ Timer
       HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
       HAL_TIM_Base_Stop(&htim6);
       f_close(&wavFile);
   }

   // DMA Callback - ใช้โหลด Buffer ใหม่
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
	activeBuffer = 1 - activeBuffer;  // สลับระหว่าง Buffer
	bufferReady = 1;  // แจ้งว่า buffer พร้อมใช้งาน
}

// ฟังก์ชันในการเล่นไฟล์ WAV
void play_audio() {
    if (open_wav_file() == FR_OK) {
    	sprintf(buff, "Playing WAV file...\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);

//        play_wav_file();  // อ่านข้อมูลจาก WAV file และส่งไป DAC

//		HAL_TIM_Base_Start(&htim6);
//		HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // เปิด DAC
        Play_WAV();
//        HAL_TIM_Base_Stop(&htim6);

        f_close(&wavFile);  // ปิดไฟล์หลังจากเล่นเสร็จ
    } else {
        // ถ้ามีข้อผิดพลาดในการเปิดไฟล์
    	sprintf(buff, "Error: Cannot open WAV file!\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        Error_Handler();
    }
}


void PlayWavFile(const char *filename) {
    FIL wavFile;              // File object
    UINT bytesRead;          // Number of bytes read
    uint8_t readBuffer[BUFFER_SIZE]; // Buffer to store read data

    f_mount(&FatFs, "", 1);
    // Open WAV file
    if (f_open(&wavFile, filename, FA_READ) == FR_OK) {
        // Read and skip the WAV header
        f_read(&wavFile, readBuffer, WAVE_HEADER_SIZE, &bytesRead);
        sprintf(buff, "f_read\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);

        // Main loop to read audio data
        while (1) {
            // Read data from the WAV file
            f_read(&wavFile, readBuffer, BUFFER_SIZE, &bytesRead);
            if (bytesRead == 0) break; // End of file

            // Send data to DAC
            for (uint32_t i = 0; i < bytesRead; i += 2) {
                if (i + 1 < bytesRead) {
                    uint16_t sample = (readBuffer[i + 1] << 8) | readBuffer[i]; // Combine two bytes to form one sample

                    // Debug line to check the sample value
                    sprintf(buff, "Sample Value: %u\n", sample); // Log/Print sample value if possible
                    HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);

                    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sample); // Send sample to DAC

                    // Wait or use a timer delay
                    // Adjust this delay according to the sample rate
                    HAL_Delay(1); // Adjust as necessary for sampling rate
                }
            }
        }

        // Close the WAV file
        f_close(&wavFile);
    }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();
  MX_USART3_UART_Init();
  MX_DAC_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);

  HAL_UART_Transmit(&huart3, (uint8_t*)"System Ready!\r\n", 15, 100);


//  sd_init();
//  play_audio();
  PlayWavFile("0:/A1.wav");

//  list_files("0:/");
//
//  // ทำการ mount SD Card
//     res = f_mount(&FatFs, "", 1);  // ไฟล์ระบบถูก mount ที่ "drive 0" ซึ่งหมายถึง SD Card
//     if (res != FR_OK) {
//         sprintf(buff, "Mount failed: %d\r\n", res);
//         HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//         return -1;
//     }
//
//     // เปิดไฟล์ "test.txt" สำหรับการอ่าน
//     res = f_open(&fil, "test.txt", FA_READ);
//     if (res != FR_OK) {
//         sprintf(buff, "File open failed: %d\r\n", res);
//         HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//
//
//         return -1;
//     }
//
//     // อ่านข้อมูลจากไฟล์
//     char buffer[128];  // ตั้งขนาด buffer ที่ใช้เก็บข้อมูล
//     res = f_read(&fil, buffer, sizeof(buffer) - 1, &bytesRead);  // อ่านข้อมูลจากไฟล์
//     if (res == FR_OK) {
//         buffer[br] = '\0';  // ใส่ NULL terminator ในข้อความที่อ่านมา
//         sprintf(buff, "Read from file: %s\r\n", buffer);
//         HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//     } else {
//         sprintf(buff, "Read failed: %d\r\n", res);
//         HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//     }

     // ปิดไฟล์
//     f_close(&fil);

     // ทำการ unmount SD Card
//     f_mount(NULL, "", 0);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 144;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 1632;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
