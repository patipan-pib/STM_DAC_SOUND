/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"
#include "ff.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define WAV_FILE "test.wav"
#define BUFFER_SIZE 1024
#define SAMPLE_RATE 44100  // ตัวอย่าง Sample rate
#define NUM_CHANNELS 2     // ช่องเสียง Stereo (2 ช่อง)
#define BITS_PER_SAMPLE 16 // 16-bit per sample


// ประกาศตัวแปรที่ใช้ใน FatFs
FATFS FatFs;    // ไฟล์ระบบ FatFs
//FIL fil;        // ตัวแปรไฟล์
FRESULT res;    // ตัวแปรเก็บผลการทำงาน
UINT bytesRead;        // ตัวแปรเก็บจำนวนไบต์ที่อ่านได้
BYTE buffer[BUFFER_SIZE];  // Buffer สำหรับเก็บข้อมูล PCM


#define WAV_FILE_NAME "0:/B"
#define DAC_OUTPUT_PIN    GPIO_PIN_4
FIL wavFile;

char buff[100];

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

DAC_HandleTypeDef hdac;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_DAC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

FRESULT open_wav_file() {
//    FRESULT res = f_open(&wavFile, WAV_FILE_NAME, FA_READ);  // เปิดไฟล์สำหรับอ่าน
    FRESULT res = f_mount(&FatFs, "", 0);
        if (res != FR_OK) {
            sprintf(buff, "Error mounting SD card! Error code: %d\r\n", res);
            HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
            return res;
        }

    if (res != FR_OK) {
		sprintf(buff, "Error opening WAV file! Error code: %d\r\n", res);
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        return res;
    }

    // ข้าม header ของไฟล์ WAV (44 bytes)
    f_lseek(&wavFile, 44);  // ข้าม header ของ WAV file
    return FR_OK;
}

// ฟังก์ชันในการอ่านข้อมูล PCM จากไฟล์ WAV และส่งไปที่ DAC
void play_wav_file() {
    uint16_t pcmData;

    // อ่านข้อมูล PCM จากไฟล์ (16-bit data)
    while (f_read(&wavFile, &pcmData, sizeof(pcmData), &bytesRead) == FR_OK) {
        if (bytesRead == 0) {
        	sprintf(buff, "End of WAV file reached\r\n");
			HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
            break;  // ถ้าไม่มีข้อมูลให้หยุด
        }
//        sprintf(buff, "play_wav_file: OK, %d\r\n", pcmData);
//        HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);

        // ส่งข้อมูลไปที่ DAC
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pcmData);
    }
}

void sd_init(void) {
	res = f_mount(&FatFs, "", 1);  // ไฟล์ระบบถูก mount ที่ "drive 0" ซึ่งหมายถึง SD Card
	 if (res != FR_OK) {
		 sprintf(buff, "Mount failed: %d\r\n", res);
		 HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//		 return -1;
	 }
}


// ฟังก์ชันในการอ่านข้อมูลจาก WAV file และส่งออกผ่าน DAC
//void play_wav_file(void) {
//    res = f_mount(&FatFs, "", 1);
//    if (res != FR_OK) {
////        printf("SD Card mount failed: %d\n", res);
//        sprintf(buff, "SD Card mount failed: %d\r\n", res);
//        HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//        return;
//    }
//
//    // เปิดไฟล์ WAV
//    res = f_open(&fil, WAV_FILE, FA_READ);
//    if (res != FR_OK) {
////        printf("File open failed: %d\n", res);
//        sprintf(buff, "File open failed: %d\r\n", res);
//        HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//        return;
//    }
//
//    // อ่านข้อมูลจาก header เพื่อข้ามไปยัง data chunk
//    // Skip RIFF, fmt chunks and move to data chunk
//    f_lseek(&fil, 44);  // ข้าม 44 bytes ไปที่ data chunk ของ WAV file (header 44 bytes)
//
//    // เล่นเสียง (อ่านข้อมูล PCM และส่งผ่าน DAC)
//    while (f_read(&fil, buffer, BUFFER_SIZE, &bytesRead) == FR_OK) {
//        if (bytesRead == 0) {
//            break;  // ไม่มีข้อมูลให้เล่นแล้ว
//        }
//
//        // ส่งข้อมูลผ่าน DAC (ใช้ DMA ถ้ามี)
//        for (int i = 0; i < bytesRead / 2; i++) { // 16-bit per sample
//            uint16_t sample = (buffer[2 * i + 1] << 8) | buffer[2 * i]; // 16-bit sample
//
//            // ส่งค่า sample ไปที่ DAC
//            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sample);
//        }
//
//        // รอจนกระทั่ง DAC ส่งข้อมูลออกไป
//        HAL_Delay(1000 / SAMPLE_RATE); // Delay ให้พอเหมาะกับ sample rate
//    }
//
//    // ปิดไฟล์เมื่อเสร็จ
//    f_close(&fil);
//
//    sprintf(buff, "WAV file playback completed!\r\n");
//    HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//}
void DAC_Init(void) {
    DAC_HandleTypeDef hdac;

    __HAL_RCC_DAC1_CLK_ENABLE();  // เปิดคล๊อก DAC1

    hdac.Instance = DAC;
//    hdac.Init.DAC_Trigger = DAC_TRIGGER_NONE;
//    hdac.Init.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;

    if (HAL_DAC_Init(&hdac) != HAL_OK) {
//        printf("DAC Initialization Failed!\r\n");
        sprintf(buff, "DAC Initialization Failed!\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        Error_Handler();
    }

    // เริ่มต้น DAC Channel 1
    if (HAL_DAC_Start(&hdac, DAC_CHANNEL_1) != HAL_OK) {
//        printf("DAC Start Failed!\r\n");
        sprintf(buff, "DAC Start Failed!\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        Error_Handler();
    }
}
// ฟังก์ชันในการเล่นไฟล์ WAV
void play_audio() {
    if (open_wav_file() == FR_OK) {
    	sprintf(buff, "play: OK\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        play_wav_file();  // อ่านข้อมูลจาก WAV file และส่งไป DAC
        f_close(&wavFile);  // ปิดไฟล์หลังจากเล่นเสร็จ
    } else {
        // ถ้ามีข้อผิดพลาดในการเปิดไฟล์
    	sprintf(buff, "play_wav_file: not OK\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        Error_Handler();
    }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();
  MX_USART3_UART_Init();
  MX_DAC_Init();
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
//  sd_init();
  play_audio();
//
//  // ทำการ mount SD Card
//     res = f_mount(&FatFs, "", 1);  // ไฟล์ระบบถูก mount ที่ "drive 0" ซึ่งหมายถึง SD Card
//     if (res != FR_OK) {
//         sprintf(buff, "Mount failed: %d\r\n", res);
//         HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//         return -1;
//     }
//
//     // เปิดไฟล์ "test.txt" สำหรับการอ่าน
//     res = f_open(&fil, "test.txt", FA_READ);
//     if (res != FR_OK) {
//         sprintf(buff, "File open failed: %d\r\n", res);
//         HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//
//
//         return -1;
//     }
//
//     // อ่านข้อมูลจากไฟล์
//     char buffer[128];  // ตั้งขนาด buffer ที่ใช้เก็บข้อมูล
//     res = f_read(&fil, buffer, sizeof(buffer) - 1, &bytesRead);  // อ่านข้อมูลจากไฟล์
//     if (res == FR_OK) {
//         buffer[br] = '\0';  // ใส่ NULL terminator ในข้อความที่อ่านมา
//         sprintf(buff, "Read from file: %s\r\n", buffer);
//         HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//     } else {
//         sprintf(buff, "Read failed: %d\r\n", res);
//         HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
//     }

     // ปิดไฟล์
//     f_close(&fil);

     // ทำการ unmount SD Card
//     f_mount(NULL, "", 0);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 108;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {

    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {

    Error_Handler();
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
