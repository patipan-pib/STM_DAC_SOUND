
sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080094b0  080094b0  0000a4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009760  08009760  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009760  08009760  0000a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009768  08009768  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009768  08009768  0000a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800976c  0800976c  0000a76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009770  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001054  20000074  080097e4  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  080097e4  0000b0c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169c1  00000000  00000000  0000b0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a4  00000000  00000000  00021a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00024c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbf  00000000  00000000  00026030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4d3  00000000  00000000  00026fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b349  00000000  00000000  000514c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101117  00000000  00000000  0006c80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d922  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a24  00000000  00000000  0016d968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0017338c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08009498 	.word	0x08009498

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08009498 	.word	0x08009498

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005da:	4804      	ldr	r0, [pc, #16]	@ (80005ec <SELECT+0x1c>)
 80005dc:	f002 fd2e 	bl	800303c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f001 fb0d 	bl	8001c00 <HAL_Delay>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020800 	.word	0x40020800

080005f0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fa:	4804      	ldr	r0, [pc, #16]	@ (800060c <DESELECT+0x1c>)
 80005fc:	f002 fd1e 	bl	800303c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f001 fafd 	bl	8001c00 <HAL_Delay>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40020800 	.word	0x40020800

08000610 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800061a:	bf00      	nop
 800061c:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <SPI_TxByte+0x30>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	2b02      	cmp	r3, #2
 8000628:	d1f8      	bne.n	800061c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	2364      	movs	r3, #100	@ 0x64
 800062e:	2201      	movs	r2, #1
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <SPI_TxByte+0x30>)
 8000632:	f003 fea8 	bl	8004386 <HAL_SPI_Transmit>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000e04 	.word	0x20000e04

08000644 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000650:	bf00      	nop
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <SPI_TxBuffer+0x30>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	2b02      	cmp	r3, #2
 800065e:	d1f8      	bne.n	8000652 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000660:	887a      	ldrh	r2, [r7, #2]
 8000662:	2364      	movs	r3, #100	@ 0x64
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	4803      	ldr	r0, [pc, #12]	@ (8000674 <SPI_TxBuffer+0x30>)
 8000668:	f003 fe8d 	bl	8004386 <HAL_SPI_Transmit>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000e04 	.word	0x20000e04

08000678 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800067e:	23ff      	movs	r3, #255	@ 0xff
 8000680:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000682:	bf00      	nop
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <SPI_RxByte+0x34>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	2b02      	cmp	r3, #2
 8000690:	d1f8      	bne.n	8000684 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000692:	1dba      	adds	r2, r7, #6
 8000694:	1df9      	adds	r1, r7, #7
 8000696:	2364      	movs	r3, #100	@ 0x64
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	4803      	ldr	r0, [pc, #12]	@ (80006ac <SPI_RxByte+0x34>)
 800069e:	f003 ffe7 	bl	8004670 <HAL_SPI_TransmitReceive>

	return data;
 80006a2:	79bb      	ldrb	r3, [r7, #6]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000e04 	.word	0x20000e04

080006b0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80006b8:	f7ff ffde 	bl	8000678 <SPI_RxByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	701a      	strb	r2, [r3, #0]
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <SD_ReadyWait+0x30>)
 80006d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006d8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006da:	f7ff ffcd 	bl	8000678 <SPI_RxByte>
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2bff      	cmp	r3, #255	@ 0xff
 80006e6:	d003      	beq.n	80006f0 <SD_ReadyWait+0x24>
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <SD_ReadyWait+0x30>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f4      	bne.n	80006da <SD_ReadyWait+0xe>

	return res;
 80006f0:	79fb      	ldrb	r3, [r7, #7]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000092 	.word	0x20000092

08000700 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000706:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800070a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800070c:	f7ff ff70 	bl	80005f0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	e005      	b.n	8000722 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000716:	20ff      	movs	r0, #255	@ 0xff
 8000718:	f7ff ff7a 	bl	8000610 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	3301      	adds	r3, #1
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	2b09      	cmp	r3, #9
 8000726:	ddf6      	ble.n	8000716 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000728:	f7ff ff52 	bl	80005d0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800072c:	2340      	movs	r3, #64	@ 0x40
 800072e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000740:	2395      	movs	r3, #149	@ 0x95
 8000742:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000744:	463b      	mov	r3, r7
 8000746:	2106      	movs	r1, #6
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff7b 	bl	8000644 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800074e:	e002      	b.n	8000756 <SD_PowerOn+0x56>
	{
		cnt--;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	3b01      	subs	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000756:	f7ff ff8f 	bl	8000678 <SPI_RxByte>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d002      	beq.n	8000766 <SD_PowerOn+0x66>
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f4      	bne.n	8000750 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000766:	f7ff ff43 	bl	80005f0 <DESELECT>
	SPI_TxByte(0XFF);
 800076a:	20ff      	movs	r0, #255	@ 0xff
 800076c:	f7ff ff50 	bl	8000610 <SPI_TxByte>

	PowerFlag = 1;
 8000770:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <SD_PowerOn+0x80>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000095 	.word	0x20000095

08000784 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <SD_PowerOff+0x14>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	20000095 	.word	0x20000095

0800079c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007a0:	4b03      	ldr	r3, [pc, #12]	@ (80007b0 <SD_CheckPower+0x14>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000095 	.word	0x20000095

080007b4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <SD_RxDataBlock+0x58>)
 80007c0:	22c8      	movs	r2, #200	@ 0xc8
 80007c2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007c4:	f7ff ff58 	bl	8000678 <SPI_RxByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	2bff      	cmp	r3, #255	@ 0xff
 80007d0:	d103      	bne.n	80007da <SD_RxDataBlock+0x26>
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <SD_RxDataBlock+0x58>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1f4      	bne.n	80007c4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80007de:	d001      	beq.n	80007e4 <SD_RxDataBlock+0x30>
 80007e0:	2300      	movs	r3, #0
 80007e2:	e00f      	b.n	8000804 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff60 	bl	80006b0 <SPI_RxBytePtr>
	} while(len--);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	603a      	str	r2, [r7, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1f4      	bne.n	80007e4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80007fa:	f7ff ff3d 	bl	8000678 <SPI_RxByte>
	SPI_RxByte();
 80007fe:	f7ff ff3b 	bl	8000678 <SPI_RxByte>

	return TRUE;
 8000802:	2301      	movs	r3, #1
}
 8000804:	4618      	mov	r0, r3
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000090 	.word	0x20000090

08000810 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000820:	f7ff ff54 	bl	80006cc <SD_ReadyWait>
 8000824:	4603      	mov	r3, r0
 8000826:	2bff      	cmp	r3, #255	@ 0xff
 8000828:	d001      	beq.n	800082e <SD_TxDataBlock+0x1e>
 800082a:	2300      	movs	r3, #0
 800082c:	e02f      	b.n	800088e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff feed 	bl	8000610 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2bfd      	cmp	r3, #253	@ 0xfd
 800083a:	d020      	beq.n	800087e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800083c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff feff 	bl	8000644 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000846:	f7ff ff17 	bl	8000678 <SPI_RxByte>
		SPI_RxByte();
 800084a:	f7ff ff15 	bl	8000678 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800084e:	e00b      	b.n	8000868 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000850:	f7ff ff12 	bl	8000678 <SPI_RxByte>
 8000854:	4603      	mov	r3, r0
 8000856:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	f003 031f 	and.w	r3, r3, #31
 800085e:	2b05      	cmp	r3, #5
 8000860:	d006      	beq.n	8000870 <SD_TxDataBlock+0x60>
			i++;
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	3301      	adds	r3, #1
 8000866:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	2b40      	cmp	r3, #64	@ 0x40
 800086c:	d9f0      	bls.n	8000850 <SD_TxDataBlock+0x40>
 800086e:	e000      	b.n	8000872 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000870:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000872:	bf00      	nop
 8000874:	f7ff ff00 	bl	8000678 <SPI_RxByte>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0fa      	beq.n	8000874 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	2b05      	cmp	r3, #5
 8000886:	d101      	bne.n	800088c <SD_TxDataBlock+0x7c>
 8000888:	2301      	movs	r3, #1
 800088a:	e000      	b.n	800088e <SD_TxDataBlock+0x7e>

	return FALSE;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b084      	sub	sp, #16
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	6039      	str	r1, [r7, #0]
 80008a0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008a2:	f7ff ff13 	bl	80006cc <SD_ReadyWait>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2bff      	cmp	r3, #255	@ 0xff
 80008aa:	d001      	beq.n	80008b0 <SD_SendCmd+0x1a>
 80008ac:	23ff      	movs	r3, #255	@ 0xff
 80008ae:	e042      	b.n	8000936 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff feac 	bl	8000610 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	0e1b      	lsrs	r3, r3, #24
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fea6 	bl	8000610 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	0c1b      	lsrs	r3, r3, #16
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fea0 	bl	8000610 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe9a 	bl	8000610 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe95 	bl	8000610 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b40      	cmp	r3, #64	@ 0x40
 80008ea:	d102      	bne.n	80008f2 <SD_SendCmd+0x5c>
 80008ec:	2395      	movs	r3, #149	@ 0x95
 80008ee:	73fb      	strb	r3, [r7, #15]
 80008f0:	e007      	b.n	8000902 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b48      	cmp	r3, #72	@ 0x48
 80008f6:	d102      	bne.n	80008fe <SD_SendCmd+0x68>
 80008f8:	2387      	movs	r3, #135	@ 0x87
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	e001      	b.n	8000902 <SD_SendCmd+0x6c>
	else crc = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe83 	bl	8000610 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b4c      	cmp	r3, #76	@ 0x4c
 800090e:	d101      	bne.n	8000914 <SD_SendCmd+0x7e>
 8000910:	f7ff feb2 	bl	8000678 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000914:	230a      	movs	r3, #10
 8000916:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000918:	f7ff feae 	bl	8000678 <SPI_RxByte>
 800091c:	4603      	mov	r3, r0
 800091e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000920:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000924:	2b00      	cmp	r3, #0
 8000926:	da05      	bge.n	8000934 <SD_SendCmd+0x9e>
 8000928:	7bbb      	ldrb	r3, [r7, #14]
 800092a:	3b01      	subs	r3, #1
 800092c:	73bb      	strb	r3, [r7, #14]
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1f1      	bne.n	8000918 <SD_SendCmd+0x82>

	return res;
 8000934:	7b7b      	ldrb	r3, [r7, #13]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SD_disk_initialize+0x14>
 8000950:	2301      	movs	r3, #1
 8000952:	e0d1      	b.n	8000af8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000954:	4b6a      	ldr	r3, [pc, #424]	@ (8000b00 <SD_disk_initialize+0x1c0>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <SD_disk_initialize+0x2a>
 8000962:	4b67      	ldr	r3, [pc, #412]	@ (8000b00 <SD_disk_initialize+0x1c0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	e0c6      	b.n	8000af8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800096a:	f7ff fec9 	bl	8000700 <SD_PowerOn>

	/* slave select */
	SELECT();
 800096e:	f7ff fe2f 	bl	80005d0 <SELECT>

	/* check disk type */
	type = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000976:	2100      	movs	r1, #0
 8000978:	2040      	movs	r0, #64	@ 0x40
 800097a:	f7ff ff8c 	bl	8000896 <SD_SendCmd>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	f040 80a1 	bne.w	8000ac8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000986:	4b5f      	ldr	r3, [pc, #380]	@ (8000b04 <SD_disk_initialize+0x1c4>)
 8000988:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800098c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800098e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000992:	2048      	movs	r0, #72	@ 0x48
 8000994:	f7ff ff7f 	bl	8000896 <SD_SendCmd>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d155      	bne.n	8000a4a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800099e:	2300      	movs	r3, #0
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e00c      	b.n	80009be <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009a4:	7bfc      	ldrb	r4, [r7, #15]
 80009a6:	f7ff fe67 	bl	8000678 <SPI_RxByte>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	f104 0310 	add.w	r3, r4, #16
 80009b2:	443b      	add	r3, r7
 80009b4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	3301      	adds	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d9ef      	bls.n	80009a4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009c4:	7abb      	ldrb	r3, [r7, #10]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d17e      	bne.n	8000ac8 <SD_disk_initialize+0x188>
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	2baa      	cmp	r3, #170	@ 0xaa
 80009ce:	d17b      	bne.n	8000ac8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009d0:	2100      	movs	r1, #0
 80009d2:	2077      	movs	r0, #119	@ 0x77
 80009d4:	f7ff ff5f 	bl	8000896 <SD_SendCmd>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d807      	bhi.n	80009ee <SD_disk_initialize+0xae>
 80009de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009e2:	2069      	movs	r0, #105	@ 0x69
 80009e4:	f7ff ff57 	bl	8000896 <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80009ee:	4b45      	ldr	r3, [pc, #276]	@ (8000b04 <SD_disk_initialize+0x1c4>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1ec      	bne.n	80009d0 <SD_disk_initialize+0x90>
 80009f6:	e000      	b.n	80009fa <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009f8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009fa:	4b42      	ldr	r3, [pc, #264]	@ (8000b04 <SD_disk_initialize+0x1c4>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d062      	beq.n	8000ac8 <SD_disk_initialize+0x188>
 8000a02:	2100      	movs	r1, #0
 8000a04:	207a      	movs	r0, #122	@ 0x7a
 8000a06:	f7ff ff46 	bl	8000896 <SD_SendCmd>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]
 8000a14:	e00c      	b.n	8000a30 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a16:	7bfc      	ldrb	r4, [r7, #15]
 8000a18:	f7ff fe2e 	bl	8000678 <SPI_RxByte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f104 0310 	add.w	r3, r4, #16
 8000a24:	443b      	add	r3, r7
 8000a26:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d9ef      	bls.n	8000a16 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a36:	7a3b      	ldrb	r3, [r7, #8]
 8000a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SD_disk_initialize+0x104>
 8000a40:	230c      	movs	r3, #12
 8000a42:	e000      	b.n	8000a46 <SD_disk_initialize+0x106>
 8000a44:	2304      	movs	r3, #4
 8000a46:	73bb      	strb	r3, [r7, #14]
 8000a48:	e03e      	b.n	8000ac8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2077      	movs	r0, #119	@ 0x77
 8000a4e:	f7ff ff22 	bl	8000896 <SD_SendCmd>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d808      	bhi.n	8000a6a <SD_disk_initialize+0x12a>
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2069      	movs	r0, #105	@ 0x69
 8000a5c:	f7ff ff1b 	bl	8000896 <SD_SendCmd>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d801      	bhi.n	8000a6a <SD_disk_initialize+0x12a>
 8000a66:	2302      	movs	r3, #2
 8000a68:	e000      	b.n	8000a6c <SD_disk_initialize+0x12c>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a6e:	7bbb      	ldrb	r3, [r7, #14]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d10e      	bne.n	8000a92 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a74:	2100      	movs	r1, #0
 8000a76:	2077      	movs	r0, #119	@ 0x77
 8000a78:	f7ff ff0d 	bl	8000896 <SD_SendCmd>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d80e      	bhi.n	8000aa0 <SD_disk_initialize+0x160>
 8000a82:	2100      	movs	r1, #0
 8000a84:	2069      	movs	r0, #105	@ 0x69
 8000a86:	f7ff ff06 	bl	8000896 <SD_SendCmd>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d107      	bne.n	8000aa0 <SD_disk_initialize+0x160>
 8000a90:	e00c      	b.n	8000aac <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a92:	2100      	movs	r1, #0
 8000a94:	2041      	movs	r0, #65	@ 0x41
 8000a96:	f7ff fefe 	bl	8000896 <SD_SendCmd>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <SD_disk_initialize+0x1c4>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1e2      	bne.n	8000a6e <SD_disk_initialize+0x12e>
 8000aa8:	e000      	b.n	8000aac <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aaa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000aac:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <SD_disk_initialize+0x1c4>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d007      	beq.n	8000ac4 <SD_disk_initialize+0x184>
 8000ab4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab8:	2050      	movs	r0, #80	@ 0x50
 8000aba:	f7ff feec 	bl	8000896 <SD_SendCmd>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SD_disk_initialize+0x188>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <SD_disk_initialize+0x1c8>)
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ace:	f7ff fd8f 	bl	80005f0 <DESELECT>
	SPI_RxByte();
 8000ad2:	f7ff fdd1 	bl	8000678 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000ad6:	7bbb      	ldrb	r3, [r7, #14]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d008      	beq.n	8000aee <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <SD_disk_initialize+0x1c0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f023 0301 	bic.w	r3, r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <SD_disk_initialize+0x1c0>)
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e001      	b.n	8000af2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000aee:	f7ff fe49 	bl	8000784 <SD_PowerOff>
	}

	return Stat;
 8000af2:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <SD_disk_initialize+0x1c0>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000090 	.word	0x20000090
 8000b08:	20000094 	.word	0x20000094

08000b0c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SD_disk_status+0x14>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e002      	b.n	8000b26 <SD_disk_status+0x1a>
	return Stat;
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <SD_disk_status+0x28>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000000 	.word	0x20000000

08000b38 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <SD_disk_read+0x1c>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <SD_disk_read+0x20>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e051      	b.n	8000bfc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <SD_disk_read+0xcc>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SD_disk_read+0x32>
 8000b66:	2303      	movs	r3, #3
 8000b68:	e048      	b.n	8000bfc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b6a:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <SD_disk_read+0xd0>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <SD_disk_read+0x44>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	025b      	lsls	r3, r3, #9
 8000b7a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b7c:	f7ff fd28 	bl	80005d0 <SELECT>

	if (count == 1)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d111      	bne.n	8000baa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	2051      	movs	r0, #81	@ 0x51
 8000b8a:	f7ff fe84 	bl	8000896 <SD_SendCmd>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d129      	bne.n	8000be8 <SD_disk_read+0xb0>
 8000b94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b98:	68b8      	ldr	r0, [r7, #8]
 8000b9a:	f7ff fe0b 	bl	80007b4 <SD_RxDataBlock>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d021      	beq.n	8000be8 <SD_disk_read+0xb0>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	e01e      	b.n	8000be8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2052      	movs	r0, #82	@ 0x52
 8000bae:	f7ff fe72 	bl	8000896 <SD_SendCmd>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d117      	bne.n	8000be8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bbc:	68b8      	ldr	r0, [r7, #8]
 8000bbe:	f7ff fdf9 	bl	80007b4 <SD_RxDataBlock>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00a      	beq.n	8000bde <SD_disk_read+0xa6>
				buff += 512;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1ed      	bne.n	8000bb8 <SD_disk_read+0x80>
 8000bdc:	e000      	b.n	8000be0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bde:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000be0:	2100      	movs	r1, #0
 8000be2:	204c      	movs	r0, #76	@ 0x4c
 8000be4:	f7ff fe57 	bl	8000896 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000be8:	f7ff fd02 	bl	80005f0 <DESELECT>
	SPI_RxByte();
 8000bec:	f7ff fd44 	bl	8000678 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000094 	.word	0x20000094

08000c0c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	4603      	mov	r3, r0
 8000c1a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <SD_disk_write+0x1c>
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d101      	bne.n	8000c2c <SD_disk_write+0x20>
 8000c28:	2304      	movs	r3, #4
 8000c2a:	e06b      	b.n	8000d04 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c2c:	4b37      	ldr	r3, [pc, #220]	@ (8000d0c <SD_disk_write+0x100>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SD_disk_write+0x32>
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e062      	b.n	8000d04 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c3e:	4b33      	ldr	r3, [pc, #204]	@ (8000d0c <SD_disk_write+0x100>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SD_disk_write+0x44>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e059      	b.n	8000d04 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c50:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <SD_disk_write+0x104>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <SD_disk_write+0x56>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	025b      	lsls	r3, r3, #9
 8000c60:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c62:	f7ff fcb5 	bl	80005d0 <SELECT>

	if (count == 1)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d110      	bne.n	8000c8e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	2058      	movs	r0, #88	@ 0x58
 8000c70:	f7ff fe11 	bl	8000896 <SD_SendCmd>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d13a      	bne.n	8000cf0 <SD_disk_write+0xe4>
 8000c7a:	21fe      	movs	r1, #254	@ 0xfe
 8000c7c:	68b8      	ldr	r0, [r7, #8]
 8000c7e:	f7ff fdc7 	bl	8000810 <SD_TxDataBlock>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d033      	beq.n	8000cf0 <SD_disk_write+0xe4>
			count = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	e030      	b.n	8000cf0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <SD_disk_write+0x104>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2077      	movs	r0, #119	@ 0x77
 8000c9e:	f7ff fdfa 	bl	8000896 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000ca2:	6839      	ldr	r1, [r7, #0]
 8000ca4:	2057      	movs	r0, #87	@ 0x57
 8000ca6:	f7ff fdf6 	bl	8000896 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	2059      	movs	r0, #89	@ 0x59
 8000cae:	f7ff fdf2 	bl	8000896 <SD_SendCmd>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d11b      	bne.n	8000cf0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cb8:	21fc      	movs	r1, #252	@ 0xfc
 8000cba:	68b8      	ldr	r0, [r7, #8]
 8000cbc:	f7ff fda8 	bl	8000810 <SD_TxDataBlock>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00a      	beq.n	8000cdc <SD_disk_write+0xd0>
				buff += 512;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ccc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1ee      	bne.n	8000cb8 <SD_disk_write+0xac>
 8000cda:	e000      	b.n	8000cde <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cdc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cde:	21fd      	movs	r1, #253	@ 0xfd
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff fd95 	bl	8000810 <SD_TxDataBlock>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <SD_disk_write+0xe4>
			{
				count = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cf0:	f7ff fc7e 	bl	80005f0 <DESELECT>
	SPI_RxByte();
 8000cf4:	f7ff fcc0 	bl	8000678 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf14      	ite	ne
 8000cfe:	2301      	movne	r3, #1
 8000d00:	2300      	moveq	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000094 	.word	0x20000094

08000d14 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b08b      	sub	sp, #44	@ 0x2c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	603a      	str	r2, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	460b      	mov	r3, r1
 8000d22:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SD_disk_ioctl+0x1e>
 8000d2e:	2304      	movs	r3, #4
 8000d30:	e113      	b.n	8000f5a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d38:	79bb      	ldrb	r3, [r7, #6]
 8000d3a:	2b05      	cmp	r3, #5
 8000d3c:	d124      	bne.n	8000d88 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d012      	beq.n	8000d6c <SD_disk_ioctl+0x58>
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	dc1a      	bgt.n	8000d80 <SD_disk_ioctl+0x6c>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <SD_disk_ioctl+0x40>
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d006      	beq.n	8000d60 <SD_disk_ioctl+0x4c>
 8000d52:	e015      	b.n	8000d80 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d54:	f7ff fd16 	bl	8000784 <SD_PowerOff>
			res = RES_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d5e:	e0fa      	b.n	8000f56 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d60:	f7ff fcce 	bl	8000700 <SD_PowerOn>
			res = RES_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d6a:	e0f4      	b.n	8000f56 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	1c5c      	adds	r4, r3, #1
 8000d70:	f7ff fd14 	bl	800079c <SD_CheckPower>
 8000d74:	4603      	mov	r3, r0
 8000d76:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d7e:	e0ea      	b.n	8000f56 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d80:	2304      	movs	r3, #4
 8000d82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d86:	e0e6      	b.n	8000f56 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d88:	4b76      	ldr	r3, [pc, #472]	@ (8000f64 <SD_disk_ioctl+0x250>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SD_disk_ioctl+0x86>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e0df      	b.n	8000f5a <SD_disk_ioctl+0x246>

		SELECT();
 8000d9a:	f7ff fc19 	bl	80005d0 <SELECT>

		switch (ctrl)
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	2b0d      	cmp	r3, #13
 8000da2:	f200 80c9 	bhi.w	8000f38 <SD_disk_ioctl+0x224>
 8000da6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dac <SD_disk_ioctl+0x98>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000ea3 	.word	0x08000ea3
 8000db0:	08000de5 	.word	0x08000de5
 8000db4:	08000e93 	.word	0x08000e93
 8000db8:	08000f39 	.word	0x08000f39
 8000dbc:	08000f39 	.word	0x08000f39
 8000dc0:	08000f39 	.word	0x08000f39
 8000dc4:	08000f39 	.word	0x08000f39
 8000dc8:	08000f39 	.word	0x08000f39
 8000dcc:	08000f39 	.word	0x08000f39
 8000dd0:	08000f39 	.word	0x08000f39
 8000dd4:	08000f39 	.word	0x08000f39
 8000dd8:	08000eb5 	.word	0x08000eb5
 8000ddc:	08000ed9 	.word	0x08000ed9
 8000de0:	08000efd 	.word	0x08000efd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000de4:	2100      	movs	r1, #0
 8000de6:	2049      	movs	r0, #73	@ 0x49
 8000de8:	f7ff fd55 	bl	8000896 <SD_SendCmd>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 80a6 	bne.w	8000f40 <SD_disk_ioctl+0x22c>
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fcda 	bl	80007b4 <SD_RxDataBlock>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 809c 	beq.w	8000f40 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e08:	7b3b      	ldrb	r3, [r7, #12]
 8000e0a:	099b      	lsrs	r3, r3, #6
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d10d      	bne.n	8000e2e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e12:	7d7b      	ldrb	r3, [r7, #21]
 8000e14:	461a      	mov	r2, r3
 8000e16:	7d3b      	ldrb	r3, [r7, #20]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	3301      	adds	r3, #1
 8000e22:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e24:	8bfb      	ldrh	r3, [r7, #30]
 8000e26:	029a      	lsls	r2, r3, #10
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e02d      	b.n	8000e8a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e2e:	7c7b      	ldrb	r3, [r7, #17]
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	7dbb      	ldrb	r3, [r7, #22]
 8000e38:	09db      	lsrs	r3, r3, #7
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	7d7b      	ldrb	r3, [r7, #21]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 0306 	and.w	r3, r3, #6
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3302      	adds	r3, #2
 8000e52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e56:	7d3b      	ldrb	r3, [r7, #20]
 8000e58:	099b      	lsrs	r3, r3, #6
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	7cfb      	ldrb	r3, [r7, #19]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4413      	add	r3, r2
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	7cbb      	ldrb	r3, [r7, #18]
 8000e6a:	029b      	lsls	r3, r3, #10
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	4413      	add	r3, r2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3301      	adds	r3, #1
 8000e7a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e7c:	8bfa      	ldrh	r2, [r7, #30]
 8000e7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e82:	3b09      	subs	r3, #9
 8000e84:	409a      	lsls	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000e90:	e056      	b.n	8000f40 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e98:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ea0:	e055      	b.n	8000f4e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000ea2:	f7ff fc13 	bl	80006cc <SD_ReadyWait>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2bff      	cmp	r3, #255	@ 0xff
 8000eaa:	d14b      	bne.n	8000f44 <SD_disk_ioctl+0x230>
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eb2:	e047      	b.n	8000f44 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2049      	movs	r0, #73	@ 0x49
 8000eb8:	f7ff fced 	bl	8000896 <SD_SendCmd>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d142      	bne.n	8000f48 <SD_disk_ioctl+0x234>
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	6a38      	ldr	r0, [r7, #32]
 8000ec6:	f7ff fc75 	bl	80007b4 <SD_RxDataBlock>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d03b      	beq.n	8000f48 <SD_disk_ioctl+0x234>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ed6:	e037      	b.n	8000f48 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ed8:	2100      	movs	r1, #0
 8000eda:	204a      	movs	r0, #74	@ 0x4a
 8000edc:	f7ff fcdb 	bl	8000896 <SD_SendCmd>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d132      	bne.n	8000f4c <SD_disk_ioctl+0x238>
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	6a38      	ldr	r0, [r7, #32]
 8000eea:	f7ff fc63 	bl	80007b4 <SD_RxDataBlock>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d02b      	beq.n	8000f4c <SD_disk_ioctl+0x238>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000efa:	e027      	b.n	8000f4c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000efc:	2100      	movs	r1, #0
 8000efe:	207a      	movs	r0, #122	@ 0x7a
 8000f00:	f7ff fcc9 	bl	8000896 <SD_SendCmd>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d116      	bne.n	8000f38 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f10:	e00b      	b.n	8000f2a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f12:	6a3c      	ldr	r4, [r7, #32]
 8000f14:	1c63      	adds	r3, r4, #1
 8000f16:	623b      	str	r3, [r7, #32]
 8000f18:	f7ff fbae 	bl	8000678 <SPI_RxByte>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f24:	3301      	adds	r3, #1
 8000f26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d9ef      	bls.n	8000f12 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f3e:	e006      	b.n	8000f4e <SD_disk_ioctl+0x23a>
			break;
 8000f40:	bf00      	nop
 8000f42:	e004      	b.n	8000f4e <SD_disk_ioctl+0x23a>
			break;
 8000f44:	bf00      	nop
 8000f46:	e002      	b.n	8000f4e <SD_disk_ioctl+0x23a>
			break;
 8000f48:	bf00      	nop
 8000f4a:	e000      	b.n	8000f4e <SD_disk_ioctl+0x23a>
			break;
 8000f4c:	bf00      	nop
		}

		DESELECT();
 8000f4e:	f7ff fb4f 	bl	80005f0 <DESELECT>
		SPI_RxByte();
 8000f52:	f7ff fb91 	bl	8000678 <SPI_RxByte>
	}

	return res;
 8000f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	372c      	adds	r7, #44	@ 0x2c
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000000 	.word	0x20000000

08000f68 <Convert_16bit_to_12bit>:
//        // ลดขนาดจาก 16-bit เป็น 12-bit และป้องกันค่าที่เกินขอบเขต
//        buffer[i] = (buffer[i] >> 4) & 0x0FFF;  // เฉพาะ 12 บิตแรก
//    }
//}

void Convert_16bit_to_12bit(int16_t *buffer, uint32_t samples) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < samples; i++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e011      	b.n	8000f9c <Convert_16bit_to_12bit+0x34>
        buffer[i] = ((int32_t)buffer[i] + 32768) >> 4;  // Shift and normalize
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f84:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000f88:	1119      	asrs	r1, r3, #4
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	b20a      	sxth	r2, r1
 8000f94:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < samples; i++) {
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d3e9      	bcc.n	8000f78 <Convert_16bit_to_12bit+0x10>
    }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <open_wav_file>:
//        output[i] = ((int32_t)input[i] + 32768) >> 4;  // Convert to 12-bit
//    }
//}


FRESULT open_wav_file() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8
    FRESULT res = f_mount(&FatFs, "", 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4944      	ldr	r1, [pc, #272]	@ (80010d0 <open_wav_file+0x11c>)
 8000fbe:	4845      	ldr	r0, [pc, #276]	@ (80010d4 <open_wav_file+0x120>)
 8000fc0:	f006 ff7e 	bl	8007ec0 <f_mount>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]

    // Mount SD card
	if (res != FR_OK) {
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d012      	beq.n	8000ff4 <open_wav_file+0x40>
		memset(buff, 0, sizeof(buff));
 8000fce:	2264      	movs	r2, #100	@ 0x64
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4841      	ldr	r0, [pc, #260]	@ (80010d8 <open_wav_file+0x124>)
 8000fd4:	f007 fe8e 	bl	8008cf4 <memset>
		sprintf(buff, "Error mounting SD card! Error code: %d\r\n", res);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	493f      	ldr	r1, [pc, #252]	@ (80010dc <open_wav_file+0x128>)
 8000fde:	483e      	ldr	r0, [pc, #248]	@ (80010d8 <open_wav_file+0x124>)
 8000fe0:	f007 fe68 	bl	8008cb4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
 8000fe4:	2364      	movs	r3, #100	@ 0x64
 8000fe6:	2264      	movs	r2, #100	@ 0x64
 8000fe8:	493b      	ldr	r1, [pc, #236]	@ (80010d8 <open_wav_file+0x124>)
 8000fea:	483d      	ldr	r0, [pc, #244]	@ (80010e0 <open_wav_file+0x12c>)
 8000fec:	f004 f962 	bl	80052b4 <HAL_UART_Transmit>
		return res;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	e069      	b.n	80010c8 <open_wav_file+0x114>
	}

	// เปิดไฟล์ WAV
	res = f_open(&wavFile, WAV_FILE_NAME, FA_READ);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	493b      	ldr	r1, [pc, #236]	@ (80010e4 <open_wav_file+0x130>)
 8000ff8:	483b      	ldr	r0, [pc, #236]	@ (80010e8 <open_wav_file+0x134>)
 8000ffa:	f006 ffa7 	bl	8007f4c <f_open>
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d012      	beq.n	800102e <open_wav_file+0x7a>
    	memset(buff, 0, sizeof(buff));
 8001008:	2264      	movs	r2, #100	@ 0x64
 800100a:	2100      	movs	r1, #0
 800100c:	4832      	ldr	r0, [pc, #200]	@ (80010d8 <open_wav_file+0x124>)
 800100e:	f007 fe71 	bl	8008cf4 <memset>
		sprintf(buff, "Error opening WAV file! Error code: %d\r\n", res);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	461a      	mov	r2, r3
 8001016:	4935      	ldr	r1, [pc, #212]	@ (80010ec <open_wav_file+0x138>)
 8001018:	482f      	ldr	r0, [pc, #188]	@ (80010d8 <open_wav_file+0x124>)
 800101a:	f007 fe4b 	bl	8008cb4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
 800101e:	2364      	movs	r3, #100	@ 0x64
 8001020:	2264      	movs	r2, #100	@ 0x64
 8001022:	492d      	ldr	r1, [pc, #180]	@ (80010d8 <open_wav_file+0x124>)
 8001024:	482e      	ldr	r0, [pc, #184]	@ (80010e0 <open_wav_file+0x12c>)
 8001026:	f004 f945 	bl	80052b4 <HAL_UART_Transmit>
        return res;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	e04c      	b.n	80010c8 <open_wav_file+0x114>
    }

    // อ่าน WAV Header
    f_read(&wavFile, &wavHeader, sizeof(WAV_HEADER), &bytesRead);
 800102e:	4b30      	ldr	r3, [pc, #192]	@ (80010f0 <open_wav_file+0x13c>)
 8001030:	222c      	movs	r2, #44	@ 0x2c
 8001032:	4930      	ldr	r1, [pc, #192]	@ (80010f4 <open_wav_file+0x140>)
 8001034:	482c      	ldr	r0, [pc, #176]	@ (80010e8 <open_wav_file+0x134>)
 8001036:	f007 f943 	bl	80082c0 <f_read>
	if (bytesRead != sizeof(WAV_HEADER) || wavHeader.audioFormat != 1) {
 800103a:	4b2d      	ldr	r3, [pc, #180]	@ (80010f0 <open_wav_file+0x13c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001040:	d103      	bne.n	800104a <open_wav_file+0x96>
 8001042:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <open_wav_file+0x140>)
 8001044:	8a9b      	ldrh	r3, [r3, #20]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d010      	beq.n	800106c <open_wav_file+0xb8>
		memset(buff, 0, sizeof(buff));
 800104a:	2264      	movs	r2, #100	@ 0x64
 800104c:	2100      	movs	r1, #0
 800104e:	4822      	ldr	r0, [pc, #136]	@ (80010d8 <open_wav_file+0x124>)
 8001050:	f007 fe50 	bl	8008cf4 <memset>
		sprintf(buff, "Invalid WAV file!\r\n");
 8001054:	4928      	ldr	r1, [pc, #160]	@ (80010f8 <open_wav_file+0x144>)
 8001056:	4820      	ldr	r0, [pc, #128]	@ (80010d8 <open_wav_file+0x124>)
 8001058:	f007 fe2c 	bl	8008cb4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
 800105c:	2364      	movs	r3, #100	@ 0x64
 800105e:	2264      	movs	r2, #100	@ 0x64
 8001060:	491d      	ldr	r1, [pc, #116]	@ (80010d8 <open_wav_file+0x124>)
 8001062:	481f      	ldr	r0, [pc, #124]	@ (80010e0 <open_wav_file+0x12c>)
 8001064:	f004 f926 	bl	80052b4 <HAL_UART_Transmit>
		return FR_INVALID_OBJECT;
 8001068:	2309      	movs	r3, #9
 800106a:	e02d      	b.n	80010c8 <open_wav_file+0x114>
	}

	// แสดงข้อมูลของไฟล์ WAV
	memset(buff, 0, sizeof(buff));
 800106c:	2264      	movs	r2, #100	@ 0x64
 800106e:	2100      	movs	r1, #0
 8001070:	4819      	ldr	r0, [pc, #100]	@ (80010d8 <open_wav_file+0x124>)
 8001072:	f007 fe3f 	bl	8008cf4 <memset>
	sprintf(buff, "Sample Rate: %lu Hz, Bits Per Sample: %d, Channels: %d\r\n",
 8001076:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <open_wav_file+0x140>)
 8001078:	699a      	ldr	r2, [r3, #24]
	            wavHeader.sampleRate, wavHeader.bitsPerSample, wavHeader.numChannels);
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <open_wav_file+0x140>)
 800107c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
	sprintf(buff, "Sample Rate: %lu Hz, Bits Per Sample: %d, Channels: %d\r\n",
 800107e:	4619      	mov	r1, r3
	            wavHeader.sampleRate, wavHeader.bitsPerSample, wavHeader.numChannels);
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <open_wav_file+0x140>)
 8001082:	8adb      	ldrh	r3, [r3, #22]
	sprintf(buff, "Sample Rate: %lu Hz, Bits Per Sample: %d, Channels: %d\r\n",
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	460b      	mov	r3, r1
 8001088:	491c      	ldr	r1, [pc, #112]	@ (80010fc <open_wav_file+0x148>)
 800108a:	4813      	ldr	r0, [pc, #76]	@ (80010d8 <open_wav_file+0x124>)
 800108c:	f007 fe12 	bl	8008cb4 <siprintf>
	    HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
 8001090:	2364      	movs	r3, #100	@ 0x64
 8001092:	2264      	movs	r2, #100	@ 0x64
 8001094:	4910      	ldr	r1, [pc, #64]	@ (80010d8 <open_wav_file+0x124>)
 8001096:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <open_wav_file+0x12c>)
 8001098:	f004 f90c 	bl	80052b4 <HAL_UART_Transmit>

    // ข้าม header ของไฟล์ WAV (44 bytes)
    f_lseek(&wavFile, 44);  // ข้าม header ของ WAV file
 800109c:	212c      	movs	r1, #44	@ 0x2c
 800109e:	4812      	ldr	r0, [pc, #72]	@ (80010e8 <open_wav_file+0x134>)
 80010a0:	f007 faf5 	bl	800868e <f_lseek>
    if (res != FR_OK) {
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00d      	beq.n	80010c6 <open_wav_file+0x112>
		sprintf(buff, "Error seeking to WAV data chunk! Error code: %d\r\n", res);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4914      	ldr	r1, [pc, #80]	@ (8001100 <open_wav_file+0x14c>)
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <open_wav_file+0x124>)
 80010b2:	f007 fdff 	bl	8008cb4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
 80010b6:	2364      	movs	r3, #100	@ 0x64
 80010b8:	2264      	movs	r2, #100	@ 0x64
 80010ba:	4907      	ldr	r1, [pc, #28]	@ (80010d8 <open_wav_file+0x124>)
 80010bc:	4808      	ldr	r0, [pc, #32]	@ (80010e0 <open_wav_file+0x12c>)
 80010be:	f004 f8f9 	bl	80052b4 <HAL_UART_Transmit>
		return res;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	e000      	b.n	80010c8 <open_wav_file+0x114>
	}
    return FR_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	080094b0 	.word	0x080094b0
 80010d4:	20000098 	.word	0x20000098
 80010d8:	200004fc 	.word	0x200004fc
 80010dc:	080094b4 	.word	0x080094b4
 80010e0:	20000eb4 	.word	0x20000eb4
 80010e4:	080094e0 	.word	0x080094e0
 80010e8:	200002cc 	.word	0x200002cc
 80010ec:	080094f0 	.word	0x080094f0
 80010f0:	200002c8 	.word	0x200002c8
 80010f4:	20000560 	.word	0x20000560
 80010f8:	0800951c 	.word	0x0800951c
 80010fc:	08009530 	.word	0x08009530
 8001100:	0800956c 	.word	0x0800956c

08001104 <Play_WAV>:
}



// เริ่มเล่น WAV file
void Play_WAV() {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
    if (open_wav_file() != FR_OK) {
 800110a:	f7ff ff53 	bl	8000fb4 <open_wav_file>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d159      	bne.n	80011c8 <Play_WAV+0xc4>
        return;
    }

    // โหลด Buffer แรกก่อนเริ่มเล่น
       f_read(&wavFile, audioBuffer1, BUFFER_SIZE * sizeof(uint16_t), &bytesRead);
 8001114:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <Play_WAV+0xcc>)
 8001116:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800111a:	492e      	ldr	r1, [pc, #184]	@ (80011d4 <Play_WAV+0xd0>)
 800111c:	482e      	ldr	r0, [pc, #184]	@ (80011d8 <Play_WAV+0xd4>)
 800111e:	f007 f8cf 	bl	80082c0 <f_read>
       // ตรวจสอบว่าแปลงข้อมูลไหม
       Convert_16bit_to_12bit(audioBuffer1, bytesRead / 2);
 8001122:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <Play_WAV+0xcc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	085b      	lsrs	r3, r3, #1
 8001128:	4619      	mov	r1, r3
 800112a:	482a      	ldr	r0, [pc, #168]	@ (80011d4 <Play_WAV+0xd0>)
 800112c:	f7ff ff1c 	bl	8000f68 <Convert_16bit_to_12bit>


       f_read(&wavFile, audioBuffer2, BUFFER_SIZE * sizeof(uint16_t), &bytesRead);
 8001130:	4b27      	ldr	r3, [pc, #156]	@ (80011d0 <Play_WAV+0xcc>)
 8001132:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001136:	4929      	ldr	r1, [pc, #164]	@ (80011dc <Play_WAV+0xd8>)
 8001138:	4827      	ldr	r0, [pc, #156]	@ (80011d8 <Play_WAV+0xd4>)
 800113a:	f007 f8c1 	bl	80082c0 <f_read>
       Convert_16bit_to_12bit(audioBuffer2, bytesRead / 2);
 800113e:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <Play_WAV+0xcc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	085b      	lsrs	r3, r3, #1
 8001144:	4619      	mov	r1, r3
 8001146:	4825      	ldr	r0, [pc, #148]	@ (80011dc <Play_WAV+0xd8>)
 8001148:	f7ff ff0e 	bl	8000f68 <Convert_16bit_to_12bit>
//		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);



       // เริ่ม DAC + DMA (ใช้ Double Buffer)
       HAL_TIM_Base_Start(&htim6);
 800114c:	4824      	ldr	r0, [pc, #144]	@ (80011e0 <Play_WAV+0xdc>)
 800114e:	f003 fe91 	bl	8004e74 <HAL_TIM_Base_Start>
       HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audioBuffer1, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001152:	2300      	movs	r3, #0
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800115a:	4a1e      	ldr	r2, [pc, #120]	@ (80011d4 <Play_WAV+0xd0>)
 800115c:	2100      	movs	r1, #0
 800115e:	4821      	ldr	r0, [pc, #132]	@ (80011e4 <Play_WAV+0xe0>)
 8001160:	f000 ff76 	bl	8002050 <HAL_DAC_Start_DMA>

       bufferReady = 0;  // เคลียร์ค่าเริ่มต้น
 8001164:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <Play_WAV+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]

       while (1) {
           if (bufferReady) {
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <Play_WAV+0xe4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0fa      	beq.n	800116a <Play_WAV+0x66>
               int16_t *currentBuffer = (activeBuffer == 0) ? audioBuffer2 : audioBuffer1;
 8001174:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <Play_WAV+0xe8>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <Play_WAV+0x7c>
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <Play_WAV+0xd8>)
 800117e:	e000      	b.n	8001182 <Play_WAV+0x7e>
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <Play_WAV+0xd0>)
 8001182:	607b      	str	r3, [r7, #4]

               // โหลดข้อมูลใหม่ใน Buffer ที่ไม่ได้ใช้งาน
               f_read(&wavFile, currentBuffer, BUFFER_SIZE * sizeof(uint16_t), &bytesRead);
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <Play_WAV+0xcc>)
 8001186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <Play_WAV+0xd4>)
 800118e:	f007 f897 	bl	80082c0 <f_read>
               Convert_16bit_to_12bit(currentBuffer, bytesRead / 2);
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <Play_WAV+0xcc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	085b      	lsrs	r3, r3, #1
 8001198:	4619      	mov	r1, r3
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fee4 	bl	8000f68 <Convert_16bit_to_12bit>


               if (bytesRead == 0) {
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <Play_WAV+0xcc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <Play_WAV+0xac>
                   break;  // ไฟล์จบแล้ว
               }

               bufferReady = 0;  // รอ Callback เรียกอีกครั้ง
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <Play_WAV+0xe4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
           if (bufferReady) {
 80011ae:	e7dc      	b.n	800116a <Play_WAV+0x66>
                   break;  // ไฟล์จบแล้ว
 80011b0:	bf00      	nop
           }
       }

       // หยุด DAC และ Timer
       HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80011b2:	2100      	movs	r1, #0
 80011b4:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <Play_WAV+0xe0>)
 80011b6:	f001 f80b 	bl	80021d0 <HAL_DAC_Stop_DMA>
       HAL_TIM_Base_Stop(&htim6);
 80011ba:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <Play_WAV+0xdc>)
 80011bc:	f003 feca 	bl	8004f54 <HAL_TIM_Base_Stop>
       f_close(&wavFile);
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <Play_WAV+0xd4>)
 80011c2:	f007 fa3a 	bl	800863a <f_close>
 80011c6:	e000      	b.n	80011ca <Play_WAV+0xc6>
        return;
 80011c8:	bf00      	nop
   }
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200002c8 	.word	0x200002c8
 80011d4:	2000058c 	.word	0x2000058c
 80011d8:	200002cc 	.word	0x200002cc
 80011dc:	2000098c 	.word	0x2000098c
 80011e0:	20000e68 	.word	0x20000e68
 80011e4:	20000d90 	.word	0x20000d90
 80011e8:	20000d8d 	.word	0x20000d8d
 80011ec:	20000d8c 	.word	0x20000d8c

080011f0 <HAL_DAC_ConvCpltCallbackCh1>:

   // DMA Callback - ใช้โหลด Buffer ใหม่
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	activeBuffer = 1 - activeBuffer;  // สลับระหว่าง Buffer
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	f1c3 0301 	rsb	r3, r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 8001204:	701a      	strb	r2, [r3, #0]
	bufferReady = 1;  // แจ้งว่า buffer พร้อมใช้งาน
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000d8c 	.word	0x20000d8c
 800121c:	20000d8d 	.word	0x20000d8d

08001220 <play_audio>:

// ฟังก์ชันในการเล่นไฟล์ WAV
void play_audio() {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    if (open_wav_file() == FR_OK) {
 8001224:	f7ff fec6 	bl	8000fb4 <open_wav_file>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10f      	bne.n	800124e <play_audio+0x2e>
    	sprintf(buff, "Playing WAV file...\r\n");
 800122e:	490f      	ldr	r1, [pc, #60]	@ (800126c <play_audio+0x4c>)
 8001230:	480f      	ldr	r0, [pc, #60]	@ (8001270 <play_audio+0x50>)
 8001232:	f007 fd3f 	bl	8008cb4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
 8001236:	2364      	movs	r3, #100	@ 0x64
 8001238:	2264      	movs	r2, #100	@ 0x64
 800123a:	490d      	ldr	r1, [pc, #52]	@ (8001270 <play_audio+0x50>)
 800123c:	480d      	ldr	r0, [pc, #52]	@ (8001274 <play_audio+0x54>)
 800123e:	f004 f839 	bl	80052b4 <HAL_UART_Transmit>

//        play_wav_file();  // อ่านข้อมูลจาก WAV file และส่งไป DAC

//		HAL_TIM_Base_Start(&htim6);
//		HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // เปิด DAC
        Play_WAV();
 8001242:	f7ff ff5f 	bl	8001104 <Play_WAV>
//        HAL_TIM_Base_Stop(&htim6);

        f_close(&wavFile);  // ปิดไฟล์หลังจากเล่นเสร็จ
 8001246:	480c      	ldr	r0, [pc, #48]	@ (8001278 <play_audio+0x58>)
 8001248:	f007 f9f7 	bl	800863a <f_close>
        // ถ้ามีข้อผิดพลาดในการเปิดไฟล์
    	sprintf(buff, "Error: Cannot open WAV file!\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
        Error_Handler();
    }
}
 800124c:	e00b      	b.n	8001266 <play_audio+0x46>
    	sprintf(buff, "Error: Cannot open WAV file!\r\n");
 800124e:	490b      	ldr	r1, [pc, #44]	@ (800127c <play_audio+0x5c>)
 8001250:	4807      	ldr	r0, [pc, #28]	@ (8001270 <play_audio+0x50>)
 8001252:	f007 fd2f 	bl	8008cb4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, sizeof(buff), 100);
 8001256:	2364      	movs	r3, #100	@ 0x64
 8001258:	2264      	movs	r2, #100	@ 0x64
 800125a:	4905      	ldr	r1, [pc, #20]	@ (8001270 <play_audio+0x50>)
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <play_audio+0x54>)
 800125e:	f004 f829 	bl	80052b4 <HAL_UART_Transmit>
        Error_Handler();
 8001262:	f000 fa47 	bl	80016f4 <Error_Handler>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	08009600 	.word	0x08009600
 8001270:	200004fc 	.word	0x200004fc
 8001274:	20000eb4 	.word	0x20000eb4
 8001278:	200002cc 	.word	0x200002cc
 800127c:	08009618 	.word	0x08009618

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001284:	f000 fa0a 	bl	800169c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f000 fc5d 	bl	8001b46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128c:	f000 f822 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001290:	f000 f980 	bl	8001594 <MX_GPIO_Init>
  MX_DMA_Init();
 8001294:	f000 f960 	bl	8001558 <MX_DMA_Init>
  MX_SPI1_Init();
 8001298:	f000 f8ba 	bl	8001410 <MX_SPI1_Init>
  MX_FATFS_Init();
 800129c:	f005 f866 	bl	800636c <MX_FATFS_Init>
  MX_USART3_UART_Init();
 80012a0:	f000 f92a 	bl	80014f8 <MX_USART3_UART_Init>
  MX_DAC_Init();
 80012a4:	f000 f880 	bl	80013a8 <MX_DAC_Init>
  MX_TIM6_Init();
 80012a8:	f000 f8f0 	bl	800148c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80012ac:	2100      	movs	r1, #0
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <main+0x48>)
 80012b0:	f000 fe76 	bl	8001fa0 <HAL_DAC_Start>

  HAL_UART_Transmit(&huart3, (uint8_t*)"System Ready!\r\n", 15, 100);
 80012b4:	2364      	movs	r3, #100	@ 0x64
 80012b6:	220f      	movs	r2, #15
 80012b8:	4904      	ldr	r1, [pc, #16]	@ (80012cc <main+0x4c>)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <main+0x50>)
 80012bc:	f003 fffa 	bl	80052b4 <HAL_UART_Transmit>


//  sd_init();
  play_audio();
 80012c0:	f7ff ffae 	bl	8001220 <play_audio>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <main+0x44>
 80012c8:	20000d90 	.word	0x20000d90
 80012cc:	08009638 	.word	0x08009638
 80012d0:	20000eb4 	.word	0x20000eb4

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	@ 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	2234      	movs	r2, #52	@ 0x34
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f007 fd06 	bl	8008cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <SystemClock_Config+0xcc>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	4a28      	ldr	r2, [pc, #160]	@ (80013a0 <SystemClock_Config+0xcc>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	@ 0x40
 8001304:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <SystemClock_Config+0xcc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <SystemClock_Config+0xd0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001318:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <SystemClock_Config+0xd0>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <SystemClock_Config+0xd0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800132c:	2302      	movs	r3, #2
 800132e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001330:	2301      	movs	r3, #1
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001334:	2310      	movs	r3, #16
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001340:	2308      	movs	r3, #8
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001344:	2390      	movs	r3, #144	@ 0x90
 8001346:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800134c:	2302      	movs	r3, #2
 800134e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fead 	bl	80030b8 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001364:	f000 f9c6 	bl	80016f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2302      	movs	r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001378:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800137a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	2102      	movs	r1, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f002 f944 	bl	8003614 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001392:	f000 f9af 	bl	80016f4 <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3750      	adds	r7, #80	@ 0x50
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000

080013a8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_DAC_Init+0x60>)
 80013b8:	4a14      	ldr	r2, [pc, #80]	@ (800140c <MX_DAC_Init+0x64>)
 80013ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80013bc:	4812      	ldr	r0, [pc, #72]	@ (8001408 <MX_DAC_Init+0x60>)
 80013be:	f000 fdcd 	bl	8001f5c <HAL_DAC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80013c8:	f000 f994 	bl	80016f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80013cc:	2304      	movs	r3, #4
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	@ (8001408 <MX_DAC_Init+0x60>)
 80013dc:	f000 ff59 	bl	8002292 <HAL_DAC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80013e6:	f000 f985 	bl	80016f4 <Error_Handler>
  }

  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_1) != HAL_OK)
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	4806      	ldr	r0, [pc, #24]	@ (8001408 <MX_DAC_Init+0x60>)
 80013f0:	f000 ffde 	bl	80023b0 <HAL_DACEx_TriangleWaveGenerate>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_DAC_Init+0x56>
  {
    Error_Handler();
 80013fa:	f000 f97b 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000d90 	.word	0x20000d90
 800140c:	40007400 	.word	0x40007400

08001410 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <MX_SPI1_Init+0x74>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	@ (8001488 <MX_SPI1_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_SPI1_Init+0x74>)
 800141c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <MX_SPI1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_SPI1_Init+0x74>)
 800142a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800142e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_SPI1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_SPI1_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_SPI1_Init+0x74>)
 800143e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001442:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_SPI1_Init+0x74>)
 8001446:	2238      	movs	r2, #56	@ 0x38
 8001448:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_SPI1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_SPI1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_SPI1_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_SPI1_Init+0x74>)
 800145e:	2207      	movs	r2, #7
 8001460:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_SPI1_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_SPI1_Init+0x74>)
 800146a:	2208      	movs	r2, #8
 800146c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_SPI1_Init+0x74>)
 8001470:	f002 fede 	bl	8004230 <HAL_SPI_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800147a:	f000 f93b 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000e04 	.word	0x20000e04
 8001488:	40013000 	.word	0x40013000

0800148c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MX_TIM6_Init+0x64>)
 800149e:	4a15      	ldr	r2, [pc, #84]	@ (80014f4 <MX_TIM6_Init+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <MX_TIM6_Init+0x64>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_TIM6_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 815;
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <MX_TIM6_Init+0x64>)
 80014b0:	f240 322f 	movw	r2, #815	@ 0x32f
 80014b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_TIM6_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <MX_TIM6_Init+0x64>)
 80014be:	f003 fc81 	bl	8004dc4 <HAL_TIM_Base_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014c8:	f000 f914 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014cc:	2320      	movs	r3, #32
 80014ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_TIM6_Init+0x64>)
 80014da:	f003 fe0f 	bl	80050fc <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014e4:	f000 f906 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000e68 	.word	0x20000e68
 80014f4:	40001000 	.word	0x40001000

080014f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 80014fe:	4a15      	ldr	r2, [pc, #84]	@ (8001554 <MX_USART3_UART_Init+0x5c>)
 8001500:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 8001504:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001508:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_USART3_UART_Init+0x58>)
 800153c:	f003 fe6c 	bl	8005218 <HAL_UART_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001546:	f000 f8d5 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000eb4 	.word	0x20000eb4
 8001554:	40004800 	.word	0x40004800

08001558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_DMA_Init+0x38>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <MX_DMA_Init+0x38>)
 8001564:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_DMA_Init+0x38>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2103      	movs	r1, #3
 800157a:	2010      	movs	r0, #16
 800157c:	f000 fc3f 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001580:	2010      	movs	r0, #16
 8001582:	f000 fc58 	bl	8001e36 <HAL_NVIC_EnableIRQ>

}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015aa:	4b39      	ldr	r3, [pc, #228]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a38      	ldr	r2, [pc, #224]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b36      	ldr	r3, [pc, #216]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b33      	ldr	r3, [pc, #204]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a32      	ldr	r2, [pc, #200]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a2c      	ldr	r2, [pc, #176]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a26      	ldr	r2, [pc, #152]	@ (8001690 <MX_GPIO_Init+0xfc>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <MX_GPIO_Init+0xfc>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001610:	4820      	ldr	r0, [pc, #128]	@ (8001694 <MX_GPIO_Init+0x100>)
 8001612:	f001 fd13 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2140      	movs	r1, #64	@ 0x40
 800161a:	481f      	ldr	r0, [pc, #124]	@ (8001698 <MX_GPIO_Init+0x104>)
 800161c:	f001 fd0e 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001626:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4817      	ldr	r0, [pc, #92]	@ (8001694 <MX_GPIO_Init+0x100>)
 8001638:	f001 fb54 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800163c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	480f      	ldr	r0, [pc, #60]	@ (8001694 <MX_GPIO_Init+0x100>)
 8001656:	f001 fb45 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800165a:	2340      	movs	r3, #64	@ 0x40
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4809      	ldr	r0, [pc, #36]	@ (8001698 <MX_GPIO_Init+0x104>)
 8001672:	f001 fb37 	bl	8002ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2028      	movs	r0, #40	@ 0x28
 800167c:	f000 fbbf 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001680:	2028      	movs	r0, #40	@ 0x28
 8001682:	f000 fbd8 	bl	8001e36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	@ 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40020800 	.word	0x40020800
 8001698:	40020400 	.word	0x40020400

0800169c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80016ae:	f000 fbdd 	bl	8001e6c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016be:	231f      	movs	r3, #31
 80016c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80016c2:	2387      	movs	r3, #135	@ 0x87
 80016c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016ca:	2300      	movs	r3, #0
 80016cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016ce:	2301      	movs	r3, #1
 80016d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016de:	463b      	mov	r3, r7
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fbfb 	bl	8001edc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016e6:	2004      	movs	r0, #4
 80016e8:	f000 fbd8 	bl	8001e9c <HAL_MPU_Enable>

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <Error_Handler+0x8>

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <HAL_MspInit+0x44>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <HAL_MspInit+0x44>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	@ 0x40
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <HAL_MspInit+0x44>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_MspInit+0x44>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <HAL_MspInit+0x44>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001728:	6453      	str	r3, [r2, #68]	@ 0x44
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_MspInit+0x44>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001736:	2005      	movs	r0, #5
 8001738:	f000 fb56 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a2e      	ldr	r2, [pc, #184]	@ (8001820 <HAL_DAC_MspInit+0xd8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d155      	bne.n	8001816 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <HAL_DAC_MspInit+0xdc>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a2d      	ldr	r2, [pc, #180]	@ (8001824 <HAL_DAC_MspInit+0xdc>)
 8001770:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <HAL_DAC_MspInit+0xdc>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b28      	ldr	r3, [pc, #160]	@ (8001824 <HAL_DAC_MspInit+0xdc>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a27      	ldr	r2, [pc, #156]	@ (8001824 <HAL_DAC_MspInit+0xdc>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b25      	ldr	r3, [pc, #148]	@ (8001824 <HAL_DAC_MspInit+0xdc>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800179a:	2310      	movs	r3, #16
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179e:	2303      	movs	r3, #3
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	481e      	ldr	r0, [pc, #120]	@ (8001828 <HAL_DAC_MspInit+0xe0>)
 80017ae:	f001 fa99 	bl	8002ce4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <HAL_DAC_MspInit+0xe8>)
 80017b6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017ba:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80017be:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017c2:	2240      	movs	r2, #64	@ 0x40
 80017c4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017da:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ea:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017f2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80017fa:	480c      	ldr	r0, [pc, #48]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 80017fc:	f000 fe68 	bl	80024d0 <HAL_DMA_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8001806:	f7ff ff75 	bl	80016f4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a07      	ldr	r2, [pc, #28]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	4a06      	ldr	r2, [pc, #24]	@ (800182c <HAL_DAC_MspInit+0xe4>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	@ 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40007400 	.word	0x40007400
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000
 800182c:	20000da4 	.word	0x20000da4
 8001830:	40026088 	.word	0x40026088

08001834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	@ 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <HAL_SPI_MspInit+0x7c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d127      	bne.n	80018a6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	4a16      	ldr	r2, [pc, #88]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 800185c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001860:	6453      	str	r3, [r2, #68]	@ 0x44
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001886:	23e0      	movs	r3, #224	@ 0xe0
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001896:	2305      	movs	r3, #5
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <HAL_SPI_MspInit+0x84>)
 80018a2:	f001 fa1f 	bl	8002ce4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	@ 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40013000 	.word	0x40013000
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <HAL_TIM_Base_MspInit+0x38>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10b      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_TIM_Base_MspInit+0x3c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_TIM_Base_MspInit+0x3c>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <HAL_TIM_Base_MspInit+0x3c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40001000 	.word	0x40001000
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2290      	movs	r2, #144	@ 0x90
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f007 f9e9 	bl	8008cf4 <memset>
  if(huart->Instance==USART3)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a26      	ldr	r2, [pc, #152]	@ (80019c0 <HAL_UART_MspInit+0xc4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d144      	bne.n	80019b6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800192c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001930:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001932:	2300      	movs	r3, #0
 8001934:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4618      	mov	r0, r3
 800193c:	f002 f850 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001946:	f7ff fed5 	bl	80016f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800194a:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <HAL_UART_MspInit+0xc8>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_UART_MspInit+0xc8>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <HAL_UART_MspInit+0xc8>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <HAL_UART_MspInit+0xc8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a17      	ldr	r2, [pc, #92]	@ (80019c4 <HAL_UART_MspInit+0xc8>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_UART_MspInit+0xc8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800197a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800197e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001994:	2307      	movs	r3, #7
 8001996:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800199e:	4619      	mov	r1, r3
 80019a0:	4809      	ldr	r0, [pc, #36]	@ (80019c8 <HAL_UART_MspInit+0xcc>)
 80019a2:	f001 f99f 	bl	8002ce4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2027      	movs	r0, #39	@ 0x27
 80019ac:	f000 fa27 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019b0:	2027      	movs	r0, #39	@ 0x27
 80019b2:	f000 fa40 	bl	8001e36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80019b6:	bf00      	nop
 80019b8:	37b8      	adds	r7, #184	@ 0xb8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40004800 	.word	0x40004800
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020c00 	.word	0x40020c00

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <NMI_Handler+0x4>

080019d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <MemManage_Handler+0x4>

080019e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a22:	f000 f8cd 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <DMA1_Stream5_IRQHandler+0x10>)
 8001a32:	f000 feed 	bl	8002810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000da4 	.word	0x20000da4

08001a40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <USART3_IRQHandler+0x10>)
 8001a46:	f003 fcbf 	bl	80053c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000eb4 	.word	0x20000eb4

08001a54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a5c:	f001 fb08 	bl	8003070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f007 f946 	bl	8008d24 <__errno>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20080000 	.word	0x20080000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	20000f3c 	.word	0x20000f3c
 8001acc:	200010c8 	.word	0x200010c8

08001ad0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <SystemInit+0x20>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <SystemInit+0x20>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af8:	f7ff ffea 	bl	8001ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001afe:	490d      	ldr	r1, [pc, #52]	@ (8001b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b00:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b14:	4c0a      	ldr	r4, [pc, #40]	@ (8001b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b22:	f007 f905 	bl	8008d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b26:	f7ff fbab 	bl	8001280 <main>
  bx  lr    
 8001b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b2c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b38:	08009770 	.word	0x08009770
  ldr r2, =_sbss
 8001b3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b40:	200010c8 	.word	0x200010c8

08001b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC_IRQHandler>

08001b46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	f000 f94c 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b50:	2002      	movs	r0, #2
 8001b52:	f000 f805 	bl	8001b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b56:	f7ff fdd3 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_InitTick+0x54>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_InitTick+0x58>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f967 	bl	8001e52 <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f000 f92f 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	@ (8001bbc <HAL_InitTick+0x5c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	2000000c 	.word	0x2000000c
 8001be4:	20000f40 	.word	0x20000f40

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000f40 	.word	0x20000f40

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000000c 	.word	0x2000000c

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <__NVIC_SetPriorityGrouping+0x40>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <__NVIC_SetPriorityGrouping+0x40>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00
 8001c8c:	05fa0000 	.word	0x05fa0000

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	@ (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	@ (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	@ (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	@ 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	@ 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff8e 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff29 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff3e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff8e 	bl	8001d3c <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff31 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e70:	f3bf 8f5f 	dmb	sy
}
 8001e74:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <HAL_MPU_Disable+0x28>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	4a06      	ldr	r2, [pc, #24]	@ (8001e94 <HAL_MPU_Disable+0x28>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e80:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_MPU_Disable+0x2c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00
 8001e98:	e000ed90 	.word	0xe000ed90

08001e9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed4 <HAL_MPU_Enable+0x38>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_MPU_Enable+0x3c>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <HAL_MPU_Enable+0x3c>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001eba:	f3bf 8f4f 	dsb	sy
}
 8001ebe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec0:	f3bf 8f6f 	isb	sy
}
 8001ec4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed90 	.word	0xe000ed90
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	785a      	ldrb	r2, [r3, #1]
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_MPU_ConfigRegion+0x7c>)
 8001eea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <HAL_MPU_ConfigRegion+0x7c>)
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	@ (8001f58 <HAL_MPU_ConfigRegion+0x7c>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ef8:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <HAL_MPU_ConfigRegion+0x7c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7b1b      	ldrb	r3, [r3, #12]
 8001f04:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7adb      	ldrb	r3, [r3, #11]
 8001f0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7a9b      	ldrb	r3, [r3, #10]
 8001f12:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7b5b      	ldrb	r3, [r3, #13]
 8001f1a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7b9b      	ldrb	r3, [r3, #14]
 8001f22:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7bdb      	ldrb	r3, [r3, #15]
 8001f2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7a5b      	ldrb	r3, [r3, #9]
 8001f32:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7a1b      	ldrb	r3, [r3, #8]
 8001f3a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f3c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	7812      	ldrb	r2, [r2, #0]
 8001f42:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f44:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f46:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f48:	6113      	str	r3, [r2, #16]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed90 	.word	0xe000ed90

08001f5c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e014      	b.n	8001f98 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	791b      	ldrb	r3, [r3, #4]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fbe2 	bl	8001748 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e046      	b.n	8002042 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	795b      	ldrb	r3, [r3, #5]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_DAC_Start+0x20>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e040      	b.n	8002042 <HAL_DAC_Start+0xa2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2201      	movs	r2, #1
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001ff4:	2b3c      	cmp	r3, #60	@ 0x3c
 8001ff6:	d11d      	bne.n	8002034 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	e014      	b.n	8002034 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	213c      	movs	r1, #60	@ 0x3c
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0202 	orr.w	r2, r2, #2
 8002032:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0a2      	b.n	80021ae <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	795b      	ldrb	r3, [r3, #5]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_DAC_Start_DMA+0x24>
 8002070:	2302      	movs	r3, #2
 8002072:	e09c      	b.n	80021ae <HAL_DAC_Start_DMA+0x15e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2202      	movs	r2, #2
 800207e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d129      	bne.n	80020da <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	4a4b      	ldr	r2, [pc, #300]	@ (80021b8 <HAL_DAC_Start_DMA+0x168>)
 800208c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	4a4a      	ldr	r2, [pc, #296]	@ (80021bc <HAL_DAC_Start_DMA+0x16c>)
 8002094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4a49      	ldr	r2, [pc, #292]	@ (80021c0 <HAL_DAC_Start_DMA+0x170>)
 800209c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020ac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_DAC_Start_DMA+0x6c>
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d005      	beq.n	80020c6 <HAL_DAC_Start_DMA+0x76>
 80020ba:	e009      	b.n	80020d0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3308      	adds	r3, #8
 80020c2:	613b      	str	r3, [r7, #16]
        break;
 80020c4:	e033      	b.n	800212e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	613b      	str	r3, [r7, #16]
        break;
 80020ce:	e02e      	b.n	800212e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3310      	adds	r3, #16
 80020d6:	613b      	str	r3, [r7, #16]
        break;
 80020d8:	e029      	b.n	800212e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4a39      	ldr	r2, [pc, #228]	@ (80021c4 <HAL_DAC_Start_DMA+0x174>)
 80020e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4a38      	ldr	r2, [pc, #224]	@ (80021c8 <HAL_DAC_Start_DMA+0x178>)
 80020e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4a37      	ldr	r2, [pc, #220]	@ (80021cc <HAL_DAC_Start_DMA+0x17c>)
 80020f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002100:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_DAC_Start_DMA+0xc0>
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2b04      	cmp	r3, #4
 800210c:	d005      	beq.n	800211a <HAL_DAC_Start_DMA+0xca>
 800210e:	e009      	b.n	8002124 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3314      	adds	r3, #20
 8002116:	613b      	str	r3, [r7, #16]
        break;
 8002118:	e009      	b.n	800212e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3318      	adds	r3, #24
 8002120:	613b      	str	r3, [r7, #16]
        break;
 8002122:	e004      	b.n	800212e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	331c      	adds	r3, #28
 800212a:	613b      	str	r3, [r7, #16]
        break;
 800212c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d111      	bne.n	8002158 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002142:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6898      	ldr	r0, [r3, #8]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	f000 fa6d 	bl	800262c <HAL_DMA_Start_IT>
 8002152:	4603      	mov	r3, r0
 8002154:	75fb      	strb	r3, [r7, #23]
 8002156:	e010      	b.n	800217a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002166:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68d8      	ldr	r0, [r3, #12]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	f000 fa5b 	bl	800262c <HAL_DMA_Start_IT>
 8002176:	4603      	mov	r3, r0
 8002178:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2201      	movs	r2, #1
 8002194:	409a      	lsls	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e005      	b.n	80021ac <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f043 0204 	orr.w	r2, r3, #4
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	08002345 	.word	0x08002345
 80021bc:	08002367 	.word	0x08002367
 80021c0:	08002383 	.word	0x08002383
 80021c4:	08002465 	.word	0x08002465
 80021c8:	08002487 	.word	0x08002487
 80021cc:	080024a3 	.word	0x080024a3

080021d0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e03e      	b.n	8002262 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43da      	mvns	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	400a      	ands	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2201      	movs	r2, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43da      	mvns	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	400a      	ands	r2, r1
 800221c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fa5f 	bl	80026ec <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e00c      	b.n	800225a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fa51 	bl	80026ec <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002258:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002292:	b480      	push	{r7}
 8002294:	b089      	sub	sp, #36	@ 0x24
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_DAC_ConfigChannel+0x1c>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e042      	b.n	8002338 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	795b      	ldrb	r3, [r3, #5]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_DAC_ConfigChannel+0x2c>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e03c      	b.n	8002338 <HAL_DAC_ConfigChannel+0xa6>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2202      	movs	r2, #2
 80022c8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	22c0      	movs	r2, #192	@ 0xc0
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43da      	mvns	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	400a      	ands	r2, r1
 8002328:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002336:	7ffb      	ldrb	r3, [r7, #31]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3724      	adds	r7, #36	@ 0x24
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002350:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f7fe ff4c 	bl	80011f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	711a      	strb	r2, [r3, #4]
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002372:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff ff78 	bl	800226a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f043 0204 	orr.w	r2, r3, #4
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f7ff ff6e 	bl	800227e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	711a      	strb	r2, [r3, #4]
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_DACEx_TriangleWaveGenerate+0x16>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e02a      	b.n	800241c <HAL_DACEx_TriangleWaveGenerate+0x6c>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	795b      	ldrb	r3, [r3, #5]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_DACEx_TriangleWaveGenerate+0x22>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e024      	b.n	800241c <HAL_DACEx_TriangleWaveGenerate+0x6c>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2202      	movs	r2, #2
 80023dc:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	ea02 0103 	and.w	r1, r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	409a      	lsls	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002470:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff ffd8 	bl	8002428 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	711a      	strb	r2, [r3, #4]
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f7ff ffd1 	bl	800243c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f043 0204 	orr.w	r2, r3, #4
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff ffc7 	bl	8002450 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	711a      	strb	r2, [r3, #4]
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff fb84 	bl	8001be8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e099      	b.n	8002620 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800250c:	e00f      	b.n	800252e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800250e:	f7ff fb6b 	bl	8001be8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b05      	cmp	r3, #5
 800251a:	d908      	bls.n	800252e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2220      	movs	r2, #32
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2203      	movs	r2, #3
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e078      	b.n	8002620 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e8      	bne.n	800250e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4b38      	ldr	r3, [pc, #224]	@ (8002628 <HAL_DMA_Init+0x158>)
 8002548:	4013      	ands	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800255a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	2b04      	cmp	r3, #4
 8002586:	d107      	bne.n	8002598 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	4313      	orrs	r3, r2
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f023 0307 	bic.w	r3, r3, #7
 80025ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d117      	bne.n	80025f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00e      	beq.n	80025f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb09 	bl	8002bec <DMA_CheckFifoParam>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2240      	movs	r2, #64	@ 0x40
 80025e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025ee:	2301      	movs	r3, #1
 80025f0:	e016      	b.n	8002620 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fac0 	bl	8002b80 <DMA_CalcBaseAndBitshift>
 8002600:	4603      	mov	r3, r0
 8002602:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002608:	223f      	movs	r2, #63	@ 0x3f
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	e010803f 	.word	0xe010803f

0800262c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_DMA_Start_IT+0x26>
 800264e:	2302      	movs	r3, #2
 8002650:	e048      	b.n	80026e4 <HAL_DMA_Start_IT+0xb8>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d137      	bne.n	80026d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2202      	movs	r2, #2
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fa52 	bl	8002b24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	223f      	movs	r2, #63	@ 0x3f
 8002686:	409a      	lsls	r2, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0216 	orr.w	r2, r2, #22
 800269a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e005      	b.n	80026e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026de:	2302      	movs	r3, #2
 80026e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026fa:	f7ff fa75 	bl	8001be8 <HAL_GetTick>
 80026fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d008      	beq.n	800271e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2280      	movs	r2, #128	@ 0x80
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e052      	b.n	80027c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0216 	bic.w	r2, r2, #22
 800272c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800273c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <HAL_DMA_Abort+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0208 	bic.w	r2, r2, #8
 800275c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276e:	e013      	b.n	8002798 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002770:	f7ff fa3a 	bl	8001be8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b05      	cmp	r3, #5
 800277c:	d90c      	bls.n	8002798 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2203      	movs	r2, #3
 8002788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e015      	b.n	80027c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e4      	bne.n	8002770 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	223f      	movs	r2, #63	@ 0x3f
 80027ac:	409a      	lsls	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d004      	beq.n	80027ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2280      	movs	r2, #128	@ 0x80
 80027e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00c      	b.n	8002804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2205      	movs	r2, #5
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800281c:	4b8e      	ldr	r3, [pc, #568]	@ (8002a58 <HAL_DMA_IRQHandler+0x248>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a8e      	ldr	r2, [pc, #568]	@ (8002a5c <HAL_DMA_IRQHandler+0x24c>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0a9b      	lsrs	r3, r3, #10
 8002828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	2208      	movs	r2, #8
 800283c:	409a      	lsls	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01a      	beq.n	800287c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	2208      	movs	r2, #8
 800286a:	409a      	lsls	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002880:	2201      	movs	r2, #1
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	2201      	movs	r2, #1
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028aa:	f043 0202 	orr.w	r2, r3, #2
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b6:	2204      	movs	r2, #4
 80028b8:	409a      	lsls	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d012      	beq.n	80028e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	2204      	movs	r2, #4
 80028d6:	409a      	lsls	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e0:	f043 0204 	orr.w	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	2210      	movs	r2, #16
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d043      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03c      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	2210      	movs	r2, #16
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d018      	beq.n	8002952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d024      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
 800293e:	e01f      	b.n	8002980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e016      	b.n	8002980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0208 	bic.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	2220      	movs	r2, #32
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 808f 	beq.w	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8087 	beq.w	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a6:	2220      	movs	r2, #32
 80029a8:	409a      	lsls	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d136      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0216 	bic.w	r2, r2, #22
 80029c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <HAL_DMA_IRQHandler+0x1da>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0208 	bic.w	r2, r2, #8
 80029f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	223f      	movs	r2, #63	@ 0x3f
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d07e      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
        }
        return;
 8002a26:	e079      	b.n	8002b1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01d      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10d      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d031      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
 8002a54:	e02c      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
 8002a56:	bf00      	nop
 8002a58:	20000004 	.word	0x20000004
 8002a5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d023      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
 8002a70:	e01e      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0210 	bic.w	r2, r2, #16
 8002a8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d032      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d022      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d307      	bcc.n	8002af8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f2      	bne.n	8002adc <HAL_DMA_IRQHandler+0x2cc>
 8002af6:	e000      	b.n	8002afa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002af8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
 8002b1a:	e000      	b.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b1c:	bf00      	nop
    }
  }
}
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b40      	cmp	r3, #64	@ 0x40
 8002b50:	d108      	bne.n	8002b64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b62:	e007      	b.n	8002b74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3b10      	subs	r3, #16
 8002b90:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <DMA_CalcBaseAndBitshift+0x60>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b9a:	4a12      	ldr	r2, [pc, #72]	@ (8002be4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d908      	bls.n	8002bc0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <DMA_CalcBaseAndBitshift+0x68>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	1d1a      	adds	r2, r3, #4
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bbe:	e006      	b.n	8002bce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <DMA_CalcBaseAndBitshift+0x68>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	aaaaaaab 	.word	0xaaaaaaab
 8002be4:	080096a4 	.word	0x080096a4
 8002be8:	fffffc00 	.word	0xfffffc00

08002bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11f      	bne.n	8002c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d856      	bhi.n	8002cba <DMA_CheckFifoParam+0xce>
 8002c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <DMA_CheckFifoParam+0x28>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c37 	.word	0x08002c37
 8002c1c:	08002c25 	.word	0x08002c25
 8002c20:	08002cbb 	.word	0x08002cbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d046      	beq.n	8002cbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c34:	e043      	b.n	8002cbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c3e:	d140      	bne.n	8002cc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c44:	e03d      	b.n	8002cc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c4e:	d121      	bne.n	8002c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d837      	bhi.n	8002cc6 <DMA_CheckFifoParam+0xda>
 8002c56:	a201      	add	r2, pc, #4	@ (adr r2, 8002c5c <DMA_CheckFifoParam+0x70>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002c73 	.word	0x08002c73
 8002c64:	08002c6d 	.word	0x08002c6d
 8002c68:	08002c85 	.word	0x08002c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e030      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d025      	beq.n	8002cca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c82:	e022      	b.n	8002cca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c8c:	d11f      	bne.n	8002cce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c92:	e01c      	b.n	8002cce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d903      	bls.n	8002ca2 <DMA_CheckFifoParam+0xb6>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d003      	beq.n	8002ca8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ca0:	e018      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca6:	e015      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00e      	beq.n	8002cd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb8:	e00b      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e00a      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e008      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e006      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e004      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd2:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	@ 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	e175      	b.n	8002ff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	f040 8164 	bne.w	8002fea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d005      	beq.n	8002d3a <HAL_GPIO_Init+0x56>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d130      	bne.n	8002d9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	2203      	movs	r2, #3
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 0201 	and.w	r2, r3, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d017      	beq.n	8002dd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d123      	bne.n	8002e2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	08da      	lsrs	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3208      	adds	r2, #8
 8002dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	69b9      	ldr	r1, [r7, #24]
 8002e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80be 	beq.w	8002fea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	4b66      	ldr	r3, [pc, #408]	@ (8003008 <HAL_GPIO_Init+0x324>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	4a65      	ldr	r2, [pc, #404]	@ (8003008 <HAL_GPIO_Init+0x324>)
 8002e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7a:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <HAL_GPIO_Init+0x324>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e86:	4a61      	ldr	r2, [pc, #388]	@ (800300c <HAL_GPIO_Init+0x328>)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a58      	ldr	r2, [pc, #352]	@ (8003010 <HAL_GPIO_Init+0x32c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d037      	beq.n	8002f22 <HAL_GPIO_Init+0x23e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a57      	ldr	r2, [pc, #348]	@ (8003014 <HAL_GPIO_Init+0x330>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d031      	beq.n	8002f1e <HAL_GPIO_Init+0x23a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a56      	ldr	r2, [pc, #344]	@ (8003018 <HAL_GPIO_Init+0x334>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d02b      	beq.n	8002f1a <HAL_GPIO_Init+0x236>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a55      	ldr	r2, [pc, #340]	@ (800301c <HAL_GPIO_Init+0x338>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d025      	beq.n	8002f16 <HAL_GPIO_Init+0x232>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a54      	ldr	r2, [pc, #336]	@ (8003020 <HAL_GPIO_Init+0x33c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01f      	beq.n	8002f12 <HAL_GPIO_Init+0x22e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a53      	ldr	r2, [pc, #332]	@ (8003024 <HAL_GPIO_Init+0x340>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d019      	beq.n	8002f0e <HAL_GPIO_Init+0x22a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a52      	ldr	r2, [pc, #328]	@ (8003028 <HAL_GPIO_Init+0x344>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_GPIO_Init+0x226>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a51      	ldr	r2, [pc, #324]	@ (800302c <HAL_GPIO_Init+0x348>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00d      	beq.n	8002f06 <HAL_GPIO_Init+0x222>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a50      	ldr	r2, [pc, #320]	@ (8003030 <HAL_GPIO_Init+0x34c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <HAL_GPIO_Init+0x21e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_GPIO_Init+0x21a>
 8002efa:	2309      	movs	r3, #9
 8002efc:	e012      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002efe:	230a      	movs	r3, #10
 8002f00:	e010      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f02:	2308      	movs	r3, #8
 8002f04:	e00e      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f06:	2307      	movs	r3, #7
 8002f08:	e00c      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	e00a      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f0e:	2305      	movs	r3, #5
 8002f10:	e008      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f12:	2304      	movs	r3, #4
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f16:	2303      	movs	r3, #3
 8002f18:	e004      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f22:	2300      	movs	r3, #0
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	f002 0203 	and.w	r2, r2, #3
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f34:	4935      	ldr	r1, [pc, #212]	@ (800300c <HAL_GPIO_Init+0x328>)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f42:	4b3d      	ldr	r3, [pc, #244]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f66:	4a34      	ldr	r2, [pc, #208]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f6c:	4b32      	ldr	r3, [pc, #200]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f90:	4a29      	ldr	r2, [pc, #164]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f96:	4b28      	ldr	r3, [pc, #160]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fba:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe4:	4a14      	ldr	r2, [pc, #80]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	f67f ae86 	bls.w	8002d04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	40013800 	.word	0x40013800
 8003010:	40020000 	.word	0x40020000
 8003014:	40020400 	.word	0x40020400
 8003018:	40020800 	.word	0x40020800
 800301c:	40020c00 	.word	0x40020c00
 8003020:	40021000 	.word	0x40021000
 8003024:	40021400 	.word	0x40021400
 8003028:	40021800 	.word	0x40021800
 800302c:	40021c00 	.word	0x40021c00
 8003030:	40022000 	.word	0x40022000
 8003034:	40022400 	.word	0x40022400
 8003038:	40013c00 	.word	0x40013c00

0800303c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
 8003048:	4613      	mov	r3, r2
 800304a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800304c:	787b      	ldrb	r3, [r7, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003058:	e003      	b.n	8003062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	041a      	lsls	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	619a      	str	r2, [r3, #24]
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800307a:	4b08      	ldr	r3, [pc, #32]	@ (800309c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003086:	4a05      	ldr	r2, [pc, #20]	@ (800309c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f806 	bl	80030a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40013c00 	.word	0x40013c00

080030a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e29b      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8087 	beq.w	80031ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030dc:	4b96      	ldr	r3, [pc, #600]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d00c      	beq.n	8003102 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e8:	4b93      	ldr	r3, [pc, #588]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d112      	bne.n	800311a <HAL_RCC_OscConfig+0x62>
 80030f4:	4b90      	ldr	r3, [pc, #576]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003100:	d10b      	bne.n	800311a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003102:	4b8d      	ldr	r3, [pc, #564]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d06c      	beq.n	80031e8 <HAL_RCC_OscConfig+0x130>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d168      	bne.n	80031e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e275      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003122:	d106      	bne.n	8003132 <HAL_RCC_OscConfig+0x7a>
 8003124:	4b84      	ldr	r3, [pc, #528]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a83      	ldr	r2, [pc, #524]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800312a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	e02e      	b.n	8003190 <HAL_RCC_OscConfig+0xd8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0x9c>
 800313a:	4b7f      	ldr	r3, [pc, #508]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a7e      	ldr	r2, [pc, #504]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b7c      	ldr	r3, [pc, #496]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a7b      	ldr	r2, [pc, #492]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800314c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e01d      	b.n	8003190 <HAL_RCC_OscConfig+0xd8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0xc0>
 800315e:	4b76      	ldr	r3, [pc, #472]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a75      	ldr	r2, [pc, #468]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b73      	ldr	r3, [pc, #460]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a72      	ldr	r2, [pc, #456]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0xd8>
 8003178:	4b6f      	ldr	r3, [pc, #444]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a6e      	ldr	r2, [pc, #440]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800317e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b6c      	ldr	r3, [pc, #432]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a6b      	ldr	r2, [pc, #428]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800318e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe fd26 	bl	8001be8 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fe fd22 	bl	8001be8 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	@ 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e229      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b61      	ldr	r3, [pc, #388]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0xe8>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fd12 	bl	8001be8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fd0e 	bl	8001be8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	@ 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e215      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	4b57      	ldr	r3, [pc, #348]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x110>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d069      	beq.n	80032ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031f6:	4b50      	ldr	r3, [pc, #320]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b4d      	ldr	r3, [pc, #308]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x190>
 800320e:	4b4a      	ldr	r3, [pc, #296]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b47      	ldr	r3, [pc, #284]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x17a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1e9      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b41      	ldr	r3, [pc, #260]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	493d      	ldr	r1, [pc, #244]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e040      	b.n	80032ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d023      	beq.n	8003298 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b39      	ldr	r3, [pc, #228]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a38      	ldr	r2, [pc, #224]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fcc4 	bl	8001be8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7fe fcc0 	bl	8001be8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e1c7      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003276:	4b30      	ldr	r3, [pc, #192]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b2d      	ldr	r3, [pc, #180]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4929      	ldr	r1, [pc, #164]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
 8003296:	e018      	b.n	80032ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003298:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a26      	ldr	r2, [pc, #152]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fca0 	bl	8001be8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ac:	f7fe fc9c 	bl	8001be8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1a3      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d038      	beq.n	8003348 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d019      	beq.n	8003312 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032de:	4b16      	ldr	r3, [pc, #88]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 80032e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e2:	4a15      	ldr	r2, [pc, #84]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fe fc7d 	bl	8001be8 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fe fc79 	bl	8001be8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e180      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003304:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x23a>
 8003310:	e01a      	b.n	8003348 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003312:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003316:	4a08      	ldr	r2, [pc, #32]	@ (8003338 <HAL_RCC_OscConfig+0x280>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331e:	f7fe fc63 	bl	8001be8 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	e00a      	b.n	800333c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003326:	f7fe fc5f 	bl	8001be8 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d903      	bls.n	800333c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e166      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
 8003338:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	4b92      	ldr	r3, [pc, #584]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 800333e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ee      	bne.n	8003326 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80a4 	beq.w	800349e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b8c      	ldr	r3, [pc, #560]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b89      	ldr	r3, [pc, #548]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	4a88      	ldr	r2, [pc, #544]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336c:	6413      	str	r3, [r2, #64]	@ 0x40
 800336e:	4b86      	ldr	r3, [pc, #536]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337e:	4b83      	ldr	r3, [pc, #524]	@ (800358c <HAL_RCC_OscConfig+0x4d4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800338a:	4b80      	ldr	r3, [pc, #512]	@ (800358c <HAL_RCC_OscConfig+0x4d4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7f      	ldr	r2, [pc, #508]	@ (800358c <HAL_RCC_OscConfig+0x4d4>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7fe fc27 	bl	8001be8 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339e:	f7fe fc23 	bl	8001be8 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	@ 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e12a      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b0:	4b76      	ldr	r3, [pc, #472]	@ (800358c <HAL_RCC_OscConfig+0x4d4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x31a>
 80033c4:	4b70      	ldr	r3, [pc, #448]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c8:	4a6f      	ldr	r2, [pc, #444]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d0:	e02d      	b.n	800342e <HAL_RCC_OscConfig+0x376>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x33c>
 80033da:	4b6b      	ldr	r3, [pc, #428]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	4a6a      	ldr	r2, [pc, #424]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e6:	4b68      	ldr	r3, [pc, #416]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	4a67      	ldr	r2, [pc, #412]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f2:	e01c      	b.n	800342e <HAL_RCC_OscConfig+0x376>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d10c      	bne.n	8003416 <HAL_RCC_OscConfig+0x35e>
 80033fc:	4b62      	ldr	r3, [pc, #392]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003400:	4a61      	ldr	r2, [pc, #388]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6713      	str	r3, [r2, #112]	@ 0x70
 8003408:	4b5f      	ldr	r3, [pc, #380]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340c:	4a5e      	ldr	r2, [pc, #376]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	@ 0x70
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0x376>
 8003416:	4b5c      	ldr	r3, [pc, #368]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341a:	4a5b      	ldr	r2, [pc, #364]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6713      	str	r3, [r2, #112]	@ 0x70
 8003422:	4b59      	ldr	r3, [pc, #356]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	4a58      	ldr	r2, [pc, #352]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d015      	beq.n	8003462 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe fbd7 	bl	8001be8 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe fbd3 	bl	8001be8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0d8      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	4b4c      	ldr	r3, [pc, #304]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ee      	beq.n	800343e <HAL_RCC_OscConfig+0x386>
 8003460:	e014      	b.n	800348c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fe fbc1 	bl	8001be8 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe fbbd 	bl	8001be8 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0c2      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	4b41      	ldr	r3, [pc, #260]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ee      	bne.n	800346a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003492:	4b3d      	ldr	r3, [pc, #244]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	4a3c      	ldr	r2, [pc, #240]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800349c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80ae 	beq.w	8003604 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a8:	4b37      	ldr	r3, [pc, #220]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d06d      	beq.n	8003590 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d14b      	bne.n	8003554 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	4b32      	ldr	r3, [pc, #200]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a31      	ldr	r2, [pc, #196]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80034c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe fb8e 	bl	8001be8 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe fb8a 	bl	8001be8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e091      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b29      	ldr	r3, [pc, #164]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003518:	071b      	lsls	r3, r3, #28
 800351a:	491b      	ldr	r1, [pc, #108]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003520:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a18      	ldr	r2, [pc, #96]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800352a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fb5c 	bl	8001be8 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fb58 	bl	8001be8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e05f      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b10      	ldr	r3, [pc, #64]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x47c>
 8003552:	e057      	b.n	8003604 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003554:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0b      	ldr	r2, [pc, #44]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 800355a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fb42 	bl	8001be8 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fe fb3e 	bl	8001be8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e045      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	4b03      	ldr	r3, [pc, #12]	@ (8003588 <HAL_RCC_OscConfig+0x4d0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x4b0>
 8003586:	e03d      	b.n	8003604 <HAL_RCC_OscConfig+0x54c>
 8003588:	40023800 	.word	0x40023800
 800358c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003590:	4b1f      	ldr	r3, [pc, #124]	@ (8003610 <HAL_RCC_OscConfig+0x558>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d030      	beq.n	8003600 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d129      	bne.n	8003600 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d122      	bne.n	8003600 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d119      	bne.n	8003600 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	3b01      	subs	r3, #1
 80035da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d10f      	bne.n	8003600 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800

08003614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0d0      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800362c:	4b6a      	ldr	r3, [pc, #424]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d910      	bls.n	800365c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b67      	ldr	r3, [pc, #412]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 020f 	bic.w	r2, r3, #15
 8003642:	4965      	ldr	r1, [pc, #404]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b63      	ldr	r3, [pc, #396]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0b8      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003674:	4b59      	ldr	r3, [pc, #356]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a58      	ldr	r2, [pc, #352]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 800367a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800367e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800368c:	4b53      	ldr	r3, [pc, #332]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a52      	ldr	r2, [pc, #328]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 8003692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003696:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003698:	4b50      	ldr	r3, [pc, #320]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	494d      	ldr	r1, [pc, #308]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d040      	beq.n	8003738 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b47      	ldr	r3, [pc, #284]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d115      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e07f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	4b41      	ldr	r3, [pc, #260]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e073      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e6:	4b3d      	ldr	r3, [pc, #244]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06b      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036f6:	4b39      	ldr	r3, [pc, #228]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4936      	ldr	r1, [pc, #216]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fe fa6e 	bl	8001be8 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	e00a      	b.n	8003726 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003710:	f7fe fa6a 	bl	8001be8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e053      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	4b2d      	ldr	r3, [pc, #180]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 020c 	and.w	r2, r3, #12
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	429a      	cmp	r2, r3
 8003736:	d1eb      	bne.n	8003710 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003738:	4b27      	ldr	r3, [pc, #156]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d210      	bcs.n	8003768 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b24      	ldr	r3, [pc, #144]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 020f 	bic.w	r2, r3, #15
 800374e:	4922      	ldr	r1, [pc, #136]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b20      	ldr	r3, [pc, #128]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e032      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003774:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4916      	ldr	r1, [pc, #88]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003792:	4b12      	ldr	r3, [pc, #72]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	490e      	ldr	r1, [pc, #56]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037a6:	f000 f821 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 80037aa:	4602      	mov	r2, r0
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	490a      	ldr	r1, [pc, #40]	@ (80037e0 <HAL_RCC_ClockConfig+0x1cc>)
 80037b8:	5ccb      	ldrb	r3, [r1, r3]
 80037ba:	fa22 f303 	lsr.w	r3, r2, r3
 80037be:	4a09      	ldr	r2, [pc, #36]	@ (80037e4 <HAL_RCC_ClockConfig+0x1d0>)
 80037c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037c2:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_RCC_ClockConfig+0x1d4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe f9ca 	bl	8001b60 <HAL_InitTick>

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023c00 	.word	0x40023c00
 80037dc:	40023800 	.word	0x40023800
 80037e0:	0800968c 	.word	0x0800968c
 80037e4:	20000004 	.word	0x20000004
 80037e8:	20000008 	.word	0x20000008

080037ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f0:	b090      	sub	sp, #64	@ 0x40
 80037f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f8:	2300      	movs	r3, #0
 80037fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037fc:	2300      	movs	r3, #0
 80037fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003804:	4b59      	ldr	r3, [pc, #356]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b08      	cmp	r3, #8
 800380e:	d00d      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x40>
 8003810:	2b08      	cmp	r3, #8
 8003812:	f200 80a1 	bhi.w	8003958 <HAL_RCC_GetSysClockFreq+0x16c>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x34>
 800381a:	2b04      	cmp	r3, #4
 800381c:	d003      	beq.n	8003826 <HAL_RCC_GetSysClockFreq+0x3a>
 800381e:	e09b      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003820:	4b53      	ldr	r3, [pc, #332]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x184>)
 8003822:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003824:	e09b      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003826:	4b53      	ldr	r3, [pc, #332]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x188>)
 8003828:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800382a:	e098      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800382c:	4b4f      	ldr	r3, [pc, #316]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003836:	4b4d      	ldr	r3, [pc, #308]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d028      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	2200      	movs	r2, #0
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	627a      	str	r2, [r7, #36]	@ 0x24
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003854:	2100      	movs	r1, #0
 8003856:	4b47      	ldr	r3, [pc, #284]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x188>)
 8003858:	fb03 f201 	mul.w	r2, r3, r1
 800385c:	2300      	movs	r3, #0
 800385e:	fb00 f303 	mul.w	r3, r0, r3
 8003862:	4413      	add	r3, r2
 8003864:	4a43      	ldr	r2, [pc, #268]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x188>)
 8003866:	fba0 1202 	umull	r1, r2, r0, r2
 800386a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800386c:	460a      	mov	r2, r1
 800386e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003872:	4413      	add	r3, r2
 8003874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003878:	2200      	movs	r2, #0
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	61fa      	str	r2, [r7, #28]
 800387e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003882:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003886:	f7fc fd2b 	bl	80002e0 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4613      	mov	r3, r2
 8003890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003892:	e053      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003894:	4b35      	ldr	r3, [pc, #212]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	2200      	movs	r2, #0
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	617a      	str	r2, [r7, #20]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038a6:	f04f 0b00 	mov.w	fp, #0
 80038aa:	4652      	mov	r2, sl
 80038ac:	465b      	mov	r3, fp
 80038ae:	f04f 0000 	mov.w	r0, #0
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	0159      	lsls	r1, r3, #5
 80038b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038bc:	0150      	lsls	r0, r2, #5
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	ebb2 080a 	subs.w	r8, r2, sl
 80038c6:	eb63 090b 	sbc.w	r9, r3, fp
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038de:	ebb2 0408 	subs.w	r4, r2, r8
 80038e2:	eb63 0509 	sbc.w	r5, r3, r9
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	00eb      	lsls	r3, r5, #3
 80038f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f4:	00e2      	lsls	r2, r4, #3
 80038f6:	4614      	mov	r4, r2
 80038f8:	461d      	mov	r5, r3
 80038fa:	eb14 030a 	adds.w	r3, r4, sl
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	eb45 030b 	adc.w	r3, r5, fp
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003912:	4629      	mov	r1, r5
 8003914:	028b      	lsls	r3, r1, #10
 8003916:	4621      	mov	r1, r4
 8003918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800391c:	4621      	mov	r1, r4
 800391e:	028a      	lsls	r2, r1, #10
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003926:	2200      	movs	r2, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	60fa      	str	r2, [r7, #12]
 800392c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003930:	f7fc fcd6 	bl	80002e0 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800394c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003956:	e002      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x184>)
 800395a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800395c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003960:	4618      	mov	r0, r3
 8003962:	3740      	adds	r7, #64	@ 0x40
 8003964:	46bd      	mov	sp, r7
 8003966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	00f42400 	.word	0x00f42400
 8003974:	017d7840 	.word	0x017d7840

08003978 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800397c:	4b03      	ldr	r3, [pc, #12]	@ (800398c <HAL_RCC_GetHCLKFreq+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000004 	.word	0x20000004

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003994:	f7ff fff0 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	0800969c 	.word	0x0800969c

080039b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039bc:	f7ff ffdc 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0b5b      	lsrs	r3, r3, #13
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	@ (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	0800969c 	.word	0x0800969c

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d012      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a08:	4b69      	ldr	r3, [pc, #420]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a68      	ldr	r2, [pc, #416]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a12:	6093      	str	r3, [r2, #8]
 8003a14:	4b66      	ldr	r3, [pc, #408]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1c:	4964      	ldr	r1, [pc, #400]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d017      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a48:	4959      	ldr	r1, [pc, #356]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a58:	d101      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a66:	2301      	movs	r3, #1
 8003a68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d017      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a76:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	494a      	ldr	r1, [pc, #296]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a94:	d101      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a96:	2301      	movs	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 808b 	beq.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	4a39      	ldr	r2, [pc, #228]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ad0:	4b37      	ldr	r3, [pc, #220]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003adc:	4b35      	ldr	r3, [pc, #212]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a34      	ldr	r2, [pc, #208]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae8:	f7fe f87e 	bl	8001be8 <HAL_GetTick>
 8003aec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fe f87a 	bl	8001be8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	@ 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e38f      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b02:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b0e:	4b28      	ldr	r3, [pc, #160]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d035      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d02e      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b2c:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b36:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b42:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b4e:	4a18      	ldr	r2, [pc, #96]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b54:	4b16      	ldr	r3, [pc, #88]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d114      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe f842 	bl	8001be8 <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7fe f83e 	bl	8001be8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e351      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ee      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b96:	d111      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ba4:	4b04      	ldr	r3, [pc, #16]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	4901      	ldr	r1, [pc, #4]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	0ffffcff 	.word	0x0ffffcff
 8003bbc:	4bac      	ldr	r3, [pc, #688]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4aab      	ldr	r2, [pc, #684]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bc6:	6093      	str	r3, [r2, #8]
 8003bc8:	4ba9      	ldr	r3, [pc, #676]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	49a6      	ldr	r1, [pc, #664]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d010      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003be6:	4ba2      	ldr	r3, [pc, #648]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bec:	4aa0      	ldr	r2, [pc, #640]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bf2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003bf6:	4b9e      	ldr	r3, [pc, #632]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	499b      	ldr	r1, [pc, #620]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c14:	4b96      	ldr	r3, [pc, #600]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c22:	4993      	ldr	r1, [pc, #588]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c36:	4b8e      	ldr	r3, [pc, #568]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c44:	498a      	ldr	r1, [pc, #552]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c58:	4b85      	ldr	r3, [pc, #532]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c66:	4982      	ldr	r1, [pc, #520]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c88:	4979      	ldr	r1, [pc, #484]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c9c:	4b74      	ldr	r3, [pc, #464]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca2:	f023 0203 	bic.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	4971      	ldr	r1, [pc, #452]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc4:	f023 020c 	bic.w	r2, r3, #12
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ccc:	4968      	ldr	r1, [pc, #416]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ce0:	4b63      	ldr	r3, [pc, #396]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cee:	4960      	ldr	r1, [pc, #384]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d02:	4b5b      	ldr	r3, [pc, #364]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d08:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d10:	4957      	ldr	r1, [pc, #348]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d24:	4b52      	ldr	r3, [pc, #328]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	494f      	ldr	r1, [pc, #316]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d46:	4b4a      	ldr	r3, [pc, #296]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d54:	4946      	ldr	r1, [pc, #280]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d68:	4b41      	ldr	r3, [pc, #260]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	493e      	ldr	r1, [pc, #248]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d8a:	4b39      	ldr	r3, [pc, #228]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d98:	4935      	ldr	r1, [pc, #212]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dac:	4b30      	ldr	r3, [pc, #192]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dba:	492d      	ldr	r1, [pc, #180]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d011      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dce:	4b28      	ldr	r3, [pc, #160]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ddc:	4924      	ldr	r1, [pc, #144]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dec:	d101      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0e:	4b18      	ldr	r3, [pc, #96]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e14:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1c:	4914      	ldr	r1, [pc, #80]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00b      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e30:	4b0f      	ldr	r3, [pc, #60]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e40:	490b      	ldr	r1, [pc, #44]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00f      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e54:	4b06      	ldr	r3, [pc, #24]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e64:	4902      	ldr	r1, [pc, #8]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e6c:	e002      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e80:	4b8a      	ldr	r3, [pc, #552]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e90:	4986      	ldr	r1, [pc, #536]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ea4:	4b81      	ldr	r3, [pc, #516]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eaa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eb4:	497d      	ldr	r1, [pc, #500]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d006      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80d6 	beq.w	800407c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ed0:	4b76      	ldr	r3, [pc, #472]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a75      	ldr	r2, [pc, #468]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fd fe84 	bl	8001be8 <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee4:	f7fd fe80 	bl	8001be8 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	@ 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e195      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d021      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11d      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f16:	4b65      	ldr	r3, [pc, #404]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f24:	4b61      	ldr	r3, [pc, #388]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f2a:	0e1b      	lsrs	r3, r3, #24
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	019a      	lsls	r2, r3, #6
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	071b      	lsls	r3, r3, #28
 8003f4a:	4958      	ldr	r1, [pc, #352]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02e      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f7c:	d129      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f8c:	4b47      	ldr	r3, [pc, #284]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f92:	0f1b      	lsrs	r3, r3, #28
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	019a      	lsls	r2, r3, #6
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	061b      	lsls	r3, r3, #24
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	493e      	ldr	r1, [pc, #248]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fba:	4b3c      	ldr	r3, [pc, #240]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc0:	f023 021f 	bic.w	r2, r3, #31
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	4938      	ldr	r1, [pc, #224]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01d      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fde:	4b33      	ldr	r3, [pc, #204]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fec:	4b2f      	ldr	r3, [pc, #188]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff2:	0f1b      	lsrs	r3, r3, #28
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	019a      	lsls	r2, r3, #6
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	431a      	orrs	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	061b      	lsls	r3, r3, #24
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	4926      	ldr	r1, [pc, #152]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d011      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	019a      	lsls	r2, r3, #6
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	071b      	lsls	r3, r3, #28
 8004042:	491a      	ldr	r1, [pc, #104]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800404a:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004050:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004056:	f7fd fdc7 	bl	8001be8 <HAL_GetTick>
 800405a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800405e:	f7fd fdc3 	bl	8001be8 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b64      	cmp	r3, #100	@ 0x64
 800406a:	d901      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e0d8      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004070:	4b0e      	ldr	r3, [pc, #56]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	f040 80ce 	bne.w	8004220 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a08      	ldr	r2, [pc, #32]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800408e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7fd fdaa 	bl	8001be8 <HAL_GetTick>
 8004094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004096:	e00b      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004098:	f7fd fda6 	bl	8001be8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	@ 0x64
 80040a4:	d904      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0bb      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040b0:	4b5e      	ldr	r3, [pc, #376]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040bc:	d0ec      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d02e      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d12a      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040e6:	4b51      	ldr	r3, [pc, #324]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040f4:	4b4d      	ldr	r3, [pc, #308]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	0f1b      	lsrs	r3, r3, #28
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	019a      	lsls	r2, r3, #6
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	071b      	lsls	r3, r3, #28
 800411a:	4944      	ldr	r1, [pc, #272]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004122:	4b42      	ldr	r3, [pc, #264]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004128:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	493d      	ldr	r1, [pc, #244]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d022      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800414c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004150:	d11d      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004152:	4b36      	ldr	r3, [pc, #216]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004158:	0e1b      	lsrs	r3, r3, #24
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004160:	4b32      	ldr	r3, [pc, #200]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	0f1b      	lsrs	r3, r3, #28
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	019a      	lsls	r2, r3, #6
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	431a      	orrs	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	061b      	lsls	r3, r3, #24
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	071b      	lsls	r3, r3, #28
 8004186:	4929      	ldr	r1, [pc, #164]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d028      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800419a:	4b24      	ldr	r3, [pc, #144]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	0e1b      	lsrs	r3, r3, #24
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041a8:	4b20      	ldr	r3, [pc, #128]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	0c1b      	lsrs	r3, r3, #16
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	019a      	lsls	r2, r3, #6
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	071b      	lsls	r3, r3, #28
 80041ce:	4917      	ldr	r1, [pc, #92]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041d6:	4b15      	ldr	r3, [pc, #84]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	4911      	ldr	r1, [pc, #68]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0e      	ldr	r2, [pc, #56]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fd fcf6 	bl	8001be8 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004200:	f7fd fcf2 	bl	8001be8 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	@ 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e007      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800421a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800421e:	d1ef      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800

08004230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e09d      	b.n	800437e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004252:	d009      	beq.n	8004268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
 800425a:	e005      	b.n	8004268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fad6 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800429e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042a8:	d902      	bls.n	80042b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e002      	b.n	80042b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80042be:	d007      	beq.n	80042d0 <HAL_SPI_Init+0xa0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004312:	ea42 0103 	orr.w	r1, r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	f003 0204 	and.w	r2, r3, #4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800434c:	ea42 0103 	orr.w	r1, r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800436c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b088      	sub	sp, #32
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_SPI_Transmit+0x22>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e15f      	b.n	8004668 <HAL_SPI_Transmit+0x2e2>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043b0:	f7fd fc1a 	bl	8001be8 <HAL_GetTick>
 80043b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d002      	beq.n	80043cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
 80043c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043ca:	e148      	b.n	800465e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_SPI_Transmit+0x52>
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043dc:	e13f      	b.n	800465e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2203      	movs	r2, #3
 80043e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004428:	d10f      	bne.n	800444a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004438:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004448:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004454:	2b40      	cmp	r3, #64	@ 0x40
 8004456:	d007      	beq.n	8004468 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004470:	d94f      	bls.n	8004512 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_SPI_Transmit+0xfa>
 800447a:	8afb      	ldrh	r3, [r7, #22]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d142      	bne.n	8004506 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004484:	881a      	ldrh	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004490:	1c9a      	adds	r2, r3, #2
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044a4:	e02f      	b.n	8004506 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d112      	bne.n	80044da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	1c9a      	adds	r2, r3, #2
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044d8:	e015      	b.n	8004506 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044da:	f7fd fb85 	bl	8001be8 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d803      	bhi.n	80044f2 <HAL_SPI_Transmit+0x16c>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d102      	bne.n	80044f8 <HAL_SPI_Transmit+0x172>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004504:	e0ab      	b.n	800465e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1ca      	bne.n	80044a6 <HAL_SPI_Transmit+0x120>
 8004510:	e080      	b.n	8004614 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_SPI_Transmit+0x19a>
 800451a:	8afb      	ldrh	r3, [r7, #22]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d174      	bne.n	800460a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	d912      	bls.n	8004550 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452e:	881a      	ldrh	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453a:	1c9a      	adds	r2, r3, #2
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b02      	subs	r3, #2
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800454e:	e05c      	b.n	800460a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004576:	e048      	b.n	800460a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d12b      	bne.n	80045de <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d912      	bls.n	80045b6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	881a      	ldrh	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	1c9a      	adds	r2, r3, #2
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b02      	subs	r3, #2
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045b4:	e029      	b.n	800460a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	7812      	ldrb	r2, [r2, #0]
 80045c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045dc:	e015      	b.n	800460a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045de:	f7fd fb03 	bl	8001be8 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d803      	bhi.n	80045f6 <HAL_SPI_Transmit+0x270>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d102      	bne.n	80045fc <HAL_SPI_Transmit+0x276>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004608:	e029      	b.n	800465e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1b1      	bne.n	8004578 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fb69 	bl	8004cf0 <SPI_EndRxTxTransaction>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	77fb      	strb	r3, [r7, #31]
 8004654:	e003      	b.n	800465e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004666:	7ffb      	ldrb	r3, [r7, #31]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	@ 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800467e:	2301      	movs	r3, #1
 8004680:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_SPI_TransmitReceive+0x26>
 8004692:	2302      	movs	r3, #2
 8004694:	e20a      	b.n	8004aac <HAL_SPI_TransmitReceive+0x43c>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800469e:	f7fd faa3 	bl	8001be8 <HAL_GetTick>
 80046a2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046aa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80046b2:	887b      	ldrh	r3, [r7, #2]
 80046b4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80046b6:	887b      	ldrh	r3, [r7, #2]
 80046b8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046ba:	7efb      	ldrb	r3, [r7, #27]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d00e      	beq.n	80046de <HAL_SPI_TransmitReceive+0x6e>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046c6:	d106      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x66>
 80046d0:	7efb      	ldrb	r3, [r7, #27]
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d003      	beq.n	80046de <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80046dc:	e1e0      	b.n	8004aa0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x80>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x80>
 80046ea:	887b      	ldrh	r3, [r7, #2]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80046f6:	e1d3      	b.n	8004aa0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b04      	cmp	r3, #4
 8004702:	d003      	beq.n	800470c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2205      	movs	r2, #5
 8004708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	887a      	ldrh	r2, [r7, #2]
 8004724:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	887a      	ldrh	r2, [r7, #2]
 8004732:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	887a      	ldrh	r2, [r7, #2]
 8004738:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800474e:	d802      	bhi.n	8004756 <HAL_SPI_TransmitReceive+0xe6>
 8004750:	8a3b      	ldrh	r3, [r7, #16]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d908      	bls.n	8004768 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	e007      	b.n	8004778 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	d007      	beq.n	8004796 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004794:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800479e:	f240 8081 	bls.w	80048a4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0x140>
 80047aa:	8a7b      	ldrh	r3, [r7, #18]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d16d      	bne.n	800488c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047d4:	e05a      	b.n	800488c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d11b      	bne.n	800481c <HAL_SPI_TransmitReceive+0x1ac>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <HAL_SPI_TransmitReceive+0x1ac>
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d113      	bne.n	800481c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	881a      	ldrh	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	1c9a      	adds	r2, r3, #2
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d11c      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x1f4>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	b292      	uxth	r2, r2
 8004842:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	1c9a      	adds	r2, r3, #2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004860:	2301      	movs	r3, #1
 8004862:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004864:	f7fd f9c0 	bl	8001be8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004870:	429a      	cmp	r2, r3
 8004872:	d80b      	bhi.n	800488c <HAL_SPI_TransmitReceive+0x21c>
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d007      	beq.n	800488c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800488a:	e109      	b.n	8004aa0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d19f      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x166>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d199      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x166>
 80048a2:	e0e3      	b.n	8004a6c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x244>
 80048ac:	8a7b      	ldrh	r3, [r7, #18]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	f040 80cf 	bne.w	8004a52 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d912      	bls.n	80048e4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c2:	881a      	ldrh	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b02      	subs	r3, #2
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048e2:	e0b6      	b.n	8004a52 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	7812      	ldrb	r2, [r2, #0]
 80048f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800490a:	e0a2      	b.n	8004a52 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d134      	bne.n	8004984 <HAL_SPI_TransmitReceive+0x314>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d02f      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x314>
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	2b01      	cmp	r3, #1
 8004928:	d12c      	bne.n	8004984 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d912      	bls.n	800495a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004938:	881a      	ldrh	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004944:	1c9a      	adds	r2, r3, #2
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b02      	subs	r3, #2
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004958:	e012      	b.n	8004980 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	7812      	ldrb	r2, [r2, #0]
 8004966:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d148      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x3b4>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d042      	beq.n	8004a24 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d923      	bls.n	80049f2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	b292      	uxth	r2, r2
 80049b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	1c9a      	adds	r2, r3, #2
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b02      	subs	r3, #2
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d81f      	bhi.n	8004a20 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049ee:	605a      	str	r2, [r3, #4]
 80049f0:	e016      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f103 020c 	add.w	r2, r3, #12
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	7812      	ldrb	r2, [r2, #0]
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a20:	2301      	movs	r3, #1
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a24:	f7fd f8e0 	bl	8001be8 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d803      	bhi.n	8004a3c <HAL_SPI_TransmitReceive+0x3cc>
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d102      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x3d2>
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d107      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004a50:	e026      	b.n	8004aa0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f47f af57 	bne.w	800490c <HAL_SPI_TransmitReceive+0x29c>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f47f af50 	bne.w	800490c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f93d 	bl	8004cf0 <SPI_EndRxTxTransaction>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a96:	e003      	b.n	8004aa0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	@ 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ac4:	f7fd f890 	bl	8001be8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ad4:	f7fd f888 	bl	8001be8 <HAL_GetTick>
 8004ad8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ada:	4b39      	ldr	r3, [pc, #228]	@ (8004bc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	015b      	lsls	r3, r3, #5
 8004ae0:	0d1b      	lsrs	r3, r3, #20
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	fb02 f303 	mul.w	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aea:	e054      	b.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d050      	beq.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004af4:	f7fd f878 	bl	8001be8 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d902      	bls.n	8004b0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d13d      	bne.n	8004b86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b22:	d111      	bne.n	8004b48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b2c:	d004      	beq.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b36:	d107      	bne.n	8004b48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b50:	d10f      	bne.n	8004b72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e017      	b.n	8004bb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	bf0c      	ite	eq
 8004ba6:	2301      	moveq	r3, #1
 8004ba8:	2300      	movne	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	461a      	mov	r2, r3
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d19b      	bne.n	8004aec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000004 	.word	0x20000004

08004bc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	@ 0x28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004bd6:	f7fd f807 	bl	8001be8 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	4413      	add	r3, r2
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004be6:	f7fc ffff 	bl	8001be8 <HAL_GetTick>
 8004bea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	00da      	lsls	r2, r3, #3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	0d1b      	lsrs	r3, r3, #20
 8004c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c0c:	e060      	b.n	8004cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c14:	d107      	bne.n	8004c26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d050      	beq.n	8004cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c2e:	f7fc ffdb 	bl	8001be8 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d902      	bls.n	8004c44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d13d      	bne.n	8004cc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c5c:	d111      	bne.n	8004c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c66:	d004      	beq.n	8004c72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c70:	d107      	bne.n	8004c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8a:	d10f      	bne.n	8004cac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004caa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e010      	b.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d196      	bne.n	8004c0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3728      	adds	r7, #40	@ 0x28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000004 	.word	0x20000004

08004cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff ff5b 	bl	8004bc4 <SPI_WaitFifoStateUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d18:	f043 0220 	orr.w	r2, r3, #32
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e046      	b.n	8004db2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d24:	4b25      	ldr	r3, [pc, #148]	@ (8004dbc <SPI_EndRxTxTransaction+0xcc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a25      	ldr	r2, [pc, #148]	@ (8004dc0 <SPI_EndRxTxTransaction+0xd0>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	0d5b      	lsrs	r3, r3, #21
 8004d30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d34:	fb02 f303 	mul.w	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d42:	d112      	bne.n	8004d6a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2180      	movs	r1, #128	@ 0x80
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7ff feb0 	bl	8004ab4 <SPI_WaitFlagStateUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d016      	beq.n	8004d88 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e023      	b.n	8004db2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d80:	2b80      	cmp	r3, #128	@ 0x80
 8004d82:	d0f2      	beq.n	8004d6a <SPI_EndRxTxTransaction+0x7a>
 8004d84:	e000      	b.n	8004d88 <SPI_EndRxTxTransaction+0x98>
        break;
 8004d86:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff ff15 	bl	8004bc4 <SPI_WaitFifoStateUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e000      	b.n	8004db2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000004 	.word	0x20000004
 8004dc0:	165e9f81 	.word	0x165e9f81

08004dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e049      	b.n	8004e6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fc fd66 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f000 f8ce 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d001      	beq.n	8004e8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e04c      	b.n	8004f26 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a26      	ldr	r2, [pc, #152]	@ (8004f34 <HAL_TIM_Base_Start+0xc0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d022      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x70>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea6:	d01d      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x70>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a22      	ldr	r2, [pc, #136]	@ (8004f38 <HAL_TIM_Base_Start+0xc4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d018      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x70>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <HAL_TIM_Base_Start+0xc8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d013      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x70>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <HAL_TIM_Base_Start+0xcc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00e      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x70>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1e      	ldr	r2, [pc, #120]	@ (8004f44 <HAL_TIM_Base_Start+0xd0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d009      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x70>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f48 <HAL_TIM_Base_Start+0xd4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x70>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1b      	ldr	r2, [pc, #108]	@ (8004f4c <HAL_TIM_Base_Start+0xd8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d115      	bne.n	8004f10 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	4b19      	ldr	r3, [pc, #100]	@ (8004f50 <HAL_TIM_Base_Start+0xdc>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b06      	cmp	r3, #6
 8004ef4:	d015      	beq.n	8004f22 <HAL_TIM_Base_Start+0xae>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004efc:	d011      	beq.n	8004f22 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	e008      	b.n	8004f22 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	e000      	b.n	8004f24 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40001800 	.word	0x40001800
 8004f50:	00010007 	.word	0x00010007

08004f54 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10f      	bne.n	8004f8c <HAL_TIM_Base_Stop+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a1a      	ldr	r2, [r3, #32]
 8004f72:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d107      	bne.n	8004f8c <HAL_TIM_Base_Stop+0x38>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a46      	ldr	r2, [pc, #280]	@ (80050d0 <TIM_Base_SetConfig+0x12c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc2:	d00f      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a43      	ldr	r2, [pc, #268]	@ (80050d4 <TIM_Base_SetConfig+0x130>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a42      	ldr	r2, [pc, #264]	@ (80050d8 <TIM_Base_SetConfig+0x134>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a41      	ldr	r2, [pc, #260]	@ (80050dc <TIM_Base_SetConfig+0x138>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a40      	ldr	r2, [pc, #256]	@ (80050e0 <TIM_Base_SetConfig+0x13c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d108      	bne.n	8004ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a35      	ldr	r2, [pc, #212]	@ (80050d0 <TIM_Base_SetConfig+0x12c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005004:	d027      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a32      	ldr	r2, [pc, #200]	@ (80050d4 <TIM_Base_SetConfig+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d023      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a31      	ldr	r2, [pc, #196]	@ (80050d8 <TIM_Base_SetConfig+0x134>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01f      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a30      	ldr	r2, [pc, #192]	@ (80050dc <TIM_Base_SetConfig+0x138>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2f      	ldr	r2, [pc, #188]	@ (80050e0 <TIM_Base_SetConfig+0x13c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d017      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2e      	ldr	r2, [pc, #184]	@ (80050e4 <TIM_Base_SetConfig+0x140>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2d      	ldr	r2, [pc, #180]	@ (80050e8 <TIM_Base_SetConfig+0x144>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2c      	ldr	r2, [pc, #176]	@ (80050ec <TIM_Base_SetConfig+0x148>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2b      	ldr	r2, [pc, #172]	@ (80050f0 <TIM_Base_SetConfig+0x14c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2a      	ldr	r2, [pc, #168]	@ (80050f4 <TIM_Base_SetConfig+0x150>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a29      	ldr	r2, [pc, #164]	@ (80050f8 <TIM_Base_SetConfig+0x154>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a10      	ldr	r2, [pc, #64]	@ (80050d0 <TIM_Base_SetConfig+0x12c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_Base_SetConfig+0xf8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a12      	ldr	r2, [pc, #72]	@ (80050e0 <TIM_Base_SetConfig+0x13c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d103      	bne.n	80050a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d105      	bne.n	80050c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	611a      	str	r2, [r3, #16]
  }
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800
 80050f0:	40001800 	.word	0x40001800
 80050f4:	40001c00 	.word	0x40001c00
 80050f8:	40002000 	.word	0x40002000

080050fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e06d      	b.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a30      	ldr	r2, [pc, #192]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2f      	ldr	r2, [pc, #188]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800514e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a20      	ldr	r2, [pc, #128]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d022      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005186:	d01d      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1d      	ldr	r2, [pc, #116]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1c      	ldr	r2, [pc, #112]	@ (8005208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1a      	ldr	r2, [pc, #104]	@ (800520c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a15      	ldr	r2, [pc, #84]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a16      	ldr	r2, [pc, #88]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a15      	ldr	r2, [pc, #84]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10c      	bne.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40010000 	.word	0x40010000
 8005200:	40010400 	.word	0x40010400
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40014000 	.word	0x40014000
 8005214:	40001800 	.word	0x40001800

08005218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e040      	b.n	80052ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fc fb5e 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2224      	movs	r2, #36	@ 0x24
 8005244:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fe28 	bl	8005eb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fbc1 	bl	80059ec <UART_SetConfig>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e01b      	b.n	80052ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fea7 	bl	8005ff8 <UART_CheckIdleState>
 80052aa:	4603      	mov	r3, r0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	@ 0x28
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d177      	bne.n	80053bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_UART_Transmit+0x24>
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e070      	b.n	80053be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2221      	movs	r2, #33	@ 0x21
 80052e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ea:	f7fc fc7d 	bl	8001be8 <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	88fa      	ldrh	r2, [r7, #6]
 80052f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005308:	d108      	bne.n	800531c <HAL_UART_Transmit+0x68>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	e003      	b.n	8005324 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005324:	e02f      	b.n	8005386 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	2180      	movs	r1, #128	@ 0x80
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 ff09 	bl	8006148 <UART_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e03b      	b.n	80053be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10b      	bne.n	8005364 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800535a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	3302      	adds	r3, #2
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	e007      	b.n	8005374 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3301      	adds	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1c9      	bne.n	8005326 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2200      	movs	r2, #0
 800539a:	2140      	movs	r1, #64	@ 0x40
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fed3 	bl	8006148 <UART_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d004      	beq.n	80053b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e005      	b.n	80053be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b0ba      	sub	sp, #232	@ 0xe8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80053f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80053f6:	4013      	ands	r3, r2
 80053f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80053fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d115      	bne.n	8005430 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00f      	beq.n	8005430 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 82ac 	beq.w	800597e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
      }
      return;
 800542e:	e2a6      	b.n	800597e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8117 	beq.w	8005668 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800543a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005446:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800544a:	4b85      	ldr	r3, [pc, #532]	@ (8005660 <HAL_UART_IRQHandler+0x298>)
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 810a 	beq.w	8005668 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d011      	beq.n	8005484 <HAL_UART_IRQHandler+0xbc>
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2201      	movs	r2, #1
 8005472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547a:	f043 0201 	orr.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d011      	beq.n	80054b4 <HAL_UART_IRQHandler+0xec>
 8005490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2202      	movs	r2, #2
 80054a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054aa:	f043 0204 	orr.w	r2, r3, #4
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d011      	beq.n	80054e4 <HAL_UART_IRQHandler+0x11c>
 80054c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2204      	movs	r2, #4
 80054d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054da:	f043 0202 	orr.w	r2, r3, #2
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d017      	beq.n	8005520 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005500:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2208      	movs	r2, #8
 800550e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005516:	f043 0208 	orr.w	r2, r3, #8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005528:	2b00      	cmp	r3, #0
 800552a:	d012      	beq.n	8005552 <HAL_UART_IRQHandler+0x18a>
 800552c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005530:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8212 	beq.w	8005982 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800556a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d007      	beq.n	8005586 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800558c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b40      	cmp	r3, #64	@ 0x40
 800559c:	d005      	beq.n	80055aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800559e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d04f      	beq.n	800564a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fe39 	bl	8006222 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ba:	2b40      	cmp	r3, #64	@ 0x40
 80055bc:	d141      	bne.n	8005642 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3308      	adds	r3, #8
 80055c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1d9      	bne.n	80055be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800560e:	2b00      	cmp	r3, #0
 8005610:	d013      	beq.n	800563a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005616:	4a13      	ldr	r2, [pc, #76]	@ (8005664 <HAL_UART_IRQHandler+0x29c>)
 8005618:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800561e:	4618      	mov	r0, r3
 8005620:	f7fd f8d4 	bl	80027cc <HAL_DMA_Abort_IT>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d017      	beq.n	800565a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800562e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005634:	4610      	mov	r0, r2
 8005636:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	e00f      	b.n	800565a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9b6 	bl	80059ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e00b      	b.n	800565a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9b2 	bl	80059ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	e007      	b.n	800565a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9ae 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005658:	e193      	b.n	8005982 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565a:	bf00      	nop
    return;
 800565c:	e191      	b.n	8005982 <HAL_UART_IRQHandler+0x5ba>
 800565e:	bf00      	nop
 8005660:	04000120 	.word	0x04000120
 8005664:	080062eb 	.word	0x080062eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566c:	2b01      	cmp	r3, #1
 800566e:	f040 814c 	bne.w	800590a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8145 	beq.w	800590a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 813e 	beq.w	800590a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2210      	movs	r2, #16
 8005694:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a0:	2b40      	cmp	r3, #64	@ 0x40
 80056a2:	f040 80b6 	bne.w	8005812 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8165 	beq.w	8005986 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056c6:	429a      	cmp	r2, r3
 80056c8:	f080 815d 	bcs.w	8005986 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e0:	f000 8086 	beq.w	80057f0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800570e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005712:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800571a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005726:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1da      	bne.n	80056e4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3308      	adds	r3, #8
 8005734:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800573e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005752:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005756:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800575a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e1      	bne.n	800572e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800577a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800577c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005780:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3308      	adds	r3, #8
 800578a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800578e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005790:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005794:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800579c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e3      	bne.n	800576a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057c0:	f023 0310 	bic.w	r3, r3, #16
 80057c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e4      	bne.n	80057b0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fc ff7e 	bl	80026ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005802:	b29b      	uxth	r3, r3
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8d8 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005810:	e0b9      	b.n	8005986 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800581e:	b29b      	uxth	r3, r3
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80ab 	beq.w	800598a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80a6 	beq.w	800598a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800584c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005852:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005860:	647b      	str	r3, [r7, #68]	@ 0x44
 8005862:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800586e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e4      	bne.n	800583e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3308      	adds	r3, #8
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	623b      	str	r3, [r7, #32]
   return(result);
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3308      	adds	r3, #8
 8005894:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005898:	633a      	str	r2, [r7, #48]	@ 0x30
 800589a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800589e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e3      	bne.n	8005874 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	69b9      	ldr	r1, [r7, #24]
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	617b      	str	r3, [r7, #20]
   return(result);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e4      	bne.n	80058c0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f85c 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005908:	e03f      	b.n	800598a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800590a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800590e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00e      	beq.n	8005934 <HAL_UART_IRQHandler+0x56c>
 8005916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800591a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800592a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f853 	bl	80059d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005932:	e02d      	b.n	8005990 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00e      	beq.n	800595e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01c      	beq.n	800598e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
    }
    return;
 800595c:	e017      	b.n	800598e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d012      	beq.n	8005990 <HAL_UART_IRQHandler+0x5c8>
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fccd 	bl	8006316 <UART_EndTransmit_IT>
    return;
 800597c:	e008      	b.n	8005990 <HAL_UART_IRQHandler+0x5c8>
      return;
 800597e:	bf00      	nop
 8005980:	e006      	b.n	8005990 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005982:	bf00      	nop
 8005984:	e004      	b.n	8005990 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005986:	bf00      	nop
 8005988:	e002      	b.n	8005990 <HAL_UART_IRQHandler+0x5c8>
      return;
 800598a:	bf00      	nop
 800598c:	e000      	b.n	8005990 <HAL_UART_IRQHandler+0x5c8>
    return;
 800598e:	bf00      	nop
  }

}
 8005990:	37e8      	adds	r7, #232	@ 0xe8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop

08005998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4ba6      	ldr	r3, [pc, #664]	@ (8005cb0 <UART_SetConfig+0x2c4>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	6979      	ldr	r1, [r7, #20]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a94      	ldr	r2, [pc, #592]	@ (8005cb4 <UART_SetConfig+0x2c8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d120      	bne.n	8005aaa <UART_SetConfig+0xbe>
 8005a68:	4b93      	ldr	r3, [pc, #588]	@ (8005cb8 <UART_SetConfig+0x2cc>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d816      	bhi.n	8005aa4 <UART_SetConfig+0xb8>
 8005a76:	a201      	add	r2, pc, #4	@ (adr r2, 8005a7c <UART_SetConfig+0x90>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005a8d 	.word	0x08005a8d
 8005a80:	08005a99 	.word	0x08005a99
 8005a84:	08005a93 	.word	0x08005a93
 8005a88:	08005a9f 	.word	0x08005a9f
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e150      	b.n	8005d34 <UART_SetConfig+0x348>
 8005a92:	2302      	movs	r3, #2
 8005a94:	77fb      	strb	r3, [r7, #31]
 8005a96:	e14d      	b.n	8005d34 <UART_SetConfig+0x348>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	77fb      	strb	r3, [r7, #31]
 8005a9c:	e14a      	b.n	8005d34 <UART_SetConfig+0x348>
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	77fb      	strb	r3, [r7, #31]
 8005aa2:	e147      	b.n	8005d34 <UART_SetConfig+0x348>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e144      	b.n	8005d34 <UART_SetConfig+0x348>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a83      	ldr	r2, [pc, #524]	@ (8005cbc <UART_SetConfig+0x2d0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d132      	bne.n	8005b1a <UART_SetConfig+0x12e>
 8005ab4:	4b80      	ldr	r3, [pc, #512]	@ (8005cb8 <UART_SetConfig+0x2cc>)
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	2b0c      	cmp	r3, #12
 8005ac0:	d828      	bhi.n	8005b14 <UART_SetConfig+0x128>
 8005ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <UART_SetConfig+0xdc>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005afd 	.word	0x08005afd
 8005acc:	08005b15 	.word	0x08005b15
 8005ad0:	08005b15 	.word	0x08005b15
 8005ad4:	08005b15 	.word	0x08005b15
 8005ad8:	08005b09 	.word	0x08005b09
 8005adc:	08005b15 	.word	0x08005b15
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005b15 	.word	0x08005b15
 8005ae8:	08005b03 	.word	0x08005b03
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b15 	.word	0x08005b15
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b0f 	.word	0x08005b0f
 8005afc:	2300      	movs	r3, #0
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e118      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b02:	2302      	movs	r3, #2
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e115      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e112      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b0e:	2308      	movs	r3, #8
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e10f      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b14:	2310      	movs	r3, #16
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e10c      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a68      	ldr	r2, [pc, #416]	@ (8005cc0 <UART_SetConfig+0x2d4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d120      	bne.n	8005b66 <UART_SetConfig+0x17a>
 8005b24:	4b64      	ldr	r3, [pc, #400]	@ (8005cb8 <UART_SetConfig+0x2cc>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b2e:	2b30      	cmp	r3, #48	@ 0x30
 8005b30:	d013      	beq.n	8005b5a <UART_SetConfig+0x16e>
 8005b32:	2b30      	cmp	r3, #48	@ 0x30
 8005b34:	d814      	bhi.n	8005b60 <UART_SetConfig+0x174>
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d009      	beq.n	8005b4e <UART_SetConfig+0x162>
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d810      	bhi.n	8005b60 <UART_SetConfig+0x174>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <UART_SetConfig+0x15c>
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d006      	beq.n	8005b54 <UART_SetConfig+0x168>
 8005b46:	e00b      	b.n	8005b60 <UART_SetConfig+0x174>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e0f2      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e0ef      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b54:	2304      	movs	r3, #4
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e0ec      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e0e9      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b60:	2310      	movs	r3, #16
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e0e6      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a56      	ldr	r2, [pc, #344]	@ (8005cc4 <UART_SetConfig+0x2d8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d120      	bne.n	8005bb2 <UART_SetConfig+0x1c6>
 8005b70:	4b51      	ldr	r3, [pc, #324]	@ (8005cb8 <UART_SetConfig+0x2cc>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b7c:	d013      	beq.n	8005ba6 <UART_SetConfig+0x1ba>
 8005b7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b80:	d814      	bhi.n	8005bac <UART_SetConfig+0x1c0>
 8005b82:	2b80      	cmp	r3, #128	@ 0x80
 8005b84:	d009      	beq.n	8005b9a <UART_SetConfig+0x1ae>
 8005b86:	2b80      	cmp	r3, #128	@ 0x80
 8005b88:	d810      	bhi.n	8005bac <UART_SetConfig+0x1c0>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <UART_SetConfig+0x1a8>
 8005b8e:	2b40      	cmp	r3, #64	@ 0x40
 8005b90:	d006      	beq.n	8005ba0 <UART_SetConfig+0x1b4>
 8005b92:	e00b      	b.n	8005bac <UART_SetConfig+0x1c0>
 8005b94:	2300      	movs	r3, #0
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e0cc      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e0c9      	b.n	8005d34 <UART_SetConfig+0x348>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e0c6      	b.n	8005d34 <UART_SetConfig+0x348>
 8005ba6:	2308      	movs	r3, #8
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e0c3      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bac:	2310      	movs	r3, #16
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e0c0      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a44      	ldr	r2, [pc, #272]	@ (8005cc8 <UART_SetConfig+0x2dc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d125      	bne.n	8005c08 <UART_SetConfig+0x21c>
 8005bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8005cb8 <UART_SetConfig+0x2cc>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bca:	d017      	beq.n	8005bfc <UART_SetConfig+0x210>
 8005bcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bd0:	d817      	bhi.n	8005c02 <UART_SetConfig+0x216>
 8005bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd6:	d00b      	beq.n	8005bf0 <UART_SetConfig+0x204>
 8005bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bdc:	d811      	bhi.n	8005c02 <UART_SetConfig+0x216>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <UART_SetConfig+0x1fe>
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be6:	d006      	beq.n	8005bf6 <UART_SetConfig+0x20a>
 8005be8:	e00b      	b.n	8005c02 <UART_SetConfig+0x216>
 8005bea:	2300      	movs	r3, #0
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e0a1      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e09e      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	77fb      	strb	r3, [r7, #31]
 8005bfa:	e09b      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e098      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c02:	2310      	movs	r3, #16
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e095      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005ccc <UART_SetConfig+0x2e0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d125      	bne.n	8005c5e <UART_SetConfig+0x272>
 8005c12:	4b29      	ldr	r3, [pc, #164]	@ (8005cb8 <UART_SetConfig+0x2cc>)
 8005c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c20:	d017      	beq.n	8005c52 <UART_SetConfig+0x266>
 8005c22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c26:	d817      	bhi.n	8005c58 <UART_SetConfig+0x26c>
 8005c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c2c:	d00b      	beq.n	8005c46 <UART_SetConfig+0x25a>
 8005c2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c32:	d811      	bhi.n	8005c58 <UART_SetConfig+0x26c>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <UART_SetConfig+0x254>
 8005c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c3c:	d006      	beq.n	8005c4c <UART_SetConfig+0x260>
 8005c3e:	e00b      	b.n	8005c58 <UART_SetConfig+0x26c>
 8005c40:	2301      	movs	r3, #1
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e076      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c46:	2302      	movs	r3, #2
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e073      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e070      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c52:	2308      	movs	r3, #8
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e06d      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e06a      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd0 <UART_SetConfig+0x2e4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d138      	bne.n	8005cda <UART_SetConfig+0x2ee>
 8005c68:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <UART_SetConfig+0x2cc>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c76:	d017      	beq.n	8005ca8 <UART_SetConfig+0x2bc>
 8005c78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c7c:	d82a      	bhi.n	8005cd4 <UART_SetConfig+0x2e8>
 8005c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c82:	d00b      	beq.n	8005c9c <UART_SetConfig+0x2b0>
 8005c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c88:	d824      	bhi.n	8005cd4 <UART_SetConfig+0x2e8>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <UART_SetConfig+0x2aa>
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c92:	d006      	beq.n	8005ca2 <UART_SetConfig+0x2b6>
 8005c94:	e01e      	b.n	8005cd4 <UART_SetConfig+0x2e8>
 8005c96:	2300      	movs	r3, #0
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e04b      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e048      	b.n	8005d34 <UART_SetConfig+0x348>
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e045      	b.n	8005d34 <UART_SetConfig+0x348>
 8005ca8:	2308      	movs	r3, #8
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e042      	b.n	8005d34 <UART_SetConfig+0x348>
 8005cae:	bf00      	nop
 8005cb0:	efff69f3 	.word	0xefff69f3
 8005cb4:	40011000 	.word	0x40011000
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	40004400 	.word	0x40004400
 8005cc0:	40004800 	.word	0x40004800
 8005cc4:	40004c00 	.word	0x40004c00
 8005cc8:	40005000 	.word	0x40005000
 8005ccc:	40011400 	.word	0x40011400
 8005cd0:	40007800 	.word	0x40007800
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e02c      	b.n	8005d34 <UART_SetConfig+0x348>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a72      	ldr	r2, [pc, #456]	@ (8005ea8 <UART_SetConfig+0x4bc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d125      	bne.n	8005d30 <UART_SetConfig+0x344>
 8005ce4:	4b71      	ldr	r3, [pc, #452]	@ (8005eac <UART_SetConfig+0x4c0>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005cee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cf2:	d017      	beq.n	8005d24 <UART_SetConfig+0x338>
 8005cf4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cf8:	d817      	bhi.n	8005d2a <UART_SetConfig+0x33e>
 8005cfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cfe:	d00b      	beq.n	8005d18 <UART_SetConfig+0x32c>
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d04:	d811      	bhi.n	8005d2a <UART_SetConfig+0x33e>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <UART_SetConfig+0x326>
 8005d0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d0e:	d006      	beq.n	8005d1e <UART_SetConfig+0x332>
 8005d10:	e00b      	b.n	8005d2a <UART_SetConfig+0x33e>
 8005d12:	2300      	movs	r3, #0
 8005d14:	77fb      	strb	r3, [r7, #31]
 8005d16:	e00d      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	77fb      	strb	r3, [r7, #31]
 8005d1c:	e00a      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d1e:	2304      	movs	r3, #4
 8005d20:	77fb      	strb	r3, [r7, #31]
 8005d22:	e007      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d24:	2308      	movs	r3, #8
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e004      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e001      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d30:	2310      	movs	r3, #16
 8005d32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d3c:	d15b      	bne.n	8005df6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d3e:	7ffb      	ldrb	r3, [r7, #31]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d828      	bhi.n	8005d96 <UART_SetConfig+0x3aa>
 8005d44:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <UART_SetConfig+0x360>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	08005d97 	.word	0x08005d97
 8005d5c:	08005d87 	.word	0x08005d87
 8005d60:	08005d97 	.word	0x08005d97
 8005d64:	08005d97 	.word	0x08005d97
 8005d68:	08005d97 	.word	0x08005d97
 8005d6c:	08005d8f 	.word	0x08005d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7fd fe0e 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8005d74:	61b8      	str	r0, [r7, #24]
        break;
 8005d76:	e013      	b.n	8005da0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d78:	f7fd fe1e 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8005d7c:	61b8      	str	r0, [r7, #24]
        break;
 8005d7e:	e00f      	b.n	8005da0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d80:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb0 <UART_SetConfig+0x4c4>)
 8005d82:	61bb      	str	r3, [r7, #24]
        break;
 8005d84:	e00c      	b.n	8005da0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d86:	f7fd fd31 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 8005d8a:	61b8      	str	r0, [r7, #24]
        break;
 8005d8c:	e008      	b.n	8005da0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d92:	61bb      	str	r3, [r7, #24]
        break;
 8005d94:	e004      	b.n	8005da0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d074      	beq.n	8005e90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	005a      	lsls	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	441a      	add	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b0f      	cmp	r3, #15
 8005dc0:	d916      	bls.n	8005df0 <UART_SetConfig+0x404>
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc8:	d212      	bcs.n	8005df0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f023 030f 	bic.w	r3, r3, #15
 8005dd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	89fb      	ldrh	r3, [r7, #14]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	89fa      	ldrh	r2, [r7, #14]
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	e04f      	b.n	8005e90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	77bb      	strb	r3, [r7, #30]
 8005df4:	e04c      	b.n	8005e90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005df6:	7ffb      	ldrb	r3, [r7, #31]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d828      	bhi.n	8005e4e <UART_SetConfig+0x462>
 8005dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005e04 <UART_SetConfig+0x418>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	08005e4f 	.word	0x08005e4f
 8005e14:	08005e3f 	.word	0x08005e3f
 8005e18:	08005e4f 	.word	0x08005e4f
 8005e1c:	08005e4f 	.word	0x08005e4f
 8005e20:	08005e4f 	.word	0x08005e4f
 8005e24:	08005e47 	.word	0x08005e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fd fdb2 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	61b8      	str	r0, [r7, #24]
        break;
 8005e2e:	e013      	b.n	8005e58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fd fdc2 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8005e34:	61b8      	str	r0, [r7, #24]
        break;
 8005e36:	e00f      	b.n	8005e58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e38:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb0 <UART_SetConfig+0x4c4>)
 8005e3a:	61bb      	str	r3, [r7, #24]
        break;
 8005e3c:	e00c      	b.n	8005e58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3e:	f7fd fcd5 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 8005e42:	61b8      	str	r0, [r7, #24]
        break;
 8005e44:	e008      	b.n	8005e58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e4a:	61bb      	str	r3, [r7, #24]
        break;
 8005e4c:	e004      	b.n	8005e58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	77bb      	strb	r3, [r7, #30]
        break;
 8005e56:	bf00      	nop
    }

    if (pclk != 0U)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d018      	beq.n	8005e90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	085a      	lsrs	r2, r3, #1
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	441a      	add	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b0f      	cmp	r3, #15
 8005e76:	d909      	bls.n	8005e8c <UART_SetConfig+0x4a0>
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e7e:	d205      	bcs.n	8005e8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	e001      	b.n	8005e90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40007c00 	.word	0x40007c00
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	00f42400 	.word	0x00f42400

08005eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01a      	beq.n	8005fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fb2:	d10a      	bne.n	8005fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]
  }
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b098      	sub	sp, #96	@ 0x60
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006008:	f7fb fdee 	bl	8001be8 <HAL_GetTick>
 800600c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b08      	cmp	r3, #8
 800601a:	d12e      	bne.n	800607a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006024:	2200      	movs	r2, #0
 8006026:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f88c 	bl	8006148 <UART_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d021      	beq.n	800607a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800604a:	653b      	str	r3, [r7, #80]	@ 0x50
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006054:	647b      	str	r3, [r7, #68]	@ 0x44
 8006056:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800605a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e6      	bne.n	8006036 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e062      	b.n	8006140 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b04      	cmp	r3, #4
 8006086:	d149      	bne.n	800611c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006090:	2200      	movs	r2, #0
 8006092:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f856 	bl	8006148 <UART_WaitOnFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d03c      	beq.n	800611c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	623b      	str	r3, [r7, #32]
   return(result);
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80060c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e6      	bne.n	80060a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3308      	adds	r3, #8
 80060da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0301 	bic.w	r3, r3, #1
 80060ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060f4:	61fa      	str	r2, [r7, #28]
 80060f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	69b9      	ldr	r1, [r7, #24]
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	617b      	str	r3, [r7, #20]
   return(result);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e5      	bne.n	80060d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e011      	b.n	8006140 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3758      	adds	r7, #88	@ 0x58
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006158:	e04f      	b.n	80061fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d04b      	beq.n	80061fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006162:	f7fb fd41 	bl	8001be8 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <UART_WaitOnFlagUntilTimeout+0x30>
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e04e      	b.n	800621a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d037      	beq.n	80061fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b80      	cmp	r3, #128	@ 0x80
 800618e:	d034      	beq.n	80061fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b40      	cmp	r3, #64	@ 0x40
 8006194:	d031      	beq.n	80061fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d110      	bne.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2208      	movs	r2, #8
 80061aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f838 	bl	8006222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2208      	movs	r2, #8
 80061b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e029      	b.n	800621a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061d4:	d111      	bne.n	80061fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f81e 	bl	8006222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e00f      	b.n	800621a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69da      	ldr	r2, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4013      	ands	r3, r2
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	429a      	cmp	r2, r3
 8006208:	bf0c      	ite	eq
 800620a:	2301      	moveq	r3, #1
 800620c:	2300      	movne	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	429a      	cmp	r2, r3
 8006216:	d0a0      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006222:	b480      	push	{r7}
 8006224:	b095      	sub	sp, #84	@ 0x54
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800623e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006248:	643b      	str	r3, [r7, #64]	@ 0x40
 800624a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800624e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e6      	bne.n	800622a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	61fb      	str	r3, [r7, #28]
   return(result);
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3308      	adds	r3, #8
 800627a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800627c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800627e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e5      	bne.n	800625c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006294:	2b01      	cmp	r3, #1
 8006296:	d118      	bne.n	80062ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f023 0310 	bic.w	r3, r3, #16
 80062ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6979      	ldr	r1, [r7, #20]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	613b      	str	r3, [r7, #16]
   return(result);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e6      	bne.n	8006298 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062de:	bf00      	nop
 80062e0:	3754      	adds	r7, #84	@ 0x54
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fb4f 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b088      	sub	sp, #32
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	60bb      	str	r3, [r7, #8]
   return(result);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6979      	ldr	r1, [r7, #20]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	613b      	str	r3, [r7, #16]
   return(result);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e6      	bne.n	800631e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff fb1b 	bl	8005998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006362:	bf00      	nop
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006370:	4904      	ldr	r1, [pc, #16]	@ (8006384 <MX_FATFS_Init+0x18>)
 8006372:	4805      	ldr	r0, [pc, #20]	@ (8006388 <MX_FATFS_Init+0x1c>)
 8006374:	f002 fbe0 	bl	8008b38 <FATFS_LinkDriver>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	4b03      	ldr	r3, [pc, #12]	@ (800638c <MX_FATFS_Init+0x20>)
 800637e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006380:	bf00      	nop
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20000f48 	.word	0x20000f48
 8006388:	20000010 	.word	0x20000010
 800638c:	20000f44 	.word	0x20000f44

08006390 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006394:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006396:	4618      	mov	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fa fac7 	bl	8000940 <SD_disk_initialize>
 80063b2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fa fb9f 	bl	8000b0c <SD_disk_status>
 80063ce:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80063e8:	7bf8      	ldrb	r0, [r7, #15]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	f7fa fba2 	bl	8000b38 <SD_disk_read>
 80063f4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800640e:	7bf8      	ldrb	r0, [r7, #15]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	f7fa fbf9 	bl	8000c0c <SD_disk_write>
 800641a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	603a      	str	r2, [r7, #0]
 800642e:	71fb      	strb	r3, [r7, #7]
 8006430:	460b      	mov	r3, r1
 8006432:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006434:	79b9      	ldrb	r1, [r7, #6]
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7fa fc6a 	bl	8000d14 <SD_disk_ioctl>
 8006440:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	4a08      	ldr	r2, [pc, #32]	@ (800647c <disk_status+0x30>)
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	79fa      	ldrb	r2, [r7, #7]
 8006464:	4905      	ldr	r1, [pc, #20]	@ (800647c <disk_status+0x30>)
 8006466:	440a      	add	r2, r1
 8006468:	7a12      	ldrb	r2, [r2, #8]
 800646a:	4610      	mov	r0, r2
 800646c:	4798      	blx	r3
 800646e:	4603      	mov	r3, r0
 8006470:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20000f74 	.word	0x20000f74

08006480 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	4a0d      	ldr	r2, [pc, #52]	@ (80064c8 <disk_initialize+0x48>)
 8006492:	5cd3      	ldrb	r3, [r2, r3]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d111      	bne.n	80064bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	4a0b      	ldr	r2, [pc, #44]	@ (80064c8 <disk_initialize+0x48>)
 800649c:	2101      	movs	r1, #1
 800649e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	4a09      	ldr	r2, [pc, #36]	@ (80064c8 <disk_initialize+0x48>)
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	79fa      	ldrb	r2, [r7, #7]
 80064ae:	4906      	ldr	r1, [pc, #24]	@ (80064c8 <disk_initialize+0x48>)
 80064b0:	440a      	add	r2, r1
 80064b2:	7a12      	ldrb	r2, [r2, #8]
 80064b4:	4610      	mov	r0, r2
 80064b6:	4798      	blx	r3
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000f74 	.word	0x20000f74

080064cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	607a      	str	r2, [r7, #4]
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	4a0a      	ldr	r2, [pc, #40]	@ (8006508 <disk_read+0x3c>)
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	689c      	ldr	r4, [r3, #8]
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	4a07      	ldr	r2, [pc, #28]	@ (8006508 <disk_read+0x3c>)
 80064ec:	4413      	add	r3, r2
 80064ee:	7a18      	ldrb	r0, [r3, #8]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	47a0      	blx	r4
 80064f8:	4603      	mov	r3, r0
 80064fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	bd90      	pop	{r4, r7, pc}
 8006506:	bf00      	nop
 8006508:	20000f74 	.word	0x20000f74

0800650c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	4a0a      	ldr	r2, [pc, #40]	@ (8006548 <disk_write+0x3c>)
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	68dc      	ldr	r4, [r3, #12]
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	4a07      	ldr	r2, [pc, #28]	@ (8006548 <disk_write+0x3c>)
 800652c:	4413      	add	r3, r2
 800652e:	7a18      	ldrb	r0, [r3, #8]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	47a0      	blx	r4
 8006538:	4603      	mov	r3, r0
 800653a:	75fb      	strb	r3, [r7, #23]
  return res;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
}
 800653e:	4618      	mov	r0, r3
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}
 8006546:	bf00      	nop
 8006548:	20000f74 	.word	0x20000f74

0800654c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	603a      	str	r2, [r7, #0]
 8006556:	71fb      	strb	r3, [r7, #7]
 8006558:	460b      	mov	r3, r1
 800655a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	4a09      	ldr	r2, [pc, #36]	@ (8006584 <disk_ioctl+0x38>)
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	79fa      	ldrb	r2, [r7, #7]
 800656a:	4906      	ldr	r1, [pc, #24]	@ (8006584 <disk_ioctl+0x38>)
 800656c:	440a      	add	r2, r1
 800656e:	7a10      	ldrb	r0, [r2, #8]
 8006570:	79b9      	ldrb	r1, [r7, #6]
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	4798      	blx	r3
 8006576:	4603      	mov	r3, r0
 8006578:	73fb      	strb	r3, [r7, #15]
  return res;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000f74 	.word	0x20000f74

08006588 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3301      	adds	r3, #1
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006598:	89fb      	ldrh	r3, [r7, #14]
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	b21a      	sxth	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b21b      	sxth	r3, r3
 80065a4:	4313      	orrs	r3, r2
 80065a6:	b21b      	sxth	r3, r3
 80065a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80065aa:	89fb      	ldrh	r3, [r7, #14]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3303      	adds	r3, #3
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	021b      	lsls	r3, r3, #8
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	3202      	adds	r2, #2
 80065d0:	7812      	ldrb	r2, [r2, #0]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	3201      	adds	r2, #1
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	7812      	ldrb	r2, [r2, #0]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
	return rv;
 80065f0:	68fb      	ldr	r3, [r7, #12]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	887a      	ldrh	r2, [r7, #2]
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	887b      	ldrh	r3, [r7, #2]
 8006618:	0a1b      	lsrs	r3, r3, #8
 800661a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	887a      	ldrh	r2, [r7, #2]
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	0a1b      	lsrs	r3, r3, #8
 800664e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	607a      	str	r2, [r7, #4]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	1c53      	adds	r3, r2, #1
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	1c59      	adds	r1, r3, #1
 80066b0:	6179      	str	r1, [r7, #20]
 80066b2:	7812      	ldrb	r2, [r2, #0]
 80066b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f1      	bne.n	80066a6 <mem_cpy+0x1a>
	}
}
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80066ce:	b480      	push	{r7}
 80066d0:	b087      	sub	sp, #28
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	617a      	str	r2, [r7, #20]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1f3      	bne.n	80066de <mem_set+0x10>
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006704:	b480      	push	{r7}
 8006706:	b089      	sub	sp, #36	@ 0x24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	61fa      	str	r2, [r7, #28]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	4619      	mov	r1, r3
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	61ba      	str	r2, [r7, #24]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	1acb      	subs	r3, r1, r3
 8006730:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3b01      	subs	r3, #1
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <mem_cmp+0x40>
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0eb      	beq.n	800671c <mem_cmp+0x18>

	return r;
 8006744:	697b      	ldr	r3, [r7, #20]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3724      	adds	r7, #36	@ 0x24
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800675c:	e002      	b.n	8006764 <chk_chr+0x12>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3301      	adds	r3, #1
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <chk_chr+0x26>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	4293      	cmp	r3, r2
 8006776:	d1f2      	bne.n	800675e <chk_chr+0xc>
	return *str;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	781b      	ldrb	r3, [r3, #0]
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	e029      	b.n	80067f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800679c:	4a27      	ldr	r2, [pc, #156]	@ (800683c <chk_lock+0xb4>)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	4413      	add	r3, r2
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01d      	beq.n	80067e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067aa:	4a24      	ldr	r2, [pc, #144]	@ (800683c <chk_lock+0xb4>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	4413      	add	r3, r2
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d116      	bne.n	80067ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80067bc:	4a1f      	ldr	r2, [pc, #124]	@ (800683c <chk_lock+0xb4>)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	4413      	add	r3, r2
 80067c4:	3304      	adds	r3, #4
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d10c      	bne.n	80067ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80067d0:	4a1a      	ldr	r2, [pc, #104]	@ (800683c <chk_lock+0xb4>)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	4413      	add	r3, r2
 80067d8:	3308      	adds	r3, #8
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d102      	bne.n	80067ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80067e4:	e007      	b.n	80067f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80067e6:	2301      	movs	r3, #1
 80067e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3301      	adds	r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d9d2      	bls.n	800679c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d109      	bne.n	8006810 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <chk_lock+0x80>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b02      	cmp	r3, #2
 8006806:	d101      	bne.n	800680c <chk_lock+0x84>
 8006808:	2300      	movs	r3, #0
 800680a:	e010      	b.n	800682e <chk_lock+0xa6>
 800680c:	2312      	movs	r3, #18
 800680e:	e00e      	b.n	800682e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d108      	bne.n	8006828 <chk_lock+0xa0>
 8006816:	4a09      	ldr	r2, [pc, #36]	@ (800683c <chk_lock+0xb4>)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	4413      	add	r3, r2
 800681e:	330c      	adds	r3, #12
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006826:	d101      	bne.n	800682c <chk_lock+0xa4>
 8006828:	2310      	movs	r3, #16
 800682a:	e000      	b.n	800682e <chk_lock+0xa6>
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20000f54 	.word	0x20000f54

08006840 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006846:	2300      	movs	r3, #0
 8006848:	607b      	str	r3, [r7, #4]
 800684a:	e002      	b.n	8006852 <enq_lock+0x12>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3301      	adds	r3, #1
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d806      	bhi.n	8006866 <enq_lock+0x26>
 8006858:	4a09      	ldr	r2, [pc, #36]	@ (8006880 <enq_lock+0x40>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	4413      	add	r3, r2
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f2      	bne.n	800684c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b02      	cmp	r3, #2
 800686a:	bf14      	ite	ne
 800686c:	2301      	movne	r3, #1
 800686e:	2300      	moveq	r3, #0
 8006870:	b2db      	uxtb	r3, r3
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20000f54 	.word	0x20000f54

08006884 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e01f      	b.n	80068d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006894:	4a41      	ldr	r2, [pc, #260]	@ (800699c <inc_lock+0x118>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	4413      	add	r3, r2
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d113      	bne.n	80068ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80068a6:	4a3d      	ldr	r2, [pc, #244]	@ (800699c <inc_lock+0x118>)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	4413      	add	r3, r2
 80068ae:	3304      	adds	r3, #4
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d109      	bne.n	80068ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80068ba:	4a38      	ldr	r2, [pc, #224]	@ (800699c <inc_lock+0x118>)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	4413      	add	r3, r2
 80068c2:	3308      	adds	r3, #8
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d006      	beq.n	80068dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d9dc      	bls.n	8006894 <inc_lock+0x10>
 80068da:	e000      	b.n	80068de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80068dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d132      	bne.n	800694a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	e002      	b.n	80068f0 <inc_lock+0x6c>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d806      	bhi.n	8006904 <inc_lock+0x80>
 80068f6:	4a29      	ldr	r2, [pc, #164]	@ (800699c <inc_lock+0x118>)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	4413      	add	r3, r2
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f2      	bne.n	80068ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d101      	bne.n	800690e <inc_lock+0x8a>
 800690a:	2300      	movs	r3, #0
 800690c:	e040      	b.n	8006990 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4922      	ldr	r1, [pc, #136]	@ (800699c <inc_lock+0x118>)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	440b      	add	r3, r1
 800691a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	491e      	ldr	r1, [pc, #120]	@ (800699c <inc_lock+0x118>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	440b      	add	r3, r1
 8006928:	3304      	adds	r3, #4
 800692a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	491a      	ldr	r1, [pc, #104]	@ (800699c <inc_lock+0x118>)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	440b      	add	r3, r1
 8006938:	3308      	adds	r3, #8
 800693a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800693c:	4a17      	ldr	r2, [pc, #92]	@ (800699c <inc_lock+0x118>)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	4413      	add	r3, r2
 8006944:	330c      	adds	r3, #12
 8006946:	2200      	movs	r2, #0
 8006948:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <inc_lock+0xe0>
 8006950:	4a12      	ldr	r2, [pc, #72]	@ (800699c <inc_lock+0x118>)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	4413      	add	r3, r2
 8006958:	330c      	adds	r3, #12
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <inc_lock+0xe0>
 8006960:	2300      	movs	r3, #0
 8006962:	e015      	b.n	8006990 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d108      	bne.n	800697c <inc_lock+0xf8>
 800696a:	4a0c      	ldr	r2, [pc, #48]	@ (800699c <inc_lock+0x118>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	4413      	add	r3, r2
 8006972:	330c      	adds	r3, #12
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	e001      	b.n	8006980 <inc_lock+0xfc>
 800697c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006980:	4906      	ldr	r1, [pc, #24]	@ (800699c <inc_lock+0x118>)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	440b      	add	r3, r1
 8006988:	330c      	adds	r3, #12
 800698a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3301      	adds	r3, #1
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20000f54 	.word	0x20000f54

080069a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d825      	bhi.n	8006a00 <dec_lock+0x60>
		n = Files[i].ctr;
 80069b4:	4a17      	ldr	r2, [pc, #92]	@ (8006a14 <dec_lock+0x74>)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	4413      	add	r3, r2
 80069bc:	330c      	adds	r3, #12
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80069c2:	89fb      	ldrh	r3, [r7, #14]
 80069c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c8:	d101      	bne.n	80069ce <dec_lock+0x2e>
 80069ca:	2300      	movs	r3, #0
 80069cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80069ce:	89fb      	ldrh	r3, [r7, #14]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <dec_lock+0x3a>
 80069d4:	89fb      	ldrh	r3, [r7, #14]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80069da:	4a0e      	ldr	r2, [pc, #56]	@ (8006a14 <dec_lock+0x74>)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	4413      	add	r3, r2
 80069e2:	330c      	adds	r3, #12
 80069e4:	89fa      	ldrh	r2, [r7, #14]
 80069e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80069e8:	89fb      	ldrh	r3, [r7, #14]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <dec_lock+0x5a>
 80069ee:	4a09      	ldr	r2, [pc, #36]	@ (8006a14 <dec_lock+0x74>)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	4413      	add	r3, r2
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	737b      	strb	r3, [r7, #13]
 80069fe:	e001      	b.n	8006a04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006a00:	2302      	movs	r3, #2
 8006a02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006a04:	7b7b      	ldrb	r3, [r7, #13]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20000f54 	.word	0x20000f54

08006a18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e010      	b.n	8006a48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a26:	4a0d      	ldr	r2, [pc, #52]	@ (8006a5c <clear_lock+0x44>)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	4413      	add	r3, r2
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d105      	bne.n	8006a42 <clear_lock+0x2a>
 8006a36:	4a09      	ldr	r2, [pc, #36]	@ (8006a5c <clear_lock+0x44>)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	4413      	add	r3, r2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3301      	adds	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d9eb      	bls.n	8006a26 <clear_lock+0xe>
	}
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	20000f54 	.word	0x20000f54

08006a60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	78db      	ldrb	r3, [r3, #3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d034      	beq.n	8006ade <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7858      	ldrb	r0, [r3, #1]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006a84:	2301      	movs	r3, #1
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	f7ff fd40 	bl	800650c <disk_write>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	73fb      	strb	r3, [r7, #15]
 8006a96:	e022      	b.n	8006ade <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d217      	bcs.n	8006ade <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	789b      	ldrb	r3, [r3, #2]
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	e010      	b.n	8006ad8 <sync_window+0x78>
					wsect += fs->fsize;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	7858      	ldrb	r0, [r3, #1]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006aca:	2301      	movs	r3, #1
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	f7ff fd1d 	bl	800650c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d8eb      	bhi.n	8006ab6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d01b      	beq.n	8006b38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff ffad 	bl	8006a60 <sync_window>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d113      	bne.n	8006b38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7858      	ldrb	r0, [r3, #1]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f7ff fcd5 	bl	80064cc <disk_read>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006b28:	f04f 33ff 	mov.w	r3, #4294967295
 8006b2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff ff87 	bl	8006a60 <sync_window>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d158      	bne.n	8006c0e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d148      	bne.n	8006bf6 <sync_fs+0xb2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	791b      	ldrb	r3, [r3, #4]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d144      	bne.n	8006bf6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3330      	adds	r3, #48	@ 0x30
 8006b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b74:	2100      	movs	r1, #0
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff fda9 	bl	80066ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3330      	adds	r3, #48	@ 0x30
 8006b80:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b84:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fd38 	bl	80065fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3330      	adds	r3, #48	@ 0x30
 8006b92:	4921      	ldr	r1, [pc, #132]	@ (8006c18 <sync_fs+0xd4>)
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff fd4d 	bl	8006634 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3330      	adds	r3, #48	@ 0x30
 8006b9e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006ba2:	491e      	ldr	r1, [pc, #120]	@ (8006c1c <sync_fs+0xd8>)
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fd45 	bl	8006634 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3330      	adds	r3, #48	@ 0x30
 8006bae:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7ff fd3b 	bl	8006634 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3330      	adds	r3, #48	@ 0x30
 8006bc2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4610      	mov	r0, r2
 8006bce:	f7ff fd31 	bl	8006634 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7858      	ldrb	r0, [r3, #1]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bea:	2301      	movs	r3, #1
 8006bec:	f7ff fc8e 	bl	800650c <disk_write>
			fs->fsi_flag = 0;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff fca4 	bl	800654c <disk_ioctl>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <sync_fs+0xca>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	41615252 	.word	0x41615252
 8006c1c:	61417272 	.word	0x61417272

08006c20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	3b02      	subs	r3, #2
 8006c2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	3b02      	subs	r3, #2
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d301      	bcc.n	8006c40 <clust2sect+0x20>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e008      	b.n	8006c52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	895b      	ldrh	r3, [r3, #10]
 8006c44:	461a      	mov	r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	fb03 f202 	mul.w	r2, r3, r2
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c50:	4413      	add	r3, r2
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d904      	bls.n	8006c7e <get_fat+0x20>
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006c7e:	2301      	movs	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	e08e      	b.n	8006da2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295
 8006c88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d061      	beq.n	8006d56 <get_fat+0xf8>
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	dc7b      	bgt.n	8006d8e <get_fat+0x130>
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d002      	beq.n	8006ca0 <get_fat+0x42>
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d041      	beq.n	8006d22 <get_fat+0xc4>
 8006c9e:	e076      	b.n	8006d8e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	085b      	lsrs	r3, r3, #1
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	6a1a      	ldr	r2, [r3, #32]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	0a5b      	lsrs	r3, r3, #9
 8006cb6:	4413      	add	r3, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6938      	ldr	r0, [r7, #16]
 8006cbc:	f7ff ff14 	bl	8006ae8 <move_window>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d166      	bne.n	8006d94 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	60fa      	str	r2, [r7, #12]
 8006ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cd8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	6a1a      	ldr	r2, [r3, #32]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	0a5b      	lsrs	r3, r3, #9
 8006ce2:	4413      	add	r3, r2
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6938      	ldr	r0, [r7, #16]
 8006ce8:	f7ff fefe 	bl	8006ae8 <move_window>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d152      	bne.n	8006d98 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <get_fat+0xba>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	e002      	b.n	8006d1e <get_fat+0xc0>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d1e:	617b      	str	r3, [r7, #20]
			break;
 8006d20:	e03f      	b.n	8006da2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	0a1b      	lsrs	r3, r3, #8
 8006d2a:	4413      	add	r3, r2
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6938      	ldr	r0, [r7, #16]
 8006d30:	f7ff feda 	bl	8006ae8 <move_window>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d130      	bne.n	8006d9c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006d48:	4413      	add	r3, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fc1c 	bl	8006588 <ld_word>
 8006d50:	4603      	mov	r3, r0
 8006d52:	617b      	str	r3, [r7, #20]
			break;
 8006d54:	e025      	b.n	8006da2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	6a1a      	ldr	r2, [r3, #32]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	09db      	lsrs	r3, r3, #7
 8006d5e:	4413      	add	r3, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	6938      	ldr	r0, [r7, #16]
 8006d64:	f7ff fec0 	bl	8006ae8 <move_window>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d118      	bne.n	8006da0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006d7c:	4413      	add	r3, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7ff fc1a 	bl	80065b8 <ld_dword>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006d8a:	617b      	str	r3, [r7, #20]
			break;
 8006d8c:	e009      	b.n	8006da2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006d8e:	2301      	movs	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	e006      	b.n	8006da2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d94:	bf00      	nop
 8006d96:	e004      	b.n	8006da2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d98:	bf00      	nop
 8006d9a:	e002      	b.n	8006da2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d9c:	bf00      	nop
 8006d9e:	e000      	b.n	8006da2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006da0:	bf00      	nop
		}
	}

	return val;
 8006da2:	697b      	ldr	r3, [r7, #20]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006dac:	b590      	push	{r4, r7, lr}
 8006dae:	b089      	sub	sp, #36	@ 0x24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006db8:	2302      	movs	r3, #2
 8006dba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	f240 80d9 	bls.w	8006f76 <put_fat+0x1ca>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	f080 80d3 	bcs.w	8006f76 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	f000 8096 	beq.w	8006f06 <put_fat+0x15a>
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	f300 80cb 	bgt.w	8006f76 <put_fat+0x1ca>
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d002      	beq.n	8006dea <put_fat+0x3e>
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d06e      	beq.n	8006ec6 <put_fat+0x11a>
 8006de8:	e0c5      	b.n	8006f76 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	4413      	add	r3, r2
 8006df6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	0a5b      	lsrs	r3, r3, #9
 8006e00:	4413      	add	r3, r2
 8006e02:	4619      	mov	r1, r3
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff fe6f 	bl	8006ae8 <move_window>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e0e:	7ffb      	ldrb	r3, [r7, #31]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 80a9 	bne.w	8006f68 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	61b9      	str	r1, [r7, #24]
 8006e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e26:	4413      	add	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <put_fat+0xa4>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	b25b      	sxtb	r3, r3
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	b25a      	sxtb	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	b25b      	sxtb	r3, r3
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	b25b      	sxtb	r3, r3
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	e001      	b.n	8006e54 <put_fat+0xa8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1a      	ldr	r2, [r3, #32]
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	0a5b      	lsrs	r3, r3, #9
 8006e66:	4413      	add	r3, r2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fe3c 	bl	8006ae8 <move_window>
 8006e70:	4603      	mov	r3, r0
 8006e72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e74:	7ffb      	ldrb	r3, [r7, #31]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d178      	bne.n	8006f6c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e86:	4413      	add	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <put_fat+0xf0>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	091b      	lsrs	r3, r3, #4
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	e00e      	b.n	8006eba <put_fat+0x10e>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b25b      	sxtb	r3, r3
 8006ea2:	f023 030f 	bic.w	r3, r3, #15
 8006ea6:	b25a      	sxtb	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	b25b      	sxtb	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b25b      	sxtb	r3, r3
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	70da      	strb	r2, [r3, #3]
			break;
 8006ec4:	e057      	b.n	8006f76 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a1a      	ldr	r2, [r3, #32]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	0a1b      	lsrs	r3, r3, #8
 8006ece:	4413      	add	r3, r2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7ff fe08 	bl	8006ae8 <move_window>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006edc:	7ffb      	ldrb	r3, [r7, #31]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d146      	bne.n	8006f70 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006ef0:	4413      	add	r3, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	b292      	uxth	r2, r2
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fb80 	bl	80065fe <st_word>
			fs->wflag = 1;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	70da      	strb	r2, [r3, #3]
			break;
 8006f04:	e037      	b.n	8006f76 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a1a      	ldr	r2, [r3, #32]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	09db      	lsrs	r3, r3, #7
 8006f0e:	4413      	add	r3, r2
 8006f10:	4619      	mov	r1, r3
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff fde8 	bl	8006ae8 <move_window>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f1c:	7ffb      	ldrb	r3, [r7, #31]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d128      	bne.n	8006f74 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006f36:	4413      	add	r3, r2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff fb3d 	bl	80065b8 <ld_dword>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006f44:	4323      	orrs	r3, r4
 8006f46:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006f56:	4413      	add	r3, r2
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fb6a 	bl	8006634 <st_dword>
			fs->wflag = 1;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	70da      	strb	r2, [r3, #3]
			break;
 8006f66:	e006      	b.n	8006f76 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f68:	bf00      	nop
 8006f6a:	e004      	b.n	8006f76 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f6c:	bf00      	nop
 8006f6e:	e002      	b.n	8006f76 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f74:	bf00      	nop
		}
	}
	return res;
 8006f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3724      	adds	r7, #36	@ 0x24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd90      	pop	{r4, r7, pc}

08006f80 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d904      	bls.n	8006fa6 <remove_chain+0x26>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d301      	bcc.n	8006faa <remove_chain+0x2a>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e04b      	b.n	8007042 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00c      	beq.n	8006fca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	69b8      	ldr	r0, [r7, #24]
 8006fb8:	f7ff fef8 	bl	8006dac <put_fat>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006fc0:	7ffb      	ldrb	r3, [r7, #31]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <remove_chain+0x4a>
 8006fc6:	7ffb      	ldrb	r3, [r7, #31]
 8006fc8:	e03b      	b.n	8007042 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff fe46 	bl	8006c5e <get_fat>
 8006fd2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d031      	beq.n	800703e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <remove_chain+0x64>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e02e      	b.n	8007042 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	d101      	bne.n	8006ff0 <remove_chain+0x70>
 8006fec:	2301      	movs	r3, #1
 8006fee:	e028      	b.n	8007042 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	69b8      	ldr	r0, [r7, #24]
 8006ff6:	f7ff fed9 	bl	8006dac <put_fat>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006ffe:	7ffb      	ldrb	r3, [r7, #31]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <remove_chain+0x88>
 8007004:	7ffb      	ldrb	r3, [r7, #31]
 8007006:	e01c      	b.n	8007042 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	3b02      	subs	r3, #2
 8007012:	429a      	cmp	r2, r3
 8007014:	d20b      	bcs.n	800702e <remove_chain+0xae>
			fs->free_clst++;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	791b      	ldrb	r3, [r3, #4]
 8007024:	f043 0301 	orr.w	r3, r3, #1
 8007028:	b2da      	uxtb	r2, r3
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	429a      	cmp	r2, r3
 800703a:	d3c6      	bcc.n	8006fca <remove_chain+0x4a>
 800703c:	e000      	b.n	8007040 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800703e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b088      	sub	sp, #32
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10d      	bne.n	800707c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d004      	beq.n	8007076 <create_chain+0x2c>
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	429a      	cmp	r2, r3
 8007074:	d31b      	bcc.n	80070ae <create_chain+0x64>
 8007076:	2301      	movs	r3, #1
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	e018      	b.n	80070ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff fded 	bl	8006c5e <get_fat>
 8007084:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d801      	bhi.n	8007090 <create_chain+0x46>
 800708c:	2301      	movs	r3, #1
 800708e:	e070      	b.n	8007172 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007096:	d101      	bne.n	800709c <create_chain+0x52>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	e06a      	b.n	8007172 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d201      	bcs.n	80070aa <create_chain+0x60>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	e063      	b.n	8007172 <create_chain+0x128>
		scl = clst;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	3301      	adds	r3, #1
 80070b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d307      	bcc.n	80070d2 <create_chain+0x88>
				ncl = 2;
 80070c2:	2302      	movs	r3, #2
 80070c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d901      	bls.n	80070d2 <create_chain+0x88>
 80070ce:	2300      	movs	r3, #0
 80070d0:	e04f      	b.n	8007172 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80070d2:	69f9      	ldr	r1, [r7, #28]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff fdc2 	bl	8006c5e <get_fat>
 80070da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d003      	beq.n	80070f0 <create_chain+0xa6>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d101      	bne.n	80070f4 <create_chain+0xaa>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	e03e      	b.n	8007172 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d1da      	bne.n	80070b2 <create_chain+0x68>
 80070fc:	2300      	movs	r3, #0
 80070fe:	e038      	b.n	8007172 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007100:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007102:	f04f 32ff 	mov.w	r2, #4294967295
 8007106:	69f9      	ldr	r1, [r7, #28]
 8007108:	6938      	ldr	r0, [r7, #16]
 800710a:	f7ff fe4f 	bl	8006dac <put_fat>
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d109      	bne.n	800712c <create_chain+0xe2>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d006      	beq.n	800712c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6938      	ldr	r0, [r7, #16]
 8007124:	f7ff fe42 	bl	8006dac <put_fat>
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d116      	bne.n	8007160 <create_chain+0x116>
		fs->last_clst = ncl;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	3b02      	subs	r3, #2
 8007142:	429a      	cmp	r2, r3
 8007144:	d804      	bhi.n	8007150 <create_chain+0x106>
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	1e5a      	subs	r2, r3, #1
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	791b      	ldrb	r3, [r3, #4]
 8007154:	f043 0301 	orr.w	r3, r3, #1
 8007158:	b2da      	uxtb	r2, r3
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	711a      	strb	r2, [r3, #4]
 800715e:	e007      	b.n	8007170 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d102      	bne.n	800716c <create_chain+0x122>
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	e000      	b.n	800716e <create_chain+0x124>
 800716c:	2301      	movs	r3, #1
 800716e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007170:	69fb      	ldr	r3, [r7, #28]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800717a:	b480      	push	{r7}
 800717c:	b087      	sub	sp, #28
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718e:	3304      	adds	r3, #4
 8007190:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	0a5b      	lsrs	r3, r3, #9
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	8952      	ldrh	r2, [r2, #10]
 800719a:	fbb3 f3f2 	udiv	r3, r3, r2
 800719e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	1d1a      	adds	r2, r3, #4
 80071a4:	613a      	str	r2, [r7, #16]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <clmt_clust+0x3a>
 80071b0:	2300      	movs	r3, #0
 80071b2:	e010      	b.n	80071d6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d307      	bcc.n	80071cc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	3304      	adds	r3, #4
 80071c8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80071ca:	e7e9      	b.n	80071a0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80071cc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	4413      	add	r3, r2
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b086      	sub	sp, #24
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071f8:	d204      	bcs.n	8007204 <dir_sdi+0x22>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007204:	2302      	movs	r3, #2
 8007206:	e063      	b.n	80072d0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <dir_sdi+0x46>
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d902      	bls.n	8007228 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007226:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10c      	bne.n	8007248 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	8912      	ldrh	r2, [r2, #8]
 8007236:	4293      	cmp	r3, r2
 8007238:	d301      	bcc.n	800723e <dir_sdi+0x5c>
 800723a:	2302      	movs	r3, #2
 800723c:	e048      	b.n	80072d0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	61da      	str	r2, [r3, #28]
 8007246:	e029      	b.n	800729c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	895b      	ldrh	r3, [r3, #10]
 800724c:	025b      	lsls	r3, r3, #9
 800724e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007250:	e019      	b.n	8007286 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6979      	ldr	r1, [r7, #20]
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fd01 	bl	8006c5e <get_fat>
 800725c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d101      	bne.n	800726a <dir_sdi+0x88>
 8007266:	2301      	movs	r3, #1
 8007268:	e032      	b.n	80072d0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d904      	bls.n	800727a <dir_sdi+0x98>
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	429a      	cmp	r2, r3
 8007278:	d301      	bcc.n	800727e <dir_sdi+0x9c>
 800727a:	2302      	movs	r3, #2
 800727c:	e028      	b.n	80072d0 <dir_sdi+0xee>
			ofs -= csz;
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	429a      	cmp	r2, r3
 800728c:	d2e1      	bcs.n	8007252 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800728e:	6979      	ldr	r1, [r7, #20]
 8007290:	6938      	ldr	r0, [r7, #16]
 8007292:	f7ff fcc5 	bl	8006c20 <clust2sect>
 8007296:	4602      	mov	r2, r0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <dir_sdi+0xcc>
 80072aa:	2302      	movs	r3, #2
 80072ac:	e010      	b.n	80072d0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69da      	ldr	r2, [r3, #28]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	0a5b      	lsrs	r3, r3, #9
 80072b6:	441a      	add	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c8:	441a      	add	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	3320      	adds	r3, #32
 80072ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <dir_next+0x28>
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072fe:	d301      	bcc.n	8007304 <dir_next+0x2c>
 8007300:	2304      	movs	r3, #4
 8007302:	e0aa      	b.n	800745a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730a:	2b00      	cmp	r3, #0
 800730c:	f040 8098 	bne.w	8007440 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	8912      	ldrh	r2, [r2, #8]
 800732a:	4293      	cmp	r3, r2
 800732c:	f0c0 8088 	bcc.w	8007440 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	61da      	str	r2, [r3, #28]
 8007336:	2304      	movs	r3, #4
 8007338:	e08f      	b.n	800745a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	0a5b      	lsrs	r3, r3, #9
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	8952      	ldrh	r2, [r2, #10]
 8007342:	3a01      	subs	r2, #1
 8007344:	4013      	ands	r3, r2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d17a      	bne.n	8007440 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f7ff fc83 	bl	8006c5e <get_fat>
 8007358:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d801      	bhi.n	8007364 <dir_next+0x8c>
 8007360:	2302      	movs	r3, #2
 8007362:	e07a      	b.n	800745a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736a:	d101      	bne.n	8007370 <dir_next+0x98>
 800736c:	2301      	movs	r3, #1
 800736e:	e074      	b.n	800745a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	429a      	cmp	r2, r3
 8007378:	d358      	bcc.n	800742c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	61da      	str	r2, [r3, #28]
 8007386:	2304      	movs	r3, #4
 8007388:	e067      	b.n	800745a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f7ff fe59 	bl	800704a <create_chain>
 8007398:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <dir_next+0xcc>
 80073a0:	2307      	movs	r3, #7
 80073a2:	e05a      	b.n	800745a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <dir_next+0xd6>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e055      	b.n	800745a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b4:	d101      	bne.n	80073ba <dir_next+0xe2>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e04f      	b.n	800745a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff fb50 	bl	8006a60 <sync_window>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <dir_next+0xf2>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e047      	b.n	800745a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3330      	adds	r3, #48	@ 0x30
 80073ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073d2:	2100      	movs	r1, #0
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff f97a 	bl	80066ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	6979      	ldr	r1, [r7, #20]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff fc1d 	bl	8006c20 <clust2sect>
 80073e6:	4602      	mov	r2, r0
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073ec:	e012      	b.n	8007414 <dir_next+0x13c>
						fs->wflag = 1;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff fb33 	bl	8006a60 <sync_window>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <dir_next+0x12c>
 8007400:	2301      	movs	r3, #1
 8007402:	e02a      	b.n	800745a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	3301      	adds	r3, #1
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	895b      	ldrh	r3, [r3, #10]
 8007418:	461a      	mov	r2, r3
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	4293      	cmp	r3, r2
 800741e:	d3e6      	bcc.n	80073ee <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad2      	subs	r2, r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007432:	6979      	ldr	r1, [r7, #20]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff fbf3 	bl	8006c20 <clust2sect>
 800743a:	4602      	mov	r2, r0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	441a      	add	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b086      	sub	sp, #24
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007472:	2100      	movs	r1, #0
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff feb4 	bl	80071e2 <dir_sdi>
 800747a:	4603      	mov	r3, r0
 800747c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d12b      	bne.n	80074dc <dir_alloc+0x7a>
		n = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	4619      	mov	r1, r3
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fb2a 	bl	8006ae8 <move_window>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d11d      	bne.n	80074da <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2be5      	cmp	r3, #229	@ 0xe5
 80074a6:	d004      	beq.n	80074b2 <dir_alloc+0x50>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d107      	bne.n	80074c2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	3301      	adds	r3, #1
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d102      	bne.n	80074c6 <dir_alloc+0x64>
 80074c0:	e00c      	b.n	80074dc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80074c2:	2300      	movs	r3, #0
 80074c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80074c6:	2101      	movs	r1, #1
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff05 	bl	80072d8 <dir_next>
 80074ce:	4603      	mov	r3, r0
 80074d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0d7      	beq.n	8007488 <dir_alloc+0x26>
 80074d8:	e000      	b.n	80074dc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80074da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d101      	bne.n	80074e6 <dir_alloc+0x84>
 80074e2:	2307      	movs	r3, #7
 80074e4:	75fb      	strb	r3, [r7, #23]
	return res;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	331a      	adds	r3, #26
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff f842 	bl	8006588 <ld_word>
 8007504:	4603      	mov	r3, r0
 8007506:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b03      	cmp	r3, #3
 800750e:	d109      	bne.n	8007524 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	3314      	adds	r3, #20
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff f837 	bl	8006588 <ld_word>
 800751a:	4603      	mov	r3, r0
 800751c:	041b      	lsls	r3, r3, #16
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007524:	68fb      	ldr	r3, [r7, #12]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	331a      	adds	r3, #26
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	b292      	uxth	r2, r2
 8007542:	4611      	mov	r1, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff f85a 	bl	80065fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b03      	cmp	r3, #3
 8007550:	d109      	bne.n	8007566 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f103 0214 	add.w	r2, r3, #20
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	0c1b      	lsrs	r3, r3, #16
 800755c:	b29b      	uxth	r3, r3
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7ff f84c 	bl	80065fe <st_word>
	}
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b086      	sub	sp, #24
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800757c:	2100      	movs	r1, #0
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fe2f 	bl	80071e2 <dir_sdi>
 8007584:	4603      	mov	r3, r0
 8007586:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <dir_find+0x24>
 800758e:	7dfb      	ldrb	r3, [r7, #23]
 8007590:	e03e      	b.n	8007610 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	4619      	mov	r1, r3
 8007598:	6938      	ldr	r0, [r7, #16]
 800759a:	f7ff faa5 	bl	8006ae8 <move_window>
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d12f      	bne.n	8007608 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <dir_find+0x4e>
 80075b6:	2304      	movs	r3, #4
 80075b8:	75fb      	strb	r3, [r7, #23]
 80075ba:	e028      	b.n	800760e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	330b      	adds	r3, #11
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	330b      	adds	r3, #11
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10a      	bne.n	80075f4 <dir_find+0x86>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a18      	ldr	r0, [r3, #32]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3324      	adds	r3, #36	@ 0x24
 80075e6:	220b      	movs	r2, #11
 80075e8:	4619      	mov	r1, r3
 80075ea:	f7ff f88b 	bl	8006704 <mem_cmp>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80075f4:	2100      	movs	r1, #0
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff fe6e 	bl	80072d8 <dir_next>
 80075fc:	4603      	mov	r3, r0
 80075fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0c5      	beq.n	8007592 <dir_find+0x24>
 8007606:	e002      	b.n	800760e <dir_find+0xa0>
		if (res != FR_OK) break;
 8007608:	bf00      	nop
 800760a:	e000      	b.n	800760e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800760c:	bf00      	nop

	return res;
 800760e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007626:	2101      	movs	r1, #1
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff ff1a 	bl	8007462 <dir_alloc>
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d11c      	bne.n	8007672 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	4619      	mov	r1, r3
 800763e:	68b8      	ldr	r0, [r7, #8]
 8007640:	f7ff fa52 	bl	8006ae8 <move_window>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d111      	bne.n	8007672 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	2220      	movs	r2, #32
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff f839 	bl	80066ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a18      	ldr	r0, [r3, #32]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3324      	adds	r3, #36	@ 0x24
 8007664:	220b      	movs	r2, #11
 8007666:	4619      	mov	r1, r3
 8007668:	f7ff f810 	bl	800668c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2201      	movs	r2, #1
 8007670:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007672:	7bfb      	ldrb	r3, [r7, #15]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3324      	adds	r3, #36	@ 0x24
 8007690:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007692:	220b      	movs	r2, #11
 8007694:	2120      	movs	r1, #32
 8007696:	68b8      	ldr	r0, [r7, #8]
 8007698:	f7ff f819 	bl	80066ce <mem_set>
	si = i = 0; ni = 8;
 800769c:	2300      	movs	r3, #0
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	2308      	movs	r3, #8
 80076a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	61fa      	str	r2, [r7, #28]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4413      	add	r3, r2
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80076b6:	7efb      	ldrb	r3, [r7, #27]
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d94e      	bls.n	800775a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80076bc:	7efb      	ldrb	r3, [r7, #27]
 80076be:	2b2f      	cmp	r3, #47	@ 0x2f
 80076c0:	d006      	beq.n	80076d0 <create_name+0x54>
 80076c2:	7efb      	ldrb	r3, [r7, #27]
 80076c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80076c6:	d110      	bne.n	80076ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80076c8:	e002      	b.n	80076d0 <create_name+0x54>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	3301      	adds	r3, #1
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80076da:	d0f6      	beq.n	80076ca <create_name+0x4e>
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80076e6:	d0f0      	beq.n	80076ca <create_name+0x4e>
			break;
 80076e8:	e038      	b.n	800775c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80076ea:	7efb      	ldrb	r3, [r7, #27]
 80076ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ee:	d003      	beq.n	80076f8 <create_name+0x7c>
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d30c      	bcc.n	8007712 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b0b      	cmp	r3, #11
 80076fc:	d002      	beq.n	8007704 <create_name+0x88>
 80076fe:	7efb      	ldrb	r3, [r7, #27]
 8007700:	2b2e      	cmp	r3, #46	@ 0x2e
 8007702:	d001      	beq.n	8007708 <create_name+0x8c>
 8007704:	2306      	movs	r3, #6
 8007706:	e044      	b.n	8007792 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007708:	2308      	movs	r3, #8
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	230b      	movs	r3, #11
 800770e:	617b      	str	r3, [r7, #20]
			continue;
 8007710:	e022      	b.n	8007758 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007712:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007716:	2b00      	cmp	r3, #0
 8007718:	da04      	bge.n	8007724 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800771a:	7efb      	ldrb	r3, [r7, #27]
 800771c:	3b80      	subs	r3, #128	@ 0x80
 800771e:	4a1f      	ldr	r2, [pc, #124]	@ (800779c <create_name+0x120>)
 8007720:	5cd3      	ldrb	r3, [r2, r3]
 8007722:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007724:	7efb      	ldrb	r3, [r7, #27]
 8007726:	4619      	mov	r1, r3
 8007728:	481d      	ldr	r0, [pc, #116]	@ (80077a0 <create_name+0x124>)
 800772a:	f7ff f812 	bl	8006752 <chk_chr>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <create_name+0xbc>
 8007734:	2306      	movs	r3, #6
 8007736:	e02c      	b.n	8007792 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007738:	7efb      	ldrb	r3, [r7, #27]
 800773a:	2b60      	cmp	r3, #96	@ 0x60
 800773c:	d905      	bls.n	800774a <create_name+0xce>
 800773e:	7efb      	ldrb	r3, [r7, #27]
 8007740:	2b7a      	cmp	r3, #122	@ 0x7a
 8007742:	d802      	bhi.n	800774a <create_name+0xce>
 8007744:	7efb      	ldrb	r3, [r7, #27]
 8007746:	3b20      	subs	r3, #32
 8007748:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	613a      	str	r2, [r7, #16]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	4413      	add	r3, r2
 8007754:	7efa      	ldrb	r2, [r7, #27]
 8007756:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007758:	e7a6      	b.n	80076a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800775a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	441a      	add	r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <create_name+0xf4>
 800776c:	2306      	movs	r3, #6
 800776e:	e010      	b.n	8007792 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2be5      	cmp	r3, #229	@ 0xe5
 8007776:	d102      	bne.n	800777e <create_name+0x102>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2205      	movs	r2, #5
 800777c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800777e:	7efb      	ldrb	r3, [r7, #27]
 8007780:	2b20      	cmp	r3, #32
 8007782:	d801      	bhi.n	8007788 <create_name+0x10c>
 8007784:	2204      	movs	r2, #4
 8007786:	e000      	b.n	800778a <create_name+0x10e>
 8007788:	2200      	movs	r2, #0
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	330b      	adds	r3, #11
 800778e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007790:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	080096ac 	.word	0x080096ac
 80077a0:	08009648 	.word	0x08009648

080077a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80077b8:	e002      	b.n	80077c0 <follow_path+0x1c>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	3301      	adds	r3, #1
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80077c6:	d0f8      	beq.n	80077ba <follow_path+0x16>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80077ce:	d0f4      	beq.n	80077ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2200      	movs	r2, #0
 80077d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b1f      	cmp	r3, #31
 80077dc:	d80a      	bhi.n	80077f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2280      	movs	r2, #128	@ 0x80
 80077e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80077e6:	2100      	movs	r1, #0
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fcfa 	bl	80071e2 <dir_sdi>
 80077ee:	4603      	mov	r3, r0
 80077f0:	75fb      	strb	r3, [r7, #23]
 80077f2:	e043      	b.n	800787c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077f4:	463b      	mov	r3, r7
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff ff3f 	bl	800767c <create_name>
 80077fe:	4603      	mov	r3, r0
 8007800:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d134      	bne.n	8007872 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff feb0 	bl	800756e <dir_find>
 800780e:	4603      	mov	r3, r0
 8007810:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007818:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	2b04      	cmp	r3, #4
 8007824:	d127      	bne.n	8007876 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d122      	bne.n	8007876 <follow_path+0xd2>
 8007830:	2305      	movs	r3, #5
 8007832:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007834:	e01f      	b.n	8007876 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d11c      	bne.n	800787a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	799b      	ldrb	r3, [r3, #6]
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800784c:	2305      	movs	r3, #5
 800784e:	75fb      	strb	r3, [r7, #23]
 8007850:	e014      	b.n	800787c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007860:	4413      	add	r3, r2
 8007862:	4619      	mov	r1, r3
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7ff fe43 	bl	80074f0 <ld_clust>
 800786a:	4602      	mov	r2, r0
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007870:	e7c0      	b.n	80077f4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007872:	bf00      	nop
 8007874:	e002      	b.n	800787c <follow_path+0xd8>
				break;
 8007876:	bf00      	nop
 8007878:	e000      	b.n	800787c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800787a:	bf00      	nop
			}
		}
	}

	return res;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007886:	b480      	push	{r7}
 8007888:	b087      	sub	sp, #28
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800788e:	f04f 33ff 	mov.w	r3, #4294967295
 8007892:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d031      	beq.n	8007900 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	e002      	b.n	80078aa <get_ldnumber+0x24>
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	3301      	adds	r3, #1
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d903      	bls.n	80078ba <get_ldnumber+0x34>
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b3a      	cmp	r3, #58	@ 0x3a
 80078b8:	d1f4      	bne.n	80078a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b3a      	cmp	r3, #58	@ 0x3a
 80078c0:	d11c      	bne.n	80078fc <get_ldnumber+0x76>
			tp = *path;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	60fa      	str	r2, [r7, #12]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	3b30      	subs	r3, #48	@ 0x30
 80078d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b09      	cmp	r3, #9
 80078d8:	d80e      	bhi.n	80078f8 <get_ldnumber+0x72>
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d10a      	bne.n	80078f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d107      	bne.n	80078f8 <get_ldnumber+0x72>
					vol = (int)i;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	3301      	adds	r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	e002      	b.n	8007902 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80078fc:	2300      	movs	r3, #0
 80078fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007900:	693b      	ldr	r3, [r7, #16]
}
 8007902:	4618      	mov	r0, r3
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	70da      	strb	r2, [r3, #3]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff f8dc 	bl	8006ae8 <move_window>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <check_fs+0x2a>
 8007936:	2304      	movs	r3, #4
 8007938:	e038      	b.n	80079ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3330      	adds	r3, #48	@ 0x30
 800793e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe fe20 	bl	8006588 <ld_word>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007950:	429a      	cmp	r2, r3
 8007952:	d001      	beq.n	8007958 <check_fs+0x48>
 8007954:	2303      	movs	r3, #3
 8007956:	e029      	b.n	80079ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800795e:	2be9      	cmp	r3, #233	@ 0xe9
 8007960:	d009      	beq.n	8007976 <check_fs+0x66>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007968:	2beb      	cmp	r3, #235	@ 0xeb
 800796a:	d11e      	bne.n	80079aa <check_fs+0x9a>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007972:	2b90      	cmp	r3, #144	@ 0x90
 8007974:	d119      	bne.n	80079aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3330      	adds	r3, #48	@ 0x30
 800797a:	3336      	adds	r3, #54	@ 0x36
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe fe1b 	bl	80065b8 <ld_dword>
 8007982:	4603      	mov	r3, r0
 8007984:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007988:	4a0a      	ldr	r2, [pc, #40]	@ (80079b4 <check_fs+0xa4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d101      	bne.n	8007992 <check_fs+0x82>
 800798e:	2300      	movs	r3, #0
 8007990:	e00c      	b.n	80079ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3330      	adds	r3, #48	@ 0x30
 8007996:	3352      	adds	r3, #82	@ 0x52
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe fe0d 	bl	80065b8 <ld_dword>
 800799e:	4603      	mov	r3, r0
 80079a0:	4a05      	ldr	r2, [pc, #20]	@ (80079b8 <check_fs+0xa8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d101      	bne.n	80079aa <check_fs+0x9a>
 80079a6:	2300      	movs	r3, #0
 80079a8:	e000      	b.n	80079ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80079aa:	2302      	movs	r3, #2
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	00544146 	.word	0x00544146
 80079b8:	33544146 	.word	0x33544146

080079bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b096      	sub	sp, #88	@ 0x58
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f7ff ff58 	bl	8007886 <get_ldnumber>
 80079d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80079d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	da01      	bge.n	80079e2 <find_volume+0x26>
 80079de:	230b      	movs	r3, #11
 80079e0:	e22d      	b.n	8007e3e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80079e2:	4aa1      	ldr	r2, [pc, #644]	@ (8007c68 <find_volume+0x2ac>)
 80079e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <find_volume+0x3a>
 80079f2:	230c      	movs	r3, #12
 80079f4:	e223      	b.n	8007e3e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	f023 0301 	bic.w	r3, r3, #1
 8007a02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01a      	beq.n	8007a42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fd1b 	bl	800644c <disk_status>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10c      	bne.n	8007a42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d007      	beq.n	8007a3e <find_volume+0x82>
 8007a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007a3a:	230a      	movs	r3, #10
 8007a3c:	e1ff      	b.n	8007e3e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e1fd      	b.n	8007e3e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a44:	2200      	movs	r2, #0
 8007a46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a52:	785b      	ldrb	r3, [r3, #1]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe fd13 	bl	8006480 <disk_initialize>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e1e6      	b.n	8007e3e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d007      	beq.n	8007a86 <find_volume+0xca>
 8007a76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007a82:	230a      	movs	r3, #10
 8007a84:	e1db      	b.n	8007e3e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a8e:	f7ff ff3f 	bl	8007910 <check_fs>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d149      	bne.n	8007b34 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aa4:	e01e      	b.n	8007ae4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007ab4:	4413      	add	r3, r2
 8007ab6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	3304      	adds	r3, #4
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d006      	beq.n	8007ad0 <find_volume+0x114>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fd76 	bl	80065b8 <ld_dword>
 8007acc:	4602      	mov	r2, r0
 8007ace:	e000      	b.n	8007ad2 <find_volume+0x116>
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	3358      	adds	r3, #88	@ 0x58
 8007ad8:	443b      	add	r3, r7
 8007ada:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d9dd      	bls.n	8007aa6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007aea:	2300      	movs	r3, #0
 8007aec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <find_volume+0x13e>
 8007af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007af6:	3b01      	subs	r3, #1
 8007af8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	3358      	adds	r3, #88	@ 0x58
 8007b00:	443b      	add	r3, r7
 8007b02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007b06:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <find_volume+0x15e>
 8007b0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b12:	f7ff fefd 	bl	8007910 <check_fs>
 8007b16:	4603      	mov	r3, r0
 8007b18:	e000      	b.n	8007b1c <find_volume+0x160>
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007b20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d905      	bls.n	8007b34 <find_volume+0x178>
 8007b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d9e2      	bls.n	8007afa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d101      	bne.n	8007b40 <find_volume+0x184>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e17e      	b.n	8007e3e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d901      	bls.n	8007b4c <find_volume+0x190>
 8007b48:	230d      	movs	r3, #13
 8007b4a:	e178      	b.n	8007e3e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4e:	3330      	adds	r3, #48	@ 0x30
 8007b50:	330b      	adds	r3, #11
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fd18 	bl	8006588 <ld_word>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b5e:	d001      	beq.n	8007b64 <find_volume+0x1a8>
 8007b60:	230d      	movs	r3, #13
 8007b62:	e16c      	b.n	8007e3e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b66:	3330      	adds	r3, #48	@ 0x30
 8007b68:	3316      	adds	r3, #22
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe fd0c 	bl	8006588 <ld_word>
 8007b70:	4603      	mov	r3, r0
 8007b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <find_volume+0x1cc>
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7c:	3330      	adds	r3, #48	@ 0x30
 8007b7e:	3324      	adds	r3, #36	@ 0x24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fd19 	bl	80065b8 <ld_dword>
 8007b86:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b8c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b90:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9a:	789b      	ldrb	r3, [r3, #2]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d005      	beq.n	8007bac <find_volume+0x1f0>
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	789b      	ldrb	r3, [r3, #2]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d001      	beq.n	8007bac <find_volume+0x1f0>
 8007ba8:	230d      	movs	r3, #13
 8007baa:	e148      	b.n	8007e3e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bae:	789b      	ldrb	r3, [r3, #2]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
 8007bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc8:	895b      	ldrh	r3, [r3, #10]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <find_volume+0x224>
 8007bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd0:	895b      	ldrh	r3, [r3, #10]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd6:	895b      	ldrh	r3, [r3, #10]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	4013      	ands	r3, r2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <find_volume+0x228>
 8007be0:	230d      	movs	r3, #13
 8007be2:	e12c      	b.n	8007e3e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be6:	3330      	adds	r3, #48	@ 0x30
 8007be8:	3311      	adds	r3, #17
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fccc 	bl	8006588 <ld_word>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfa:	891b      	ldrh	r3, [r3, #8]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <find_volume+0x24e>
 8007c06:	230d      	movs	r3, #13
 8007c08:	e119      	b.n	8007e3e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0c:	3330      	adds	r3, #48	@ 0x30
 8007c0e:	3313      	adds	r3, #19
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fcb9 	bl	8006588 <ld_word>
 8007c16:	4603      	mov	r3, r0
 8007c18:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d106      	bne.n	8007c2e <find_volume+0x272>
 8007c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c22:	3330      	adds	r3, #48	@ 0x30
 8007c24:	3320      	adds	r3, #32
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fcc6 	bl	80065b8 <ld_dword>
 8007c2c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c30:	3330      	adds	r3, #48	@ 0x30
 8007c32:	330e      	adds	r3, #14
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fe fca7 	bl	8006588 <ld_word>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007c3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <find_volume+0x28c>
 8007c44:	230d      	movs	r3, #13
 8007c46:	e0fa      	b.n	8007e3e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007c48:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c4c:	4413      	add	r3, r2
 8007c4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c50:	8912      	ldrh	r2, [r2, #8]
 8007c52:	0912      	lsrs	r2, r2, #4
 8007c54:	b292      	uxth	r2, r2
 8007c56:	4413      	add	r3, r2
 8007c58:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d204      	bcs.n	8007c6c <find_volume+0x2b0>
 8007c62:	230d      	movs	r3, #13
 8007c64:	e0eb      	b.n	8007e3e <find_volume+0x482>
 8007c66:	bf00      	nop
 8007c68:	20000f4c 	.word	0x20000f4c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007c6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c74:	8952      	ldrh	r2, [r2, #10]
 8007c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c7a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <find_volume+0x2ca>
 8007c82:	230d      	movs	r3, #13
 8007c84:	e0db      	b.n	8007e3e <find_volume+0x482>
		fmt = FS_FAT32;
 8007c86:	2303      	movs	r3, #3
 8007c88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d802      	bhi.n	8007c9c <find_volume+0x2e0>
 8007c96:	2302      	movs	r3, #2
 8007c98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d802      	bhi.n	8007cac <find_volume+0x2f0>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	1c9a      	adds	r2, r3, #2
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007cb8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007cba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cbe:	441a      	add	r2, r3
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007cc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	441a      	add	r2, r3
 8007cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ccc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007cce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d11e      	bne.n	8007d14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd8:	3330      	adds	r3, #48	@ 0x30
 8007cda:	332a      	adds	r3, #42	@ 0x2a
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe fc53 	bl	8006588 <ld_word>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <find_volume+0x330>
 8007ce8:	230d      	movs	r3, #13
 8007cea:	e0a8      	b.n	8007e3e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cee:	891b      	ldrh	r3, [r3, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <find_volume+0x33c>
 8007cf4:	230d      	movs	r3, #13
 8007cf6:	e0a2      	b.n	8007e3e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	3330      	adds	r3, #48	@ 0x30
 8007cfc:	332c      	adds	r3, #44	@ 0x2c
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fc5a 	bl	80065b8 <ld_dword>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d08:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d12:	e01f      	b.n	8007d54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d16:	891b      	ldrh	r3, [r3, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <find_volume+0x364>
 8007d1c:	230d      	movs	r3, #13
 8007d1e:	e08e      	b.n	8007e3e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	6a1a      	ldr	r2, [r3, #32]
 8007d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d26:	441a      	add	r2, r3
 8007d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d103      	bne.n	8007d3c <find_volume+0x380>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	e00a      	b.n	8007d52 <find_volume+0x396>
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	695a      	ldr	r2, [r3, #20]
 8007d40:	4613      	mov	r3, r2
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	4413      	add	r3, r2
 8007d46:	085a      	lsrs	r2, r3, #1
 8007d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007d52:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	699a      	ldr	r2, [r3, #24]
 8007d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d5a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007d5e:	0a5b      	lsrs	r3, r3, #9
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d201      	bcs.n	8007d68 <find_volume+0x3ac>
 8007d64:	230d      	movs	r3, #13
 8007d66:	e06a      	b.n	8007e3e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	611a      	str	r2, [r3, #16]
 8007d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d76:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	2280      	movs	r2, #128	@ 0x80
 8007d7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007d7e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d149      	bne.n	8007e1a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d88:	3330      	adds	r3, #48	@ 0x30
 8007d8a:	3330      	adds	r3, #48	@ 0x30
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe fbfb 	bl	8006588 <ld_word>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d140      	bne.n	8007e1a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007da0:	f7fe fea2 	bl	8006ae8 <move_window>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d137      	bne.n	8007e1a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dac:	2200      	movs	r2, #0
 8007dae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	3330      	adds	r3, #48	@ 0x30
 8007db4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe fbe5 	bl	8006588 <ld_word>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d127      	bne.n	8007e1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dcc:	3330      	adds	r3, #48	@ 0x30
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fbf2 	bl	80065b8 <ld_dword>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8007e48 <find_volume+0x48c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d11e      	bne.n	8007e1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dde:	3330      	adds	r3, #48	@ 0x30
 8007de0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fbe7 	bl	80065b8 <ld_dword>
 8007dea:	4603      	mov	r3, r0
 8007dec:	4a17      	ldr	r2, [pc, #92]	@ (8007e4c <find_volume+0x490>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d113      	bne.n	8007e1a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df4:	3330      	adds	r3, #48	@ 0x30
 8007df6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fbdc 	bl	80065b8 <ld_dword>
 8007e00:	4602      	mov	r2, r0
 8007e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e04:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	3330      	adds	r3, #48	@ 0x30
 8007e0a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fbd2 	bl	80065b8 <ld_dword>
 8007e14:	4602      	mov	r2, r0
 8007e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e18:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007e20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007e22:	4b0b      	ldr	r3, [pc, #44]	@ (8007e50 <find_volume+0x494>)
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	3301      	adds	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <find_volume+0x494>)
 8007e2c:	801a      	strh	r2, [r3, #0]
 8007e2e:	4b08      	ldr	r3, [pc, #32]	@ (8007e50 <find_volume+0x494>)
 8007e30:	881a      	ldrh	r2, [r3, #0]
 8007e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e34:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007e36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007e38:	f7fe fdee 	bl	8006a18 <clear_lock>
#endif
	return FR_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3758      	adds	r7, #88	@ 0x58
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	41615252 	.word	0x41615252
 8007e4c:	61417272 	.word	0x61417272
 8007e50:	20000f50 	.word	0x20000f50

08007e54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007e5e:	2309      	movs	r3, #9
 8007e60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01c      	beq.n	8007ea2 <validate+0x4e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d018      	beq.n	8007ea2 <validate+0x4e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d013      	beq.n	8007ea2 <validate+0x4e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	889a      	ldrh	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d10c      	bne.n	8007ea2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fadc 	bl	800644c <disk_status>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <validate+0x4e>
			res = FR_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <validate+0x5a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	e000      	b.n	8007eb0 <validate+0x5c>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	6013      	str	r3, [r2, #0]
	return res;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007ed2:	f107 0310 	add.w	r3, r7, #16
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff fcd5 	bl	8007886 <get_ldnumber>
 8007edc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da01      	bge.n	8007ee8 <f_mount+0x28>
 8007ee4:	230b      	movs	r3, #11
 8007ee6:	e02b      	b.n	8007f40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ee8:	4a17      	ldr	r2, [pc, #92]	@ (8007f48 <f_mount+0x88>)
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007ef8:	69b8      	ldr	r0, [r7, #24]
 8007efa:	f7fe fd8d 	bl	8006a18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	490d      	ldr	r1, [pc, #52]	@ (8007f48 <f_mount+0x88>)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <f_mount+0x66>
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d001      	beq.n	8007f2a <f_mount+0x6a>
 8007f26:	2300      	movs	r3, #0
 8007f28:	e00a      	b.n	8007f40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007f2a:	f107 010c 	add.w	r1, r7, #12
 8007f2e:	f107 0308 	add.w	r3, r7, #8
 8007f32:	2200      	movs	r2, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fd41 	bl	80079bc <find_volume>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20000f4c 	.word	0x20000f4c

08007f4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b098      	sub	sp, #96	@ 0x60
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <f_open+0x18>
 8007f60:	2309      	movs	r3, #9
 8007f62:	e1a9      	b.n	80082b8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007f6c:	79fa      	ldrb	r2, [r7, #7]
 8007f6e:	f107 0110 	add.w	r1, r7, #16
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fd20 	bl	80079bc <find_volume>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007f82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 818d 	bne.w	80082a6 <f_open+0x35a>
		dj.obj.fs = fs;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	f107 0314 	add.w	r3, r7, #20
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff fc03 	bl	80077a4 <follow_path>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007fa4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d118      	bne.n	8007fde <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007fac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007fb0:	b25b      	sxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da03      	bge.n	8007fbe <f_open+0x72>
				res = FR_INVALID_NAME;
 8007fb6:	2306      	movs	r3, #6
 8007fb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007fbc:	e00f      	b.n	8007fde <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	bf8c      	ite	hi
 8007fc4:	2301      	movhi	r3, #1
 8007fc6:	2300      	movls	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f107 0314 	add.w	r3, r7, #20
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fbd8 	bl	8006788 <chk_lock>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	f003 031c 	and.w	r3, r3, #28
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d07f      	beq.n	80080e8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d017      	beq.n	8008020 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d10e      	bne.n	8008016 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007ff8:	f7fe fc22 	bl	8006840 <enq_lock>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d006      	beq.n	8008010 <f_open+0xc4>
 8008002:	f107 0314 	add.w	r3, r7, #20
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fb06 	bl	8007618 <dir_register>
 800800c:	4603      	mov	r3, r0
 800800e:	e000      	b.n	8008012 <f_open+0xc6>
 8008010:	2312      	movs	r3, #18
 8008012:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	f043 0308 	orr.w	r3, r3, #8
 800801c:	71fb      	strb	r3, [r7, #7]
 800801e:	e010      	b.n	8008042 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008020:	7ebb      	ldrb	r3, [r7, #26]
 8008022:	f003 0311 	and.w	r3, r3, #17
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <f_open+0xe6>
					res = FR_DENIED;
 800802a:	2307      	movs	r3, #7
 800802c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008030:	e007      	b.n	8008042 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <f_open+0xf6>
 800803c:	2308      	movs	r3, #8
 800803e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008042:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008046:	2b00      	cmp	r3, #0
 8008048:	d168      	bne.n	800811c <f_open+0x1d0>
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d063      	beq.n	800811c <f_open+0x1d0>
				dw = GET_FATTIME();
 8008054:	f7fe f99c 	bl	8006390 <get_fattime>
 8008058:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800805a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805c:	330e      	adds	r3, #14
 800805e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008060:	4618      	mov	r0, r3
 8008062:	f7fe fae7 	bl	8006634 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008068:	3316      	adds	r3, #22
 800806a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800806c:	4618      	mov	r0, r3
 800806e:	f7fe fae1 	bl	8006634 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008074:	330b      	adds	r3, #11
 8008076:	2220      	movs	r2, #32
 8008078:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff fa35 	bl	80074f0 <ld_clust>
 8008086:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800808c:	2200      	movs	r2, #0
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff fa4d 	bl	800752e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008096:	331c      	adds	r3, #28
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe faca 	bl	8006634 <st_dword>
					fs->wflag = 1;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2201      	movs	r2, #1
 80080a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80080a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d037      	beq.n	800811c <f_open+0x1d0>
						dw = fs->winsect;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80080b2:	f107 0314 	add.w	r3, r7, #20
 80080b6:	2200      	movs	r2, #0
 80080b8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe ff60 	bl	8006f80 <remove_chain>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80080c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d126      	bne.n	800811c <f_open+0x1d0>
							res = move_window(fs, dw);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fd08 	bl	8006ae8 <move_window>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080e2:	3a01      	subs	r2, #1
 80080e4:	60da      	str	r2, [r3, #12]
 80080e6:	e019      	b.n	800811c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80080e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d115      	bne.n	800811c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80080f0:	7ebb      	ldrb	r3, [r7, #26]
 80080f2:	f003 0310 	and.w	r3, r3, #16
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <f_open+0x1b6>
					res = FR_NO_FILE;
 80080fa:	2304      	movs	r3, #4
 80080fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008100:	e00c      	b.n	800811c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <f_open+0x1d0>
 800810c:	7ebb      	ldrb	r3, [r7, #26]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <f_open+0x1d0>
						res = FR_DENIED;
 8008116:	2307      	movs	r3, #7
 8008118:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800811c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008120:	2b00      	cmp	r3, #0
 8008122:	d126      	bne.n	8008172 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008134:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800813e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	2b01      	cmp	r3, #1
 8008148:	bf8c      	ite	hi
 800814a:	2301      	movhi	r3, #1
 800814c:	2300      	movls	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	f107 0314 	add.w	r3, r7, #20
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f7fe fb93 	bl	8006884 <inc_lock>
 800815e:	4602      	mov	r2, r0
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <f_open+0x226>
 800816c:	2302      	movs	r3, #2
 800816e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008172:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008176:	2b00      	cmp	r3, #0
 8008178:	f040 8095 	bne.w	80082a6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff f9b4 	bl	80074f0 <ld_clust>
 8008188:	4602      	mov	r2, r0
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800818e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008190:	331c      	adds	r3, #28
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe fa10 	bl	80065b8 <ld_dword>
 8008198:	4602      	mov	r2, r0
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	88da      	ldrh	r2, [r3, #6]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	79fa      	ldrb	r2, [r7, #7]
 80081b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3330      	adds	r3, #48	@ 0x30
 80081ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe fa7a 	bl	80066ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d060      	beq.n	80082a6 <f_open+0x35a>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d05c      	beq.n	80082a6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	895b      	ldrh	r3, [r3, #10]
 80081f8:	025b      	lsls	r3, r3, #9
 80081fa:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	657b      	str	r3, [r7, #84]	@ 0x54
 8008208:	e016      	b.n	8008238 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe fd25 	bl	8006c5e <get_fat>
 8008214:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008216:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008218:	2b01      	cmp	r3, #1
 800821a:	d802      	bhi.n	8008222 <f_open+0x2d6>
 800821c:	2302      	movs	r3, #2
 800821e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008228:	d102      	bne.n	8008230 <f_open+0x2e4>
 800822a:	2301      	movs	r3, #1
 800822c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008230:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	657b      	str	r3, [r7, #84]	@ 0x54
 8008238:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <f_open+0x2fc>
 8008240:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008244:	429a      	cmp	r2, r3
 8008246:	d8e0      	bhi.n	800820a <f_open+0x2be>
				}
				fp->clust = clst;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800824c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800824e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008252:	2b00      	cmp	r3, #0
 8008254:	d127      	bne.n	80082a6 <f_open+0x35a>
 8008256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825c:	2b00      	cmp	r3, #0
 800825e:	d022      	beq.n	80082a6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe fcdb 	bl	8006c20 <clust2sect>
 800826a:	6478      	str	r0, [r7, #68]	@ 0x44
 800826c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800826e:	2b00      	cmp	r3, #0
 8008270:	d103      	bne.n	800827a <f_open+0x32e>
						res = FR_INT_ERR;
 8008272:	2302      	movs	r3, #2
 8008274:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008278:	e015      	b.n	80082a6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800827a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800827c:	0a5a      	lsrs	r2, r3, #9
 800827e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008280:	441a      	add	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	7858      	ldrb	r0, [r3, #1]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a1a      	ldr	r2, [r3, #32]
 8008294:	2301      	movs	r3, #1
 8008296:	f7fe f919 	bl	80064cc <disk_read>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <f_open+0x35a>
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80082a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <f_open+0x368>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80082b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3760      	adds	r7, #96	@ 0x60
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08e      	sub	sp, #56	@ 0x38
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f107 0214 	add.w	r2, r7, #20
 80082de:	4611      	mov	r1, r2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fdb7 	bl	8007e54 <validate>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80082ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d107      	bne.n	8008304 <f_read+0x44>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	7d5b      	ldrb	r3, [r3, #21]
 80082f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80082fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <f_read+0x4a>
 8008304:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008308:	e115      	b.n	8008536 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	7d1b      	ldrb	r3, [r3, #20]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <f_read+0x5a>
 8008316:	2307      	movs	r3, #7
 8008318:	e10d      	b.n	8008536 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	429a      	cmp	r2, r3
 800832c:	f240 80fe 	bls.w	800852c <f_read+0x26c>
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008334:	e0fa      	b.n	800852c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833e:	2b00      	cmp	r3, #0
 8008340:	f040 80c6 	bne.w	80084d0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	0a5b      	lsrs	r3, r3, #9
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	8952      	ldrh	r2, [r2, #10]
 800834e:	3a01      	subs	r2, #1
 8008350:	4013      	ands	r3, r2
 8008352:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d12f      	bne.n	80083ba <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d103      	bne.n	800836a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	633b      	str	r3, [r7, #48]	@ 0x30
 8008368:	e013      	b.n	8008392 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	4619      	mov	r1, r3
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7fe fefe 	bl	800717a <clmt_clust>
 800837e:	6338      	str	r0, [r7, #48]	@ 0x30
 8008380:	e007      	b.n	8008392 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	4619      	mov	r1, r3
 800838a:	4610      	mov	r0, r2
 800838c:	f7fe fc67 	bl	8006c5e <get_fat>
 8008390:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	2b01      	cmp	r3, #1
 8008396:	d804      	bhi.n	80083a2 <f_read+0xe2>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2202      	movs	r2, #2
 800839c:	755a      	strb	r2, [r3, #21]
 800839e:	2302      	movs	r3, #2
 80083a0:	e0c9      	b.n	8008536 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a8:	d104      	bne.n	80083b4 <f_read+0xf4>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	755a      	strb	r2, [r3, #21]
 80083b0:	2301      	movs	r3, #1
 80083b2:	e0c0      	b.n	8008536 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083b8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7fe fc2c 	bl	8006c20 <clust2sect>
 80083c8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d104      	bne.n	80083da <f_read+0x11a>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2202      	movs	r2, #2
 80083d4:	755a      	strb	r2, [r3, #21]
 80083d6:	2302      	movs	r3, #2
 80083d8:	e0ad      	b.n	8008536 <f_read+0x276>
			sect += csect;
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	0a5b      	lsrs	r3, r3, #9
 80083e6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80083e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d039      	beq.n	8008462 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	4413      	add	r3, r2
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	8952      	ldrh	r2, [r2, #10]
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d905      	bls.n	8008408 <f_read+0x148>
					cc = fs->csize - csect;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	895b      	ldrh	r3, [r3, #10]
 8008400:	461a      	mov	r2, r3
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	7858      	ldrb	r0, [r3, #1]
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008412:	f7fe f85b 	bl	80064cc <disk_read>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <f_read+0x166>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	755a      	strb	r2, [r3, #21]
 8008422:	2301      	movs	r3, #1
 8008424:	e087      	b.n	8008536 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	7d1b      	ldrb	r3, [r3, #20]
 800842a:	b25b      	sxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	da14      	bge.n	800845a <f_read+0x19a>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a1a      	ldr	r2, [r3, #32]
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800843a:	429a      	cmp	r2, r3
 800843c:	d90d      	bls.n	800845a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6a1a      	ldr	r2, [r3, #32]
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	025b      	lsls	r3, r3, #9
 8008448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844a:	18d0      	adds	r0, r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3330      	adds	r3, #48	@ 0x30
 8008450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008454:	4619      	mov	r1, r3
 8008456:	f7fe f919 	bl	800668c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800845a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845c:	025b      	lsls	r3, r3, #9
 800845e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008460:	e050      	b.n	8008504 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	429a      	cmp	r2, r3
 800846a:	d02e      	beq.n	80084ca <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	7d1b      	ldrb	r3, [r3, #20]
 8008470:	b25b      	sxtb	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	da18      	bge.n	80084a8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	7858      	ldrb	r0, [r3, #1]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6a1a      	ldr	r2, [r3, #32]
 8008484:	2301      	movs	r3, #1
 8008486:	f7fe f841 	bl	800650c <disk_write>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <f_read+0x1da>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	755a      	strb	r2, [r3, #21]
 8008496:	2301      	movs	r3, #1
 8008498:	e04d      	b.n	8008536 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	7d1b      	ldrb	r3, [r3, #20]
 800849e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	7858      	ldrb	r0, [r3, #1]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80084b2:	2301      	movs	r3, #1
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	f7fe f809 	bl	80064cc <disk_read>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d004      	beq.n	80084ca <f_read+0x20a>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	755a      	strb	r2, [r3, #21]
 80084c6:	2301      	movs	r3, #1
 80084c8:	e035      	b.n	8008536 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80084dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80084de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d901      	bls.n	80084ea <f_read+0x22a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f8:	4413      	add	r3, r2
 80084fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084fc:	4619      	mov	r1, r3
 80084fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008500:	f7fe f8c4 	bl	800668c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	4413      	add	r3, r2
 800850a:	627b      	str	r3, [r7, #36]	@ 0x24
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008512:	441a      	add	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	619a      	str	r2, [r3, #24]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851e:	441a      	add	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f47f af01 	bne.w	8008336 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3738      	adds	r7, #56	@ 0x38
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b086      	sub	sp, #24
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f107 0208 	add.w	r2, r7, #8
 800854c:	4611      	mov	r1, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff fc80 	bl	8007e54 <validate>
 8008554:	4603      	mov	r3, r0
 8008556:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d168      	bne.n	8008630 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	7d1b      	ldrb	r3, [r3, #20]
 8008562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d062      	beq.n	8008630 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7d1b      	ldrb	r3, [r3, #20]
 800856e:	b25b      	sxtb	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	da15      	bge.n	80085a0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	7858      	ldrb	r0, [r3, #1]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1a      	ldr	r2, [r3, #32]
 8008582:	2301      	movs	r3, #1
 8008584:	f7fd ffc2 	bl	800650c <disk_write>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <f_sync+0x54>
 800858e:	2301      	movs	r3, #1
 8008590:	e04f      	b.n	8008632 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	7d1b      	ldrb	r3, [r3, #20]
 8008596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800859a:	b2da      	uxtb	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80085a0:	f7fd fef6 	bl	8006390 <get_fattime>
 80085a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ac:	4619      	mov	r1, r3
 80085ae:	4610      	mov	r0, r2
 80085b0:	f7fe fa9a 	bl	8006ae8 <move_window>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d138      	bne.n	8008630 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	330b      	adds	r3, #11
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	330b      	adds	r3, #11
 80085ce:	f042 0220 	orr.w	r2, r2, #32
 80085d2:	b2d2      	uxtb	r2, r2
 80085d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	461a      	mov	r2, r3
 80085e0:	68f9      	ldr	r1, [r7, #12]
 80085e2:	f7fe ffa4 	bl	800752e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f103 021c 	add.w	r2, r3, #28
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7fe f81e 	bl	8006634 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3316      	adds	r3, #22
 80085fc:	6939      	ldr	r1, [r7, #16]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe f818 	bl	8006634 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3312      	adds	r3, #18
 8008608:	2100      	movs	r1, #0
 800860a:	4618      	mov	r0, r3
 800860c:	f7fd fff7 	bl	80065fe <st_word>
					fs->wflag = 1;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2201      	movs	r2, #1
 8008614:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fa93 	bl	8006b44 <sync_fs>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7d1b      	ldrb	r3, [r3, #20]
 8008626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800862a:	b2da      	uxtb	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008630:	7dfb      	ldrb	r3, [r7, #23]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff ff7b 	bl	800853e <f_sync>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d118      	bne.n	8008684 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f107 0208 	add.w	r2, r7, #8
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff fbfa 	bl	8007e54 <validate>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10c      	bne.n	8008684 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	4618      	mov	r0, r3
 8008670:	f7fe f996 	bl	80069a0 <dec_lock>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d102      	bne.n	8008684 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008684:	7bfb      	ldrb	r3, [r7, #15]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b090      	sub	sp, #64	@ 0x40
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f107 0208 	add.w	r2, r7, #8
 800869e:	4611      	mov	r1, r2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff fbd7 	bl	8007e54 <validate>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80086ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d103      	bne.n	80086bc <f_lseek+0x2e>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	7d5b      	ldrb	r3, [r3, #21]
 80086b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80086bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <f_lseek+0x3c>
 80086c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80086c8:	e1e6      	b.n	8008a98 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 80d1 	beq.w	8008876 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086da:	d15a      	bne.n	8008792 <f_lseek+0x104>
			tbl = fp->cltbl;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	1d1a      	adds	r2, r3, #4
 80086e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	2302      	movs	r3, #2
 80086ee:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80086f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d03a      	beq.n	8008772 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	613b      	str	r3, [r7, #16]
 8008700:	2300      	movs	r3, #0
 8008702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008706:	3302      	adds	r3, #2
 8008708:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008710:	3301      	adds	r3, #1
 8008712:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe faa0 	bl	8006c5e <get_fat>
 800871e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008722:	2b01      	cmp	r3, #1
 8008724:	d804      	bhi.n	8008730 <f_lseek+0xa2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2202      	movs	r2, #2
 800872a:	755a      	strb	r2, [r3, #21]
 800872c:	2302      	movs	r3, #2
 800872e:	e1b3      	b.n	8008a98 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d104      	bne.n	8008742 <f_lseek+0xb4>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	755a      	strb	r2, [r3, #21]
 800873e:	2301      	movs	r3, #1
 8008740:	e1aa      	b.n	8008a98 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3301      	adds	r3, #1
 8008746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008748:	429a      	cmp	r2, r3
 800874a:	d0de      	beq.n	800870a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800874c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	429a      	cmp	r2, r3
 8008752:	d809      	bhi.n	8008768 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	1d1a      	adds	r2, r3, #4
 8008758:	627a      	str	r2, [r7, #36]	@ 0x24
 800875a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	1d1a      	adds	r2, r3, #4
 8008762:	627a      	str	r2, [r7, #36]	@ 0x24
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800876e:	429a      	cmp	r2, r3
 8008770:	d3c4      	bcc.n	80086fc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008778:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800877a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	429a      	cmp	r2, r3
 8008780:	d803      	bhi.n	800878a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e184      	b.n	8008a94 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800878a:	2311      	movs	r3, #17
 800878c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008790:	e180      	b.n	8008a94 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d902      	bls.n	80087a2 <f_lseek+0x114>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 8172 	beq.w	8008a94 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fe fcdf 	bl	800717a <clmt_clust>
 80087bc:	4602      	mov	r2, r0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f7fe fa28 	bl	8006c20 <clust2sect>
 80087d0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d104      	bne.n	80087e2 <f_lseek+0x154>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	755a      	strb	r2, [r3, #21]
 80087de:	2302      	movs	r3, #2
 80087e0:	e15a      	b.n	8008a98 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	0a5b      	lsrs	r3, r3, #9
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	8952      	ldrh	r2, [r2, #10]
 80087ec:	3a01      	subs	r2, #1
 80087ee:	4013      	ands	r3, r2
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	4413      	add	r3, r2
 80087f4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 8148 	beq.w	8008a94 <f_lseek+0x406>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	429a      	cmp	r2, r3
 800880c:	f000 8142 	beq.w	8008a94 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7d1b      	ldrb	r3, [r3, #20]
 8008814:	b25b      	sxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	da18      	bge.n	800884c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	7858      	ldrb	r0, [r3, #1]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1a      	ldr	r2, [r3, #32]
 8008828:	2301      	movs	r3, #1
 800882a:	f7fd fe6f 	bl	800650c <disk_write>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <f_lseek+0x1b0>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	755a      	strb	r2, [r3, #21]
 800883a:	2301      	movs	r3, #1
 800883c:	e12c      	b.n	8008a98 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	7d1b      	ldrb	r3, [r3, #20]
 8008842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008846:	b2da      	uxtb	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	7858      	ldrb	r0, [r3, #1]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008856:	2301      	movs	r3, #1
 8008858:	69ba      	ldr	r2, [r7, #24]
 800885a:	f7fd fe37 	bl	80064cc <disk_read>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <f_lseek+0x1e0>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	755a      	strb	r2, [r3, #21]
 800886a:	2301      	movs	r3, #1
 800886c:	e114      	b.n	8008a98 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	621a      	str	r2, [r3, #32]
 8008874:	e10e      	b.n	8008a94 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d908      	bls.n	8008892 <f_lseek+0x204>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	7d1b      	ldrb	r3, [r3, #20]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d102      	bne.n	8008892 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	637b      	str	r3, [r7, #52]	@ 0x34
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088a0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 80a7 	beq.w	80089f8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	895b      	ldrh	r3, [r3, #10]
 80088ae:	025b      	lsls	r3, r3, #9
 80088b0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01b      	beq.n	80088f0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	1e5a      	subs	r2, r3, #1
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	fbb2 f2f3 	udiv	r2, r2, r3
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	1e59      	subs	r1, r3, #1
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d30f      	bcc.n	80088f0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	1e5a      	subs	r2, r3, #1
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	425b      	negs	r3, r3
 80088d8:	401a      	ands	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088ee:	e022      	b.n	8008936 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80088f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d119      	bne.n	8008930 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2100      	movs	r1, #0
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fba2 	bl	800704a <create_chain>
 8008906:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	2b01      	cmp	r3, #1
 800890c:	d104      	bne.n	8008918 <f_lseek+0x28a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2202      	movs	r2, #2
 8008912:	755a      	strb	r2, [r3, #21]
 8008914:	2302      	movs	r3, #2
 8008916:	e0bf      	b.n	8008a98 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891e:	d104      	bne.n	800892a <f_lseek+0x29c>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	755a      	strb	r2, [r3, #21]
 8008926:	2301      	movs	r3, #1
 8008928:	e0b6      	b.n	8008a98 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800892e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008934:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008938:	2b00      	cmp	r3, #0
 800893a:	d05d      	beq.n	80089f8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800893c:	e03a      	b.n	80089b4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	603b      	str	r3, [r7, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699a      	ldr	r2, [r3, #24]
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	441a      	add	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	7d1b      	ldrb	r3, [r3, #20]
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fb71 	bl	800704a <create_chain>
 8008968:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800896a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d108      	bne.n	8008982 <f_lseek+0x2f4>
							ofs = 0; break;
 8008970:	2300      	movs	r3, #0
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	e022      	b.n	80089bc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe f96f 	bl	8006c5e <get_fat>
 8008980:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008988:	d104      	bne.n	8008994 <f_lseek+0x306>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	755a      	strb	r2, [r3, #21]
 8008990:	2301      	movs	r3, #1
 8008992:	e081      	b.n	8008a98 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008996:	2b01      	cmp	r3, #1
 8008998:	d904      	bls.n	80089a4 <f_lseek+0x316>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d304      	bcc.n	80089ae <f_lseek+0x320>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2202      	movs	r2, #2
 80089a8:	755a      	strb	r2, [r3, #21]
 80089aa:	2302      	movs	r3, #2
 80089ac:	e074      	b.n	8008a98 <f_lseek+0x40a>
					fp->clust = clst;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089b2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d8c0      	bhi.n	800893e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	699a      	ldr	r2, [r3, #24]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	441a      	add	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d012      	beq.n	80089f8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe f922 	bl	8006c20 <clust2sect>
 80089dc:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80089de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <f_lseek+0x360>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	755a      	strb	r2, [r3, #21]
 80089ea:	2302      	movs	r3, #2
 80089ec:	e054      	b.n	8008a98 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	0a5b      	lsrs	r3, r3, #9
 80089f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089f4:	4413      	add	r3, r2
 80089f6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699a      	ldr	r2, [r3, #24]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d90a      	bls.n	8008a1a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	699a      	ldr	r2, [r3, #24]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7d1b      	ldrb	r3, [r3, #20]
 8008a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d036      	beq.n	8008a94 <f_lseek+0x406>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d031      	beq.n	8008a94 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	7d1b      	ldrb	r3, [r3, #20]
 8008a34:	b25b      	sxtb	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	da18      	bge.n	8008a6c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	7858      	ldrb	r0, [r3, #1]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a1a      	ldr	r2, [r3, #32]
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f7fd fd5f 	bl	800650c <disk_write>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <f_lseek+0x3d0>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	755a      	strb	r2, [r3, #21]
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e01c      	b.n	8008a98 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	7d1b      	ldrb	r3, [r3, #20]
 8008a62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	7858      	ldrb	r0, [r3, #1]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a76:	2301      	movs	r3, #1
 8008a78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a7a:	f7fd fd27 	bl	80064cc <disk_read>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d004      	beq.n	8008a8e <f_lseek+0x400>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	755a      	strb	r2, [r3, #21]
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e004      	b.n	8008a98 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a92:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008a94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3740      	adds	r7, #64	@ 0x40
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8008b34 <FATFS_LinkDriverEx+0x94>)
 8008ab8:	7a5b      	ldrb	r3, [r3, #9]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d131      	bne.n	8008b24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8008b34 <FATFS_LinkDriverEx+0x94>)
 8008ac2:	7a5b      	ldrb	r3, [r3, #9]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b34 <FATFS_LinkDriverEx+0x94>)
 8008aca:	2100      	movs	r1, #0
 8008acc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008ace:	4b19      	ldr	r3, [pc, #100]	@ (8008b34 <FATFS_LinkDriverEx+0x94>)
 8008ad0:	7a5b      	ldrb	r3, [r3, #9]
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	4a17      	ldr	r2, [pc, #92]	@ (8008b34 <FATFS_LinkDriverEx+0x94>)
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008ade:	4b15      	ldr	r3, [pc, #84]	@ (8008b34 <FATFS_LinkDriverEx+0x94>)
 8008ae0:	7a5b      	ldrb	r3, [r3, #9]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4b13      	ldr	r3, [pc, #76]	@ (8008b34 <FATFS_LinkDriverEx+0x94>)
 8008ae8:	4413      	add	r3, r2
 8008aea:	79fa      	ldrb	r2, [r7, #7]
 8008aec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008aee:	4b11      	ldr	r3, [pc, #68]	@ (8008b34 <FATFS_LinkDriverEx+0x94>)
 8008af0:	7a5b      	ldrb	r3, [r3, #9]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	1c5a      	adds	r2, r3, #1
 8008af6:	b2d1      	uxtb	r1, r2
 8008af8:	4a0e      	ldr	r2, [pc, #56]	@ (8008b34 <FATFS_LinkDriverEx+0x94>)
 8008afa:	7251      	strb	r1, [r2, #9]
 8008afc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008afe:	7dbb      	ldrb	r3, [r7, #22]
 8008b00:	3330      	adds	r3, #48	@ 0x30
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	223a      	movs	r2, #58	@ 0x3a
 8008b0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	3302      	adds	r3, #2
 8008b14:	222f      	movs	r2, #47	@ 0x2f
 8008b16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	3303      	adds	r3, #3
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20000f74 	.word	0x20000f74

08008b38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b42:	2200      	movs	r2, #0
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff ffaa 	bl	8008aa0 <FATFS_LinkDriverEx>
 8008b4c:	4603      	mov	r3, r0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <sbrk_aligned>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	4e0f      	ldr	r6, [pc, #60]	@ (8008b98 <sbrk_aligned+0x40>)
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	6831      	ldr	r1, [r6, #0]
 8008b60:	4605      	mov	r5, r0
 8008b62:	b911      	cbnz	r1, 8008b6a <sbrk_aligned+0x12>
 8008b64:	f000 f8ce 	bl	8008d04 <_sbrk_r>
 8008b68:	6030      	str	r0, [r6, #0]
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 f8c9 	bl	8008d04 <_sbrk_r>
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	d103      	bne.n	8008b7e <sbrk_aligned+0x26>
 8008b76:	f04f 34ff 	mov.w	r4, #4294967295
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
 8008b7e:	1cc4      	adds	r4, r0, #3
 8008b80:	f024 0403 	bic.w	r4, r4, #3
 8008b84:	42a0      	cmp	r0, r4
 8008b86:	d0f8      	beq.n	8008b7a <sbrk_aligned+0x22>
 8008b88:	1a21      	subs	r1, r4, r0
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f000 f8ba 	bl	8008d04 <_sbrk_r>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d1f2      	bne.n	8008b7a <sbrk_aligned+0x22>
 8008b94:	e7ef      	b.n	8008b76 <sbrk_aligned+0x1e>
 8008b96:	bf00      	nop
 8008b98:	20000f80 	.word	0x20000f80

08008b9c <_malloc_r>:
 8008b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba0:	1ccd      	adds	r5, r1, #3
 8008ba2:	f025 0503 	bic.w	r5, r5, #3
 8008ba6:	3508      	adds	r5, #8
 8008ba8:	2d0c      	cmp	r5, #12
 8008baa:	bf38      	it	cc
 8008bac:	250c      	movcc	r5, #12
 8008bae:	2d00      	cmp	r5, #0
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	db01      	blt.n	8008bb8 <_malloc_r+0x1c>
 8008bb4:	42a9      	cmp	r1, r5
 8008bb6:	d904      	bls.n	8008bc2 <_malloc_r+0x26>
 8008bb8:	230c      	movs	r3, #12
 8008bba:	6033      	str	r3, [r6, #0]
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c98 <_malloc_r+0xfc>
 8008bc6:	f000 f869 	bl	8008c9c <__malloc_lock>
 8008bca:	f8d8 3000 	ldr.w	r3, [r8]
 8008bce:	461c      	mov	r4, r3
 8008bd0:	bb44      	cbnz	r4, 8008c24 <_malloc_r+0x88>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f7ff ffbf 	bl	8008b58 <sbrk_aligned>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	4604      	mov	r4, r0
 8008bde:	d158      	bne.n	8008c92 <_malloc_r+0xf6>
 8008be0:	f8d8 4000 	ldr.w	r4, [r8]
 8008be4:	4627      	mov	r7, r4
 8008be6:	2f00      	cmp	r7, #0
 8008be8:	d143      	bne.n	8008c72 <_malloc_r+0xd6>
 8008bea:	2c00      	cmp	r4, #0
 8008bec:	d04b      	beq.n	8008c86 <_malloc_r+0xea>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	eb04 0903 	add.w	r9, r4, r3
 8008bf8:	f000 f884 	bl	8008d04 <_sbrk_r>
 8008bfc:	4581      	cmp	r9, r0
 8008bfe:	d142      	bne.n	8008c86 <_malloc_r+0xea>
 8008c00:	6821      	ldr	r1, [r4, #0]
 8008c02:	1a6d      	subs	r5, r5, r1
 8008c04:	4629      	mov	r1, r5
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7ff ffa6 	bl	8008b58 <sbrk_aligned>
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d03a      	beq.n	8008c86 <_malloc_r+0xea>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	442b      	add	r3, r5
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	f8d8 3000 	ldr.w	r3, [r8]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	bb62      	cbnz	r2, 8008c78 <_malloc_r+0xdc>
 8008c1e:	f8c8 7000 	str.w	r7, [r8]
 8008c22:	e00f      	b.n	8008c44 <_malloc_r+0xa8>
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	1b52      	subs	r2, r2, r5
 8008c28:	d420      	bmi.n	8008c6c <_malloc_r+0xd0>
 8008c2a:	2a0b      	cmp	r2, #11
 8008c2c:	d917      	bls.n	8008c5e <_malloc_r+0xc2>
 8008c2e:	1961      	adds	r1, r4, r5
 8008c30:	42a3      	cmp	r3, r4
 8008c32:	6025      	str	r5, [r4, #0]
 8008c34:	bf18      	it	ne
 8008c36:	6059      	strne	r1, [r3, #4]
 8008c38:	6863      	ldr	r3, [r4, #4]
 8008c3a:	bf08      	it	eq
 8008c3c:	f8c8 1000 	streq.w	r1, [r8]
 8008c40:	5162      	str	r2, [r4, r5]
 8008c42:	604b      	str	r3, [r1, #4]
 8008c44:	4630      	mov	r0, r6
 8008c46:	f000 f82f 	bl	8008ca8 <__malloc_unlock>
 8008c4a:	f104 000b 	add.w	r0, r4, #11
 8008c4e:	1d23      	adds	r3, r4, #4
 8008c50:	f020 0007 	bic.w	r0, r0, #7
 8008c54:	1ac2      	subs	r2, r0, r3
 8008c56:	bf1c      	itt	ne
 8008c58:	1a1b      	subne	r3, r3, r0
 8008c5a:	50a3      	strne	r3, [r4, r2]
 8008c5c:	e7af      	b.n	8008bbe <_malloc_r+0x22>
 8008c5e:	6862      	ldr	r2, [r4, #4]
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	bf0c      	ite	eq
 8008c64:	f8c8 2000 	streq.w	r2, [r8]
 8008c68:	605a      	strne	r2, [r3, #4]
 8008c6a:	e7eb      	b.n	8008c44 <_malloc_r+0xa8>
 8008c6c:	4623      	mov	r3, r4
 8008c6e:	6864      	ldr	r4, [r4, #4]
 8008c70:	e7ae      	b.n	8008bd0 <_malloc_r+0x34>
 8008c72:	463c      	mov	r4, r7
 8008c74:	687f      	ldr	r7, [r7, #4]
 8008c76:	e7b6      	b.n	8008be6 <_malloc_r+0x4a>
 8008c78:	461a      	mov	r2, r3
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	d1fb      	bne.n	8008c78 <_malloc_r+0xdc>
 8008c80:	2300      	movs	r3, #0
 8008c82:	6053      	str	r3, [r2, #4]
 8008c84:	e7de      	b.n	8008c44 <_malloc_r+0xa8>
 8008c86:	230c      	movs	r3, #12
 8008c88:	6033      	str	r3, [r6, #0]
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f000 f80c 	bl	8008ca8 <__malloc_unlock>
 8008c90:	e794      	b.n	8008bbc <_malloc_r+0x20>
 8008c92:	6005      	str	r5, [r0, #0]
 8008c94:	e7d6      	b.n	8008c44 <_malloc_r+0xa8>
 8008c96:	bf00      	nop
 8008c98:	20000f84 	.word	0x20000f84

08008c9c <__malloc_lock>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	@ (8008ca4 <__malloc_lock+0x8>)
 8008c9e:	f000 b86b 	b.w	8008d78 <__retarget_lock_acquire_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	200010c4 	.word	0x200010c4

08008ca8 <__malloc_unlock>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	@ (8008cb0 <__malloc_unlock+0x8>)
 8008caa:	f000 b866 	b.w	8008d7a <__retarget_lock_release_recursive>
 8008cae:	bf00      	nop
 8008cb0:	200010c4 	.word	0x200010c4

08008cb4 <siprintf>:
 8008cb4:	b40e      	push	{r1, r2, r3}
 8008cb6:	b500      	push	{lr}
 8008cb8:	b09c      	sub	sp, #112	@ 0x70
 8008cba:	ab1d      	add	r3, sp, #116	@ 0x74
 8008cbc:	9002      	str	r0, [sp, #8]
 8008cbe:	9006      	str	r0, [sp, #24]
 8008cc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008cc4:	4809      	ldr	r0, [pc, #36]	@ (8008cec <siprintf+0x38>)
 8008cc6:	9107      	str	r1, [sp, #28]
 8008cc8:	9104      	str	r1, [sp, #16]
 8008cca:	4909      	ldr	r1, [pc, #36]	@ (8008cf0 <siprintf+0x3c>)
 8008ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd0:	9105      	str	r1, [sp, #20]
 8008cd2:	6800      	ldr	r0, [r0, #0]
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	a902      	add	r1, sp, #8
 8008cd8:	f000 f8f6 	bl	8008ec8 <_svfiprintf_r>
 8008cdc:	9b02      	ldr	r3, [sp, #8]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	b01c      	add	sp, #112	@ 0x70
 8008ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ce8:	b003      	add	sp, #12
 8008cea:	4770      	bx	lr
 8008cec:	20000024 	.word	0x20000024
 8008cf0:	ffff0208 	.word	0xffff0208

08008cf4 <memset>:
 8008cf4:	4402      	add	r2, r0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d100      	bne.n	8008cfe <memset+0xa>
 8008cfc:	4770      	bx	lr
 8008cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008d02:	e7f9      	b.n	8008cf8 <memset+0x4>

08008d04 <_sbrk_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d06      	ldr	r5, [pc, #24]	@ (8008d20 <_sbrk_r+0x1c>)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	f7f8 fea8 	bl	8001a64 <_sbrk>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_sbrk_r+0x1a>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_sbrk_r+0x1a>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	200010c0 	.word	0x200010c0

08008d24 <__errno>:
 8008d24:	4b01      	ldr	r3, [pc, #4]	@ (8008d2c <__errno+0x8>)
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000024 	.word	0x20000024

08008d30 <__libc_init_array>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	4d0d      	ldr	r5, [pc, #52]	@ (8008d68 <__libc_init_array+0x38>)
 8008d34:	4c0d      	ldr	r4, [pc, #52]	@ (8008d6c <__libc_init_array+0x3c>)
 8008d36:	1b64      	subs	r4, r4, r5
 8008d38:	10a4      	asrs	r4, r4, #2
 8008d3a:	2600      	movs	r6, #0
 8008d3c:	42a6      	cmp	r6, r4
 8008d3e:	d109      	bne.n	8008d54 <__libc_init_array+0x24>
 8008d40:	4d0b      	ldr	r5, [pc, #44]	@ (8008d70 <__libc_init_array+0x40>)
 8008d42:	4c0c      	ldr	r4, [pc, #48]	@ (8008d74 <__libc_init_array+0x44>)
 8008d44:	f000 fba8 	bl	8009498 <_init>
 8008d48:	1b64      	subs	r4, r4, r5
 8008d4a:	10a4      	asrs	r4, r4, #2
 8008d4c:	2600      	movs	r6, #0
 8008d4e:	42a6      	cmp	r6, r4
 8008d50:	d105      	bne.n	8008d5e <__libc_init_array+0x2e>
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d58:	4798      	blx	r3
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7ee      	b.n	8008d3c <__libc_init_array+0xc>
 8008d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d62:	4798      	blx	r3
 8008d64:	3601      	adds	r6, #1
 8008d66:	e7f2      	b.n	8008d4e <__libc_init_array+0x1e>
 8008d68:	08009768 	.word	0x08009768
 8008d6c:	08009768 	.word	0x08009768
 8008d70:	08009768 	.word	0x08009768
 8008d74:	0800976c 	.word	0x0800976c

08008d78 <__retarget_lock_acquire_recursive>:
 8008d78:	4770      	bx	lr

08008d7a <__retarget_lock_release_recursive>:
 8008d7a:	4770      	bx	lr

08008d7c <_free_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4605      	mov	r5, r0
 8008d80:	2900      	cmp	r1, #0
 8008d82:	d041      	beq.n	8008e08 <_free_r+0x8c>
 8008d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d88:	1f0c      	subs	r4, r1, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	bfb8      	it	lt
 8008d8e:	18e4      	addlt	r4, r4, r3
 8008d90:	f7ff ff84 	bl	8008c9c <__malloc_lock>
 8008d94:	4a1d      	ldr	r2, [pc, #116]	@ (8008e0c <_free_r+0x90>)
 8008d96:	6813      	ldr	r3, [r2, #0]
 8008d98:	b933      	cbnz	r3, 8008da8 <_free_r+0x2c>
 8008d9a:	6063      	str	r3, [r4, #4]
 8008d9c:	6014      	str	r4, [r2, #0]
 8008d9e:	4628      	mov	r0, r5
 8008da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008da4:	f7ff bf80 	b.w	8008ca8 <__malloc_unlock>
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	d908      	bls.n	8008dbe <_free_r+0x42>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	1821      	adds	r1, r4, r0
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf01      	itttt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	1809      	addeq	r1, r1, r0
 8008dba:	6021      	streq	r1, [r4, #0]
 8008dbc:	e7ed      	b.n	8008d9a <_free_r+0x1e>
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	b10b      	cbz	r3, 8008dc8 <_free_r+0x4c>
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	d9fa      	bls.n	8008dbe <_free_r+0x42>
 8008dc8:	6811      	ldr	r1, [r2, #0]
 8008dca:	1850      	adds	r0, r2, r1
 8008dcc:	42a0      	cmp	r0, r4
 8008dce:	d10b      	bne.n	8008de8 <_free_r+0x6c>
 8008dd0:	6820      	ldr	r0, [r4, #0]
 8008dd2:	4401      	add	r1, r0
 8008dd4:	1850      	adds	r0, r2, r1
 8008dd6:	4283      	cmp	r3, r0
 8008dd8:	6011      	str	r1, [r2, #0]
 8008dda:	d1e0      	bne.n	8008d9e <_free_r+0x22>
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	6053      	str	r3, [r2, #4]
 8008de2:	4408      	add	r0, r1
 8008de4:	6010      	str	r0, [r2, #0]
 8008de6:	e7da      	b.n	8008d9e <_free_r+0x22>
 8008de8:	d902      	bls.n	8008df0 <_free_r+0x74>
 8008dea:	230c      	movs	r3, #12
 8008dec:	602b      	str	r3, [r5, #0]
 8008dee:	e7d6      	b.n	8008d9e <_free_r+0x22>
 8008df0:	6820      	ldr	r0, [r4, #0]
 8008df2:	1821      	adds	r1, r4, r0
 8008df4:	428b      	cmp	r3, r1
 8008df6:	bf04      	itt	eq
 8008df8:	6819      	ldreq	r1, [r3, #0]
 8008dfa:	685b      	ldreq	r3, [r3, #4]
 8008dfc:	6063      	str	r3, [r4, #4]
 8008dfe:	bf04      	itt	eq
 8008e00:	1809      	addeq	r1, r1, r0
 8008e02:	6021      	streq	r1, [r4, #0]
 8008e04:	6054      	str	r4, [r2, #4]
 8008e06:	e7ca      	b.n	8008d9e <_free_r+0x22>
 8008e08:	bd38      	pop	{r3, r4, r5, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000f84 	.word	0x20000f84

08008e10 <__ssputs_r>:
 8008e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e14:	688e      	ldr	r6, [r1, #8]
 8008e16:	461f      	mov	r7, r3
 8008e18:	42be      	cmp	r6, r7
 8008e1a:	680b      	ldr	r3, [r1, #0]
 8008e1c:	4682      	mov	sl, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	4690      	mov	r8, r2
 8008e22:	d82d      	bhi.n	8008e80 <__ssputs_r+0x70>
 8008e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e2c:	d026      	beq.n	8008e7c <__ssputs_r+0x6c>
 8008e2e:	6965      	ldr	r5, [r4, #20]
 8008e30:	6909      	ldr	r1, [r1, #16]
 8008e32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e36:	eba3 0901 	sub.w	r9, r3, r1
 8008e3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e3e:	1c7b      	adds	r3, r7, #1
 8008e40:	444b      	add	r3, r9
 8008e42:	106d      	asrs	r5, r5, #1
 8008e44:	429d      	cmp	r5, r3
 8008e46:	bf38      	it	cc
 8008e48:	461d      	movcc	r5, r3
 8008e4a:	0553      	lsls	r3, r2, #21
 8008e4c:	d527      	bpl.n	8008e9e <__ssputs_r+0x8e>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	f7ff fea4 	bl	8008b9c <_malloc_r>
 8008e54:	4606      	mov	r6, r0
 8008e56:	b360      	cbz	r0, 8008eb2 <__ssputs_r+0xa2>
 8008e58:	6921      	ldr	r1, [r4, #16]
 8008e5a:	464a      	mov	r2, r9
 8008e5c:	f000 fad8 	bl	8009410 <memcpy>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	6126      	str	r6, [r4, #16]
 8008e6e:	6165      	str	r5, [r4, #20]
 8008e70:	444e      	add	r6, r9
 8008e72:	eba5 0509 	sub.w	r5, r5, r9
 8008e76:	6026      	str	r6, [r4, #0]
 8008e78:	60a5      	str	r5, [r4, #8]
 8008e7a:	463e      	mov	r6, r7
 8008e7c:	42be      	cmp	r6, r7
 8008e7e:	d900      	bls.n	8008e82 <__ssputs_r+0x72>
 8008e80:	463e      	mov	r6, r7
 8008e82:	6820      	ldr	r0, [r4, #0]
 8008e84:	4632      	mov	r2, r6
 8008e86:	4641      	mov	r1, r8
 8008e88:	f000 faa8 	bl	80093dc <memmove>
 8008e8c:	68a3      	ldr	r3, [r4, #8]
 8008e8e:	1b9b      	subs	r3, r3, r6
 8008e90:	60a3      	str	r3, [r4, #8]
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	4433      	add	r3, r6
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	2000      	movs	r0, #0
 8008e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9e:	462a      	mov	r2, r5
 8008ea0:	f000 fac4 	bl	800942c <_realloc_r>
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d1e0      	bne.n	8008e6c <__ssputs_r+0x5c>
 8008eaa:	6921      	ldr	r1, [r4, #16]
 8008eac:	4650      	mov	r0, sl
 8008eae:	f7ff ff65 	bl	8008d7c <_free_r>
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	f8ca 3000 	str.w	r3, [sl]
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	e7e9      	b.n	8008e9a <__ssputs_r+0x8a>
	...

08008ec8 <_svfiprintf_r>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	4698      	mov	r8, r3
 8008ece:	898b      	ldrh	r3, [r1, #12]
 8008ed0:	061b      	lsls	r3, r3, #24
 8008ed2:	b09d      	sub	sp, #116	@ 0x74
 8008ed4:	4607      	mov	r7, r0
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	4614      	mov	r4, r2
 8008eda:	d510      	bpl.n	8008efe <_svfiprintf_r+0x36>
 8008edc:	690b      	ldr	r3, [r1, #16]
 8008ede:	b973      	cbnz	r3, 8008efe <_svfiprintf_r+0x36>
 8008ee0:	2140      	movs	r1, #64	@ 0x40
 8008ee2:	f7ff fe5b 	bl	8008b9c <_malloc_r>
 8008ee6:	6028      	str	r0, [r5, #0]
 8008ee8:	6128      	str	r0, [r5, #16]
 8008eea:	b930      	cbnz	r0, 8008efa <_svfiprintf_r+0x32>
 8008eec:	230c      	movs	r3, #12
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	b01d      	add	sp, #116	@ 0x74
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	2340      	movs	r3, #64	@ 0x40
 8008efc:	616b      	str	r3, [r5, #20]
 8008efe:	2300      	movs	r3, #0
 8008f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f02:	2320      	movs	r3, #32
 8008f04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f0c:	2330      	movs	r3, #48	@ 0x30
 8008f0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80090ac <_svfiprintf_r+0x1e4>
 8008f12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f16:	f04f 0901 	mov.w	r9, #1
 8008f1a:	4623      	mov	r3, r4
 8008f1c:	469a      	mov	sl, r3
 8008f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f22:	b10a      	cbz	r2, 8008f28 <_svfiprintf_r+0x60>
 8008f24:	2a25      	cmp	r2, #37	@ 0x25
 8008f26:	d1f9      	bne.n	8008f1c <_svfiprintf_r+0x54>
 8008f28:	ebba 0b04 	subs.w	fp, sl, r4
 8008f2c:	d00b      	beq.n	8008f46 <_svfiprintf_r+0x7e>
 8008f2e:	465b      	mov	r3, fp
 8008f30:	4622      	mov	r2, r4
 8008f32:	4629      	mov	r1, r5
 8008f34:	4638      	mov	r0, r7
 8008f36:	f7ff ff6b 	bl	8008e10 <__ssputs_r>
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	f000 80a7 	beq.w	800908e <_svfiprintf_r+0x1c6>
 8008f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f42:	445a      	add	r2, fp
 8008f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f46:	f89a 3000 	ldrb.w	r3, [sl]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 809f 	beq.w	800908e <_svfiprintf_r+0x1c6>
 8008f50:	2300      	movs	r3, #0
 8008f52:	f04f 32ff 	mov.w	r2, #4294967295
 8008f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f5a:	f10a 0a01 	add.w	sl, sl, #1
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	9307      	str	r3, [sp, #28]
 8008f62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f68:	4654      	mov	r4, sl
 8008f6a:	2205      	movs	r2, #5
 8008f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f70:	484e      	ldr	r0, [pc, #312]	@ (80090ac <_svfiprintf_r+0x1e4>)
 8008f72:	f7f7 f965 	bl	8000240 <memchr>
 8008f76:	9a04      	ldr	r2, [sp, #16]
 8008f78:	b9d8      	cbnz	r0, 8008fb2 <_svfiprintf_r+0xea>
 8008f7a:	06d0      	lsls	r0, r2, #27
 8008f7c:	bf44      	itt	mi
 8008f7e:	2320      	movmi	r3, #32
 8008f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f84:	0711      	lsls	r1, r2, #28
 8008f86:	bf44      	itt	mi
 8008f88:	232b      	movmi	r3, #43	@ 0x2b
 8008f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f94:	d015      	beq.n	8008fc2 <_svfiprintf_r+0xfa>
 8008f96:	9a07      	ldr	r2, [sp, #28]
 8008f98:	4654      	mov	r4, sl
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	f04f 0c0a 	mov.w	ip, #10
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fa6:	3b30      	subs	r3, #48	@ 0x30
 8008fa8:	2b09      	cmp	r3, #9
 8008faa:	d94b      	bls.n	8009044 <_svfiprintf_r+0x17c>
 8008fac:	b1b0      	cbz	r0, 8008fdc <_svfiprintf_r+0x114>
 8008fae:	9207      	str	r2, [sp, #28]
 8008fb0:	e014      	b.n	8008fdc <_svfiprintf_r+0x114>
 8008fb2:	eba0 0308 	sub.w	r3, r0, r8
 8008fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	46a2      	mov	sl, r4
 8008fc0:	e7d2      	b.n	8008f68 <_svfiprintf_r+0xa0>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	1d19      	adds	r1, r3, #4
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	9103      	str	r1, [sp, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	bfbb      	ittet	lt
 8008fce:	425b      	neglt	r3, r3
 8008fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8008fd4:	9307      	strge	r3, [sp, #28]
 8008fd6:	9307      	strlt	r3, [sp, #28]
 8008fd8:	bfb8      	it	lt
 8008fda:	9204      	strlt	r2, [sp, #16]
 8008fdc:	7823      	ldrb	r3, [r4, #0]
 8008fde:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fe0:	d10a      	bne.n	8008ff8 <_svfiprintf_r+0x130>
 8008fe2:	7863      	ldrb	r3, [r4, #1]
 8008fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fe6:	d132      	bne.n	800904e <_svfiprintf_r+0x186>
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	1d1a      	adds	r2, r3, #4
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	9203      	str	r2, [sp, #12]
 8008ff0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ff4:	3402      	adds	r4, #2
 8008ff6:	9305      	str	r3, [sp, #20]
 8008ff8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80090bc <_svfiprintf_r+0x1f4>
 8008ffc:	7821      	ldrb	r1, [r4, #0]
 8008ffe:	2203      	movs	r2, #3
 8009000:	4650      	mov	r0, sl
 8009002:	f7f7 f91d 	bl	8000240 <memchr>
 8009006:	b138      	cbz	r0, 8009018 <_svfiprintf_r+0x150>
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	eba0 000a 	sub.w	r0, r0, sl
 800900e:	2240      	movs	r2, #64	@ 0x40
 8009010:	4082      	lsls	r2, r0
 8009012:	4313      	orrs	r3, r2
 8009014:	3401      	adds	r4, #1
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901c:	4824      	ldr	r0, [pc, #144]	@ (80090b0 <_svfiprintf_r+0x1e8>)
 800901e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009022:	2206      	movs	r2, #6
 8009024:	f7f7 f90c 	bl	8000240 <memchr>
 8009028:	2800      	cmp	r0, #0
 800902a:	d036      	beq.n	800909a <_svfiprintf_r+0x1d2>
 800902c:	4b21      	ldr	r3, [pc, #132]	@ (80090b4 <_svfiprintf_r+0x1ec>)
 800902e:	bb1b      	cbnz	r3, 8009078 <_svfiprintf_r+0x1b0>
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	3307      	adds	r3, #7
 8009034:	f023 0307 	bic.w	r3, r3, #7
 8009038:	3308      	adds	r3, #8
 800903a:	9303      	str	r3, [sp, #12]
 800903c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800903e:	4433      	add	r3, r6
 8009040:	9309      	str	r3, [sp, #36]	@ 0x24
 8009042:	e76a      	b.n	8008f1a <_svfiprintf_r+0x52>
 8009044:	fb0c 3202 	mla	r2, ip, r2, r3
 8009048:	460c      	mov	r4, r1
 800904a:	2001      	movs	r0, #1
 800904c:	e7a8      	b.n	8008fa0 <_svfiprintf_r+0xd8>
 800904e:	2300      	movs	r3, #0
 8009050:	3401      	adds	r4, #1
 8009052:	9305      	str	r3, [sp, #20]
 8009054:	4619      	mov	r1, r3
 8009056:	f04f 0c0a 	mov.w	ip, #10
 800905a:	4620      	mov	r0, r4
 800905c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009060:	3a30      	subs	r2, #48	@ 0x30
 8009062:	2a09      	cmp	r2, #9
 8009064:	d903      	bls.n	800906e <_svfiprintf_r+0x1a6>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0c6      	beq.n	8008ff8 <_svfiprintf_r+0x130>
 800906a:	9105      	str	r1, [sp, #20]
 800906c:	e7c4      	b.n	8008ff8 <_svfiprintf_r+0x130>
 800906e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009072:	4604      	mov	r4, r0
 8009074:	2301      	movs	r3, #1
 8009076:	e7f0      	b.n	800905a <_svfiprintf_r+0x192>
 8009078:	ab03      	add	r3, sp, #12
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	462a      	mov	r2, r5
 800907e:	4b0e      	ldr	r3, [pc, #56]	@ (80090b8 <_svfiprintf_r+0x1f0>)
 8009080:	a904      	add	r1, sp, #16
 8009082:	4638      	mov	r0, r7
 8009084:	f3af 8000 	nop.w
 8009088:	1c42      	adds	r2, r0, #1
 800908a:	4606      	mov	r6, r0
 800908c:	d1d6      	bne.n	800903c <_svfiprintf_r+0x174>
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	065b      	lsls	r3, r3, #25
 8009092:	f53f af2d 	bmi.w	8008ef0 <_svfiprintf_r+0x28>
 8009096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009098:	e72c      	b.n	8008ef4 <_svfiprintf_r+0x2c>
 800909a:	ab03      	add	r3, sp, #12
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	462a      	mov	r2, r5
 80090a0:	4b05      	ldr	r3, [pc, #20]	@ (80090b8 <_svfiprintf_r+0x1f0>)
 80090a2:	a904      	add	r1, sp, #16
 80090a4:	4638      	mov	r0, r7
 80090a6:	f000 f879 	bl	800919c <_printf_i>
 80090aa:	e7ed      	b.n	8009088 <_svfiprintf_r+0x1c0>
 80090ac:	0800972c 	.word	0x0800972c
 80090b0:	08009736 	.word	0x08009736
 80090b4:	00000000 	.word	0x00000000
 80090b8:	08008e11 	.word	0x08008e11
 80090bc:	08009732 	.word	0x08009732

080090c0 <_printf_common>:
 80090c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c4:	4616      	mov	r6, r2
 80090c6:	4698      	mov	r8, r3
 80090c8:	688a      	ldr	r2, [r1, #8]
 80090ca:	690b      	ldr	r3, [r1, #16]
 80090cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090d0:	4293      	cmp	r3, r2
 80090d2:	bfb8      	it	lt
 80090d4:	4613      	movlt	r3, r2
 80090d6:	6033      	str	r3, [r6, #0]
 80090d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090dc:	4607      	mov	r7, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	b10a      	cbz	r2, 80090e6 <_printf_common+0x26>
 80090e2:	3301      	adds	r3, #1
 80090e4:	6033      	str	r3, [r6, #0]
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	0699      	lsls	r1, r3, #26
 80090ea:	bf42      	ittt	mi
 80090ec:	6833      	ldrmi	r3, [r6, #0]
 80090ee:	3302      	addmi	r3, #2
 80090f0:	6033      	strmi	r3, [r6, #0]
 80090f2:	6825      	ldr	r5, [r4, #0]
 80090f4:	f015 0506 	ands.w	r5, r5, #6
 80090f8:	d106      	bne.n	8009108 <_printf_common+0x48>
 80090fa:	f104 0a19 	add.w	sl, r4, #25
 80090fe:	68e3      	ldr	r3, [r4, #12]
 8009100:	6832      	ldr	r2, [r6, #0]
 8009102:	1a9b      	subs	r3, r3, r2
 8009104:	42ab      	cmp	r3, r5
 8009106:	dc26      	bgt.n	8009156 <_printf_common+0x96>
 8009108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800910c:	6822      	ldr	r2, [r4, #0]
 800910e:	3b00      	subs	r3, #0
 8009110:	bf18      	it	ne
 8009112:	2301      	movne	r3, #1
 8009114:	0692      	lsls	r2, r2, #26
 8009116:	d42b      	bmi.n	8009170 <_printf_common+0xb0>
 8009118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800911c:	4641      	mov	r1, r8
 800911e:	4638      	mov	r0, r7
 8009120:	47c8      	blx	r9
 8009122:	3001      	adds	r0, #1
 8009124:	d01e      	beq.n	8009164 <_printf_common+0xa4>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	6922      	ldr	r2, [r4, #16]
 800912a:	f003 0306 	and.w	r3, r3, #6
 800912e:	2b04      	cmp	r3, #4
 8009130:	bf02      	ittt	eq
 8009132:	68e5      	ldreq	r5, [r4, #12]
 8009134:	6833      	ldreq	r3, [r6, #0]
 8009136:	1aed      	subeq	r5, r5, r3
 8009138:	68a3      	ldr	r3, [r4, #8]
 800913a:	bf0c      	ite	eq
 800913c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009140:	2500      	movne	r5, #0
 8009142:	4293      	cmp	r3, r2
 8009144:	bfc4      	itt	gt
 8009146:	1a9b      	subgt	r3, r3, r2
 8009148:	18ed      	addgt	r5, r5, r3
 800914a:	2600      	movs	r6, #0
 800914c:	341a      	adds	r4, #26
 800914e:	42b5      	cmp	r5, r6
 8009150:	d11a      	bne.n	8009188 <_printf_common+0xc8>
 8009152:	2000      	movs	r0, #0
 8009154:	e008      	b.n	8009168 <_printf_common+0xa8>
 8009156:	2301      	movs	r3, #1
 8009158:	4652      	mov	r2, sl
 800915a:	4641      	mov	r1, r8
 800915c:	4638      	mov	r0, r7
 800915e:	47c8      	blx	r9
 8009160:	3001      	adds	r0, #1
 8009162:	d103      	bne.n	800916c <_printf_common+0xac>
 8009164:	f04f 30ff 	mov.w	r0, #4294967295
 8009168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916c:	3501      	adds	r5, #1
 800916e:	e7c6      	b.n	80090fe <_printf_common+0x3e>
 8009170:	18e1      	adds	r1, r4, r3
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	2030      	movs	r0, #48	@ 0x30
 8009176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800917a:	4422      	add	r2, r4
 800917c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009184:	3302      	adds	r3, #2
 8009186:	e7c7      	b.n	8009118 <_printf_common+0x58>
 8009188:	2301      	movs	r3, #1
 800918a:	4622      	mov	r2, r4
 800918c:	4641      	mov	r1, r8
 800918e:	4638      	mov	r0, r7
 8009190:	47c8      	blx	r9
 8009192:	3001      	adds	r0, #1
 8009194:	d0e6      	beq.n	8009164 <_printf_common+0xa4>
 8009196:	3601      	adds	r6, #1
 8009198:	e7d9      	b.n	800914e <_printf_common+0x8e>
	...

0800919c <_printf_i>:
 800919c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091a0:	7e0f      	ldrb	r7, [r1, #24]
 80091a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091a4:	2f78      	cmp	r7, #120	@ 0x78
 80091a6:	4691      	mov	r9, r2
 80091a8:	4680      	mov	r8, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	469a      	mov	sl, r3
 80091ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091b2:	d807      	bhi.n	80091c4 <_printf_i+0x28>
 80091b4:	2f62      	cmp	r7, #98	@ 0x62
 80091b6:	d80a      	bhi.n	80091ce <_printf_i+0x32>
 80091b8:	2f00      	cmp	r7, #0
 80091ba:	f000 80d2 	beq.w	8009362 <_printf_i+0x1c6>
 80091be:	2f58      	cmp	r7, #88	@ 0x58
 80091c0:	f000 80b9 	beq.w	8009336 <_printf_i+0x19a>
 80091c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091cc:	e03a      	b.n	8009244 <_printf_i+0xa8>
 80091ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091d2:	2b15      	cmp	r3, #21
 80091d4:	d8f6      	bhi.n	80091c4 <_printf_i+0x28>
 80091d6:	a101      	add	r1, pc, #4	@ (adr r1, 80091dc <_printf_i+0x40>)
 80091d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091dc:	08009235 	.word	0x08009235
 80091e0:	08009249 	.word	0x08009249
 80091e4:	080091c5 	.word	0x080091c5
 80091e8:	080091c5 	.word	0x080091c5
 80091ec:	080091c5 	.word	0x080091c5
 80091f0:	080091c5 	.word	0x080091c5
 80091f4:	08009249 	.word	0x08009249
 80091f8:	080091c5 	.word	0x080091c5
 80091fc:	080091c5 	.word	0x080091c5
 8009200:	080091c5 	.word	0x080091c5
 8009204:	080091c5 	.word	0x080091c5
 8009208:	08009349 	.word	0x08009349
 800920c:	08009273 	.word	0x08009273
 8009210:	08009303 	.word	0x08009303
 8009214:	080091c5 	.word	0x080091c5
 8009218:	080091c5 	.word	0x080091c5
 800921c:	0800936b 	.word	0x0800936b
 8009220:	080091c5 	.word	0x080091c5
 8009224:	08009273 	.word	0x08009273
 8009228:	080091c5 	.word	0x080091c5
 800922c:	080091c5 	.word	0x080091c5
 8009230:	0800930b 	.word	0x0800930b
 8009234:	6833      	ldr	r3, [r6, #0]
 8009236:	1d1a      	adds	r2, r3, #4
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6032      	str	r2, [r6, #0]
 800923c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009244:	2301      	movs	r3, #1
 8009246:	e09d      	b.n	8009384 <_printf_i+0x1e8>
 8009248:	6833      	ldr	r3, [r6, #0]
 800924a:	6820      	ldr	r0, [r4, #0]
 800924c:	1d19      	adds	r1, r3, #4
 800924e:	6031      	str	r1, [r6, #0]
 8009250:	0606      	lsls	r6, r0, #24
 8009252:	d501      	bpl.n	8009258 <_printf_i+0xbc>
 8009254:	681d      	ldr	r5, [r3, #0]
 8009256:	e003      	b.n	8009260 <_printf_i+0xc4>
 8009258:	0645      	lsls	r5, r0, #25
 800925a:	d5fb      	bpl.n	8009254 <_printf_i+0xb8>
 800925c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009260:	2d00      	cmp	r5, #0
 8009262:	da03      	bge.n	800926c <_printf_i+0xd0>
 8009264:	232d      	movs	r3, #45	@ 0x2d
 8009266:	426d      	negs	r5, r5
 8009268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800926c:	4859      	ldr	r0, [pc, #356]	@ (80093d4 <_printf_i+0x238>)
 800926e:	230a      	movs	r3, #10
 8009270:	e011      	b.n	8009296 <_printf_i+0xfa>
 8009272:	6821      	ldr	r1, [r4, #0]
 8009274:	6833      	ldr	r3, [r6, #0]
 8009276:	0608      	lsls	r0, r1, #24
 8009278:	f853 5b04 	ldr.w	r5, [r3], #4
 800927c:	d402      	bmi.n	8009284 <_printf_i+0xe8>
 800927e:	0649      	lsls	r1, r1, #25
 8009280:	bf48      	it	mi
 8009282:	b2ad      	uxthmi	r5, r5
 8009284:	2f6f      	cmp	r7, #111	@ 0x6f
 8009286:	4853      	ldr	r0, [pc, #332]	@ (80093d4 <_printf_i+0x238>)
 8009288:	6033      	str	r3, [r6, #0]
 800928a:	bf14      	ite	ne
 800928c:	230a      	movne	r3, #10
 800928e:	2308      	moveq	r3, #8
 8009290:	2100      	movs	r1, #0
 8009292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009296:	6866      	ldr	r6, [r4, #4]
 8009298:	60a6      	str	r6, [r4, #8]
 800929a:	2e00      	cmp	r6, #0
 800929c:	bfa2      	ittt	ge
 800929e:	6821      	ldrge	r1, [r4, #0]
 80092a0:	f021 0104 	bicge.w	r1, r1, #4
 80092a4:	6021      	strge	r1, [r4, #0]
 80092a6:	b90d      	cbnz	r5, 80092ac <_printf_i+0x110>
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	d04b      	beq.n	8009344 <_printf_i+0x1a8>
 80092ac:	4616      	mov	r6, r2
 80092ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80092b2:	fb03 5711 	mls	r7, r3, r1, r5
 80092b6:	5dc7      	ldrb	r7, [r0, r7]
 80092b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092bc:	462f      	mov	r7, r5
 80092be:	42bb      	cmp	r3, r7
 80092c0:	460d      	mov	r5, r1
 80092c2:	d9f4      	bls.n	80092ae <_printf_i+0x112>
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d10b      	bne.n	80092e0 <_printf_i+0x144>
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	07df      	lsls	r7, r3, #31
 80092cc:	d508      	bpl.n	80092e0 <_printf_i+0x144>
 80092ce:	6923      	ldr	r3, [r4, #16]
 80092d0:	6861      	ldr	r1, [r4, #4]
 80092d2:	4299      	cmp	r1, r3
 80092d4:	bfde      	ittt	le
 80092d6:	2330      	movle	r3, #48	@ 0x30
 80092d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092e0:	1b92      	subs	r2, r2, r6
 80092e2:	6122      	str	r2, [r4, #16]
 80092e4:	f8cd a000 	str.w	sl, [sp]
 80092e8:	464b      	mov	r3, r9
 80092ea:	aa03      	add	r2, sp, #12
 80092ec:	4621      	mov	r1, r4
 80092ee:	4640      	mov	r0, r8
 80092f0:	f7ff fee6 	bl	80090c0 <_printf_common>
 80092f4:	3001      	adds	r0, #1
 80092f6:	d14a      	bne.n	800938e <_printf_i+0x1f2>
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	b004      	add	sp, #16
 80092fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	f043 0320 	orr.w	r3, r3, #32
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	4833      	ldr	r0, [pc, #204]	@ (80093d8 <_printf_i+0x23c>)
 800930c:	2778      	movs	r7, #120	@ 0x78
 800930e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	6831      	ldr	r1, [r6, #0]
 8009316:	061f      	lsls	r7, r3, #24
 8009318:	f851 5b04 	ldr.w	r5, [r1], #4
 800931c:	d402      	bmi.n	8009324 <_printf_i+0x188>
 800931e:	065f      	lsls	r7, r3, #25
 8009320:	bf48      	it	mi
 8009322:	b2ad      	uxthmi	r5, r5
 8009324:	6031      	str	r1, [r6, #0]
 8009326:	07d9      	lsls	r1, r3, #31
 8009328:	bf44      	itt	mi
 800932a:	f043 0320 	orrmi.w	r3, r3, #32
 800932e:	6023      	strmi	r3, [r4, #0]
 8009330:	b11d      	cbz	r5, 800933a <_printf_i+0x19e>
 8009332:	2310      	movs	r3, #16
 8009334:	e7ac      	b.n	8009290 <_printf_i+0xf4>
 8009336:	4827      	ldr	r0, [pc, #156]	@ (80093d4 <_printf_i+0x238>)
 8009338:	e7e9      	b.n	800930e <_printf_i+0x172>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	f023 0320 	bic.w	r3, r3, #32
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	e7f6      	b.n	8009332 <_printf_i+0x196>
 8009344:	4616      	mov	r6, r2
 8009346:	e7bd      	b.n	80092c4 <_printf_i+0x128>
 8009348:	6833      	ldr	r3, [r6, #0]
 800934a:	6825      	ldr	r5, [r4, #0]
 800934c:	6961      	ldr	r1, [r4, #20]
 800934e:	1d18      	adds	r0, r3, #4
 8009350:	6030      	str	r0, [r6, #0]
 8009352:	062e      	lsls	r6, r5, #24
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	d501      	bpl.n	800935c <_printf_i+0x1c0>
 8009358:	6019      	str	r1, [r3, #0]
 800935a:	e002      	b.n	8009362 <_printf_i+0x1c6>
 800935c:	0668      	lsls	r0, r5, #25
 800935e:	d5fb      	bpl.n	8009358 <_printf_i+0x1bc>
 8009360:	8019      	strh	r1, [r3, #0]
 8009362:	2300      	movs	r3, #0
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	4616      	mov	r6, r2
 8009368:	e7bc      	b.n	80092e4 <_printf_i+0x148>
 800936a:	6833      	ldr	r3, [r6, #0]
 800936c:	1d1a      	adds	r2, r3, #4
 800936e:	6032      	str	r2, [r6, #0]
 8009370:	681e      	ldr	r6, [r3, #0]
 8009372:	6862      	ldr	r2, [r4, #4]
 8009374:	2100      	movs	r1, #0
 8009376:	4630      	mov	r0, r6
 8009378:	f7f6 ff62 	bl	8000240 <memchr>
 800937c:	b108      	cbz	r0, 8009382 <_printf_i+0x1e6>
 800937e:	1b80      	subs	r0, r0, r6
 8009380:	6060      	str	r0, [r4, #4]
 8009382:	6863      	ldr	r3, [r4, #4]
 8009384:	6123      	str	r3, [r4, #16]
 8009386:	2300      	movs	r3, #0
 8009388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800938c:	e7aa      	b.n	80092e4 <_printf_i+0x148>
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	4632      	mov	r2, r6
 8009392:	4649      	mov	r1, r9
 8009394:	4640      	mov	r0, r8
 8009396:	47d0      	blx	sl
 8009398:	3001      	adds	r0, #1
 800939a:	d0ad      	beq.n	80092f8 <_printf_i+0x15c>
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	079b      	lsls	r3, r3, #30
 80093a0:	d413      	bmi.n	80093ca <_printf_i+0x22e>
 80093a2:	68e0      	ldr	r0, [r4, #12]
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	4298      	cmp	r0, r3
 80093a8:	bfb8      	it	lt
 80093aa:	4618      	movlt	r0, r3
 80093ac:	e7a6      	b.n	80092fc <_printf_i+0x160>
 80093ae:	2301      	movs	r3, #1
 80093b0:	4632      	mov	r2, r6
 80093b2:	4649      	mov	r1, r9
 80093b4:	4640      	mov	r0, r8
 80093b6:	47d0      	blx	sl
 80093b8:	3001      	adds	r0, #1
 80093ba:	d09d      	beq.n	80092f8 <_printf_i+0x15c>
 80093bc:	3501      	adds	r5, #1
 80093be:	68e3      	ldr	r3, [r4, #12]
 80093c0:	9903      	ldr	r1, [sp, #12]
 80093c2:	1a5b      	subs	r3, r3, r1
 80093c4:	42ab      	cmp	r3, r5
 80093c6:	dcf2      	bgt.n	80093ae <_printf_i+0x212>
 80093c8:	e7eb      	b.n	80093a2 <_printf_i+0x206>
 80093ca:	2500      	movs	r5, #0
 80093cc:	f104 0619 	add.w	r6, r4, #25
 80093d0:	e7f5      	b.n	80093be <_printf_i+0x222>
 80093d2:	bf00      	nop
 80093d4:	0800973d 	.word	0x0800973d
 80093d8:	0800974e 	.word	0x0800974e

080093dc <memmove>:
 80093dc:	4288      	cmp	r0, r1
 80093de:	b510      	push	{r4, lr}
 80093e0:	eb01 0402 	add.w	r4, r1, r2
 80093e4:	d902      	bls.n	80093ec <memmove+0x10>
 80093e6:	4284      	cmp	r4, r0
 80093e8:	4623      	mov	r3, r4
 80093ea:	d807      	bhi.n	80093fc <memmove+0x20>
 80093ec:	1e43      	subs	r3, r0, #1
 80093ee:	42a1      	cmp	r1, r4
 80093f0:	d008      	beq.n	8009404 <memmove+0x28>
 80093f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093fa:	e7f8      	b.n	80093ee <memmove+0x12>
 80093fc:	4402      	add	r2, r0
 80093fe:	4601      	mov	r1, r0
 8009400:	428a      	cmp	r2, r1
 8009402:	d100      	bne.n	8009406 <memmove+0x2a>
 8009404:	bd10      	pop	{r4, pc}
 8009406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800940a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800940e:	e7f7      	b.n	8009400 <memmove+0x24>

08009410 <memcpy>:
 8009410:	440a      	add	r2, r1
 8009412:	4291      	cmp	r1, r2
 8009414:	f100 33ff 	add.w	r3, r0, #4294967295
 8009418:	d100      	bne.n	800941c <memcpy+0xc>
 800941a:	4770      	bx	lr
 800941c:	b510      	push	{r4, lr}
 800941e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009426:	4291      	cmp	r1, r2
 8009428:	d1f9      	bne.n	800941e <memcpy+0xe>
 800942a:	bd10      	pop	{r4, pc}

0800942c <_realloc_r>:
 800942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009430:	4680      	mov	r8, r0
 8009432:	4615      	mov	r5, r2
 8009434:	460c      	mov	r4, r1
 8009436:	b921      	cbnz	r1, 8009442 <_realloc_r+0x16>
 8009438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	4611      	mov	r1, r2
 800943e:	f7ff bbad 	b.w	8008b9c <_malloc_r>
 8009442:	b92a      	cbnz	r2, 8009450 <_realloc_r+0x24>
 8009444:	f7ff fc9a 	bl	8008d7c <_free_r>
 8009448:	2400      	movs	r4, #0
 800944a:	4620      	mov	r0, r4
 800944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009450:	f000 f81a 	bl	8009488 <_malloc_usable_size_r>
 8009454:	4285      	cmp	r5, r0
 8009456:	4606      	mov	r6, r0
 8009458:	d802      	bhi.n	8009460 <_realloc_r+0x34>
 800945a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800945e:	d8f4      	bhi.n	800944a <_realloc_r+0x1e>
 8009460:	4629      	mov	r1, r5
 8009462:	4640      	mov	r0, r8
 8009464:	f7ff fb9a 	bl	8008b9c <_malloc_r>
 8009468:	4607      	mov	r7, r0
 800946a:	2800      	cmp	r0, #0
 800946c:	d0ec      	beq.n	8009448 <_realloc_r+0x1c>
 800946e:	42b5      	cmp	r5, r6
 8009470:	462a      	mov	r2, r5
 8009472:	4621      	mov	r1, r4
 8009474:	bf28      	it	cs
 8009476:	4632      	movcs	r2, r6
 8009478:	f7ff ffca 	bl	8009410 <memcpy>
 800947c:	4621      	mov	r1, r4
 800947e:	4640      	mov	r0, r8
 8009480:	f7ff fc7c 	bl	8008d7c <_free_r>
 8009484:	463c      	mov	r4, r7
 8009486:	e7e0      	b.n	800944a <_realloc_r+0x1e>

08009488 <_malloc_usable_size_r>:
 8009488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948c:	1f18      	subs	r0, r3, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfbc      	itt	lt
 8009492:	580b      	ldrlt	r3, [r1, r0]
 8009494:	18c0      	addlt	r0, r0, r3
 8009496:	4770      	bx	lr

08009498 <_init>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr

080094a4 <_fini>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	bf00      	nop
 80094a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094aa:	bc08      	pop	{r3}
 80094ac:	469e      	mov	lr, r3
 80094ae:	4770      	bx	lr
