
mp3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f08  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  08009108  08009108  0000a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d4  080099d4  0000b0c4  2**0
                  CONTENTS
  4 .ARM          00000008  080099d4  080099d4  0000a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099dc  080099dc  0000b0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099dc  080099dc  0000a9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099e0  080099e0  0000a9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  080099e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200000c4  08009aa8  0000b0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08009aa8  0000b4a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015476  00000000  00000000  0000b0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002efd  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00023468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f0a  00000000  00000000  00024740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a586  00000000  00000000  0002564a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c51  00000000  00000000  0004fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105940  00000000  00000000  00067821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a5c  00000000  00000000  0016d1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00172c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c4 	.word	0x200000c4
 800021c:	00000000 	.word	0x00000000
 8000220:	080090f0 	.word	0x080090f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c8 	.word	0x200000c8
 800023c:	080090f0 	.word	0x080090f0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <print>:
void MUSIC_Sound(uint16_t coordinates[2]);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* msg) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fe29 	bl	8000240 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <print+0x28>)
 80005fa:	f006 f8b7 	bl	800676c <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200002b8 	.word	0x200002b8

0800060c <Adjust_Volume>:

void Adjust_Volume(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	@ 0x38
 8000610:	af00      	add	r7, sp, #0
    char message[50];
    uint32_t adc_value;
    static uint32_t last_adc_value = 0;

    HAL_ADC_Start(&hadc1);
 8000612:	4829      	ldr	r0, [pc, #164]	@ (80006b8 <Adjust_Volume+0xac>)
 8000614:	f002 fcfc 	bl	8003010 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000618:	2164      	movs	r1, #100	@ 0x64
 800061a:	4827      	ldr	r0, [pc, #156]	@ (80006b8 <Adjust_Volume+0xac>)
 800061c:	f002 fdfa 	bl	8003214 <HAL_ADC_PollForConversion>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d13d      	bne.n	80006a2 <Adjust_Volume+0x96>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8000626:	4824      	ldr	r0, [pc, #144]	@ (80006b8 <Adjust_Volume+0xac>)
 8000628:	f002 fe7f 	bl	800332a <HAL_ADC_GetValue>
 800062c:	6378      	str	r0, [r7, #52]	@ 0x34

        // กรองค่า ADC ด้วย Moving Average (เฉลี่ยกับค่าก่อนหน้า)
        adc_value = (adc_value + last_adc_value) / 2;
 800062e:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <Adjust_Volume+0xb0>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000634:	4413      	add	r3, r2
 8000636:	085b      	lsrs	r3, r3, #1
 8000638:	637b      	str	r3, [r7, #52]	@ 0x34
        last_adc_value = adc_value;
 800063a:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <Adjust_Volume+0xb0>)
 800063c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800063e:	6013      	str	r3, [r2, #0]

        // แมปค่า ADC (0-4095) เป็นระดับเสียง (6-30)
        uint8_t new_volume = 6 + (adc_value * (30 - 6)) / 4095;
 8000640:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	461a      	mov	r2, r3
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <Adjust_Volume+0xb4>)
 800064e:	fba3 1302 	umull	r1, r3, r3, r2
 8000652:	1ad2      	subs	r2, r2, r3
 8000654:	0852      	lsrs	r2, r2, #1
 8000656:	4413      	add	r3, r2
 8000658:	0adb      	lsrs	r3, r3, #11
 800065a:	b2db      	uxtb	r3, r3
 800065c:	3306      	adds	r3, #6
 800065e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        // Debug ค่า ADC และระดับเสียง
//        sprintf(message, "ADC Value: %lu, New Volume: %d\r\n", adc_value, new_volume);
//        print(message);

        // อัปเดตเฉพาะเมื่อระดับเปลี่ยนเกิน 1 หน่วย เพื่อลดการส่งคำสั่งบ่อย
        if (abs(new_volume - current_volume) > 1) {
 8000662:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000666:	4a17      	ldr	r2, [pc, #92]	@ (80006c4 <Adjust_Volume+0xb8>)
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	bfb8      	it	lt
 8000670:	425b      	neglt	r3, r3
 8000672:	2b01      	cmp	r3, #1
 8000674:	dd18      	ble.n	80006a8 <Adjust_Volume+0x9c>
            MP3_SendCommand(0x06, new_volume);
 8000676:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800067a:	4619      	mov	r1, r3
 800067c:	2006      	movs	r0, #6
 800067e:	f000 fca5 	bl	8000fcc <MP3_SendCommand>
            current_volume = new_volume;
 8000682:	4a10      	ldr	r2, [pc, #64]	@ (80006c4 <Adjust_Volume+0xb8>)
 8000684:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000688:	7013      	strb	r3, [r2, #0]
            sprintf(message, "Volume adjusted to: %d\r\n", new_volume);
 800068a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800068e:	463b      	mov	r3, r7
 8000690:	490d      	ldr	r1, [pc, #52]	@ (80006c8 <Adjust_Volume+0xbc>)
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fc78 	bl	8007f88 <siprintf>
            print(message);
 8000698:	463b      	mov	r3, r7
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ffa0 	bl	80005e0 <print>
 80006a0:	e002      	b.n	80006a8 <Adjust_Volume+0x9c>
        }
    } else {
        print("ADC Poll Error\r\n");
 80006a2:	480a      	ldr	r0, [pc, #40]	@ (80006cc <Adjust_Volume+0xc0>)
 80006a4:	f7ff ff9c 	bl	80005e0 <print>
    }
    HAL_ADC_Stop(&hadc1);
 80006a8:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <Adjust_Volume+0xac>)
 80006aa:	f002 fd7f 	bl	80031ac <HAL_ADC_Stop>
}
 80006ae:	bf00      	nop
 80006b0:	3738      	adds	r7, #56	@ 0x38
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000ec 	.word	0x200000ec
 80006bc:	20000344 	.word	0x20000344
 80006c0:	00100101 	.word	0x00100101
 80006c4:	20000000 	.word	0x20000000
 80006c8:	08009158 	.word	0x08009158
 80006cc:	08009174 	.word	0x08009174

080006d0 <Draw_Project_Name>:

void Draw_Project_Name() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af02      	add	r7, sp, #8
	  ILI9341_Fill_Screen(BLACK);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f002 f954 	bl	8002984 <ILI9341_Fill_Screen>
	  ILI9341_Draw_Text("SMART", 10, 40, WHITE, 5, BLACK);
 80006dc:	2300      	movs	r3, #0
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	2305      	movs	r3, #5
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006e8:	2228      	movs	r2, #40	@ 0x28
 80006ea:	210a      	movs	r1, #10
 80006ec:	4811      	ldr	r0, [pc, #68]	@ (8000734 <Draw_Project_Name+0x64>)
 80006ee:	f001 fe43 	bl	8002378 <ILI9341_Draw_Text>
	  ILI9341_Draw_Text("ALPHABET", 10, 90, WHITE, 5, BLACK);
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2305      	movs	r3, #5
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	225a      	movs	r2, #90	@ 0x5a
 8000700:	210a      	movs	r1, #10
 8000702:	480d      	ldr	r0, [pc, #52]	@ (8000738 <Draw_Project_Name+0x68>)
 8000704:	f001 fe38 	bl	8002378 <ILI9341_Draw_Text>
	  ILI9341_Draw_Text("MUSIC BOX", 10, 140, WHITE, 5, BLACK);
 8000708:	2300      	movs	r3, #0
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	2305      	movs	r3, #5
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000714:	228c      	movs	r2, #140	@ 0x8c
 8000716:	210a      	movs	r1, #10
 8000718:	4808      	ldr	r0, [pc, #32]	@ (800073c <Draw_Project_Name+0x6c>)
 800071a:	f001 fe2d 	bl	8002378 <ILI9341_Draw_Text>
	  HAL_Delay(2000);
 800071e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000722:	f002 fc0d 	bl	8002f40 <HAL_Delay>
	  ILI9341_Fill_Screen(BLACK);
 8000726:	2000      	movs	r0, #0
 8000728:	f002 f92c 	bl	8002984 <ILI9341_Fill_Screen>
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08009188 	.word	0x08009188
 8000738:	08009190 	.word	0x08009190
 800073c:	0800919c 	.word	0x0800919c

08000740 <Is_Touch_Inside_Rectangle>:
//    return (touch_x >= x1 && touch_x <= x2 && touch_y >= y1 && touch_y <= y2);
//}

uint8_t Is_Touch_Inside_Rectangle(uint16_t xpos, uint16_t ypos,
                                  uint16_t x_min, uint16_t x_max,
                                  uint16_t y_min, uint16_t y_max) {
 8000740:	b490      	push	{r4, r7}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4623      	mov	r3, r4
 8000750:	80fb      	strh	r3, [r7, #6]
 8000752:	4603      	mov	r3, r0
 8000754:	80bb      	strh	r3, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	807b      	strh	r3, [r7, #2]
 800075a:	4613      	mov	r3, r2
 800075c:	803b      	strh	r3, [r7, #0]
    return (xpos >= x_min && xpos <= x_max && ypos > y_min && ypos <= y_max);
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	429a      	cmp	r2, r3
 8000764:	d30d      	bcc.n	8000782 <Is_Touch_Inside_Rectangle+0x42>
 8000766:	88fa      	ldrh	r2, [r7, #6]
 8000768:	883b      	ldrh	r3, [r7, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d809      	bhi.n	8000782 <Is_Touch_Inside_Rectangle+0x42>
 800076e:	88ba      	ldrh	r2, [r7, #4]
 8000770:	8a3b      	ldrh	r3, [r7, #16]
 8000772:	429a      	cmp	r2, r3
 8000774:	d905      	bls.n	8000782 <Is_Touch_Inside_Rectangle+0x42>
 8000776:	88ba      	ldrh	r2, [r7, #4]
 8000778:	8abb      	ldrh	r3, [r7, #20]
 800077a:	429a      	cmp	r2, r3
 800077c:	d801      	bhi.n	8000782 <Is_Touch_Inside_Rectangle+0x42>
 800077e:	2301      	movs	r3, #1
 8000780:	e000      	b.n	8000784 <Is_Touch_Inside_Rectangle+0x44>
 8000782:	2300      	movs	r3, #0
 8000784:	b2db      	uxtb	r3, r3
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bc90      	pop	{r4, r7}
 800078e:	4770      	bx	lr

08000790 <Check_Touch>:


void Check_Touch() {
 8000790:	b580      	push	{r7, lr}
 8000792:	b090      	sub	sp, #64	@ 0x40
 8000794:	af00      	add	r7, sp, #0
	uint16_t Coordinates[2];
    uint16_t x, y;
    char message[50];

    // Get touch coordinates (Assuming TS_GetTouch returns 1 if touched)
    if (TP_Read_Coordinates(Coordinates) == TOUCHPAD_DATA_OK) {
 8000796:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fab0 	bl	8002d00 <TP_Read_Coordinates>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d105      	bne.n	80007b2 <Check_Touch+0x22>
        uint16_t x = Coordinates[1];
 80007a6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80007a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        uint16_t y = 250 - Coordinates[0];
 80007aa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80007ac:	f1c3 03fa 	rsb	r3, r3, #250	@ 0xfa
 80007b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c

//        sprintf(message, "Touch detected at X: %d, Y: %d \n\r", x, y);
//        print(message);  // Debugging output

    }
}
 80007b2:	bf00      	nop
 80007b4:	3740      	adds	r7, #64	@ 0x40
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <AZ_Sound>:
//	            HAL_Delay(100);  // Debounce delay (adjust as needed)
//	        }
//	    }
//
//}
void AZ_Sound(uint16_t coordinates[2]) {
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b091      	sub	sp, #68	@ 0x44
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    char message[50];
    static GPIO_PinState prev_states[NUM_GPIO_CONFIGS] = {GPIO_PIN_SET};

    while (mode == 1) {
 80007c4:	e076      	b.n	80008b4 <AZ_Sound+0xf8>
    	Select_Sreen(coordinates); // ตรวจจับการสัมผัส
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 fc88 	bl	80010dc <Select_Sreen>
		if (mode != 1) break; // ออกทันทีถ้าโหมดเปลี่ยน
 80007cc:	4b3e      	ldr	r3, [pc, #248]	@ (80008c8 <AZ_Sound+0x10c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d174      	bne.n	80008be <AZ_Sound+0x102>

		if (HAL_GetTick() - last_volume_check > 500) {
 80007d4:	f002 fba8 	bl	8002f28 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	4b3c      	ldr	r3, [pc, #240]	@ (80008cc <AZ_Sound+0x110>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80007e4:	d906      	bls.n	80007f4 <AZ_Sound+0x38>
			Adjust_Volume();
 80007e6:	f7ff ff11 	bl	800060c <Adjust_Volume>
			last_volume_check = HAL_GetTick();
 80007ea:	f002 fb9d 	bl	8002f28 <HAL_GetTick>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a36      	ldr	r2, [pc, #216]	@ (80008cc <AZ_Sound+0x110>)
 80007f2:	6013      	str	r3, [r2, #0]
		}

        for (uint32_t i = 0; i < NUM_GPIO_CONFIGS; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80007f8:	e056      	b.n	80008a8 <AZ_Sound+0xec>
            GPIO_PinState current_state = HAL_GPIO_ReadPin(gpio_configs[i].port, gpio_configs[i].pin);
 80007fa:	4935      	ldr	r1, [pc, #212]	@ (80008d0 <AZ_Sound+0x114>)
 80007fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	440b      	add	r3, r1
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	4931      	ldr	r1, [pc, #196]	@ (80008d0 <AZ_Sound+0x114>)
 800080c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	440b      	add	r3, r1
 8000818:	3304      	adds	r3, #4
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f003 fba9 	bl	8003f74 <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            if (current_state == GPIO_PIN_RESET && prev_states[i] == GPIO_PIN_SET) {
 8000828:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800082c:	2b00      	cmp	r3, #0
 800082e:	d132      	bne.n	8000896 <AZ_Sound+0xda>
 8000830:	4a28      	ldr	r2, [pc, #160]	@ (80008d4 <AZ_Sound+0x118>)
 8000832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000834:	4413      	add	r3, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d12c      	bne.n	8000896 <AZ_Sound+0xda>
                MP3_SendCommand(0x0F, gpio_configs[i].file);
 800083c:	4924      	ldr	r1, [pc, #144]	@ (80008d0 <AZ_Sound+0x114>)
 800083e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	3306      	adds	r3, #6
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	4619      	mov	r1, r3
 8000850:	200f      	movs	r0, #15
 8000852:	f000 fbbb 	bl	8000fcc <MP3_SendCommand>
                sprintf(message, "Playing %c (0x%04X)\r\n", gpio_configs[i].alphabet, gpio_configs[i].file);
 8000856:	491e      	ldr	r1, [pc, #120]	@ (80008d0 <AZ_Sound+0x114>)
 8000858:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	3308      	adds	r3, #8
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	461c      	mov	r4, r3
 800086a:	4919      	ldr	r1, [pc, #100]	@ (80008d0 <AZ_Sound+0x114>)
 800086c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	3306      	adds	r3, #6
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	f107 0008 	add.w	r0, r7, #8
 8000880:	4622      	mov	r2, r4
 8000882:	4915      	ldr	r1, [pc, #84]	@ (80008d8 <AZ_Sound+0x11c>)
 8000884:	f007 fb80 	bl	8007f88 <siprintf>
                print(message);
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fea7 	bl	80005e0 <print>
                MP3_WaitForPlayback();
 8000892:	f000 f823 	bl	80008dc <MP3_WaitForPlayback>
//                HAL_Delay(300); // Debounce
            }
            prev_states[i] = current_state;
 8000896:	4a0f      	ldr	r2, [pc, #60]	@ (80008d4 <AZ_Sound+0x118>)
 8000898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800089a:	4413      	add	r3, r2
 800089c:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80008a0:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < NUM_GPIO_CONFIGS; i++) {
 80008a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008a4:	3301      	adds	r3, #1
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80008a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008aa:	2b19      	cmp	r3, #25
 80008ac:	d9a5      	bls.n	80007fa <AZ_Sound+0x3e>
        }
        HAL_Delay(50); // ลดการใช้งาน CPU
 80008ae:	2032      	movs	r0, #50	@ 0x32
 80008b0:	f002 fb46 	bl	8002f40 <HAL_Delay>
    while (mode == 1) {
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <AZ_Sound+0x10c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d084      	beq.n	80007c6 <AZ_Sound+0xa>
    }
}
 80008bc:	e000      	b.n	80008c0 <AZ_Sound+0x104>
		if (mode != 1) break; // ออกทันทีถ้าโหมดเปลี่ยน
 80008be:	bf00      	nop
}
 80008c0:	bf00      	nop
 80008c2:	3744      	adds	r7, #68	@ 0x44
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	20000340 	.word	0x20000340
 80008cc:	200000e8 	.word	0x200000e8
 80008d0:	08009514 	.word	0x08009514
 80008d4:	20000004 	.word	0x20000004
 80008d8:	080091e0 	.word	0x080091e0

080008dc <MP3_WaitForPlayback>:
//        HAL_Delay(50); // ลด delay เพื่อให้การตอบสนองเร็วขึ้น (เดิม 100 ms)
//    }
//}

// ฟังก์ชันรอให้เพลงเล่นเสร็จ
void MP3_WaitForPlayback(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	@ 0x38
 80008e0:	af00      	add	r7, sp, #0
    char message[50];
    uint32_t timeout = HAL_GetTick() + 300; // Timeout 5 วินาที
 80008e2:	f002 fb21 	bl	8002f28 <HAL_GetTick>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80008ec:	637b      	str	r3, [r7, #52]	@ 0x34

    while (!playback_finished && is_playing && (HAL_GetTick() < timeout)) {
 80008ee:	e002      	b.n	80008f6 <MP3_WaitForPlayback+0x1a>
        HAL_Delay(20);
 80008f0:	2014      	movs	r0, #20
 80008f2:	f002 fb25 	bl	8002f40 <HAL_Delay>
    while (!playback_finished && is_playing && (HAL_GetTick() < timeout)) {
 80008f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MP3_WaitForPlayback+0x88>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10a      	bne.n	8000916 <MP3_WaitForPlayback+0x3a>
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MP3_WaitForPlayback+0x8c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d005      	beq.n	8000916 <MP3_WaitForPlayback+0x3a>
 800090a:	f002 fb0d 	bl	8002f28 <HAL_GetTick>
 800090e:	4602      	mov	r2, r0
 8000910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000912:	4293      	cmp	r3, r2
 8000914:	d8ec      	bhi.n	80008f0 <MP3_WaitForPlayback+0x14>
    }

    if (HAL_GetTick() >= timeout) {
 8000916:	f002 fb07 	bl	8002f28 <HAL_GetTick>
 800091a:	4602      	mov	r2, r0
 800091c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800091e:	4293      	cmp	r3, r2
 8000920:	d80d      	bhi.n	800093e <MP3_WaitForPlayback+0x62>
        sprintf(message, "Timeout waiting for playback (File: 0x%04X)\r\n", current_file);
 8000922:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MP3_WaitForPlayback+0x90>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	463b      	mov	r3, r7
 800092c:	4910      	ldr	r1, [pc, #64]	@ (8000970 <MP3_WaitForPlayback+0x94>)
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fb2a 	bl	8007f88 <siprintf>
        print(message);
 8000934:	463b      	mov	r3, r7
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe52 	bl	80005e0 <print>
 800093c:	e007      	b.n	800094e <MP3_WaitForPlayback+0x72>
    } else if (playback_finished) {
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MP3_WaitForPlayback+0x88>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <MP3_WaitForPlayback+0x72>
        print("Playback finished normally\r\n");
 8000948:	480a      	ldr	r0, [pc, #40]	@ (8000974 <MP3_WaitForPlayback+0x98>)
 800094a:	f7ff fe49 	bl	80005e0 <print>
    }

    playback_finished = 0;
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <MP3_WaitForPlayback+0x88>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
    is_playing = 0;
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <MP3_WaitForPlayback+0x8c>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	3738      	adds	r7, #56	@ 0x38
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000e0 	.word	0x200000e0
 8000968:	200000e4 	.word	0x200000e4
 800096c:	200000e2 	.word	0x200000e2
 8000970:	080091f8 	.word	0x080091f8
 8000974:	08009228 	.word	0x08009228

08000978 <LISTEN_Sound>:
//            break;
//        }
//    }
//}

void LISTEN_Sound(uint16_t coordinates[2]) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b092      	sub	sp, #72	@ 0x48
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    char message[50];

    while (mode == 2) {
 8000980:	e09c      	b.n	8000abc <LISTEN_Sound+0x144>
        Select_Sreen(coordinates);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fbaa 	bl	80010dc <Select_Sreen>
        if (mode != 2) return;
 8000988:	4b51      	ldr	r3, [pc, #324]	@ (8000ad0 <LISTEN_Sound+0x158>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b02      	cmp	r3, #2
 800098e:	f040 809b 	bne.w	8000ac8 <LISTEN_Sound+0x150>

        if (HAL_GetTick() - last_volume_check > 500) {
 8000992:	f002 fac9 	bl	8002f28 <HAL_GetTick>
 8000996:	4602      	mov	r2, r0
 8000998:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad4 <LISTEN_Sound+0x15c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80009a2:	d906      	bls.n	80009b2 <LISTEN_Sound+0x3a>
            Adjust_Volume();
 80009a4:	f7ff fe32 	bl	800060c <Adjust_Volume>
            last_volume_check = HAL_GetTick();
 80009a8:	f002 fabe 	bl	8002f28 <HAL_GetTick>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a49      	ldr	r2, [pc, #292]	@ (8000ad4 <LISTEN_Sound+0x15c>)
 80009b0:	6013      	str	r3, [r2, #0]
        }

        uint32_t rand_idx = rand() % NUM_GPIO_CONFIGS;
 80009b2:	f007 f9e9 	bl	8007d88 <rand>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a47      	ldr	r2, [pc, #284]	@ (8000ad8 <LISTEN_Sound+0x160>)
 80009ba:	fba2 1203 	umull	r1, r2, r2, r3
 80009be:	08d2      	lsrs	r2, r2, #3
 80009c0:	211a      	movs	r1, #26
 80009c2:	fb01 f202 	mul.w	r2, r1, r2
 80009c6:	1a9b      	subs	r3, r3, r2
 80009c8:	647b      	str	r3, [r7, #68]	@ 0x44
        char expected_letter = gpio_configs[rand_idx].alphabet;
 80009ca:	4944      	ldr	r1, [pc, #272]	@ (8000adc <LISTEN_Sound+0x164>)
 80009cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80009ce:	4613      	mov	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	3308      	adds	r3, #8
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        uint16_t sound_file = gpio_configs[rand_idx].file;
 80009e0:	493e      	ldr	r1, [pc, #248]	@ (8000adc <LISTEN_Sound+0x164>)
 80009e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	440b      	add	r3, r1
 80009ee:	3306      	adds	r3, #6
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

        HAL_Delay(400);
 80009f6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80009fa:	f002 faa1 	bl	8002f40 <HAL_Delay>
        MP3_SendCommand(0x0F, sound_file);
 80009fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a02:	4619      	mov	r1, r3
 8000a04:	200f      	movs	r0, #15
 8000a06:	f000 fae1 	bl	8000fcc <MP3_SendCommand>
        sprintf(message, "Playing: %c\r\n", expected_letter);
 8000a0a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4933      	ldr	r1, [pc, #204]	@ (8000ae0 <LISTEN_Sound+0x168>)
 8000a14:	4618      	mov	r0, r3
 8000a16:	f007 fab7 	bl	8007f88 <siprintf>
        print(message);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fdde 	bl	80005e0 <print>
        HAL_Delay(1000);
 8000a24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a28:	f002 fa8a 	bl	8002f40 <HAL_Delay>

        char triggered_letter = Get_Triggered_Letter(coordinates); // ส่ง coordinates
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f85d 	bl	8000aec <Get_Triggered_Letter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (triggered_letter == '\0') {
 8000a38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d03c      	beq.n	8000aba <LISTEN_Sound+0x142>
            continue; // ถ้าโหมดเปลี่ยน ข้ามไปรอบถัดไป
        }

        if (triggered_letter == expected_letter) {
 8000a40:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000a44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d116      	bne.n	8000a7a <LISTEN_Sound+0x102>
            HAL_Delay(1000);
 8000a4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a50:	f002 fa76 	bl	8002f40 <HAL_Delay>
            MP3_SendCommand(0x0F, 0x0301);
 8000a54:	f240 3101 	movw	r1, #769	@ 0x301
 8000a58:	200f      	movs	r0, #15
 8000a5a:	f000 fab7 	bl	8000fcc <MP3_SendCommand>
            sprintf(message, "Correct: %c\r\n", triggered_letter);
 8000a5e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	491f      	ldr	r1, [pc, #124]	@ (8000ae4 <LISTEN_Sound+0x16c>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f007 fa8d 	bl	8007f88 <siprintf>
            print(message);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fdb4 	bl	80005e0 <print>
 8000a78:	e01a      	b.n	8000ab0 <LISTEN_Sound+0x138>
        } else {
            sprintf(message, "Wrong: Expected %c, Got %c\r\n", expected_letter, triggered_letter);
 8000a7a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8000a7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a82:	f107 000c 	add.w	r0, r7, #12
 8000a86:	4918      	ldr	r1, [pc, #96]	@ (8000ae8 <LISTEN_Sound+0x170>)
 8000a88:	f007 fa7e 	bl	8007f88 <siprintf>
            print(message);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fda5 	bl	80005e0 <print>
            HAL_Delay(800);
 8000a96:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000a9a:	f002 fa51 	bl	8002f40 <HAL_Delay>
            MP3_SendCommand(0x0F, 0x0304);
 8000a9e:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 fa92 	bl	8000fcc <MP3_SendCommand>
            HAL_Delay(800);
 8000aa8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000aac:	f002 fa48 	bl	8002f40 <HAL_Delay>
        }
        HAL_Delay(1000);
 8000ab0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab4:	f002 fa44 	bl	8002f40 <HAL_Delay>
 8000ab8:	e000      	b.n	8000abc <LISTEN_Sound+0x144>
            continue; // ถ้าโหมดเปลี่ยน ข้ามไปรอบถัดไป
 8000aba:	bf00      	nop
    while (mode == 2) {
 8000abc:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <LISTEN_Sound+0x158>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	f43f af5e 	beq.w	8000982 <LISTEN_Sound+0xa>
 8000ac6:	e000      	b.n	8000aca <LISTEN_Sound+0x152>
        if (mode != 2) return;
 8000ac8:	bf00      	nop
    }
}
 8000aca:	3748      	adds	r7, #72	@ 0x48
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000340 	.word	0x20000340
 8000ad4:	200000e8 	.word	0x200000e8
 8000ad8:	4ec4ec4f 	.word	0x4ec4ec4f
 8000adc:	08009514 	.word	0x08009514
 8000ae0:	08009248 	.word	0x08009248
 8000ae4:	08009258 	.word	0x08009258
 8000ae8:	08009268 	.word	0x08009268

08000aec <Get_Triggered_Letter>:
//        HAL_Delay(50);
//    }
//    return '\0'; // ไม่ควรถึงจุดนี้
//}

char Get_Triggered_Letter(uint16_t coordinates[2]) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b091      	sub	sp, #68	@ 0x44
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    char message[50];
    static GPIO_PinState prev_states[NUM_GPIO_CONFIGS] = {GPIO_PIN_SET};

    // ทำงานเฉพาะโหมด 2 (Listen) หรือ 3 (Vocab)
    if (mode != 2 && mode != 3) {
 8000af4:	4b4d      	ldr	r3, [pc, #308]	@ (8000c2c <Get_Triggered_Letter+0x140>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	f000 8088 	beq.w	8000c0e <Get_Triggered_Letter+0x122>
 8000afe:	4b4b      	ldr	r3, [pc, #300]	@ (8000c2c <Get_Triggered_Letter+0x140>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	f000 8083 	beq.w	8000c0e <Get_Triggered_Letter+0x122>
        return '\0'; // ออกทันทีถ้าไม่ใช่โหมดที่ต้องการ
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e08b      	b.n	8000c24 <Get_Triggered_Letter+0x138>
    }

    // วนลูปเพื่อรอปุ่มถูกกด
    while (mode == 2 || mode == 3) {
        Select_Sreen(coordinates); // ตรวจจับการสัมผัสเพื่อเปลี่ยนโหมด
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 fae5 	bl	80010dc <Select_Sreen>
        if (mode != 2 && mode != 3) {
 8000b12:	4b46      	ldr	r3, [pc, #280]	@ (8000c2c <Get_Triggered_Letter+0x140>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d005      	beq.n	8000b26 <Get_Triggered_Letter+0x3a>
 8000b1a:	4b44      	ldr	r3, [pc, #272]	@ (8000c2c <Get_Triggered_Letter+0x140>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d001      	beq.n	8000b26 <Get_Triggered_Letter+0x3a>
            return '\0'; // ออกถ้าโหมดเปลี่ยน
 8000b22:	2300      	movs	r3, #0
 8000b24:	e07e      	b.n	8000c24 <Get_Triggered_Letter+0x138>
        }

        for (uint32_t i = 0; i < NUM_GPIO_CONFIGS; i++) {
 8000b26:	2300      	movs	r3, #0
 8000b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b2a:	e06a      	b.n	8000c02 <Get_Triggered_Letter+0x116>
            GPIO_PinState current_state = HAL_GPIO_ReadPin(gpio_configs[i].port, gpio_configs[i].pin);
 8000b2c:	4940      	ldr	r1, [pc, #256]	@ (8000c30 <Get_Triggered_Letter+0x144>)
 8000b2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	440b      	add	r3, r1
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	493c      	ldr	r1, [pc, #240]	@ (8000c30 <Get_Triggered_Letter+0x144>)
 8000b3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f003 fa10 	bl	8003f74 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            if (current_state == GPIO_PIN_RESET && prev_states[i] == GPIO_PIN_SET) { // ขอบลง
 8000b5a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d146      	bne.n	8000bf0 <Get_Triggered_Letter+0x104>
 8000b62:	4a34      	ldr	r2, [pc, #208]	@ (8000c34 <Get_Triggered_Letter+0x148>)
 8000b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d140      	bne.n	8000bf0 <Get_Triggered_Letter+0x104>
                HAL_Delay(30); // Debounce
 8000b6e:	201e      	movs	r0, #30
 8000b70:	f002 f9e6 	bl	8002f40 <HAL_Delay>
                MP3_SendCommand(0x0F, gpio_configs[i].file);
 8000b74:	492e      	ldr	r1, [pc, #184]	@ (8000c30 <Get_Triggered_Letter+0x144>)
 8000b76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	3306      	adds	r3, #6
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	200f      	movs	r0, #15
 8000b8a:	f000 fa1f 	bl	8000fcc <MP3_SendCommand>
                sprintf(message, "User pressed: %c (0x%04X)\r\n", gpio_configs[i].alphabet, gpio_configs[i].file);
 8000b8e:	4928      	ldr	r1, [pc, #160]	@ (8000c30 <Get_Triggered_Letter+0x144>)
 8000b90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	461c      	mov	r4, r3
 8000ba2:	4923      	ldr	r1, [pc, #140]	@ (8000c30 <Get_Triggered_Letter+0x144>)
 8000ba4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	3306      	adds	r3, #6
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	f107 0008 	add.w	r0, r7, #8
 8000bb8:	4622      	mov	r2, r4
 8000bba:	491f      	ldr	r1, [pc, #124]	@ (8000c38 <Get_Triggered_Letter+0x14c>)
 8000bbc:	f007 f9e4 	bl	8007f88 <siprintf>
                print(message);
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd0b 	bl	80005e0 <print>
                MP3_WaitForPlayback();
 8000bca:	f7ff fe87 	bl	80008dc <MP3_WaitForPlayback>
                prev_states[i] = current_state;
 8000bce:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <Get_Triggered_Letter+0x148>)
 8000bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8000bd8:	701a      	strb	r2, [r3, #0]
                return gpio_configs[i].alphabet; // คืนค่าตัวอักษรที่กด
 8000bda:	4915      	ldr	r1, [pc, #84]	@ (8000c30 <Get_Triggered_Letter+0x144>)
 8000bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3308      	adds	r3, #8
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	e019      	b.n	8000c24 <Get_Triggered_Letter+0x138>
            }
            prev_states[i] = current_state;
 8000bf0:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <Get_Triggered_Letter+0x148>)
 8000bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bf4:	4413      	add	r3, r2
 8000bf6:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8000bfa:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < NUM_GPIO_CONFIGS; i++) {
 8000bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bfe:	3301      	adds	r3, #1
 8000c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c04:	2b19      	cmp	r3, #25
 8000c06:	d991      	bls.n	8000b2c <Get_Triggered_Letter+0x40>
        }
        HAL_Delay(20); // ลดจาก 50 เป็น 20 ms เพื่อการตอบสนองเร็วขึ้น
 8000c08:	2014      	movs	r0, #20
 8000c0a:	f002 f999 	bl	8002f40 <HAL_Delay>
    while (mode == 2 || mode == 3) {
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <Get_Triggered_Letter+0x140>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	f43f af7a 	beq.w	8000b0c <Get_Triggered_Letter+0x20>
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <Get_Triggered_Letter+0x140>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	f43f af75 	beq.w	8000b0c <Get_Triggered_Letter+0x20>
    }

    return '\0'; // คืนค่า null ถ้าโหมดเปลี่ยนก่อนกดปุ่ม
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3744      	adds	r7, #68	@ 0x44
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	20000340 	.word	0x20000340
 8000c30:	08009514 	.word	0x08009514
 8000c34:	20000020 	.word	0x20000020
 8000c38:	08009288 	.word	0x08009288

08000c3c <VOCAB_Sound>:
//            }
//        }
//    }
//}

void VOCAB_Sound(uint16_t coordinates[2]) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b092      	sub	sp, #72	@ 0x48
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    char message[50];

    while (mode == 3) {
 8000c44:	e0c6      	b.n	8000dd4 <VOCAB_Sound+0x198>
        Select_Sreen(coordinates);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 fa48 	bl	80010dc <Select_Sreen>
        if (mode != 3) return;
 8000c4c:	4b67      	ldr	r3, [pc, #412]	@ (8000dec <VOCAB_Sound+0x1b0>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	f040 80c5 	bne.w	8000de0 <VOCAB_Sound+0x1a4>

        if (HAL_GetTick() - last_volume_check > 500) {
 8000c56:	f002 f967 	bl	8002f28 <HAL_GetTick>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	4b64      	ldr	r3, [pc, #400]	@ (8000df0 <VOCAB_Sound+0x1b4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c66:	d906      	bls.n	8000c76 <VOCAB_Sound+0x3a>
            Adjust_Volume();
 8000c68:	f7ff fcd0 	bl	800060c <Adjust_Volume>
            last_volume_check = HAL_GetTick();
 8000c6c:	f002 f95c 	bl	8002f28 <HAL_GetTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a5f      	ldr	r2, [pc, #380]	@ (8000df0 <VOCAB_Sound+0x1b4>)
 8000c74:	6013      	str	r3, [r2, #0]
        }

        uint32_t rand_idx = rand() % NUM_VOCAB;
 8000c76:	f007 f887 	bl	8007d88 <rand>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000df4 <VOCAB_Sound+0x1b8>)
 8000c80:	fba3 1302 	umull	r1, r3, r3, r2
 8000c84:	08d9      	lsrs	r1, r3, #3
 8000c86:	460b      	mov	r3, r1
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	643b      	str	r3, [r7, #64]	@ 0x40
        const Vocab_t *current_word = &vocab[rand_idx];
 8000c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4a58      	ldr	r2, [pc, #352]	@ (8000df8 <VOCAB_Sound+0x1bc>)
 8000c98:	4413      	add	r3, r2
 8000c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        MP3_SendCommand(0x0F, current_word->file);
 8000c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c9e:	889b      	ldrh	r3, [r3, #4]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f992 	bl	8000fcc <MP3_SendCommand>
        sprintf(message, "Playing word: %s\r\n", current_word->alphabet);
 8000ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4952      	ldr	r1, [pc, #328]	@ (8000dfc <VOCAB_Sound+0x1c0>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f007 f968 	bl	8007f88 <siprintf>
        print(message);
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fc8f 	bl	80005e0 <print>

        for (uint8_t i = 0; i < current_word->length; i++) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000cc8:	e079      	b.n	8000dbe <VOCAB_Sound+0x182>
            char expected_letter = current_word->alphabet[i];
 8000cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            sprintf(message, "Letter %d: Press '%c'\r\n", i + 1, expected_letter);
 8000cda:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000ce4:	f107 0008 	add.w	r0, r7, #8
 8000ce8:	4945      	ldr	r1, [pc, #276]	@ (8000e00 <VOCAB_Sound+0x1c4>)
 8000cea:	f007 f94d 	bl	8007f88 <siprintf>
            print(message);
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc74 	bl	80005e0 <print>

            char triggered_letter = Get_Triggered_Letter(coordinates); // ส่ง coordinates
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fef7 	bl	8000aec <Get_Triggered_Letter>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            if (triggered_letter == '\0') {
 8000d04:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d06b      	beq.n	8000de4 <VOCAB_Sound+0x1a8>
                return; // ออกถ้าโหมดเปลี่ยน
            }

            if (triggered_letter == expected_letter) {
 8000d0c:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000d10:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d129      	bne.n	8000d6c <VOCAB_Sound+0x130>
                sprintf(message, " %c : trig correct\r\n", triggered_letter);
 8000d18:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4938      	ldr	r1, [pc, #224]	@ (8000e04 <VOCAB_Sound+0x1c8>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f007 f930 	bl	8007f88 <siprintf>
                print(message);
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc57 	bl	80005e0 <print>
                HAL_Delay(500);
 8000d32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d36:	f002 f903 	bl	8002f40 <HAL_Delay>
                MP3_SendCommand(0x0F, 0x0301);
 8000d3a:	f240 3101 	movw	r1, #769	@ 0x301
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f000 f944 	bl	8000fcc <MP3_SendCommand>
                if (i == current_word->length - 1) {
 8000d44:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d4a:	799b      	ldrb	r3, [r3, #6]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d130      	bne.n	8000db4 <VOCAB_Sound+0x178>
                    MP3_SendCommand(0x0F, 0x0302);
 8000d52:	f240 3102 	movw	r1, #770	@ 0x302
 8000d56:	200f      	movs	r0, #15
 8000d58:	f000 f938 	bl	8000fcc <MP3_SendCommand>
                    print("All correct\r\n");
 8000d5c:	482a      	ldr	r0, [pc, #168]	@ (8000e08 <VOCAB_Sound+0x1cc>)
 8000d5e:	f7ff fc3f 	bl	80005e0 <print>
                    HAL_Delay(3000);
 8000d62:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d66:	f002 f8eb 	bl	8002f40 <HAL_Delay>
 8000d6a:	e023      	b.n	8000db4 <VOCAB_Sound+0x178>
                }
            } else {
                sprintf(message, " %c : Wrong input\r\n", triggered_letter);
 8000d6c:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4925      	ldr	r1, [pc, #148]	@ (8000e0c <VOCAB_Sound+0x1d0>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f007 f906 	bl	8007f88 <siprintf>
                print(message);
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fc2d 	bl	80005e0 <print>
                HAL_Delay(500);
 8000d86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d8a:	f002 f8d9 	bl	8002f40 <HAL_Delay>
                MP3_SendCommand(0x0F, 0x0304);
 8000d8e:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8000d92:	200f      	movs	r0, #15
 8000d94:	f000 f91a 	bl	8000fcc <MP3_SendCommand>
                HAL_Delay(1000);
 8000d98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d9c:	f002 f8d0 	bl	8002f40 <HAL_Delay>
                MP3_SendCommand(0x0F, 0x0303);
 8000da0:	f240 3103 	movw	r1, #771	@ 0x303
 8000da4:	200f      	movs	r0, #15
 8000da6:	f000 f911 	bl	8000fcc <MP3_SendCommand>
                HAL_Delay(900);
 8000daa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000dae:	f002 f8c7 	bl	8002f40 <HAL_Delay>
                break;
 8000db2:	e00b      	b.n	8000dcc <VOCAB_Sound+0x190>
        for (uint8_t i = 0; i < current_word->length; i++) {
 8000db4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000db8:	3301      	adds	r3, #1
 8000dba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dc0:	799b      	ldrb	r3, [r3, #6]
 8000dc2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	f4ff af7f 	bcc.w	8000cca <VOCAB_Sound+0x8e>
            }
        }
        HAL_Delay(1000);
 8000dcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dd0:	f002 f8b6 	bl	8002f40 <HAL_Delay>
    while (mode == 3) {
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <VOCAB_Sound+0x1b0>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	f43f af34 	beq.w	8000c46 <VOCAB_Sound+0xa>
 8000dde:	e002      	b.n	8000de6 <VOCAB_Sound+0x1aa>
        if (mode != 3) return;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <VOCAB_Sound+0x1aa>
                return; // ออกถ้าโหมดเปลี่ยน
 8000de4:	bf00      	nop
    }
}
 8000de6:	3748      	adds	r7, #72	@ 0x48
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000340 	.word	0x20000340
 8000df0:	200000e8 	.word	0x200000e8
 8000df4:	cccccccd 	.word	0xcccccccd
 8000df8:	0800964c 	.word	0x0800964c
 8000dfc:	080092a4 	.word	0x080092a4
 8000e00:	080092b8 	.word	0x080092b8
 8000e04:	080092d0 	.word	0x080092d0
 8000e08:	080092e8 	.word	0x080092e8
 8000e0c:	080092f8 	.word	0x080092f8

08000e10 <Get_Triggered_Index>:

int Get_Triggered_Index(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
    static GPIO_PinState prev_states[NUM_GPIO_CONFIGS] = {GPIO_PIN_SET};
    int triggered_index = -1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	60fb      	str	r3, [r7, #12]

    for (uint32_t i = 0; i < NUM_GPIO_CONFIGS; i++) {
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	e02d      	b.n	8000e7e <Get_Triggered_Index+0x6e>
        GPIO_PinState current_state = HAL_GPIO_ReadPin(gpio_configs[i].port, gpio_configs[i].pin);
 8000e22:	491b      	ldr	r1, [pc, #108]	@ (8000e90 <Get_Triggered_Index+0x80>)
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	4917      	ldr	r1, [pc, #92]	@ (8000e90 <Get_Triggered_Index+0x80>)
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	3304      	adds	r3, #4
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f003 f895 	bl	8003f74 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
        if (current_state == GPIO_PIN_RESET && prev_states[i] == GPIO_PIN_SET) {
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10c      	bne.n	8000e6e <Get_Triggered_Index+0x5e>
 8000e54:	4a0f      	ldr	r2, [pc, #60]	@ (8000e94 <Get_Triggered_Index+0x84>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d106      	bne.n	8000e6e <Get_Triggered_Index+0x5e>
            HAL_Delay(300);  // Debounce
 8000e60:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e64:	f002 f86c 	bl	8002f40 <HAL_Delay>
            triggered_index = i;
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60fb      	str	r3, [r7, #12]
            break;  // Exit after first trigger
 8000e6c:	e00a      	b.n	8000e84 <Get_Triggered_Index+0x74>
        }
        prev_states[i] = current_state;
 8000e6e:	4a09      	ldr	r2, [pc, #36]	@ (8000e94 <Get_Triggered_Index+0x84>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4413      	add	r3, r2
 8000e74:	79fa      	ldrb	r2, [r7, #7]
 8000e76:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_GPIO_CONFIGS; i++) {
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	2b19      	cmp	r3, #25
 8000e82:	d9ce      	bls.n	8000e22 <Get_Triggered_Index+0x12>
    }
    return triggered_index;  // -1 if no trigger
 8000e84:	68fb      	ldr	r3, [r7, #12]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	08009514 	.word	0x08009514
 8000e94:	2000003c 	.word	0x2000003c

08000e98 <MUSIC_Sound>:

void MUSIC_Sound(uint16_t coordinates[2]) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b092      	sub	sp, #72	@ 0x48
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
    char message[50];

    while (mode == 4) {
 8000ea0:	e051      	b.n	8000f46 <MUSIC_Sound+0xae>
        Select_Sreen(coordinates);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f91a 	bl	80010dc <Select_Sreen>
		if (mode != 4) break;
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <MUSIC_Sound+0xc4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d14f      	bne.n	8000f50 <MUSIC_Sound+0xb8>
		if (HAL_GetTick() - last_volume_check > 500) {
 8000eb0:	f002 f83a 	bl	8002f28 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <MUSIC_Sound+0xc8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ec0:	d906      	bls.n	8000ed0 <MUSIC_Sound+0x38>
				Adjust_Volume();
 8000ec2:	f7ff fba3 	bl	800060c <Adjust_Volume>
				last_volume_check = HAL_GetTick();
 8000ec6:	f002 f82f 	bl	8002f28 <HAL_GetTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a24      	ldr	r2, [pc, #144]	@ (8000f60 <MUSIC_Sound+0xc8>)
 8000ece:	6013      	str	r3, [r2, #0]
			}
        int triggered_index = Get_Triggered_Index();
 8000ed0:	f7ff ff9e 	bl	8000e10 <Get_Triggered_Index>
 8000ed4:	63f8      	str	r0, [r7, #60]	@ 0x3c

        if (triggered_index != -1) {
 8000ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d02d      	beq.n	8000f3a <MUSIC_Sound+0xa2>
            // คำนวณหมายเลขไฟล์จาก MUSIC_FOLDER (0x0401 ถึง 0x041A)
            uint16_t file_num = MUSIC_FOLDER + (triggered_index + 1);
 8000ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 8000ee6:	877b      	strh	r3, [r7, #58]	@ 0x3a
            MP3_SendCommand(0x0F, file_num);
 8000ee8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000eea:	4619      	mov	r1, r3
 8000eec:	200f      	movs	r0, #15
 8000eee:	f000 f86d 	bl	8000fcc <MP3_SendCommand>

            // แสดงข้อมูลการเล่น
            sprintf(message, "Playing file: 0x%04X (%c, Index %d), current_command: 0x%02X\r\n",
 8000ef2:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
                    file_num, gpio_configs[triggered_index].alphabet, triggered_index, current_command);
 8000ef4:	481b      	ldr	r0, [pc, #108]	@ (8000f64 <MUSIC_Sound+0xcc>)
 8000ef6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4403      	add	r3, r0
 8000f02:	3308      	adds	r3, #8
 8000f04:	881b      	ldrh	r3, [r3, #0]
            sprintf(message, "Playing file: 0x%04X (%c, Index %d), current_command: 0x%02X\r\n",
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MUSIC_Sound+0xd0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f107 0008 	add.w	r0, r7, #8
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	4913      	ldr	r1, [pc, #76]	@ (8000f6c <MUSIC_Sound+0xd4>)
 8000f1e:	f007 f833 	bl	8007f88 <siprintf>
            print(message);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fb5a 	bl	80005e0 <print>

            // รอให้ไฟล์เล่นเสร็จ
            MP3_WaitForPlayback();
 8000f2c:	f7ff fcd6 	bl	80008dc <MP3_WaitForPlayback>
            HAL_Delay(300); // Debounce
 8000f30:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f34:	f002 f804 	bl	8002f40 <HAL_Delay>
 8000f38:	e005      	b.n	8000f46 <MUSIC_Sound+0xae>
        } else {
            print("No button pressed, waiting...\r\n");
 8000f3a:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <MUSIC_Sound+0xd8>)
 8000f3c:	f7ff fb50 	bl	80005e0 <print>
            HAL_Delay(100);
 8000f40:	2064      	movs	r0, #100	@ 0x64
 8000f42:	f001 fffd 	bl	8002f40 <HAL_Delay>
    while (mode == 4) {
 8000f46:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <MUSIC_Sound+0xc4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d0a9      	beq.n	8000ea2 <MUSIC_Sound+0xa>
        }
    }
}
 8000f4e:	e000      	b.n	8000f52 <MUSIC_Sound+0xba>
		if (mode != 4) break;
 8000f50:	bf00      	nop
}
 8000f52:	bf00      	nop
 8000f54:	3740      	adds	r7, #64	@ 0x40
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000340 	.word	0x20000340
 8000f60:	200000e8 	.word	0x200000e8
 8000f64:	08009514 	.word	0x08009514
 8000f68:	200000e1 	.word	0x200000e1
 8000f6c:	0800930c 	.word	0x0800930c
 8000f70:	0800934c 	.word	0x0800934c

08000f74 <HAL_UART_RxCpltCallback>:
    } else {
        print("No response from MP3 module\r\n");
    }
//    return 0xFF;  // Error code
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x44>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d114      	bne.n	8000fae <HAL_UART_RxCpltCallback+0x3a>
        static uint8_t rx_buffer[10];
        if (HAL_UART_Receive_IT(&huart2, rx_buffer, 10) == HAL_OK) {
 8000f84:	220a      	movs	r2, #10
 8000f86:	490d      	ldr	r1, [pc, #52]	@ (8000fbc <HAL_UART_RxCpltCallback+0x48>)
 8000f88:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x44>)
 8000f8a:	f005 fc78 	bl	800687e <HAL_UART_Receive_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10c      	bne.n	8000fae <HAL_UART_RxCpltCallback+0x3a>
            if (rx_buffer[3] == 0x3E) { // Playback finished
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_UART_RxCpltCallback+0x48>)
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	2b3e      	cmp	r3, #62	@ 0x3e
 8000f9a:	d108      	bne.n	8000fae <HAL_UART_RxCpltCallback+0x3a>
                playback_finished = 1;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_UART_RxCpltCallback+0x4c>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
                is_playing = 0;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_UART_RxCpltCallback+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
                print("Playback finished (Feedback 0x3E)\r\n");
 8000fa8:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <HAL_UART_RxCpltCallback+0x54>)
 8000faa:	f7ff fb19 	bl	80005e0 <print>
            }
        }
    }
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000230 	.word	0x20000230
 8000fbc:	20000348 	.word	0x20000348
 8000fc0:	200000e0 	.word	0x200000e0
 8000fc4:	200000e4 	.word	0x200000e4
 8000fc8:	080093b0 	.word	0x080093b0

08000fcc <MP3_SendCommand>:
//
//    // Send the command via UART
//    HAL_UART_Transmit(&huart2, buffer, 10, 100);
//}

void MP3_SendCommand(uint8_t command, uint16_t parameter) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b092      	sub	sp, #72	@ 0x48
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	80bb      	strh	r3, [r7, #4]
    char message[50];
    sprintf(message, "check in MP3_SendCommand: 0x%02X, Param: 0x%04X\r\n", command, parameter);
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	f107 0014 	add.w	r0, r7, #20
 8000fe4:	4934      	ldr	r1, [pc, #208]	@ (80010b8 <MP3_SendCommand+0xec>)
 8000fe6:	f006 ffcf 	bl	8007f88 <siprintf>
    print(message);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff faf6 	bl	80005e0 <print>

    // ตรวจสอบว่ากำลังเล่นอยู่หรือไม่
    if (is_playing) {
 8000ff4:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <MP3_SendCommand+0xf0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <MP3_SendCommand+0x3c>
        print("MP3 is playing, waiting...\r\n");
 8000ffe:	4830      	ldr	r0, [pc, #192]	@ (80010c0 <MP3_SendCommand+0xf4>)
 8001000:	f7ff faee 	bl	80005e0 <print>
        MP3_WaitForPlayback();
 8001004:	f7ff fc6a 	bl	80008dc <MP3_WaitForPlayback>
    }

    uint8_t buffer[10] = {0x7E, 0xFF, 0x06, command, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};
 8001008:	237e      	movs	r3, #126	@ 0x7e
 800100a:	723b      	strb	r3, [r7, #8]
 800100c:	23ff      	movs	r3, #255	@ 0xff
 800100e:	727b      	strb	r3, [r7, #9]
 8001010:	2306      	movs	r3, #6
 8001012:	72bb      	strb	r3, [r7, #10]
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	72fb      	strb	r3, [r7, #11]
 8001018:	2300      	movs	r3, #0
 800101a:	733b      	strb	r3, [r7, #12]
 800101c:	2300      	movs	r3, #0
 800101e:	737b      	strb	r3, [r7, #13]
 8001020:	2300      	movs	r3, #0
 8001022:	73bb      	strb	r3, [r7, #14]
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	2300      	movs	r3, #0
 800102a:	743b      	strb	r3, [r7, #16]
 800102c:	23ef      	movs	r3, #239	@ 0xef
 800102e:	747b      	strb	r3, [r7, #17]
    buffer[5] = (parameter >> 8) & 0xFF;
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b29b      	uxth	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	737b      	strb	r3, [r7, #13]
    buffer[6] = parameter & 0xFF;
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73bb      	strb	r3, [r7, #14]
    uint16_t checksum = -(0xFF + 0x06 + command + 0x00 + buffer[5] + buffer[6]);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	b29b      	uxth	r3, r3
 8001044:	7b7a      	ldrb	r2, [r7, #13]
 8001046:	4413      	add	r3, r2
 8001048:	b29b      	uxth	r3, r3
 800104a:	7bba      	ldrb	r2, [r7, #14]
 800104c:	4413      	add	r3, r2
 800104e:	b29a      	uxth	r2, r3
 8001050:	f46f 7382 	mvn.w	r3, #260	@ 0x104
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    buffer[7] = (checksum >> 8) & 0xFF;
 800105a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	73fb      	strb	r3, [r7, #15]
    buffer[8] = checksum & 0xFF;
 8001066:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800106a:	b2db      	uxtb	r3, r3
 800106c:	743b      	strb	r3, [r7, #16]

    if (HAL_UART_Transmit(&huart2, buffer, 10, 100) == HAL_OK) {
 800106e:	f107 0108 	add.w	r1, r7, #8
 8001072:	2364      	movs	r3, #100	@ 0x64
 8001074:	220a      	movs	r2, #10
 8001076:	4813      	ldr	r0, [pc, #76]	@ (80010c4 <MP3_SendCommand+0xf8>)
 8001078:	f005 fb78 	bl	800676c <HAL_UART_Transmit>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10f      	bne.n	80010a2 <MP3_SendCommand+0xd6>
        print("Command sent successfully\r\n");
 8001082:	4811      	ldr	r0, [pc, #68]	@ (80010c8 <MP3_SendCommand+0xfc>)
 8001084:	f7ff faac 	bl	80005e0 <print>
        current_file = parameter;
 8001088:	4a10      	ldr	r2, [pc, #64]	@ (80010cc <MP3_SendCommand+0x100>)
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	8013      	strh	r3, [r2, #0]
        current_command = command;
 800108e:	4a10      	ldr	r2, [pc, #64]	@ (80010d0 <MP3_SendCommand+0x104>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	7013      	strb	r3, [r2, #0]
        playback_finished = 0;
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MP3_SendCommand+0x108>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
        is_playing = 1;
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <MP3_SendCommand+0xf0>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e002      	b.n	80010a8 <MP3_SendCommand+0xdc>
    } else {
        print("Failed to send command\r\n");
 80010a2:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <MP3_SendCommand+0x10c>)
 80010a4:	f7ff fa9c 	bl	80005e0 <print>
    }
    HAL_Delay(50); // หน่วงเวลาเล็กน้อยเพื่อให้ DFPlayer ประมวลผล
 80010a8:	2032      	movs	r0, #50	@ 0x32
 80010aa:	f001 ff49 	bl	8002f40 <HAL_Delay>
}
 80010ae:	bf00      	nop
 80010b0:	3748      	adds	r7, #72	@ 0x48
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	080093d4 	.word	0x080093d4
 80010bc:	200000e4 	.word	0x200000e4
 80010c0:	08009408 	.word	0x08009408
 80010c4:	20000230 	.word	0x20000230
 80010c8:	08009428 	.word	0x08009428
 80010cc:	200000e2 	.word	0x200000e2
 80010d0:	200000e1 	.word	0x200000e1
 80010d4:	200000e0 	.word	0x200000e0
 80010d8:	08009444 	.word	0x08009444

080010dc <Select_Sreen>:
uint8_t rx_buffer[10];
uint8_t rx_index = 0;



void Select_Sreen(uint16_t coordinates[2]){
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b095      	sub	sp, #84	@ 0x54
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	6078      	str	r0, [r7, #4]
	if (TP_Read_Coordinates(coordinates) == TOUCHPAD_DATA_OK) {
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f001 fe0b 	bl	8002d00 <TP_Read_Coordinates>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8094 	bne.w	800121a <Select_Sreen+0x13e>
	        char message[50];
	        uint16_t raw_x = coordinates[0]; // X ดิบ
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
			uint16_t raw_y = coordinates[1]; // Y ดิบ
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	885b      	ldrh	r3, [r3, #2]
 80010fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			uint16_t touch_x = coordinates[1]; // ปรับตามโค้ดเดิม
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	885b      	ldrh	r3, [r3, #2]
 8001106:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t touch_y = 320 - coordinates[0]; // ปรับตามโค้ดเดิม
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001112:	87fb      	strh	r3, [r7, #62]	@ 0x3e

			sprintf(message, "Raw X:%d, Raw Y:%d | Adjusted X:%d, Y:%d\r\n", raw_x, raw_y, touch_x, touch_y);
 8001114:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8001118:	f8b7 4042 	ldrh.w	r4, [r7, #66]	@ 0x42
 800111c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001120:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001122:	f107 000c 	add.w	r0, r7, #12
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	4623      	mov	r3, r4
 800112c:	460a      	mov	r2, r1
 800112e:	493d      	ldr	r1, [pc, #244]	@ (8001224 <Select_Sreen+0x148>)
 8001130:	f006 ff2a 	bl	8007f88 <siprintf>
			print(message);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fa51 	bl	80005e0 <print>

			uint8_t new_mode = mode;
 800113e:	4b3a      	ldr	r3, [pc, #232]	@ (8001228 <Select_Sreen+0x14c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			if (Is_Touch_Inside_Rectangle(touch_x, touch_y, 10, 115, 70, 170)) {
 8001146:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8001148:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 800114c:	23aa      	movs	r3, #170	@ 0xaa
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	2346      	movs	r3, #70	@ 0x46
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2373      	movs	r3, #115	@ 0x73
 8001156:	220a      	movs	r2, #10
 8001158:	f7ff faf2 	bl	8000740 <Is_Touch_Inside_Rectangle>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <Select_Sreen+0x94>
				print("A-Z mode selected\r\n");
 8001162:	4832      	ldr	r0, [pc, #200]	@ (800122c <Select_Sreen+0x150>)
 8001164:	f7ff fa3c 	bl	80005e0 <print>
				new_mode = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800116e:	e041      	b.n	80011f4 <Select_Sreen+0x118>
			} else if (Is_Touch_Inside_Rectangle(touch_x, touch_y, 10, 115, 190, 260)) {
 8001170:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8001172:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8001176:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	23be      	movs	r3, #190	@ 0xbe
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2373      	movs	r3, #115	@ 0x73
 8001182:	220a      	movs	r2, #10
 8001184:	f7ff fadc 	bl	8000740 <Is_Touch_Inside_Rectangle>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <Select_Sreen+0xc0>
				print("Listen mode selected\r\n");
 800118e:	4828      	ldr	r0, [pc, #160]	@ (8001230 <Select_Sreen+0x154>)
 8001190:	f7ff fa26 	bl	80005e0 <print>
				new_mode = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800119a:	e02b      	b.n	80011f4 <Select_Sreen+0x118>
			} else if (Is_Touch_Inside_Rectangle(touch_x, touch_y, 125, 265, 70, 180)) {
 800119c:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800119e:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 80011a2:	23b4      	movs	r3, #180	@ 0xb4
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2346      	movs	r3, #70	@ 0x46
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	f240 1309 	movw	r3, #265	@ 0x109
 80011ae:	227d      	movs	r2, #125	@ 0x7d
 80011b0:	f7ff fac6 	bl	8000740 <Is_Touch_Inside_Rectangle>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <Select_Sreen+0xec>
				print("Vocab mode selected\r\n");
 80011ba:	481e      	ldr	r0, [pc, #120]	@ (8001234 <Select_Sreen+0x158>)
 80011bc:	f7ff fa10 	bl	80005e0 <print>
				new_mode = 3;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80011c6:	e015      	b.n	80011f4 <Select_Sreen+0x118>
			} else if (Is_Touch_Inside_Rectangle(touch_x, touch_y, 125, 265, 190, 260)) {
 80011c8:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80011ca:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 80011ce:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	23be      	movs	r3, #190	@ 0xbe
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	f240 1309 	movw	r3, #265	@ 0x109
 80011dc:	227d      	movs	r2, #125	@ 0x7d
 80011de:	f7ff faaf 	bl	8000740 <Is_Touch_Inside_Rectangle>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <Select_Sreen+0x118>
				print("Music mode selected\r\n");
 80011e8:	4813      	ldr	r0, [pc, #76]	@ (8001238 <Select_Sreen+0x15c>)
 80011ea:	f7ff f9f9 	bl	80005e0 <print>
				new_mode = 4;
 80011ee:	2304      	movs	r3, #4
 80011f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}

	        // หยุดเพลงถ้าโหมดเปลี่ยน
	        if (new_mode != mode && is_playing) {
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <Select_Sreen+0x14c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d008      	beq.n	8001212 <Select_Sreen+0x136>
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <Select_Sreen+0x160>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <Select_Sreen+0x136>
	            MP3_SendCommand(0x0E, 0x0000);
 800120a:	2100      	movs	r1, #0
 800120c:	200e      	movs	r0, #14
 800120e:	f7ff fedd 	bl	8000fcc <MP3_SendCommand>
//	            print("Stopping playback due to mode change\r\n");
//	            HAL_Delay(50);
	        }
	        mode = new_mode;
 8001212:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <Select_Sreen+0x14c>)
 8001214:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001218:	7013      	strb	r3, [r2, #0]
	}
}
 800121a:	bf00      	nop
 800121c:	374c      	adds	r7, #76	@ 0x4c
 800121e:	46bd      	mov	sp, r7
 8001220:	bd90      	pop	{r4, r7, pc}
 8001222:	bf00      	nop
 8001224:	08009460 	.word	0x08009460
 8001228:	20000340 	.word	0x20000340
 800122c:	0800948c 	.word	0x0800948c
 8001230:	080094a0 	.word	0x080094a0
 8001234:	080094b8 	.word	0x080094b8
 8001238:	080094d0 	.word	0x080094d0
 800123c:	200000e4 	.word	0x200000e4

08001240 <Update_Screen>:
void Update_Screen(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af02      	add	r7, sp, #8
    // ล้างหน้าจอเป็นสีดำ
//    ILI9341_Fill_Screen(BLACK);

    // วาดข้อความ "Select Mode" ที่ด้านบน
    ILI9341_Draw_Text("Select Mode", 100, 20, WHITE, 2, BLACK);
 8001246:	2300      	movs	r3, #0
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	2302      	movs	r3, #2
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001252:	2214      	movs	r2, #20
 8001254:	2164      	movs	r1, #100	@ 0x64
 8001256:	4837      	ldr	r0, [pc, #220]	@ (8001334 <Update_Screen+0xf4>)
 8001258:	f001 f88e 	bl	8002378 <ILI9341_Draw_Text>

    // วาดกรอบและข้อความสำหรับแต่ละโหมด
    ILI9341_Draw_Filled_Rectangle_Coord(10, 60, 160, 135, GREEN);
 800125c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2387      	movs	r3, #135	@ 0x87
 8001264:	22a0      	movs	r2, #160	@ 0xa0
 8001266:	213c      	movs	r1, #60	@ 0x3c
 8001268:	200a      	movs	r0, #10
 800126a:	f000 ff8c 	bl	8002186 <ILI9341_Draw_Filled_Rectangle_Coord>
    ILI9341_Draw_Text("A-Z", 65, 85, WHITE, 2.5, GREEN);
 800126e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	2302      	movs	r3, #2
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800127c:	2255      	movs	r2, #85	@ 0x55
 800127e:	2141      	movs	r1, #65	@ 0x41
 8001280:	482d      	ldr	r0, [pc, #180]	@ (8001338 <Update_Screen+0xf8>)
 8001282:	f001 f879 	bl	8002378 <ILI9341_Draw_Text>

    ILI9341_Draw_Filled_Rectangle_Coord(10, 150, 160, 220, PINK);
 8001286:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	23dc      	movs	r3, #220	@ 0xdc
 800128e:	22a0      	movs	r2, #160	@ 0xa0
 8001290:	2196      	movs	r1, #150	@ 0x96
 8001292:	200a      	movs	r0, #10
 8001294:	f000 ff77 	bl	8002186 <ILI9341_Draw_Filled_Rectangle_Coord>
    ILI9341_Draw_Text("Listen", 45, 175, WHITE, 2.5, PINK);
 8001298:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	2302      	movs	r3, #2
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a6:	22af      	movs	r2, #175	@ 0xaf
 80012a8:	212d      	movs	r1, #45	@ 0x2d
 80012aa:	4824      	ldr	r0, [pc, #144]	@ (800133c <Update_Screen+0xfc>)
 80012ac:	f001 f864 	bl	8002378 <ILI9341_Draw_Text>

    ILI9341_Draw_Filled_Rectangle_Coord(170, 60, 330, 135, PURPLE);
 80012b0:	f647 030f 	movw	r3, #30735	@ 0x780f
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2387      	movs	r3, #135	@ 0x87
 80012b8:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80012bc:	213c      	movs	r1, #60	@ 0x3c
 80012be:	20aa      	movs	r0, #170	@ 0xaa
 80012c0:	f000 ff61 	bl	8002186 <ILI9341_Draw_Filled_Rectangle_Coord>
    ILI9341_Draw_Text("Vocab", 205, 85, WHITE, 2.5, PURPLE);
 80012c4:	f647 030f 	movw	r3, #30735	@ 0x780f
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	2302      	movs	r3, #2
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012d2:	2255      	movs	r2, #85	@ 0x55
 80012d4:	21cd      	movs	r1, #205	@ 0xcd
 80012d6:	481a      	ldr	r0, [pc, #104]	@ (8001340 <Update_Screen+0x100>)
 80012d8:	f001 f84e 	bl	8002378 <ILI9341_Draw_Text>

    ILI9341_Draw_Filled_Rectangle_Coord(170, 150, 330, 220, WHITE);
 80012dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	23dc      	movs	r3, #220	@ 0xdc
 80012e4:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80012e8:	2196      	movs	r1, #150	@ 0x96
 80012ea:	20aa      	movs	r0, #170	@ 0xaa
 80012ec:	f000 ff4b 	bl	8002186 <ILI9341_Draw_Filled_Rectangle_Coord>
    ILI9341_Draw_Text("MUSIC", 202, 175, BLACK, 2.5, WHITE);
 80012f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	2302      	movs	r3, #2
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2300      	movs	r3, #0
 80012fc:	22af      	movs	r2, #175	@ 0xaf
 80012fe:	21ca      	movs	r1, #202	@ 0xca
 8001300:	4810      	ldr	r0, [pc, #64]	@ (8001344 <Update_Screen+0x104>)
 8001302:	f001 f839 	bl	8002378 <ILI9341_Draw_Text>

    // แสดงโหมดปัจจุบันที่มุมซ้ายบน
    char mode_msg[20];
    sprintf(mode_msg, "Mode: %d", mode);
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <Update_Screen+0x108>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	490f      	ldr	r1, [pc, #60]	@ (800134c <Update_Screen+0x10c>)
 8001310:	4618      	mov	r0, r3
 8001312:	f006 fe39 	bl	8007f88 <siprintf>
    ILI9341_Draw_Text(mode_msg, 10, 5, YELLOW, 1, BLACK);
 8001316:	1d38      	adds	r0, r7, #4
 8001318:	2300      	movs	r3, #0
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	2301      	movs	r3, #1
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001324:	2205      	movs	r2, #5
 8001326:	210a      	movs	r1, #10
 8001328:	f001 f826 	bl	8002378 <ILI9341_Draw_Text>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	080094e8 	.word	0x080094e8
 8001338:	080091b8 	.word	0x080091b8
 800133c:	080094f4 	.word	0x080094f4
 8001340:	080091c4 	.word	0x080091c4
 8001344:	080091cc 	.word	0x080091cc
 8001348:	20000340 	.word	0x20000340
 800134c:	080091d4 	.word	0x080091d4

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b092      	sub	sp, #72	@ 0x48
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001356:	f000 fbdd 	bl	8001b14 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f001 fd93 	bl	8002e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 f8a9 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001362:	f000 fad1 	bl	8001908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001366:	f000 fa6f 	bl	8001848 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800136a:	f000 fa9d 	bl	80018a8 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 800136e:	f000 f961 	bl	8001634 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001372:	f000 f99d 	bl	80016b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001376:	f000 f9f1 	bl	800175c <MX_TIM2_Init>
  MX_ADC1_Init();
 800137a:	f000 f909 	bl	8001590 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t[10]){0}, 10);
 800137e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	811a      	strh	r2, [r3, #8]
 800138a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800138e:	220a      	movs	r2, #10
 8001390:	4619      	mov	r1, r3
 8001392:	4842      	ldr	r0, [pc, #264]	@ (800149c <main+0x14c>)
 8001394:	f005 fa73 	bl	800687e <HAL_UART_Receive_IT>




  ////// LCD
  MP3_SendCommand(0x0C, 0x0000);
 8001398:	2100      	movs	r1, #0
 800139a:	200c      	movs	r0, #12
 800139c:	f7ff fe16 	bl	8000fcc <MP3_SendCommand>
  HAL_Delay(500);
 80013a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013a4:	f001 fdcc 	bl	8002f40 <HAL_Delay>
   //ปรับเสียง 0-30
//  MP3_SendCommand(0x06,15);
  MP3_SendCommand(0x06,current_volume);
 80013a8:	4b3d      	ldr	r3, [pc, #244]	@ (80014a0 <main+0x150>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	2006      	movs	r0, #6
 80013b0:	f7ff fe0c 	bl	8000fcc <MP3_SendCommand>
  HAL_Delay(200);
 80013b4:	20c8      	movs	r0, #200	@ 0xc8
 80013b6:	f001 fdc3 	bl	8002f40 <HAL_Delay>

  MP3_SendCommand(0x0F, 0x0501);
 80013ba:	f240 5101 	movw	r1, #1281	@ 0x501
 80013be:	200f      	movs	r0, #15
 80013c0:	f7ff fe04 	bl	8000fcc <MP3_SendCommand>



  ////// LCD
	ILI9341_Init();
 80013c4:	f001 f932 	bl	800262c <ILI9341_Init>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);  // หมุนหน้าจอเป็นแนวนอน
 80013c8:	2001      	movs	r0, #1
 80013ca:	f001 f8d1 	bl	8002570 <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(BLACK); // เติมหน้าจอด้วยสีขาว
 80013ce:	2000      	movs	r0, #0
 80013d0:	f001 fad8 	bl	8002984 <ILI9341_Fill_Screen>

	Draw_Project_Name();
 80013d4:	f7ff f97c 	bl	80006d0 <Draw_Project_Name>
	Update_Screen();
 80013d8:	f7ff ff32 	bl	8001240 <Update_Screen>

  //  Draw_Project_Name();
  //  Draw_All_Mode();
    uint16_t coordinates[2] = {0, 0};
 80013dc:	2300      	movs	r3, #0
 80013de:	873b      	strh	r3, [r7, #56]	@ 0x38
 80013e0:	2300      	movs	r3, #0
 80013e2:	877b      	strh	r3, [r7, #58]	@ 0x3a

    MP3_SendCommand(0x0F, 0x0501);
 80013e4:	f240 5101 	movw	r1, #1281	@ 0x501
 80013e8:	200f      	movs	r0, #15
 80013ea:	f7ff fdef 	bl	8000fcc <MP3_SendCommand>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Check_Touch();
 80013ee:	f7ff f9cf 	bl	8000790 <Check_Touch>

//	  MP3_GetStatus();

	  if (HAL_GetTick() - last_volume_check > 50) {
 80013f2:	f001 fd99 	bl	8002f28 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <main+0x154>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b32      	cmp	r3, #50	@ 0x32
 8001400:	d906      	bls.n	8001410 <main+0xc0>
	          Adjust_Volume();
 8001402:	f7ff f903 	bl	800060c <Adjust_Volume>
	          last_volume_check = HAL_GetTick();
 8001406:	f001 fd8f 	bl	8002f28 <HAL_GetTick>
 800140a:	4603      	mov	r3, r0
 800140c:	4a25      	ldr	r2, [pc, #148]	@ (80014a4 <main+0x154>)
 800140e:	6013      	str	r3, [r2, #0]
	      }
	  Select_Sreen(coordinates);
 8001410:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe61 	bl	80010dc <Select_Sreen>
	  if (mode != prev_mode) {
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <main+0x158>)
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <main+0x15c>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d011      	beq.n	800144a <main+0xfa>
	          Update_Screen();
 8001426:	f7ff ff0b 	bl	8001240 <Update_Screen>
	          sprintf(message, "Mode changed to: %d\r\n", mode);
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <main+0x158>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	491f      	ldr	r1, [pc, #124]	@ (80014b0 <main+0x160>)
 8001434:	4618      	mov	r0, r3
 8001436:	f006 fda7 	bl	8007f88 <siprintf>
	          print(message);
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f8cf 	bl	80005e0 <print>
	          prev_mode = mode;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <main+0x158>)
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <main+0x15c>)
 8001448:	701a      	strb	r2, [r3, #0]
	  }
	  if(mode == 1){
 800144a:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <main+0x158>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d105      	bne.n	800145e <main+0x10e>

		  AZ_Sound(coordinates);
 8001452:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f9b0 	bl	80007bc <AZ_Sound>
 800145c:	e7c7      	b.n	80013ee <main+0x9e>

	  }
	  else if(mode == 2){
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <main+0x158>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d105      	bne.n	8001472 <main+0x122>

		  LISTEN_Sound(coordinates);
 8001466:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fa84 	bl	8000978 <LISTEN_Sound>
 8001470:	e7bd      	b.n	80013ee <main+0x9e>
	  }
	  else if(mode == 3){
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <main+0x158>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d105      	bne.n	8001486 <main+0x136>

		  VOCAB_Sound(coordinates);
 800147a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fbdc 	bl	8000c3c <VOCAB_Sound>
 8001484:	e7b3      	b.n	80013ee <main+0x9e>

	  }else if(mode == 4){
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <main+0x158>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b04      	cmp	r3, #4
 800148c:	d1af      	bne.n	80013ee <main+0x9e>

		  MUSIC_Sound(coordinates);
 800148e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fd00 	bl	8000e98 <MUSIC_Sound>
	  Check_Touch();
 8001498:	e7a9      	b.n	80013ee <main+0x9e>
 800149a:	bf00      	nop
 800149c:	20000230 	.word	0x20000230
 80014a0:	20000000 	.word	0x20000000
 80014a4:	200000e8 	.word	0x200000e8
 80014a8:	20000340 	.word	0x20000340
 80014ac:	20000341 	.word	0x20000341
 80014b0:	080094fc 	.word	0x080094fc

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	@ 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	2234      	movs	r2, #52	@ 0x34
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 fdc3 	bl	800804e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <SystemClock_Config+0xd4>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001588 <SystemClock_Config+0xd4>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e4:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <SystemClock_Config+0xd4>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f0:	4b26      	ldr	r3, [pc, #152]	@ (800158c <SystemClock_Config+0xd8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a25      	ldr	r2, [pc, #148]	@ (800158c <SystemClock_Config+0xd8>)
 80014f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b23      	ldr	r3, [pc, #140]	@ (800158c <SystemClock_Config+0xd8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
 800150a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	2310      	movs	r3, #16
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001514:	2302      	movs	r3, #2
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001518:	2300      	movs	r3, #0
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800151c:	2308      	movs	r3, #8
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001520:	23d8      	movs	r3, #216	@ 0xd8
 8001522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001524:	2302      	movs	r3, #2
 8001526:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001528:	2302      	movs	r3, #2
 800152a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800152c:	2302      	movs	r3, #2
 800152e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fd9f 	bl	8004078 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001540:	f000 fb14 	bl	8001b6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001544:	f002 fd48 	bl	8003fd8 <HAL_PWREx_EnableOverDrive>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800154e:	f000 fb0d 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	230f      	movs	r3, #15
 8001554:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001556:	2302      	movs	r3, #2
 8001558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800155e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001568:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2107      	movs	r1, #7
 8001570:	4618      	mov	r0, r3
 8001572:	f003 f82f 	bl	80045d4 <HAL_RCC_ClockConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800157c:	f000 faf6 	bl	8001b6c <Error_Handler>
  }
}
 8001580:	bf00      	nop
 8001582:	3750      	adds	r7, #80	@ 0x50
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40007000 	.word	0x40007000

08001590 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015a4:	4a21      	ldr	r2, [pc, #132]	@ (800162c <MX_ADC1_Init+0x9c>)
 80015a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015d2:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <MX_ADC1_Init+0xa0>)
 80015d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015de:	2201      	movs	r2, #1
 80015e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f0:	480d      	ldr	r0, [pc, #52]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015f2:	f001 fcc9 	bl	8002f88 <HAL_ADC_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015fc:	f000 fab6 	bl	8001b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001600:	2307      	movs	r3, #7
 8001602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001604:	2301      	movs	r3, #1
 8001606:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_ADC1_Init+0x98>)
 8001612:	f001 fe97 	bl	8003344 <HAL_ADC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800161c:	f000 faa6 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200000ec 	.word	0x200000ec
 800162c:	40012000 	.word	0x40012000
 8001630:	0f000001 	.word	0x0f000001

08001634 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_SPI5_Init+0x74>)
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <MX_SPI5_Init+0x78>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_SPI5_Init+0x74>)
 8001640:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_SPI5_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <MX_SPI5_Init+0x74>)
 800164e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001652:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001654:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <MX_SPI5_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800165a:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_SPI5_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_SPI5_Init+0x74>)
 8001662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001666:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_SPI5_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_SPI5_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_SPI5_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <MX_SPI5_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_SPI5_Init+0x74>)
 8001682:	2207      	movs	r2, #7
 8001684:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001686:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <MX_SPI5_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_SPI5_Init+0x74>)
 800168e:	2208      	movs	r2, #8
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_SPI5_Init+0x74>)
 8001694:	f003 fdac 	bl	80051f0 <HAL_SPI_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800169e:	f000 fa65 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000134 	.word	0x20000134
 80016ac:	40015000 	.word	0x40015000

080016b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ce:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <MX_TIM1_Init+0xa4>)
 80016d0:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <MX_TIM1_Init+0xa8>)
 80016d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001754 <MX_TIM1_Init+0xa4>)
 80016d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <MX_TIM1_Init+0xa4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <MX_TIM1_Init+0xa4>)
 80016e4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_TIM1_Init+0xa4>)
 80016ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <MX_TIM1_Init+0xa4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <MX_TIM1_Init+0xa4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016fe:	4815      	ldr	r0, [pc, #84]	@ (8001754 <MX_TIM1_Init+0xa4>)
 8001700:	f004 f91e 	bl	8005940 <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800170a:	f000 fa2f 	bl	8001b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480e      	ldr	r0, [pc, #56]	@ (8001754 <MX_TIM1_Init+0xa4>)
 800171c:	f004 fadc 	bl	8005cd8 <HAL_TIM_ConfigClockSource>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001726:	f000 fa21 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	@ (8001754 <MX_TIM1_Init+0xa4>)
 800173c:	f004 ff3a 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001746:	f000 fa11 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000198 	.word	0x20000198
 8001758:	40010000 	.word	0x40010000

0800175c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08e      	sub	sp, #56	@ 0x38
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177c:	463b      	mov	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178e:	4b2d      	ldr	r3, [pc, #180]	@ (8001844 <MX_TIM2_Init+0xe8>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8001796:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <MX_TIM2_Init+0xe8>)
 8001798:	226b      	movs	r2, #107	@ 0x6b
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <MX_TIM2_Init+0xe8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80017a2:	4b28      	ldr	r3, [pc, #160]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b24      	ldr	r3, [pc, #144]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b6:	4823      	ldr	r0, [pc, #140]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017b8:	f004 f8c2 	bl	8005940 <HAL_TIM_Base_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017c2:	f000 f9d3 	bl	8001b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017d0:	4619      	mov	r1, r3
 80017d2:	481c      	ldr	r0, [pc, #112]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017d4:	f004 fa80 	bl	8005cd8 <HAL_TIM_ConfigClockSource>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80017de:	f000 f9c5 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017e2:	4818      	ldr	r0, [pc, #96]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017e4:	f004 f903 	bl	80059ee <HAL_TIM_PWM_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017ee:	f000 f9bd 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4810      	ldr	r0, [pc, #64]	@ (8001844 <MX_TIM2_Init+0xe8>)
 8001802:	f004 fed7 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800180c:	f000 f9ae 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001810:	2360      	movs	r3, #96	@ 0x60
 8001812:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000/4-1;
 8001814:	23f9      	movs	r3, #249	@ 0xf9
 8001816:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	4619      	mov	r1, r3
 8001826:	4807      	ldr	r0, [pc, #28]	@ (8001844 <MX_TIM2_Init+0xe8>)
 8001828:	f004 f942 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001832:	f000 f99b 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001836:	4803      	ldr	r0, [pc, #12]	@ (8001844 <MX_TIM2_Init+0xe8>)
 8001838:	f000 fa78 	bl	8001d2c <HAL_TIM_MspPostInit>

}
 800183c:	bf00      	nop
 800183e:	3738      	adds	r7, #56	@ 0x38
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200001e4 	.word	0x200001e4

08001848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800184e:	4a15      	ldr	r2, [pc, #84]	@ (80018a4 <MX_USART2_UART_Init+0x5c>)
 8001850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001854:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800186e:	220c      	movs	r2, #12
 8001870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800188c:	f004 ff20 	bl	80066d0 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001896:	f000 f969 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000230 	.word	0x20000230
 80018a4:	40004400 	.word	0x40004400

080018a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018ae:	4a15      	ldr	r2, [pc, #84]	@ (8001904 <MX_USART3_UART_Init+0x5c>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	@ (8001900 <MX_USART3_UART_Init+0x58>)
 80018ec:	f004 fef0 	bl	80066d0 <HAL_UART_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018f6:	f000 f939 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002b8 	.word	0x200002b8
 8001904:	40004800 	.word	0x40004800

08001908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	@ 0x30
 800190c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800191e:	4b75      	ldr	r3, [pc, #468]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a74      	ldr	r2, [pc, #464]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b72      	ldr	r3, [pc, #456]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001936:	4b6f      	ldr	r3, [pc, #444]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a6e      	ldr	r2, [pc, #440]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 800193c:	f043 0320 	orr.w	r3, r3, #32
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b6c      	ldr	r3, [pc, #432]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0320 	and.w	r3, r3, #32
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	4b69      	ldr	r3, [pc, #420]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a68      	ldr	r2, [pc, #416]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a62      	ldr	r2, [pc, #392]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b60      	ldr	r3, [pc, #384]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a5c      	ldr	r2, [pc, #368]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001996:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a56      	ldr	r2, [pc, #344]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 800199c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b54      	ldr	r3, [pc, #336]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ae:	4b51      	ldr	r3, [pc, #324]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a50      	ldr	r2, [pc, #320]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b4e      	ldr	r3, [pc, #312]	@ (8001af4 <MX_GPIO_Init+0x1ec>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2168      	movs	r1, #104	@ 0x68
 80019ca:	484b      	ldr	r0, [pc, #300]	@ (8001af8 <MX_GPIO_Init+0x1f0>)
 80019cc:	f002 faea 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	4849      	ldr	r0, [pc, #292]	@ (8001afc <MX_GPIO_Init+0x1f4>)
 80019d6:	f002 fae5 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80019e0:	4847      	ldr	r0, [pc, #284]	@ (8001b00 <MX_GPIO_Init+0x1f8>)
 80019e2:	f002 fadf 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_IRQ_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80019e6:	2314      	movs	r3, #20
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	483f      	ldr	r0, [pc, #252]	@ (8001af8 <MX_GPIO_Init+0x1f0>)
 80019fa:	f002 f90f 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_MOSI_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80019fe:	2368      	movs	r3, #104	@ 0x68
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4838      	ldr	r0, [pc, #224]	@ (8001af8 <MX_GPIO_Init+0x1f0>)
 8001a16:	f002 f901 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF5 PF10 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a1a:	f241 432f 	movw	r3, #5167	@ 0x142f
 8001a1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4835      	ldr	r0, [pc, #212]	@ (8001b04 <MX_GPIO_Init+0x1fc>)
 8001a30:	f002 f8f4 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8001a34:	23c9      	movs	r3, #201	@ 0xc9
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	482e      	ldr	r0, [pc, #184]	@ (8001b00 <MX_GPIO_Init+0x1f8>)
 8001a48:	f002 f8e8 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8001a4c:	f248 0368 	movw	r3, #32872	@ 0x8068
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4829      	ldr	r0, [pc, #164]	@ (8001b08 <MX_GPIO_Init+0x200>)
 8001a62:	f002 f8db 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481f      	ldr	r0, [pc, #124]	@ (8001afc <MX_GPIO_Init+0x1f4>)
 8001a7e:	f002 f8cd 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	481d      	ldr	r0, [pc, #116]	@ (8001b0c <MX_GPIO_Init+0x204>)
 8001a96:	f002 f8c1 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB15 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8001a9a:	f249 3330 	movw	r3, #37680	@ 0x9330
 8001a9e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	4813      	ldr	r0, [pc, #76]	@ (8001afc <MX_GPIO_Init+0x1f4>)
 8001ab0:	f002 f8b4 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8001ab4:	f24c 0303 	movw	r3, #49155	@ 0xc003
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4811      	ldr	r0, [pc, #68]	@ (8001b10 <MX_GPIO_Init+0x208>)
 8001aca:	f002 f8a7 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8001ace:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_GPIO_Init+0x1f8>)
 8001ae8:	f002 f898 	bl	8003c1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aec:	bf00      	nop
 8001aee:	3730      	adds	r7, #48	@ 0x30
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40021400 	.word	0x40021400
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	40021800 	.word	0x40021800
 8001b10:	40020c00 	.word	0x40020c00

08001b14 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b26:	f001 ff6f 	bl	8003a08 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b36:	231f      	movs	r3, #31
 8001b38:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001b3a:	2387      	movs	r3, #135	@ 0x87
 8001b3c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b42:	2300      	movs	r3, #0
 8001b44:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b46:	2301      	movs	r3, #1
 8001b48:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b56:	463b      	mov	r3, r7
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 ff8d 	bl	8003a78 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b5e:	2004      	movs	r0, #4
 8001b60:	f001 ff6a 	bl	8003a38 <HAL_MPU_Enable>

}
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <Error_Handler+0x8>

08001b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_MspInit+0x44>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	4a0e      	ldr	r2, [pc, #56]	@ (8001bbc <HAL_MspInit+0x44>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_MspInit+0x44>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_MspInit+0x44>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a08      	ldr	r2, [pc, #32]	@ (8001bbc <HAL_MspInit+0x44>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_MspInit+0x44>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001bae:	2005      	movs	r0, #5
 8001bb0:	f001 fee8 	bl	8003984 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a15      	ldr	r2, [pc, #84]	@ (8001c34 <HAL_ADC_MspInit+0x74>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d123      	bne.n	8001c2a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_ADC_MspInit+0x78>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a14      	ldr	r2, [pc, #80]	@ (8001c38 <HAL_ADC_MspInit+0x78>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_ADC_MspInit+0x78>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_ADC_MspInit+0x78>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001c38 <HAL_ADC_MspInit+0x78>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <HAL_ADC_MspInit+0x78>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c16:	2303      	movs	r3, #3
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <HAL_ADC_MspInit+0x7c>)
 8001c26:	f001 fff9 	bl	8003c1c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	@ 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40012000 	.word	0x40012000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000

08001c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	@ (8001cbc <HAL_SPI_MspInit+0x7c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d128      	bne.n	8001cb4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c62:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <HAL_SPI_MspInit+0x80>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a16      	ldr	r2, [pc, #88]	@ (8001cc0 <HAL_SPI_MspInit+0x80>)
 8001c68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <HAL_SPI_MspInit+0x80>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <HAL_SPI_MspInit+0x80>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a10      	ldr	r2, [pc, #64]	@ (8001cc0 <HAL_SPI_MspInit+0x80>)
 8001c80:	f043 0320 	orr.w	r3, r3, #32
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <HAL_SPI_MspInit+0x80>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c92:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <HAL_SPI_MspInit+0x84>)
 8001cb0:	f001 ffb4 	bl	8003c1c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001cb4:	bf00      	nop
 8001cb6:	3728      	adds	r7, #40	@ 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40015000 	.word	0x40015000
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40021400 	.word	0x40021400

08001cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a13      	ldr	r2, [pc, #76]	@ (8001d24 <HAL_TIM_Base_MspInit+0x5c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <HAL_TIM_Base_MspInit+0x60>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a12      	ldr	r2, [pc, #72]	@ (8001d28 <HAL_TIM_Base_MspInit+0x60>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_TIM_Base_MspInit+0x60>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cf2:	e010      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfc:	d10b      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_TIM_Base_MspInit+0x60>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	4a09      	ldr	r2, [pc, #36]	@ (8001d28 <HAL_TIM_Base_MspInit+0x60>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <HAL_TIM_Base_MspInit+0x60>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4c:	d11b      	bne.n	8001d86 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <HAL_TIM_MspPostInit+0x64>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <HAL_TIM_MspPostInit+0x64>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_TIM_MspPostInit+0x64>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d66:	2301      	movs	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4804      	ldr	r0, [pc, #16]	@ (8001d94 <HAL_TIM_MspPostInit+0x68>)
 8001d82:	f001 ff4b 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0b0      	sub	sp, #192	@ 0xc0
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2290      	movs	r2, #144	@ 0x90
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f006 f948 	bl	800804e <memset>
  if(huart->Instance==USART2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8001eec <HAL_UART_MspInit+0x154>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d143      	bne.n	8001e50 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dc8:	2380      	movs	r3, #128	@ 0x80
 8001dca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fde3 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de0:	f7ff fec4 	bl	8001b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de4:	4b42      	ldr	r3, [pc, #264]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	4a41      	ldr	r2, [pc, #260]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e00:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e02:	f043 0308 	orr.w	r3, r3, #8
 8001e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e08:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e14:	2360      	movs	r3, #96	@ 0x60
 8001e16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e32:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e36:	4619      	mov	r1, r3
 8001e38:	482e      	ldr	r0, [pc, #184]	@ (8001ef4 <HAL_UART_MspInit+0x15c>)
 8001e3a:	f001 feef 	bl	8003c1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2103      	movs	r1, #3
 8001e42:	2026      	movs	r0, #38	@ 0x26
 8001e44:	f001 fda9 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e48:	2026      	movs	r0, #38	@ 0x26
 8001e4a:	f001 fdc2 	bl	80039d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e4e:	e049      	b.n	8001ee4 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a28      	ldr	r2, [pc, #160]	@ (8001ef8 <HAL_UART_MspInit+0x160>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d144      	bne.n	8001ee4 <HAL_UART_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fd99 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001e74:	f7ff fe7a 	bl	8001b6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	4a16      	ldr	r2, [pc, #88]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4809      	ldr	r0, [pc, #36]	@ (8001ef4 <HAL_UART_MspInit+0x15c>)
 8001ed0:	f001 fea4 	bl	8003c1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2027      	movs	r0, #39	@ 0x27
 8001eda:	f001 fd5e 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ede:	2027      	movs	r0, #39	@ 0x27
 8001ee0:	f001 fd77 	bl	80039d2 <HAL_NVIC_EnableIRQ>
}
 8001ee4:	bf00      	nop
 8001ee6:	37c0      	adds	r7, #192	@ 0xc0
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40004400 	.word	0x40004400
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40004800 	.word	0x40004800

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <NMI_Handler+0x4>

08001f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <MemManage_Handler+0x4>

08001f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f52:	f000 ffd5 	bl	8002f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f60:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <USART2_IRQHandler+0x10>)
 8001f62:	f004 fcd1 	bl	8006908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000230 	.word	0x20000230

08001f70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <USART3_IRQHandler+0x10>)
 8001f76:	f004 fcc7 	bl	8006908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200002b8 	.word	0x200002b8

08001f84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return 1;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_kill>:

int _kill(int pid, int sig)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f9e:	f006 f8a5 	bl	80080ec <__errno>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2216      	movs	r2, #22
 8001fa6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_exit>:

void _exit (int status)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ffe7 	bl	8001f94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fc6:	bf00      	nop
 8001fc8:	e7fd      	b.n	8001fc6 <_exit+0x12>

08001fca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e00a      	b.n	8001ff2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fdc:	f3af 8000 	nop.w
 8001fe0:	4601      	mov	r1, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	60ba      	str	r2, [r7, #8]
 8001fe8:	b2ca      	uxtb	r2, r1
 8001fea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dbf0      	blt.n	8001fdc <_read+0x12>
  }

  return len;
 8001ffa:	687b      	ldr	r3, [r7, #4]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	e009      	b.n	800202a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	60ba      	str	r2, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3301      	adds	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbf1      	blt.n	8002016 <_write+0x12>
  }
  return len;
 8002032:	687b      	ldr	r3, [r7, #4]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <_close>:

int _close(int file)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002064:	605a      	str	r2, [r3, #4]
  return 0;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_isatty>:

int _isatty(int file)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <_sbrk+0x5c>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <_sbrk+0x60>)
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b8:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <_sbrk+0x64>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	@ (800210c <_sbrk+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d207      	bcs.n	80020e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d4:	f006 f80a 	bl	80080ec <__errno>
 80020d8:	4603      	mov	r3, r0
 80020da:	220c      	movs	r2, #12
 80020dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e009      	b.n	80020f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e4:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <_sbrk+0x64>)
 80020f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20080000 	.word	0x20080000
 8002104:	00000400 	.word	0x00000400
 8002108:	20000354 	.word	0x20000354
 800210c:	200004a8 	.word	0x200004a8

08002110 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <SystemInit+0x20>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	4a05      	ldr	r2, [pc, #20]	@ (8002130 <SystemInit+0x20>)
 800211c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800216c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
   bl  SystemInit
 8002138:	f7ff ffea 	bl	8002110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800213e:	490d      	ldr	r1, [pc, #52]	@ (8002174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002154:	4c0a      	ldr	r4, [pc, #40]	@ (8002180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002162:	f005 ffc9 	bl	80080f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002166:	f7ff f8f3 	bl	8001350 <main>
  bx  lr    
 800216a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800216c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002178:	080099e4 	.word	0x080099e4
  ldr r2, =_sbss
 800217c:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002180:	200004a8 	.word	0x200004a8

08002184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC_IRQHandler>

08002186 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8002186:	b590      	push	{r4, r7, lr}
 8002188:	b089      	sub	sp, #36	@ 0x24
 800218a:	af02      	add	r7, sp, #8
 800218c:	4604      	mov	r4, r0
 800218e:	4608      	mov	r0, r1
 8002190:	4611      	mov	r1, r2
 8002192:	461a      	mov	r2, r3
 8002194:	4623      	mov	r3, r4
 8002196:	80fb      	strh	r3, [r7, #6]
 8002198:	4603      	mov	r3, r0
 800219a:	80bb      	strh	r3, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80021c0:	887a      	ldrh	r2, [r7, #2]
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da01      	bge.n	80021d2 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 80021ce:	2301      	movs	r3, #1
 80021d0:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 80021d6:	883a      	ldrh	r2, [r7, #0]
 80021d8:	88bb      	ldrh	r3, [r7, #4]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	da01      	bge.n	80021e8 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80021e4:	2301      	movs	r3, #1
 80021e6:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	823b      	strh	r3, [r7, #16]
 80021fa:	e005      	b.n	8002208 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002208:	7cbb      	ldrb	r3, [r7, #18]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800220e:	883a      	ldrh	r2, [r7, #0]
 8002210:	88bb      	ldrh	r3, [r7, #4]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	81fb      	strh	r3, [r7, #14]
 800221a:	e005      	b.n	8002228 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 800221c:	88ba      	ldrh	r2, [r7, #4]
 800221e:	883b      	ldrh	r3, [r7, #0]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8002224:	883b      	ldrh	r3, [r7, #0]
 8002226:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8002228:	8abc      	ldrh	r4, [r7, #20]
 800222a:	8afa      	ldrh	r2, [r7, #22]
 800222c:	89f9      	ldrh	r1, [r7, #14]
 800222e:	8a38      	ldrh	r0, [r7, #16]
 8002230:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4623      	mov	r3, r4
 8002236:	f000 fca5 	bl	8002b84 <ILI9341_Draw_Rectangle>
}
 800223a:	bf00      	nop
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd90      	pop	{r4, r7, pc}
	...

08002244 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af02      	add	r7, sp, #8
 800224a:	4604      	mov	r4, r0
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4623      	mov	r3, r4
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	4603      	mov	r3, r0
 8002258:	71bb      	strb	r3, [r7, #6]
 800225a:	460b      	mov	r3, r1
 800225c:	717b      	strb	r3, [r7, #5]
 800225e:	4613      	mov	r3, r2
 8002260:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b1f      	cmp	r3, #31
 800226a:	d802      	bhi.n	8002272 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	71fb      	strb	r3, [r7, #7]
 8002270:	e002      	b.n	8002278 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	3b20      	subs	r3, #32
 8002276:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002278:	2300      	movs	r3, #0
 800227a:	753b      	strb	r3, [r7, #20]
 800227c:	e012      	b.n	80022a4 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800227e:	7dfa      	ldrb	r2, [r7, #23]
 8002280:	7d38      	ldrb	r0, [r7, #20]
 8002282:	7d39      	ldrb	r1, [r7, #20]
 8002284:	4c3b      	ldr	r4, [pc, #236]	@ (8002374 <ILI9341_Draw_Char+0x130>)
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4423      	add	r3, r4
 8002290:	4403      	add	r3, r0
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	f101 0318 	add.w	r3, r1, #24
 8002298:	443b      	add	r3, r7
 800229a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800229e:	7d3b      	ldrb	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	753b      	strb	r3, [r7, #20]
 80022a4:	7d3b      	ldrb	r3, [r7, #20]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d9e9      	bls.n	800227e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	b298      	uxth	r0, r3
 80022ae:	797b      	ldrb	r3, [r7, #5]
 80022b0:	b299      	uxth	r1, r3
 80022b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80022b4:	461a      	mov	r2, r3
 80022b6:	0052      	lsls	r2, r2, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	b29c      	uxth	r4, r3
 80022c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	4623      	mov	r3, r4
 80022ca:	f000 fc5b 	bl	8002b84 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80022ce:	2300      	movs	r3, #0
 80022d0:	757b      	strb	r3, [r7, #21]
 80022d2:	e047      	b.n	8002364 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	75bb      	strb	r3, [r7, #22]
 80022d8:	e03e      	b.n	8002358 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80022da:	7d7b      	ldrb	r3, [r7, #21]
 80022dc:	3318      	adds	r3, #24
 80022de:	443b      	add	r3, r7
 80022e0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80022e4:	461a      	mov	r2, r3
 80022e6:	7dbb      	ldrb	r3, [r7, #22]
 80022e8:	fa42 f303 	asr.w	r3, r2, r3
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d02e      	beq.n	8002352 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80022f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d110      	bne.n	800231c <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80022fa:	79bb      	ldrb	r3, [r7, #6]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	7d7b      	ldrb	r3, [r7, #21]
 8002300:	b29b      	uxth	r3, r3
 8002302:	4413      	add	r3, r2
 8002304:	b298      	uxth	r0, r3
 8002306:	797b      	ldrb	r3, [r7, #5]
 8002308:	b29a      	uxth	r2, r3
 800230a:	7dbb      	ldrb	r3, [r7, #22]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4413      	add	r3, r2
 8002310:	b29b      	uxth	r3, r3
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	4619      	mov	r1, r3
 8002316:	f000 fb5b 	bl	80029d0 <ILI9341_Draw_Pixel>
 800231a:	e01a      	b.n	8002352 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	b29a      	uxth	r2, r3
 8002320:	7d7b      	ldrb	r3, [r7, #21]
 8002322:	b29b      	uxth	r3, r3
 8002324:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002326:	fb11 f303 	smulbb	r3, r1, r3
 800232a:	b29b      	uxth	r3, r3
 800232c:	4413      	add	r3, r2
 800232e:	b298      	uxth	r0, r3
 8002330:	797b      	ldrb	r3, [r7, #5]
 8002332:	b29a      	uxth	r2, r3
 8002334:	7dbb      	ldrb	r3, [r7, #22]
 8002336:	b29b      	uxth	r3, r3
 8002338:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800233a:	fb11 f303 	smulbb	r3, r1, r3
 800233e:	b29b      	uxth	r3, r3
 8002340:	4413      	add	r3, r2
 8002342:	b299      	uxth	r1, r3
 8002344:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8002346:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4623      	mov	r3, r4
 800234e:	f000 fc19 	bl	8002b84 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002352:	7dbb      	ldrb	r3, [r7, #22]
 8002354:	3301      	adds	r3, #1
 8002356:	75bb      	strb	r3, [r7, #22]
 8002358:	7dbb      	ldrb	r3, [r7, #22]
 800235a:	2b07      	cmp	r3, #7
 800235c:	d9bd      	bls.n	80022da <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800235e:	7d7b      	ldrb	r3, [r7, #21]
 8002360:	3301      	adds	r3, #1
 8002362:	757b      	strb	r3, [r7, #21]
 8002364:	7d7b      	ldrb	r3, [r7, #21]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d9b4      	bls.n	80022d4 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd90      	pop	{r4, r7, pc}
 8002374:	080096b4 	.word	0x080096b4

08002378 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b085      	sub	sp, #20
 800237c:	af02      	add	r7, sp, #8
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	70fb      	strb	r3, [r7, #3]
 800238a:	460b      	mov	r3, r1
 800238c:	70bb      	strb	r3, [r7, #2]
 800238e:	4613      	mov	r3, r2
 8002390:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8002392:	e017      	b.n	80023c4 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	7818      	ldrb	r0, [r3, #0]
 800239c:	883c      	ldrh	r4, [r7, #0]
 800239e:	78ba      	ldrb	r2, [r7, #2]
 80023a0:	78f9      	ldrb	r1, [r7, #3]
 80023a2:	8bbb      	ldrh	r3, [r7, #28]
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	8b3b      	ldrh	r3, [r7, #24]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	4623      	mov	r3, r4
 80023ac:	f7ff ff4a 	bl	8002244 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80023b0:	8b3b      	ldrh	r3, [r7, #24]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	0052      	lsls	r2, r2, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	4413      	add	r3, r2
 80023c2:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e3      	bne.n	8002394 <ILI9341_Draw_Text+0x1c>
    }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}
	...

080023d8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023e2:	4802      	ldr	r0, [pc, #8]	@ (80023ec <ILI9341_SPI_Init+0x14>)
 80023e4:	f001 fdde 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40020800 	.word	0x40020800

080023f0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80023fa:	1df9      	adds	r1, r7, #7
 80023fc:	2301      	movs	r3, #1
 80023fe:	2201      	movs	r2, #1
 8002400:	4803      	ldr	r0, [pc, #12]	@ (8002410 <ILI9341_SPI_Send+0x20>)
 8002402:	f002 ffa0 	bl	8005346 <HAL_SPI_Transmit>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000134 	.word	0x20000134

08002414 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002424:	480b      	ldr	r0, [pc, #44]	@ (8002454 <ILI9341_Write_Command+0x40>)
 8002426:	f001 fdbd 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800242a:	2200      	movs	r2, #0
 800242c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <ILI9341_Write_Command+0x40>)
 8002432:	f001 fdb7 	bl	8003fa4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ffd9 	bl	80023f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800243e:	2201      	movs	r2, #1
 8002440:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002444:	4803      	ldr	r0, [pc, #12]	@ (8002454 <ILI9341_Write_Command+0x40>)
 8002446:	f001 fdad 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40020800 	.word	0x40020800

08002458 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002462:	2201      	movs	r2, #1
 8002464:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002468:	480b      	ldr	r0, [pc, #44]	@ (8002498 <ILI9341_Write_Data+0x40>)
 800246a:	f001 fd9b 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002474:	4808      	ldr	r0, [pc, #32]	@ (8002498 <ILI9341_Write_Data+0x40>)
 8002476:	f001 fd95 	bl	8003fa4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ffb7 	bl	80023f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002482:	2201      	movs	r2, #1
 8002484:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002488:	4803      	ldr	r0, [pc, #12]	@ (8002498 <ILI9341_Write_Data+0x40>)
 800248a:	f001 fd8b 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40020800 	.word	0x40020800

0800249c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4604      	mov	r4, r0
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4623      	mov	r3, r4
 80024ac:	80fb      	strh	r3, [r7, #6]
 80024ae:	4603      	mov	r3, r0
 80024b0:	80bb      	strh	r3, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	807b      	strh	r3, [r7, #2]
 80024b6:	4613      	mov	r3, r2
 80024b8:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80024ba:	202a      	movs	r0, #42	@ 0x2a
 80024bc:	f7ff ffaa 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ffc5 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ffc0 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ffb9 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ffb4 	bl	8002458 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80024f0:	202b      	movs	r0, #43	@ 0x2b
 80024f2:	f7ff ff8f 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80024f6:	88bb      	ldrh	r3, [r7, #4]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff ffaa 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002504:	88bb      	ldrh	r3, [r7, #4]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ffa5 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800250e:	883b      	ldrh	r3, [r7, #0]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	b29b      	uxth	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff9e 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800251c:	883b      	ldrh	r3, [r7, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff99 	bl	8002458 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002526:	202c      	movs	r0, #44	@ 0x2c
 8002528:	f7ff ff74 	bl	8002414 <ILI9341_Write_Command>
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}

08002534 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800253e:	480b      	ldr	r0, [pc, #44]	@ (800256c <ILI9341_Reset+0x38>)
 8002540:	f001 fd30 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002544:	20c8      	movs	r0, #200	@ 0xc8
 8002546:	f000 fcfb 	bl	8002f40 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800254a:	2200      	movs	r2, #0
 800254c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002550:	4806      	ldr	r0, [pc, #24]	@ (800256c <ILI9341_Reset+0x38>)
 8002552:	f001 fd27 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002556:	20c8      	movs	r0, #200	@ 0xc8
 8002558:	f000 fcf2 	bl	8002f40 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800255c:	2201      	movs	r2, #1
 800255e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002562:	4802      	ldr	r0, [pc, #8]	@ (800256c <ILI9341_Reset+0x38>)
 8002564:	f001 fd1e 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40020800 	.word	0x40020800

08002570 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800257e:	2036      	movs	r0, #54	@ 0x36
 8002580:	f7ff ff48 	bl	8002414 <ILI9341_Write_Command>
HAL_Delay(1);
 8002584:	2001      	movs	r0, #1
 8002586:	f000 fcdb 	bl	8002f40 <HAL_Delay>
	
switch(screen_rotation) 
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d837      	bhi.n	8002600 <ILI9341_Set_Rotation+0x90>
 8002590:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <ILI9341_Set_Rotation+0x28>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025bf 	.word	0x080025bf
 80025a0:	080025d5 	.word	0x080025d5
 80025a4:	080025eb 	.word	0x080025eb
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80025a8:	2048      	movs	r0, #72	@ 0x48
 80025aa:	f7ff ff55 	bl	8002458 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80025ae:	4b17      	ldr	r3, [pc, #92]	@ (800260c <ILI9341_Set_Rotation+0x9c>)
 80025b0:	22f0      	movs	r2, #240	@ 0xf0
 80025b2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80025b4:	4b16      	ldr	r3, [pc, #88]	@ (8002610 <ILI9341_Set_Rotation+0xa0>)
 80025b6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025ba:	801a      	strh	r2, [r3, #0]
			break;
 80025bc:	e021      	b.n	8002602 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80025be:	2028      	movs	r0, #40	@ 0x28
 80025c0:	f7ff ff4a 	bl	8002458 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <ILI9341_Set_Rotation+0x9c>)
 80025c6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025ca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80025cc:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <ILI9341_Set_Rotation+0xa0>)
 80025ce:	22f0      	movs	r2, #240	@ 0xf0
 80025d0:	801a      	strh	r2, [r3, #0]
			break;
 80025d2:	e016      	b.n	8002602 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80025d4:	2088      	movs	r0, #136	@ 0x88
 80025d6:	f7ff ff3f 	bl	8002458 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <ILI9341_Set_Rotation+0x9c>)
 80025dc:	22f0      	movs	r2, #240	@ 0xf0
 80025de:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <ILI9341_Set_Rotation+0xa0>)
 80025e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025e6:	801a      	strh	r2, [r3, #0]
			break;
 80025e8:	e00b      	b.n	8002602 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80025ea:	20e8      	movs	r0, #232	@ 0xe8
 80025ec:	f7ff ff34 	bl	8002458 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80025f0:	4b06      	ldr	r3, [pc, #24]	@ (800260c <ILI9341_Set_Rotation+0x9c>)
 80025f2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025f6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80025f8:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <ILI9341_Set_Rotation+0xa0>)
 80025fa:	22f0      	movs	r2, #240	@ 0xf0
 80025fc:	801a      	strh	r2, [r3, #0]
			break;
 80025fe:	e000      	b.n	8002602 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002600:	bf00      	nop
	}
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000005e 	.word	0x2000005e
 8002610:	2000005c 	.word	0x2000005c

08002614 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800261e:	4802      	ldr	r0, [pc, #8]	@ (8002628 <ILI9341_Enable+0x14>)
 8002620:	f001 fcc0 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40020800 	.word	0x40020800

0800262c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002630:	f7ff fff0 	bl	8002614 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002634:	f7ff fed0 	bl	80023d8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002638:	f7ff ff7c 	bl	8002534 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800263c:	2001      	movs	r0, #1
 800263e:	f7ff fee9 	bl	8002414 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002646:	f000 fc7b 	bl	8002f40 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800264a:	20cb      	movs	r0, #203	@ 0xcb
 800264c:	f7ff fee2 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002650:	2039      	movs	r0, #57	@ 0x39
 8002652:	f7ff ff01 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002656:	202c      	movs	r0, #44	@ 0x2c
 8002658:	f7ff fefe 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fefb 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002662:	2034      	movs	r0, #52	@ 0x34
 8002664:	f7ff fef8 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002668:	2002      	movs	r0, #2
 800266a:	f7ff fef5 	bl	8002458 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800266e:	20cf      	movs	r0, #207	@ 0xcf
 8002670:	f7ff fed0 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f7ff feef 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800267a:	20c1      	movs	r0, #193	@ 0xc1
 800267c:	f7ff feec 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002680:	2030      	movs	r0, #48	@ 0x30
 8002682:	f7ff fee9 	bl	8002458 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002686:	20e8      	movs	r0, #232	@ 0xe8
 8002688:	f7ff fec4 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 800268c:	2085      	movs	r0, #133	@ 0x85
 800268e:	f7ff fee3 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff fee0 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002698:	2078      	movs	r0, #120	@ 0x78
 800269a:	f7ff fedd 	bl	8002458 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800269e:	20ea      	movs	r0, #234	@ 0xea
 80026a0:	f7ff feb8 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff fed7 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7ff fed4 	bl	8002458 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80026b0:	20ed      	movs	r0, #237	@ 0xed
 80026b2:	f7ff feaf 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80026b6:	2064      	movs	r0, #100	@ 0x64
 80026b8:	f7ff fece 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80026bc:	2003      	movs	r0, #3
 80026be:	f7ff fecb 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80026c2:	2012      	movs	r0, #18
 80026c4:	f7ff fec8 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80026c8:	2081      	movs	r0, #129	@ 0x81
 80026ca:	f7ff fec5 	bl	8002458 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80026ce:	20f7      	movs	r0, #247	@ 0xf7
 80026d0:	f7ff fea0 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80026d4:	2020      	movs	r0, #32
 80026d6:	f7ff febf 	bl	8002458 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80026da:	20c0      	movs	r0, #192	@ 0xc0
 80026dc:	f7ff fe9a 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80026e0:	2023      	movs	r0, #35	@ 0x23
 80026e2:	f7ff feb9 	bl	8002458 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80026e6:	20c1      	movs	r0, #193	@ 0xc1
 80026e8:	f7ff fe94 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80026ec:	2010      	movs	r0, #16
 80026ee:	f7ff feb3 	bl	8002458 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80026f2:	20c5      	movs	r0, #197	@ 0xc5
 80026f4:	f7ff fe8e 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80026f8:	203e      	movs	r0, #62	@ 0x3e
 80026fa:	f7ff fead 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80026fe:	2028      	movs	r0, #40	@ 0x28
 8002700:	f7ff feaa 	bl	8002458 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002704:	20c7      	movs	r0, #199	@ 0xc7
 8002706:	f7ff fe85 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800270a:	2086      	movs	r0, #134	@ 0x86
 800270c:	f7ff fea4 	bl	8002458 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002710:	2036      	movs	r0, #54	@ 0x36
 8002712:	f7ff fe7f 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002716:	2048      	movs	r0, #72	@ 0x48
 8002718:	f7ff fe9e 	bl	8002458 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800271c:	203a      	movs	r0, #58	@ 0x3a
 800271e:	f7ff fe79 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002722:	2055      	movs	r0, #85	@ 0x55
 8002724:	f7ff fe98 	bl	8002458 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002728:	20b1      	movs	r0, #177	@ 0xb1
 800272a:	f7ff fe73 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800272e:	2000      	movs	r0, #0
 8002730:	f7ff fe92 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002734:	2018      	movs	r0, #24
 8002736:	f7ff fe8f 	bl	8002458 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800273a:	20b6      	movs	r0, #182	@ 0xb6
 800273c:	f7ff fe6a 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002740:	2008      	movs	r0, #8
 8002742:	f7ff fe89 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002746:	2082      	movs	r0, #130	@ 0x82
 8002748:	f7ff fe86 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800274c:	2027      	movs	r0, #39	@ 0x27
 800274e:	f7ff fe83 	bl	8002458 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002752:	20f2      	movs	r0, #242	@ 0xf2
 8002754:	f7ff fe5e 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002758:	2000      	movs	r0, #0
 800275a:	f7ff fe7d 	bl	8002458 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800275e:	2026      	movs	r0, #38	@ 0x26
 8002760:	f7ff fe58 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002764:	2001      	movs	r0, #1
 8002766:	f7ff fe77 	bl	8002458 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800276a:	20e0      	movs	r0, #224	@ 0xe0
 800276c:	f7ff fe52 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002770:	200f      	movs	r0, #15
 8002772:	f7ff fe71 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002776:	2031      	movs	r0, #49	@ 0x31
 8002778:	f7ff fe6e 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 800277c:	202b      	movs	r0, #43	@ 0x2b
 800277e:	f7ff fe6b 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002782:	200c      	movs	r0, #12
 8002784:	f7ff fe68 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002788:	200e      	movs	r0, #14
 800278a:	f7ff fe65 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800278e:	2008      	movs	r0, #8
 8002790:	f7ff fe62 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002794:	204e      	movs	r0, #78	@ 0x4e
 8002796:	f7ff fe5f 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800279a:	20f1      	movs	r0, #241	@ 0xf1
 800279c:	f7ff fe5c 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80027a0:	2037      	movs	r0, #55	@ 0x37
 80027a2:	f7ff fe59 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80027a6:	2007      	movs	r0, #7
 80027a8:	f7ff fe56 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80027ac:	2010      	movs	r0, #16
 80027ae:	f7ff fe53 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80027b2:	2003      	movs	r0, #3
 80027b4:	f7ff fe50 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80027b8:	200e      	movs	r0, #14
 80027ba:	f7ff fe4d 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80027be:	2009      	movs	r0, #9
 80027c0:	f7ff fe4a 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff fe47 	bl	8002458 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80027ca:	20e1      	movs	r0, #225	@ 0xe1
 80027cc:	f7ff fe22 	bl	8002414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7ff fe41 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80027d6:	200e      	movs	r0, #14
 80027d8:	f7ff fe3e 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80027dc:	2014      	movs	r0, #20
 80027de:	f7ff fe3b 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80027e2:	2003      	movs	r0, #3
 80027e4:	f7ff fe38 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80027e8:	2011      	movs	r0, #17
 80027ea:	f7ff fe35 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80027ee:	2007      	movs	r0, #7
 80027f0:	f7ff fe32 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80027f4:	2031      	movs	r0, #49	@ 0x31
 80027f6:	f7ff fe2f 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80027fa:	20c1      	movs	r0, #193	@ 0xc1
 80027fc:	f7ff fe2c 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002800:	2048      	movs	r0, #72	@ 0x48
 8002802:	f7ff fe29 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002806:	2008      	movs	r0, #8
 8002808:	f7ff fe26 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800280c:	200f      	movs	r0, #15
 800280e:	f7ff fe23 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002812:	200c      	movs	r0, #12
 8002814:	f7ff fe20 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002818:	2031      	movs	r0, #49	@ 0x31
 800281a:	f7ff fe1d 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800281e:	2036      	movs	r0, #54	@ 0x36
 8002820:	f7ff fe1a 	bl	8002458 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002824:	200f      	movs	r0, #15
 8002826:	f7ff fe17 	bl	8002458 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800282a:	2011      	movs	r0, #17
 800282c:	f7ff fdf2 	bl	8002414 <ILI9341_Write_Command>
HAL_Delay(120);
 8002830:	2078      	movs	r0, #120	@ 0x78
 8002832:	f000 fb85 	bl	8002f40 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002836:	2029      	movs	r0, #41	@ 0x29
 8002838:	f7ff fdec 	bl	8002414 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800283c:	2000      	movs	r0, #0
 800283e:	f7ff fe97 	bl	8002570 <ILI9341_Set_Rotation>
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800284c:	b08d      	sub	sp, #52	@ 0x34
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	6039      	str	r1, [r7, #0]
 8002854:	80fb      	strh	r3, [r7, #6]
 8002856:	466b      	mov	r3, sp
 8002858:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002866:	d202      	bcs.n	800286e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800286c:	e002      	b.n	8002874 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800286e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002874:	2201      	movs	r2, #1
 8002876:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800287a:	4840      	ldr	r0, [pc, #256]	@ (800297c <ILI9341_Draw_Colour_Burst+0x134>)
 800287c:	f001 fb92 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002880:	2200      	movs	r2, #0
 8002882:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002886:	483d      	ldr	r0, [pc, #244]	@ (800297c <ILI9341_Draw_Colour_Burst+0x134>)
 8002888:	f001 fb8c 	bl	8003fa4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	b29b      	uxth	r3, r3
 8002892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8002896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002898:	460b      	mov	r3, r1
 800289a:	3b01      	subs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	2300      	movs	r3, #0
 80028a0:	4688      	mov	r8, r1
 80028a2:	4699      	mov	r9, r3
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028b8:	2300      	movs	r3, #0
 80028ba:	460c      	mov	r4, r1
 80028bc:	461d      	mov	r5, r3
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	00eb      	lsls	r3, r5, #3
 80028c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028cc:	00e2      	lsls	r2, r4, #3
 80028ce:	1dcb      	adds	r3, r1, #7
 80028d0:	08db      	lsrs	r3, r3, #3
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	ebad 0d03 	sub.w	sp, sp, r3
 80028d8:	466b      	mov	r3, sp
 80028da:	3300      	adds	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80028de:	2300      	movs	r3, #0
 80028e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e2:	e00e      	b.n	8002902 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	4413      	add	r3, r2
 80028ea:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80028ee:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f2:	3301      	adds	r3, #1
 80028f4:	88fa      	ldrh	r2, [r7, #6]
 80028f6:	b2d1      	uxtb	r1, r2
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80028fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fe:	3302      	adds	r3, #2
 8002900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002906:	429a      	cmp	r2, r3
 8002908:	d3ec      	bcc.n	80028e4 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800291e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002924:	fb01 f202 	mul.w	r2, r1, r2
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d010      	beq.n	8002954 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
 8002936:	e009      	b.n	800294c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293a:	b29a      	uxth	r2, r3
 800293c:	230a      	movs	r3, #10
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	480f      	ldr	r0, [pc, #60]	@ (8002980 <ILI9341_Draw_Colour_Burst+0x138>)
 8002942:	f002 fd00 	bl	8005346 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
 800294c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	429a      	cmp	r2, r3
 8002952:	d3f1      	bcc.n	8002938 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	b29a      	uxth	r2, r3
 8002958:	230a      	movs	r3, #10
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	4808      	ldr	r0, [pc, #32]	@ (8002980 <ILI9341_Draw_Colour_Burst+0x138>)
 800295e:	f002 fcf2 	bl	8005346 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002962:	2201      	movs	r2, #1
 8002964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002968:	4804      	ldr	r0, [pc, #16]	@ (800297c <ILI9341_Draw_Colour_Burst+0x134>)
 800296a:	f001 fb1b 	bl	8003fa4 <HAL_GPIO_WritePin>
 800296e:	46b5      	mov	sp, r6
}
 8002970:	bf00      	nop
 8002972:	3734      	adds	r7, #52	@ 0x34
 8002974:	46bd      	mov	sp, r7
 8002976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800297a:	bf00      	nop
 800297c:	40020800 	.word	0x40020800
 8002980:	20000134 	.word	0x20000134

08002984 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800298e:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <ILI9341_Fill_Screen+0x44>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <ILI9341_Fill_Screen+0x48>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	2100      	movs	r1, #0
 800299c:	2000      	movs	r0, #0
 800299e:	f7ff fd7d 	bl	800249c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <ILI9341_Fill_Screen+0x44>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b08      	ldr	r3, [pc, #32]	@ (80029cc <ILI9341_Fill_Screen+0x48>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff44 	bl	8002848 <ILI9341_Draw_Colour_Burst>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000005e 	.word	0x2000005e
 80029cc:	2000005c 	.word	0x2000005c

080029d0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
 80029da:	460b      	mov	r3, r1
 80029dc:	80bb      	strh	r3, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80029e2:	4b64      	ldr	r3, [pc, #400]	@ (8002b74 <ILI9341_Draw_Pixel+0x1a4>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	f080 80be 	bcs.w	8002b6c <ILI9341_Draw_Pixel+0x19c>
 80029f0:	4b61      	ldr	r3, [pc, #388]	@ (8002b78 <ILI9341_Draw_Pixel+0x1a8>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	88ba      	ldrh	r2, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	f080 80b7 	bcs.w	8002b6c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80029fe:	2200      	movs	r2, #0
 8002a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a04:	485d      	ldr	r0, [pc, #372]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002a06:	f001 facd 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a10:	485a      	ldr	r0, [pc, #360]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002a12:	f001 fac7 	bl	8003fa4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002a16:	202a      	movs	r0, #42	@ 0x2a
 8002a18:	f7ff fcea 	bl	80023f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a22:	4856      	ldr	r0, [pc, #344]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002a24:	f001 fabe 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a2e:	4853      	ldr	r0, [pc, #332]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002a30:	f001 fab8 	bl	8003fa4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a3a:	4850      	ldr	r0, [pc, #320]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002a3c:	f001 fab2 	bl	8003fa4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	753b      	strb	r3, [r7, #20]
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	757b      	strb	r3, [r7, #21]
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	3301      	adds	r3, #1
 8002a54:	121b      	asrs	r3, r3, #8
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	75bb      	strb	r3, [r7, #22]
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002a64:	f107 0114 	add.w	r1, r7, #20
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	4844      	ldr	r0, [pc, #272]	@ (8002b80 <ILI9341_Draw_Pixel+0x1b0>)
 8002a6e:	f002 fc6a 	bl	8005346 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a72:	2201      	movs	r2, #1
 8002a74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a78:	4840      	ldr	r0, [pc, #256]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002a7a:	f001 fa93 	bl	8003fa4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a84:	483d      	ldr	r0, [pc, #244]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002a86:	f001 fa8d 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a90:	483a      	ldr	r0, [pc, #232]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002a92:	f001 fa87 	bl	8003fa4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002a96:	202b      	movs	r0, #43	@ 0x2b
 8002a98:	f7ff fcaa 	bl	80023f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aa2:	4836      	ldr	r0, [pc, #216]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002aa4:	f001 fa7e 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aae:	4833      	ldr	r0, [pc, #204]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002ab0:	f001 fa78 	bl	8003fa4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aba:	4830      	ldr	r0, [pc, #192]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002abc:	f001 fa72 	bl	8003fa4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	743b      	strb	r3, [r7, #16]
 8002aca:	88bb      	ldrh	r3, [r7, #4]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	747b      	strb	r3, [r7, #17]
 8002ad0:	88bb      	ldrh	r3, [r7, #4]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	121b      	asrs	r3, r3, #8
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	74bb      	strb	r3, [r7, #18]
 8002ada:	88bb      	ldrh	r3, [r7, #4]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002ae4:	f107 0110 	add.w	r1, r7, #16
 8002ae8:	2301      	movs	r3, #1
 8002aea:	2204      	movs	r2, #4
 8002aec:	4824      	ldr	r0, [pc, #144]	@ (8002b80 <ILI9341_Draw_Pixel+0x1b0>)
 8002aee:	f002 fc2a 	bl	8005346 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002af2:	2201      	movs	r2, #1
 8002af4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002af8:	4820      	ldr	r0, [pc, #128]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002afa:	f001 fa53 	bl	8003fa4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002afe:	2200      	movs	r2, #0
 8002b00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b04:	481d      	ldr	r0, [pc, #116]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002b06:	f001 fa4d 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b10:	481a      	ldr	r0, [pc, #104]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002b12:	f001 fa47 	bl	8003fa4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002b16:	202c      	movs	r0, #44	@ 0x2c
 8002b18:	f7ff fc6a 	bl	80023f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b22:	4816      	ldr	r0, [pc, #88]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002b24:	f001 fa3e 	bl	8003fa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b2e:	4813      	ldr	r0, [pc, #76]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002b30:	f001 fa38 	bl	8003fa4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002b34:	2200      	movs	r2, #0
 8002b36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b3a:	4810      	ldr	r0, [pc, #64]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002b3c:	f001 fa32 	bl	8003fa4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	733b      	strb	r3, [r7, #12]
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002b50:	f107 010c 	add.w	r1, r7, #12
 8002b54:	2301      	movs	r3, #1
 8002b56:	2202      	movs	r2, #2
 8002b58:	4809      	ldr	r0, [pc, #36]	@ (8002b80 <ILI9341_Draw_Pixel+0x1b0>)
 8002b5a:	f002 fbf4 	bl	8005346 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b64:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <ILI9341_Draw_Pixel+0x1ac>)
 8002b66:	f001 fa1d 	bl	8003fa4 <HAL_GPIO_WritePin>
 8002b6a:	e000      	b.n	8002b6e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002b6c:	bf00      	nop
	
}
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000005e 	.word	0x2000005e
 8002b78:	2000005c 	.word	0x2000005c
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	20000134 	.word	0x20000134

08002b84 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4623      	mov	r3, r4
 8002b94:	80fb      	strh	r3, [r7, #6]
 8002b96:	4603      	mov	r3, r0
 8002b98:	80bb      	strh	r3, [r7, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	807b      	strh	r3, [r7, #2]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002ba2:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <ILI9341_Draw_Rectangle+0xb0>)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d23d      	bcs.n	8002c2a <ILI9341_Draw_Rectangle+0xa6>
 8002bae:	4b22      	ldr	r3, [pc, #136]	@ (8002c38 <ILI9341_Draw_Rectangle+0xb4>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	88ba      	ldrh	r2, [r7, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d237      	bcs.n	8002c2a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c34 <ILI9341_Draw_Rectangle+0xb0>)
 8002bc2:	8812      	ldrh	r2, [r2, #0]
 8002bc4:	b292      	uxth	r2, r2
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	dd05      	ble.n	8002bd6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002bca:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <ILI9341_Draw_Rectangle+0xb0>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002bd6:	88ba      	ldrh	r2, [r7, #4]
 8002bd8:	883b      	ldrh	r3, [r7, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a16      	ldr	r2, [pc, #88]	@ (8002c38 <ILI9341_Draw_Rectangle+0xb4>)
 8002bde:	8812      	ldrh	r2, [r2, #0]
 8002be0:	b292      	uxth	r2, r2
 8002be2:	4293      	cmp	r3, r2
 8002be4:	dd05      	ble.n	8002bf2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002be6:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <ILI9341_Draw_Rectangle+0xb4>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	88bb      	ldrh	r3, [r7, #4]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29c      	uxth	r4, r3
 8002bfe:	88ba      	ldrh	r2, [r7, #4]
 8002c00:	883b      	ldrh	r3, [r7, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	88b9      	ldrh	r1, [r7, #4]
 8002c0c:	88f8      	ldrh	r0, [r7, #6]
 8002c0e:	4622      	mov	r2, r4
 8002c10:	f7ff fc44 	bl	800249c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002c14:	883b      	ldrh	r3, [r7, #0]
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	8b3b      	ldrh	r3, [r7, #24]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fe10 	bl	8002848 <ILI9341_Draw_Colour_Burst>
 8002c28:	e000      	b.n	8002c2c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002c2a:	bf00      	nop
}
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000005e 	.word	0x2000005e
 8002c38:	2000005c 	.word	0x2000005c

08002c3c <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002c42:	2310      	movs	r3, #16
 8002c44:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002c4a:	e019      	b.n	8002c80 <TP_Read+0x44>
    {
        value <<= 1;
 8002c4c:	88bb      	ldrh	r3, [r7, #4]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002c52:	2201      	movs	r2, #1
 8002c54:	2108      	movs	r1, #8
 8002c56:	480e      	ldr	r0, [pc, #56]	@ (8002c90 <TP_Read+0x54>)
 8002c58:	f001 f9a4 	bl	8003fa4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2108      	movs	r1, #8
 8002c60:	480b      	ldr	r0, [pc, #44]	@ (8002c90 <TP_Read+0x54>)
 8002c62:	f001 f99f 	bl	8003fa4 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002c66:	2110      	movs	r1, #16
 8002c68:	4809      	ldr	r0, [pc, #36]	@ (8002c90 <TP_Read+0x54>)
 8002c6a:	f001 f983 	bl	8003f74 <HAL_GPIO_ReadPin>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <TP_Read+0x3e>
        {
            value++;
 8002c74:	88bb      	ldrh	r3, [r7, #4]
 8002c76:	3301      	adds	r3, #1
 8002c78:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e2      	bne.n	8002c4c <TP_Read+0x10>
    };

    return value;
 8002c86:	88bb      	ldrh	r3, [r7, #4]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000

08002c94 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2108      	movs	r1, #8
 8002ca6:	4815      	ldr	r0, [pc, #84]	@ (8002cfc <TP_Write+0x68>)
 8002ca8:	f001 f97c 	bl	8003fa4 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8002cac:	e01e      	b.n	8002cec <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da05      	bge.n	8002cc2 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	2120      	movs	r1, #32
 8002cba:	4810      	ldr	r0, [pc, #64]	@ (8002cfc <TP_Write+0x68>)
 8002cbc:	f001 f972 	bl	8003fa4 <HAL_GPIO_WritePin>
 8002cc0:	e004      	b.n	8002ccc <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2120      	movs	r1, #32
 8002cc6:	480d      	ldr	r0, [pc, #52]	@ (8002cfc <TP_Write+0x68>)
 8002cc8:	f001 f96c 	bl	8003fa4 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2108      	movs	r1, #8
 8002cd6:	4809      	ldr	r0, [pc, #36]	@ (8002cfc <TP_Write+0x68>)
 8002cd8:	f001 f964 	bl	8003fa4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2108      	movs	r1, #8
 8002ce0:	4806      	ldr	r0, [pc, #24]	@ (8002cfc <TP_Write+0x68>)
 8002ce2:	f001 f95f 	bl	8003fa4 <HAL_GPIO_WritePin>
        i--;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1dd      	bne.n	8002cae <TP_Write+0x1a>
    };
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000

08002d00 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2108      	movs	r1, #8
 8002d0c:	485a      	ldr	r0, [pc, #360]	@ (8002e78 <TP_Read_Coordinates+0x178>)
 8002d0e:	f001 f949 	bl	8003fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002d12:	2201      	movs	r2, #1
 8002d14:	2120      	movs	r1, #32
 8002d16:	4858      	ldr	r0, [pc, #352]	@ (8002e78 <TP_Read_Coordinates+0x178>)
 8002d18:	f001 f944 	bl	8003fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	2140      	movs	r1, #64	@ 0x40
 8002d20:	4855      	ldr	r0, [pc, #340]	@ (8002e78 <TP_Read_Coordinates+0x178>)
 8002d22:	f001 f93f 	bl	8003fa4 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d36:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2140      	movs	r1, #64	@ 0x40
 8002d40:	484d      	ldr	r0, [pc, #308]	@ (8002e78 <TP_Read_Coordinates+0x178>)
 8002d42:	f001 f92f 	bl	8003fa4 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002d46:	e023      	b.n	8002d90 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002d48:	2090      	movs	r0, #144	@ 0x90
 8002d4a:	f7ff ffa3 	bl	8002c94 <TP_Write>

				rawy = TP_Read();	
 8002d4e:	f7ff ff75 	bl	8002c3c <TP_Read>
 8002d52:	4603      	mov	r3, r0
 8002d54:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002d56:	89fb      	ldrh	r3, [r7, #14]
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8002d5e:	89fb      	ldrh	r3, [r7, #14]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002d66:	20d0      	movs	r0, #208	@ 0xd0
 8002d68:	f7ff ff94 	bl	8002c94 <TP_Write>
        rawx = TP_Read();
 8002d6c:	f7ff ff66 	bl	8002c3c <TP_Read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8002d74:	89bb      	ldrh	r3, [r7, #12]
 8002d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d78:	4413      	add	r3, r2
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
				calculating_x += rawx;
 8002d7c:	89bb      	ldrh	r3, [r7, #12]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	61fb      	str	r3, [r7, #28]
        samples--;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <TP_Read_Coordinates+0xa4>
 8002d96:	2104      	movs	r1, #4
 8002d98:	4837      	ldr	r0, [pc, #220]	@ (8002e78 <TP_Read_Coordinates+0x178>)
 8002d9a:	f001 f8eb 	bl	8003f74 <HAL_GPIO_ReadPin>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0d1      	beq.n	8002d48 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002da4:	2201      	movs	r2, #1
 8002da6:	2140      	movs	r1, #64	@ 0x40
 8002da8:	4833      	ldr	r0, [pc, #204]	@ (8002e78 <TP_Read_Coordinates+0x178>)
 8002daa:	f001 f8fb 	bl	8003fa4 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002db4:	d14d      	bne.n	8002e52 <TP_Read_Coordinates+0x152>
 8002db6:	2104      	movs	r1, #4
 8002db8:	482f      	ldr	r0, [pc, #188]	@ (8002e78 <TP_Read_Coordinates+0x178>)
 8002dba:	f001 f8db 	bl	8003f74 <HAL_GPIO_ReadPin>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d146      	bne.n	8002e52 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002de0:	89bb      	ldrh	r3, [r7, #12]
 8002de2:	425b      	negs	r3, r3
 8002de4:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002de6:	89fb      	ldrh	r3, [r7, #14]
 8002de8:	425b      	negs	r3, r3
 8002dea:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8002dec:	89ba      	ldrh	r2, [r7, #12]
 8002dee:	4b23      	ldr	r3, [pc, #140]	@ (8002e7c <TP_Read_Coordinates+0x17c>)
 8002df0:	fba3 1302 	umull	r1, r3, r3, r2
 8002df4:	1ad2      	subs	r2, r2, r3
 8002df6:	0852      	lsrs	r2, r2, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f1c3 03e3 	rsb	r3, r3, #227	@ 0xe3
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e0a:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8002e70 <TP_Read_Coordinates+0x170>
 8002e0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e16:	ee17 3a90 	vmov	r3, s15
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002e20:	89fb      	ldrh	r3, [r7, #14]
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <TP_Read_Coordinates+0x180>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	09db      	lsrs	r3, r3, #7
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b0f      	subs	r3, #15
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e36:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8002e70 <TP_Read_Coordinates+0x170>
 8002e3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3302      	adds	r3, #2
 8002e42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e46:	ee17 2a90 	vmov	r2, s15
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e007      	b.n	8002e62 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002e60:	2300      	movs	r3, #0
		}
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3728      	adds	r7, #40	@ 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	f3af 8000 	nop.w
 8002e70:	28f5c28f 	.word	0x28f5c28f
 8002e74:	3ff28f5c 	.word	0x3ff28f5c
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	e01e01e1 	.word	0xe01e01e1
 8002e80:	88888889 	.word	0x88888889

08002e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e88:	2003      	movs	r0, #3
 8002e8a:	f000 fd7b 	bl	8003984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8e:	2002      	movs	r0, #2
 8002e90:	f000 f806 	bl	8002ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e94:	f7fe fe70 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea8:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <HAL_InitTick+0x54>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b12      	ldr	r3, [pc, #72]	@ (8002ef8 <HAL_InitTick+0x58>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fd95 	bl	80039ee <HAL_SYSTICK_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00e      	b.n	8002eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0f      	cmp	r3, #15
 8002ed2:	d80a      	bhi.n	8002eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	f000 fd5d 	bl	800399a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ee0:	4a06      	ldr	r2, [pc, #24]	@ (8002efc <HAL_InitTick+0x5c>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e000      	b.n	8002eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000058 	.word	0x20000058
 8002ef8:	20000064 	.word	0x20000064
 8002efc:	20000060 	.word	0x20000060

08002f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_IncTick+0x20>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_IncTick+0x24>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_IncTick+0x24>)
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000064 	.word	0x20000064
 8002f24:	20000358 	.word	0x20000358

08002f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <HAL_GetTick+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000358 	.word	0x20000358

08002f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff ffee 	bl	8002f28 <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d005      	beq.n	8002f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <HAL_Delay+0x44>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f66:	bf00      	nop
 8002f68:	f7ff ffde 	bl	8002f28 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d8f7      	bhi.n	8002f68 <HAL_Delay+0x28>
  {
  }
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000064 	.word	0x20000064

08002f88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e031      	b.n	8003002 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fe fe0a 	bl	8001bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d116      	bne.n	8002ff4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <HAL_ADC_Init+0x84>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fb0a 	bl	80035f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ff2:	e001      	b.n	8002ff8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	ffffeefd 	.word	0xffffeefd

08003010 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_ADC_Start+0x1a>
 8003026:	2302      	movs	r3, #2
 8003028:	e0ad      	b.n	8003186 <HAL_ADC_Start+0x176>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d018      	beq.n	8003072 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003050:	4b50      	ldr	r3, [pc, #320]	@ (8003194 <HAL_ADC_Start+0x184>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a50      	ldr	r2, [pc, #320]	@ (8003198 <HAL_ADC_Start+0x188>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0c9a      	lsrs	r2, r3, #18
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003064:	e002      	b.n	800306c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3b01      	subs	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f9      	bne.n	8003066 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	d175      	bne.n	800316c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003084:	4b45      	ldr	r3, [pc, #276]	@ (800319c <HAL_ADC_Start+0x18c>)
 8003086:	4013      	ands	r3, r2
 8003088:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ba:	d106      	bne.n	80030ca <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	f023 0206 	bic.w	r2, r3, #6
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80030c8:	e002      	b.n	80030d0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80030e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80030e2:	4b2f      	ldr	r3, [pc, #188]	@ (80031a0 <HAL_ADC_Start+0x190>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d143      	bne.n	8003184 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	e03a      	b.n	8003184 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a24      	ldr	r2, [pc, #144]	@ (80031a4 <HAL_ADC_Start+0x194>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d10e      	bne.n	8003136 <HAL_ADC_Start+0x126>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003134:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003136:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <HAL_ADC_Start+0x190>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	d120      	bne.n	8003184 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <HAL_ADC_Start+0x198>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d11b      	bne.n	8003184 <HAL_ADC_Start+0x174>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d114      	bne.n	8003184 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	e00b      	b.n	8003184 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	f043 0210 	orr.w	r2, r3, #16
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	f043 0201 	orr.w	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000058 	.word	0x20000058
 8003198:	431bde83 	.word	0x431bde83
 800319c:	fffff8fe 	.word	0xfffff8fe
 80031a0:	40012300 	.word	0x40012300
 80031a4:	40012000 	.word	0x40012000
 80031a8:	40012200 	.word	0x40012200

080031ac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_Stop+0x16>
 80031be:	2302      	movs	r3, #2
 80031c0:	e01f      	b.n	8003202 <HAL_ADC_Stop+0x56>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0201 	bic.w	r2, r2, #1
 80031d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d107      	bne.n	80031f8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ec:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <HAL_ADC_Stop+0x64>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	ffffeefe 	.word	0xffffeefe

08003214 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003230:	d113      	bne.n	800325a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800323c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003240:	d10b      	bne.n	800325a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e063      	b.n	8003322 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800325a:	f7ff fe65 	bl	8002f28 <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003260:	e021      	b.n	80032a6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d01d      	beq.n	80032a6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_ADC_PollForConversion+0x6c>
 8003270:	f7ff fe5a 	bl	8002f28 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d212      	bcs.n	80032a6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d00b      	beq.n	80032a6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f043 0204 	orr.w	r2, r3, #4
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e03d      	b.n	8003322 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d1d6      	bne.n	8003262 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0212 	mvn.w	r2, #18
 80032bc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d123      	bne.n	8003320 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d11f      	bne.n	8003320 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d111      	bne.n	8003320 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1c>
 800335c:	2302      	movs	r3, #2
 800335e:	e136      	b.n	80035ce <HAL_ADC_ConfigChannel+0x28a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b09      	cmp	r3, #9
 800336e:	d93a      	bls.n	80033e6 <HAL_ADC_ConfigChannel+0xa2>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003378:	d035      	beq.n	80033e6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68d9      	ldr	r1, [r3, #12]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	3b1e      	subs	r3, #30
 8003390:	2207      	movs	r2, #7
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	400a      	ands	r2, r1
 800339e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a8d      	ldr	r2, [pc, #564]	@ (80035dc <HAL_ADC_ConfigChannel+0x298>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d10a      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68d9      	ldr	r1, [r3, #12]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	061a      	lsls	r2, r3, #24
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033be:	e035      	b.n	800342c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68d9      	ldr	r1, [r3, #12]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	4618      	mov	r0, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4403      	add	r3, r0
 80033d8:	3b1e      	subs	r3, #30
 80033da:	409a      	lsls	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033e4:	e022      	b.n	800342c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6919      	ldr	r1, [r3, #16]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	2207      	movs	r2, #7
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43da      	mvns	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	400a      	ands	r2, r1
 8003408:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6919      	ldr	r1, [r3, #16]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	4618      	mov	r0, r3
 800341c:	4603      	mov	r3, r0
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4403      	add	r3, r0
 8003422:	409a      	lsls	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b06      	cmp	r3, #6
 8003432:	d824      	bhi.n	800347e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	3b05      	subs	r3, #5
 8003446:	221f      	movs	r2, #31
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43da      	mvns	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	400a      	ands	r2, r1
 8003454:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	4618      	mov	r0, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	3b05      	subs	r3, #5
 8003470:	fa00 f203 	lsl.w	r2, r0, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	635a      	str	r2, [r3, #52]	@ 0x34
 800347c:	e04c      	b.n	8003518 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d824      	bhi.n	80034d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	3b23      	subs	r3, #35	@ 0x23
 8003498:	221f      	movs	r2, #31
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	400a      	ands	r2, r1
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4618      	mov	r0, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	3b23      	subs	r3, #35	@ 0x23
 80034c2:	fa00 f203 	lsl.w	r2, r0, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80034ce:	e023      	b.n	8003518 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	3b41      	subs	r3, #65	@ 0x41
 80034e2:	221f      	movs	r2, #31
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43da      	mvns	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	400a      	ands	r2, r1
 80034f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4618      	mov	r0, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3b41      	subs	r3, #65	@ 0x41
 800350c:	fa00 f203 	lsl.w	r2, r0, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a30      	ldr	r2, [pc, #192]	@ (80035e0 <HAL_ADC_ConfigChannel+0x29c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d10a      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x1f4>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800352a:	d105      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800352c:	4b2d      	ldr	r3, [pc, #180]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a2c      	ldr	r2, [pc, #176]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003532:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003536:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a28      	ldr	r2, [pc, #160]	@ (80035e0 <HAL_ADC_ConfigChannel+0x29c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10f      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x21e>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b12      	cmp	r3, #18
 8003548:	d10b      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800354a:	4b26      	ldr	r3, [pc, #152]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4a25      	ldr	r2, [pc, #148]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003550:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003554:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003556:	4b23      	ldr	r3, [pc, #140]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4a22      	ldr	r2, [pc, #136]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800355c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003560:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <HAL_ADC_ConfigChannel+0x29c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d12b      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x280>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1a      	ldr	r2, [pc, #104]	@ (80035dc <HAL_ADC_ConfigChannel+0x298>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d003      	beq.n	800357e <HAL_ADC_ConfigChannel+0x23a>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b11      	cmp	r3, #17
 800357c:	d122      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800357e:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003584:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003588:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800358a:	4b16      	ldr	r3, [pc, #88]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4a15      	ldr	r2, [pc, #84]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003590:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003594:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a10      	ldr	r2, [pc, #64]	@ (80035dc <HAL_ADC_ConfigChannel+0x298>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d111      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80035a0:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <HAL_ADC_ConfigChannel+0x2a4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a11      	ldr	r2, [pc, #68]	@ (80035ec <HAL_ADC_ConfigChannel+0x2a8>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	0c9a      	lsrs	r2, r3, #18
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035b6:	e002      	b.n	80035be <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f9      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	10000012 	.word	0x10000012
 80035e0:	40012000 	.word	0x40012000
 80035e4:	40012300 	.word	0x40012300
 80035e8:	20000058 	.word	0x20000058
 80035ec:	431bde83 	.word	0x431bde83

080035f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035f8:	4b78      	ldr	r3, [pc, #480]	@ (80037dc <ADC_Init+0x1ec>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a77      	ldr	r2, [pc, #476]	@ (80037dc <ADC_Init+0x1ec>)
 80035fe:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003602:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003604:	4b75      	ldr	r3, [pc, #468]	@ (80037dc <ADC_Init+0x1ec>)
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4973      	ldr	r1, [pc, #460]	@ (80037dc <ADC_Init+0x1ec>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	021a      	lsls	r2, r3, #8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6899      	ldr	r1, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	4a58      	ldr	r2, [pc, #352]	@ (80037e0 <ADC_Init+0x1f0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d022      	beq.n	80036ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003692:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6899      	ldr	r1, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	e00f      	b.n	80036ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0202 	bic.w	r2, r2, #2
 80036f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6899      	ldr	r1, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	005a      	lsls	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01b      	beq.n	8003750 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003726:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003736:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	3b01      	subs	r3, #1
 8003744:	035a      	lsls	r2, r3, #13
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	e007      	b.n	8003760 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800375e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800376e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	3b01      	subs	r3, #1
 800377c:	051a      	lsls	r2, r3, #20
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6899      	ldr	r1, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037a2:	025a      	lsls	r2, r3, #9
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6899      	ldr	r1, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	029a      	lsls	r2, r3, #10
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40012300 	.word	0x40012300
 80037e0:	0f000001 	.word	0x0f000001

080037e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <__NVIC_SetPriorityGrouping+0x40>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003800:	4013      	ands	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <__NVIC_SetPriorityGrouping+0x44>)
 800380e:	4313      	orrs	r3, r2
 8003810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003812:	4a04      	ldr	r2, [pc, #16]	@ (8003824 <__NVIC_SetPriorityGrouping+0x40>)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	60d3      	str	r3, [r2, #12]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00
 8003828:	05fa0000 	.word	0x05fa0000

0800382c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <__NVIC_GetPriorityGrouping+0x18>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	f003 0307 	and.w	r3, r3, #7
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	2b00      	cmp	r3, #0
 8003858:	db0b      	blt.n	8003872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	f003 021f 	and.w	r2, r3, #31
 8003860:	4907      	ldr	r1, [pc, #28]	@ (8003880 <__NVIC_EnableIRQ+0x38>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2001      	movs	r0, #1
 800386a:	fa00 f202 	lsl.w	r2, r0, r2
 800386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e100 	.word	0xe000e100

08003884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	6039      	str	r1, [r7, #0]
 800388e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	2b00      	cmp	r3, #0
 8003896:	db0a      	blt.n	80038ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	490c      	ldr	r1, [pc, #48]	@ (80038d0 <__NVIC_SetPriority+0x4c>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	440b      	add	r3, r1
 80038a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ac:	e00a      	b.n	80038c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4908      	ldr	r1, [pc, #32]	@ (80038d4 <__NVIC_SetPriority+0x50>)
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	3b04      	subs	r3, #4
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	440b      	add	r3, r1
 80038c2:	761a      	strb	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	@ 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f1c3 0307 	rsb	r3, r3, #7
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	bf28      	it	cs
 80038f6:	2304      	movcs	r3, #4
 80038f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d902      	bls.n	8003908 <NVIC_EncodePriority+0x30>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3b03      	subs	r3, #3
 8003906:	e000      	b.n	800390a <NVIC_EncodePriority+0x32>
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	401a      	ands	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43d9      	mvns	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	4313      	orrs	r3, r2
         );
}
 8003932:	4618      	mov	r0, r3
 8003934:	3724      	adds	r7, #36	@ 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003950:	d301      	bcc.n	8003956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003952:	2301      	movs	r3, #1
 8003954:	e00f      	b.n	8003976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003956:	4a0a      	ldr	r2, [pc, #40]	@ (8003980 <SysTick_Config+0x40>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395e:	210f      	movs	r1, #15
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	f7ff ff8e 	bl	8003884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <SysTick_Config+0x40>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396e:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <SysTick_Config+0x40>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	e000e010 	.word	0xe000e010

08003984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ff29 	bl	80037e4 <__NVIC_SetPriorityGrouping>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4603      	mov	r3, r0
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ac:	f7ff ff3e 	bl	800382c <__NVIC_GetPriorityGrouping>
 80039b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	6978      	ldr	r0, [r7, #20]
 80039b8:	f7ff ff8e 	bl	80038d8 <NVIC_EncodePriority>
 80039bc:	4602      	mov	r2, r0
 80039be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ff5d 	bl	8003884 <__NVIC_SetPriority>
}
 80039ca:	bf00      	nop
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4603      	mov	r3, r0
 80039da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff31 	bl	8003848 <__NVIC_EnableIRQ>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff ffa2 	bl	8003940 <SysTick_Config>
 80039fc:	4603      	mov	r3, r0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003a0c:	f3bf 8f5f 	dmb	sy
}
 8003a10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003a12:	4b07      	ldr	r3, [pc, #28]	@ (8003a30 <HAL_MPU_Disable+0x28>)
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	4a06      	ldr	r2, [pc, #24]	@ (8003a30 <HAL_MPU_Disable+0x28>)
 8003a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_MPU_Disable+0x2c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000ed00 	.word	0xe000ed00
 8003a34:	e000ed90 	.word	0xe000ed90

08003a38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003a40:	4a0b      	ldr	r2, [pc, #44]	@ (8003a70 <HAL_MPU_Enable+0x38>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <HAL_MPU_Enable+0x3c>)
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	4a09      	ldr	r2, [pc, #36]	@ (8003a74 <HAL_MPU_Enable+0x3c>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a54:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003a56:	f3bf 8f4f 	dsb	sy
}
 8003a5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a5c:	f3bf 8f6f 	isb	sy
}
 8003a60:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000ed90 	.word	0xe000ed90
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	785a      	ldrb	r2, [r3, #1]
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_MPU_ConfigRegion+0x7c>)
 8003a86:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003a88:	4b1a      	ldr	r3, [pc, #104]	@ (8003af4 <HAL_MPU_ConfigRegion+0x7c>)
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	@ (8003af4 <HAL_MPU_ConfigRegion+0x7c>)
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003a94:	4a17      	ldr	r2, [pc, #92]	@ (8003af4 <HAL_MPU_ConfigRegion+0x7c>)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	7b1b      	ldrb	r3, [r3, #12]
 8003aa0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7adb      	ldrb	r3, [r3, #11]
 8003aa6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003aa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	7a9b      	ldrb	r3, [r3, #10]
 8003aae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ab0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7b5b      	ldrb	r3, [r3, #13]
 8003ab6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ab8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7b9b      	ldrb	r3, [r3, #14]
 8003abe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ac0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7bdb      	ldrb	r3, [r3, #15]
 8003ac6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ac8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7a5b      	ldrb	r3, [r3, #9]
 8003ace:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ad0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7a1b      	ldrb	r3, [r3, #8]
 8003ad6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ad8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ae0:	4a04      	ldr	r2, [pc, #16]	@ (8003af4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ae2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ae4:	6113      	str	r3, [r2, #16]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	e000ed90 	.word	0xe000ed90

08003af8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b06:	f7ff fa0f 	bl	8002f28 <HAL_GetTick>
 8003b0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d008      	beq.n	8003b2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e052      	b.n	8003bd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0216 	bic.w	r2, r2, #22
 8003b38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <HAL_DMA_Abort+0x62>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0208 	bic.w	r2, r2, #8
 8003b68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b7a:	e013      	b.n	8003ba4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b7c:	f7ff f9d4 	bl	8002f28 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d90c      	bls.n	8003ba4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2203      	movs	r2, #3
 8003b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e015      	b.n	8003bd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e4      	bne.n	8003b7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb6:	223f      	movs	r2, #63	@ 0x3f
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d004      	beq.n	8003bf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2280      	movs	r2, #128	@ 0x80
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e00c      	b.n	8003c10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2205      	movs	r2, #5
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	@ 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	e175      	b.n	8003f28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	f040 8164 	bne.w	8003f22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d005      	beq.n	8003c72 <HAL_GPIO_Init+0x56>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d130      	bne.n	8003cd4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca8:	2201      	movs	r2, #1
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 0201 	and.w	r2, r3, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d017      	beq.n	8003d10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2203      	movs	r2, #3
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d123      	bne.n	8003d64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	08da      	lsrs	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3208      	adds	r2, #8
 8003d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	220f      	movs	r2, #15
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	08da      	lsrs	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3208      	adds	r2, #8
 8003d5e:	69b9      	ldr	r1, [r7, #24]
 8003d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	2203      	movs	r2, #3
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0203 	and.w	r2, r3, #3
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80be 	beq.w	8003f22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da6:	4b66      	ldr	r3, [pc, #408]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003daa:	4a65      	ldr	r2, [pc, #404]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003db2:	4b63      	ldr	r3, [pc, #396]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003dbe:	4a61      	ldr	r2, [pc, #388]	@ (8003f44 <HAL_GPIO_Init+0x328>)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a58      	ldr	r2, [pc, #352]	@ (8003f48 <HAL_GPIO_Init+0x32c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d037      	beq.n	8003e5a <HAL_GPIO_Init+0x23e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a57      	ldr	r2, [pc, #348]	@ (8003f4c <HAL_GPIO_Init+0x330>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d031      	beq.n	8003e56 <HAL_GPIO_Init+0x23a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a56      	ldr	r2, [pc, #344]	@ (8003f50 <HAL_GPIO_Init+0x334>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d02b      	beq.n	8003e52 <HAL_GPIO_Init+0x236>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a55      	ldr	r2, [pc, #340]	@ (8003f54 <HAL_GPIO_Init+0x338>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d025      	beq.n	8003e4e <HAL_GPIO_Init+0x232>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a54      	ldr	r2, [pc, #336]	@ (8003f58 <HAL_GPIO_Init+0x33c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01f      	beq.n	8003e4a <HAL_GPIO_Init+0x22e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a53      	ldr	r2, [pc, #332]	@ (8003f5c <HAL_GPIO_Init+0x340>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d019      	beq.n	8003e46 <HAL_GPIO_Init+0x22a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a52      	ldr	r2, [pc, #328]	@ (8003f60 <HAL_GPIO_Init+0x344>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_GPIO_Init+0x226>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a51      	ldr	r2, [pc, #324]	@ (8003f64 <HAL_GPIO_Init+0x348>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00d      	beq.n	8003e3e <HAL_GPIO_Init+0x222>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a50      	ldr	r2, [pc, #320]	@ (8003f68 <HAL_GPIO_Init+0x34c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <HAL_GPIO_Init+0x21e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8003f6c <HAL_GPIO_Init+0x350>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <HAL_GPIO_Init+0x21a>
 8003e32:	2309      	movs	r3, #9
 8003e34:	e012      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e36:	230a      	movs	r3, #10
 8003e38:	e010      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	e00e      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e3e:	2307      	movs	r3, #7
 8003e40:	e00c      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e42:	2306      	movs	r3, #6
 8003e44:	e00a      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e46:	2305      	movs	r3, #5
 8003e48:	e008      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	e006      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e004      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e002      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_GPIO_Init+0x240>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	f002 0203 	and.w	r2, r2, #3
 8003e62:	0092      	lsls	r2, r2, #2
 8003e64:	4093      	lsls	r3, r2
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e6c:	4935      	ldr	r1, [pc, #212]	@ (8003f44 <HAL_GPIO_Init+0x328>)
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	3302      	adds	r3, #2
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f70 <HAL_GPIO_Init+0x354>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e9e:	4a34      	ldr	r2, [pc, #208]	@ (8003f70 <HAL_GPIO_Init+0x354>)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea4:	4b32      	ldr	r3, [pc, #200]	@ (8003f70 <HAL_GPIO_Init+0x354>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec8:	4a29      	ldr	r2, [pc, #164]	@ (8003f70 <HAL_GPIO_Init+0x354>)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ece:	4b28      	ldr	r3, [pc, #160]	@ (8003f70 <HAL_GPIO_Init+0x354>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f70 <HAL_GPIO_Init+0x354>)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f70 <HAL_GPIO_Init+0x354>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f1c:	4a14      	ldr	r2, [pc, #80]	@ (8003f70 <HAL_GPIO_Init+0x354>)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3301      	adds	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b0f      	cmp	r3, #15
 8003f2c:	f67f ae86 	bls.w	8003c3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	3724      	adds	r7, #36	@ 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40013800 	.word	0x40013800
 8003f48:	40020000 	.word	0x40020000
 8003f4c:	40020400 	.word	0x40020400
 8003f50:	40020800 	.word	0x40020800
 8003f54:	40020c00 	.word	0x40020c00
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40021400 	.word	0x40021400
 8003f60:	40021800 	.word	0x40021800
 8003f64:	40021c00 	.word	0x40021c00
 8003f68:	40022000 	.word	0x40022000
 8003f6c:	40022400 	.word	0x40022400
 8003f70:	40013c00 	.word	0x40013c00

08003f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e001      	b.n	8003f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fb4:	787b      	ldrb	r3, [r7, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003fc0:	e003      	b.n	8003fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fc2:	887b      	ldrh	r3, [r7, #2]
 8003fc4:	041a      	lsls	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	619a      	str	r2, [r3, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	4b23      	ldr	r3, [pc, #140]	@ (8004070 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	4a22      	ldr	r2, [pc, #136]	@ (8004070 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fee:	4b20      	ldr	r3, [pc, #128]	@ (8004070 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8004074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8004074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004004:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004006:	f7fe ff8f 	bl	8002f28 <HAL_GetTick>
 800400a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800400c:	e009      	b.n	8004022 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800400e:	f7fe ff8b 	bl	8002f28 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800401c:	d901      	bls.n	8004022 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e022      	b.n	8004068 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004022:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800402a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402e:	d1ee      	bne.n	800400e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004030:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0f      	ldr	r2, [pc, #60]	@ (8004074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800403a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800403c:	f7fe ff74 	bl	8002f28 <HAL_GetTick>
 8004040:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004042:	e009      	b.n	8004058 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004044:	f7fe ff70 	bl	8002f28 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004052:	d901      	bls.n	8004058 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e007      	b.n	8004068 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <HAL_PWREx_EnableOverDrive+0x9c>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004064:	d1ee      	bne.n	8004044 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40023800 	.word	0x40023800
 8004074:	40007000 	.word	0x40007000

08004078 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004080:	2300      	movs	r3, #0
 8004082:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e29b      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8087 	beq.w	80041aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800409c:	4b96      	ldr	r3, [pc, #600]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 030c 	and.w	r3, r3, #12
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d00c      	beq.n	80040c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a8:	4b93      	ldr	r3, [pc, #588]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d112      	bne.n	80040da <HAL_RCC_OscConfig+0x62>
 80040b4:	4b90      	ldr	r3, [pc, #576]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040c0:	d10b      	bne.n	80040da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c2:	4b8d      	ldr	r3, [pc, #564]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d06c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x130>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d168      	bne.n	80041a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e275      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x7a>
 80040e4:	4b84      	ldr	r3, [pc, #528]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a83      	ldr	r2, [pc, #524]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	e02e      	b.n	8004150 <HAL_RCC_OscConfig+0xd8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x9c>
 80040fa:	4b7f      	ldr	r3, [pc, #508]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7e      	ldr	r2, [pc, #504]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b7c      	ldr	r3, [pc, #496]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7b      	ldr	r2, [pc, #492]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 800410c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0xd8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0xc0>
 800411e:	4b76      	ldr	r3, [pc, #472]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a75      	ldr	r2, [pc, #468]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b73      	ldr	r3, [pc, #460]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a72      	ldr	r2, [pc, #456]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0xd8>
 8004138:	4b6f      	ldr	r3, [pc, #444]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a6e      	ldr	r2, [pc, #440]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b6c      	ldr	r3, [pc, #432]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6b      	ldr	r2, [pc, #428]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800414e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe fee6 	bl	8002f28 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004160:	f7fe fee2 	bl	8002f28 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	@ 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e229      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b61      	ldr	r3, [pc, #388]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0xe8>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe fed2 	bl	8002f28 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fe fece 	bl	8002f28 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	@ 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e215      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	4b57      	ldr	r3, [pc, #348]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x110>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d069      	beq.n	800428a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b6:	4b50      	ldr	r3, [pc, #320]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b4d      	ldr	r3, [pc, #308]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d11c      	bne.n	8004208 <HAL_RCC_OscConfig+0x190>
 80041ce:	4b4a      	ldr	r3, [pc, #296]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	4b47      	ldr	r3, [pc, #284]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x17a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1e9      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b41      	ldr	r3, [pc, #260]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	493d      	ldr	r1, [pc, #244]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	e040      	b.n	800428a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a38      	ldr	r2, [pc, #224]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fe fe84 	bl	8002f28 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004224:	f7fe fe80 	bl	8002f28 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1c7      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	4b30      	ldr	r3, [pc, #192]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004242:	4b2d      	ldr	r3, [pc, #180]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4929      	ldr	r1, [pc, #164]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
 8004256:	e018      	b.n	800428a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004258:	4b27      	ldr	r3, [pc, #156]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a26      	ldr	r2, [pc, #152]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fe fe60 	bl	8002f28 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426c:	f7fe fe5c 	bl	8002f28 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1a3      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	4b1e      	ldr	r3, [pc, #120]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d038      	beq.n	8004308 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d019      	beq.n	80042d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429e:	4b16      	ldr	r3, [pc, #88]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a2:	4a15      	ldr	r2, [pc, #84]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fe fe3d 	bl	8002f28 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b2:	f7fe fe39 	bl	8002f28 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e180      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c4:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x23a>
 80042d0:	e01a      	b.n	8004308 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d2:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d6:	4a08      	ldr	r2, [pc, #32]	@ (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042de:	f7fe fe23 	bl	8002f28 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e6:	f7fe fe1f 	bl	8002f28 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d903      	bls.n	80042fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e166      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
 80042f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	4b92      	ldr	r3, [pc, #584]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80042fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ee      	bne.n	80042e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80a4 	beq.w	800445e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4b8c      	ldr	r3, [pc, #560]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	4b89      	ldr	r3, [pc, #548]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	4a88      	ldr	r2, [pc, #544]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	@ 0x40
 800432e:	4b86      	ldr	r3, [pc, #536]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433e:	4b83      	ldr	r3, [pc, #524]	@ (800454c <HAL_RCC_OscConfig+0x4d4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d118      	bne.n	800437c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800434a:	4b80      	ldr	r3, [pc, #512]	@ (800454c <HAL_RCC_OscConfig+0x4d4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7f      	ldr	r2, [pc, #508]	@ (800454c <HAL_RCC_OscConfig+0x4d4>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004356:	f7fe fde7 	bl	8002f28 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435e:	f7fe fde3 	bl	8002f28 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b64      	cmp	r3, #100	@ 0x64
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e12a      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004370:	4b76      	ldr	r3, [pc, #472]	@ (800454c <HAL_RCC_OscConfig+0x4d4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d106      	bne.n	8004392 <HAL_RCC_OscConfig+0x31a>
 8004384:	4b70      	ldr	r3, [pc, #448]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004388:	4a6f      	ldr	r2, [pc, #444]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004390:	e02d      	b.n	80043ee <HAL_RCC_OscConfig+0x376>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x33c>
 800439a:	4b6b      	ldr	r3, [pc, #428]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439e:	4a6a      	ldr	r2, [pc, #424]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a6:	4b68      	ldr	r3, [pc, #416]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	4a67      	ldr	r2, [pc, #412]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b2:	e01c      	b.n	80043ee <HAL_RCC_OscConfig+0x376>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCC_OscConfig+0x35e>
 80043bc:	4b62      	ldr	r3, [pc, #392]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c0:	4a61      	ldr	r2, [pc, #388]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	f043 0304 	orr.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c8:	4b5f      	ldr	r3, [pc, #380]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d4:	e00b      	b.n	80043ee <HAL_RCC_OscConfig+0x376>
 80043d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043da:	4a5b      	ldr	r2, [pc, #364]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e2:	4b59      	ldr	r3, [pc, #356]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e6:	4a58      	ldr	r2, [pc, #352]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d015      	beq.n	8004422 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f6:	f7fe fd97 	bl	8002f28 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fe fd93 	bl	8002f28 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0d8      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	4b4c      	ldr	r3, [pc, #304]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ee      	beq.n	80043fe <HAL_RCC_OscConfig+0x386>
 8004420:	e014      	b.n	800444c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004422:	f7fe fd81 	bl	8002f28 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fe fd7d 	bl	8002f28 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0c2      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004440:	4b41      	ldr	r3, [pc, #260]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ee      	bne.n	800442a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004452:	4b3d      	ldr	r3, [pc, #244]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	4a3c      	ldr	r2, [pc, #240]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800445c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80ae 	beq.w	80045c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004468:	4b37      	ldr	r3, [pc, #220]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b08      	cmp	r3, #8
 8004472:	d06d      	beq.n	8004550 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d14b      	bne.n	8004514 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447c:	4b32      	ldr	r3, [pc, #200]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a31      	ldr	r2, [pc, #196]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fe fd4e 	bl	8002f28 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fe fd4a 	bl	8002f28 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e091      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	4b29      	ldr	r3, [pc, #164]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	3b01      	subs	r3, #1
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d8:	071b      	lsls	r3, r3, #28
 80044da:	491b      	ldr	r1, [pc, #108]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044e0:	4b19      	ldr	r3, [pc, #100]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a18      	ldr	r2, [pc, #96]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fe fd1c 	bl	8002f28 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fe fd18 	bl	8002f28 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e05f      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	4b10      	ldr	r3, [pc, #64]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x47c>
 8004512:	e057      	b.n	80045c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004514:	4b0c      	ldr	r3, [pc, #48]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0b      	ldr	r2, [pc, #44]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800451a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800451e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fe fd02 	bl	8002f28 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004528:	f7fe fcfe 	bl	8002f28 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e045      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453a:	4b03      	ldr	r3, [pc, #12]	@ (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x4b0>
 8004546:	e03d      	b.n	80045c4 <HAL_RCC_OscConfig+0x54c>
 8004548:	40023800 	.word	0x40023800
 800454c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004550:	4b1f      	ldr	r3, [pc, #124]	@ (80045d0 <HAL_RCC_OscConfig+0x558>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d030      	beq.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d129      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004576:	429a      	cmp	r2, r3
 8004578:	d122      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004586:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004588:	4293      	cmp	r3, r2
 800458a:	d119      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	3b01      	subs	r3, #1
 800459a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d10f      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d107      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800

080045d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0d0      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d910      	bls.n	800461c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b67      	ldr	r3, [pc, #412]	@ (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 020f 	bic.w	r2, r3, #15
 8004602:	4965      	ldr	r1, [pc, #404]	@ (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b63      	ldr	r3, [pc, #396]	@ (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0b8      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004634:	4b59      	ldr	r3, [pc, #356]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a58      	ldr	r2, [pc, #352]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 800463a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800463e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800464c:	4b53      	ldr	r3, [pc, #332]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a52      	ldr	r2, [pc, #328]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004652:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004656:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004658:	4b50      	ldr	r3, [pc, #320]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	494d      	ldr	r1, [pc, #308]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d040      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b47      	ldr	r3, [pc, #284]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d115      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e07f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004696:	4b41      	ldr	r3, [pc, #260]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e073      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a6:	4b3d      	ldr	r3, [pc, #244]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e06b      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b6:	4b39      	ldr	r3, [pc, #228]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f023 0203 	bic.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4936      	ldr	r1, [pc, #216]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fe fc2e 	bl	8002f28 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d0:	f7fe fc2a 	bl	8002f28 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e053      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	4b2d      	ldr	r3, [pc, #180]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 020c 	and.w	r2, r3, #12
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1eb      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f8:	4b27      	ldr	r3, [pc, #156]	@ (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d210      	bcs.n	8004728 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b24      	ldr	r3, [pc, #144]	@ (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	4922      	ldr	r1, [pc, #136]	@ (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b20      	ldr	r3, [pc, #128]	@ (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e032      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004734:	4b19      	ldr	r3, [pc, #100]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4916      	ldr	r1, [pc, #88]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004752:	4b12      	ldr	r3, [pc, #72]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	490e      	ldr	r1, [pc, #56]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004766:	f000 f821 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800476a:	4602      	mov	r2, r0
 800476c:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	490a      	ldr	r1, [pc, #40]	@ (80047a0 <HAL_RCC_ClockConfig+0x1cc>)
 8004778:	5ccb      	ldrb	r3, [r1, r3]
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a09      	ldr	r2, [pc, #36]	@ (80047a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004782:	4b09      	ldr	r3, [pc, #36]	@ (80047a8 <HAL_RCC_ClockConfig+0x1d4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fb8a 	bl	8002ea0 <HAL_InitTick>

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023c00 	.word	0x40023c00
 800479c:	40023800 	.word	0x40023800
 80047a0:	0800969c 	.word	0x0800969c
 80047a4:	20000058 	.word	0x20000058
 80047a8:	20000060 	.word	0x20000060

080047ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b0:	b090      	sub	sp, #64	@ 0x40
 80047b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b8:	2300      	movs	r3, #0
 80047ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047bc:	2300      	movs	r3, #0
 80047be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c4:	4b59      	ldr	r3, [pc, #356]	@ (800492c <HAL_RCC_GetSysClockFreq+0x180>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d00d      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x40>
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	f200 80a1 	bhi.w	8004918 <HAL_RCC_GetSysClockFreq+0x16c>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0x34>
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d003      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047de:	e09b      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e0:	4b53      	ldr	r3, [pc, #332]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x184>)
 80047e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047e4:	e09b      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e6:	4b53      	ldr	r3, [pc, #332]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x188>)
 80047e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047ea:	e098      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ec:	4b4f      	ldr	r3, [pc, #316]	@ (800492c <HAL_RCC_GetSysClockFreq+0x180>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047f6:	4b4d      	ldr	r3, [pc, #308]	@ (800492c <HAL_RCC_GetSysClockFreq+0x180>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d028      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004802:	4b4a      	ldr	r3, [pc, #296]	@ (800492c <HAL_RCC_GetSysClockFreq+0x180>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	099b      	lsrs	r3, r3, #6
 8004808:	2200      	movs	r2, #0
 800480a:	623b      	str	r3, [r7, #32]
 800480c:	627a      	str	r2, [r7, #36]	@ 0x24
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004814:	2100      	movs	r1, #0
 8004816:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x188>)
 8004818:	fb03 f201 	mul.w	r2, r3, r1
 800481c:	2300      	movs	r3, #0
 800481e:	fb00 f303 	mul.w	r3, r0, r3
 8004822:	4413      	add	r3, r2
 8004824:	4a43      	ldr	r2, [pc, #268]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x188>)
 8004826:	fba0 1202 	umull	r1, r2, r0, r2
 800482a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800482c:	460a      	mov	r2, r1
 800482e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004832:	4413      	add	r3, r2
 8004834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004838:	2200      	movs	r2, #0
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	61fa      	str	r2, [r7, #28]
 800483e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004842:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004846:	f7fb fd53 	bl	80002f0 <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4613      	mov	r3, r2
 8004850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004852:	e053      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004854:	4b35      	ldr	r3, [pc, #212]	@ (800492c <HAL_RCC_GetSysClockFreq+0x180>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	2200      	movs	r2, #0
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	617a      	str	r2, [r7, #20]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004866:	f04f 0b00 	mov.w	fp, #0
 800486a:	4652      	mov	r2, sl
 800486c:	465b      	mov	r3, fp
 800486e:	f04f 0000 	mov.w	r0, #0
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	0159      	lsls	r1, r3, #5
 8004878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800487c:	0150      	lsls	r0, r2, #5
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	ebb2 080a 	subs.w	r8, r2, sl
 8004886:	eb63 090b 	sbc.w	r9, r3, fp
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004896:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800489a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800489e:	ebb2 0408 	subs.w	r4, r2, r8
 80048a2:	eb63 0509 	sbc.w	r5, r3, r9
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	00eb      	lsls	r3, r5, #3
 80048b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b4:	00e2      	lsls	r2, r4, #3
 80048b6:	4614      	mov	r4, r2
 80048b8:	461d      	mov	r5, r3
 80048ba:	eb14 030a 	adds.w	r3, r4, sl
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	eb45 030b 	adc.w	r3, r5, fp
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048d2:	4629      	mov	r1, r5
 80048d4:	028b      	lsls	r3, r1, #10
 80048d6:	4621      	mov	r1, r4
 80048d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048dc:	4621      	mov	r1, r4
 80048de:	028a      	lsls	r2, r1, #10
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e6:	2200      	movs	r2, #0
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	60fa      	str	r2, [r7, #12]
 80048ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048f0:	f7fb fcfe 	bl	80002f0 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4613      	mov	r3, r2
 80048fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048fc:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_GetSysClockFreq+0x180>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	3301      	adds	r3, #1
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800490c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004916:	e002      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x184>)
 800491a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800491c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800491e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004920:	4618      	mov	r0, r3
 8004922:	3740      	adds	r7, #64	@ 0x40
 8004924:	46bd      	mov	sp, r7
 8004926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	00f42400 	.word	0x00f42400
 8004934:	017d7840 	.word	0x017d7840

08004938 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800493c:	4b03      	ldr	r3, [pc, #12]	@ (800494c <HAL_RCC_GetHCLKFreq+0x14>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000058 	.word	0x20000058

08004950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004954:	f7ff fff0 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0a9b      	lsrs	r3, r3, #10
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4903      	ldr	r1, [pc, #12]	@ (8004974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	080096ac 	.word	0x080096ac

08004978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800497c:	f7ff ffdc 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0b5b      	lsrs	r3, r3, #13
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	@ (800499c <HAL_RCC_GetPCLK2Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	080096ac 	.word	0x080096ac

080049a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049c8:	4b69      	ldr	r3, [pc, #420]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a68      	ldr	r2, [pc, #416]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049d2:	6093      	str	r3, [r2, #8]
 80049d4:	4b66      	ldr	r3, [pc, #408]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049dc:	4964      	ldr	r1, [pc, #400]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d017      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a08:	4959      	ldr	r1, [pc, #356]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a18:	d101      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d017      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a36:	4b4e      	ldr	r3, [pc, #312]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a44:	494a      	ldr	r1, [pc, #296]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a54:	d101      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a72:	2301      	movs	r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 808b 	beq.w	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a84:	4b3a      	ldr	r3, [pc, #232]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	4a39      	ldr	r2, [pc, #228]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a90:	4b37      	ldr	r3, [pc, #220]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a9c:	4b35      	ldr	r3, [pc, #212]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a34      	ldr	r2, [pc, #208]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa8:	f7fe fa3e 	bl	8002f28 <HAL_GetTick>
 8004aac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fe fa3a 	bl	8002f28 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	@ 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e38f      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ace:	4b28      	ldr	r3, [pc, #160]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d035      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d02e      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aec:	4b20      	ldr	r3, [pc, #128]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004af4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004af6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	4a1d      	ldr	r2, [pc, #116]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b00:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b02:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b06:	4a1a      	ldr	r2, [pc, #104]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b0c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b0e:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b14:	4b16      	ldr	r3, [pc, #88]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d114      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fe fa02 	bl	8002f28 <HAL_GetTick>
 8004b24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fe f9fe 	bl	8002f28 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e351      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ee      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b56:	d111      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b64:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b66:	400b      	ands	r3, r1
 8004b68:	4901      	ldr	r1, [pc, #4]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
 8004b6e:	e00b      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40007000 	.word	0x40007000
 8004b78:	0ffffcff 	.word	0x0ffffcff
 8004b7c:	4bac      	ldr	r3, [pc, #688]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4aab      	ldr	r2, [pc, #684]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b82:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b86:	6093      	str	r3, [r2, #8]
 8004b88:	4ba9      	ldr	r3, [pc, #676]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b94:	49a6      	ldr	r1, [pc, #664]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ba6:	4ba2      	ldr	r3, [pc, #648]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bac:	4aa0      	ldr	r2, [pc, #640]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004bb6:	4b9e      	ldr	r3, [pc, #632]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc0:	499b      	ldr	r1, [pc, #620]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd4:	4b96      	ldr	r3, [pc, #600]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bda:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004be2:	4993      	ldr	r1, [pc, #588]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bf6:	4b8e      	ldr	r3, [pc, #568]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c04:	498a      	ldr	r1, [pc, #552]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c18:	4b85      	ldr	r3, [pc, #532]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c26:	4982      	ldr	r1, [pc, #520]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c3a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c40:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c48:	4979      	ldr	r1, [pc, #484]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c5c:	4b74      	ldr	r3, [pc, #464]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	f023 0203 	bic.w	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6a:	4971      	ldr	r1, [pc, #452]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c7e:	4b6c      	ldr	r3, [pc, #432]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c84:	f023 020c 	bic.w	r2, r3, #12
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c8c:	4968      	ldr	r1, [pc, #416]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ca0:	4b63      	ldr	r3, [pc, #396]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cae:	4960      	ldr	r1, [pc, #384]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd0:	4957      	ldr	r1, [pc, #348]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ce4:	4b52      	ldr	r3, [pc, #328]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf2:	494f      	ldr	r1, [pc, #316]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d06:	4b4a      	ldr	r3, [pc, #296]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d14:	4946      	ldr	r1, [pc, #280]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d28:	4b41      	ldr	r3, [pc, #260]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d36:	493e      	ldr	r1, [pc, #248]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d4a:	4b39      	ldr	r3, [pc, #228]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d58:	4935      	ldr	r1, [pc, #212]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d6c:	4b30      	ldr	r3, [pc, #192]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d72:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d7a:	492d      	ldr	r1, [pc, #180]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d011      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d8e:	4b28      	ldr	r3, [pc, #160]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d94:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9c:	4924      	ldr	r1, [pc, #144]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dac:	d101      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dce:	4b18      	ldr	r3, [pc, #96]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ddc:	4914      	ldr	r1, [pc, #80]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00b      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004df0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e00:	490b      	ldr	r1, [pc, #44]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00f      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e24:	4902      	ldr	r1, [pc, #8]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e2c:	e002      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e40:	4b8a      	ldr	r3, [pc, #552]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e50:	4986      	ldr	r1, [pc, #536]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e64:	4b81      	ldr	r3, [pc, #516]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e6a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e74:	497d      	ldr	r1, [pc, #500]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d006      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80d6 	beq.w	800503c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e90:	4b76      	ldr	r3, [pc, #472]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a75      	ldr	r2, [pc, #468]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9c:	f7fe f844 	bl	8002f28 <HAL_GetTick>
 8004ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ea4:	f7fe f840 	bl	8002f28 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	@ 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e195      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d021      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11d      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ed6:	4b65      	ldr	r3, [pc, #404]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ee4:	4b61      	ldr	r3, [pc, #388]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eea:	0e1b      	lsrs	r3, r3, #24
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	019a      	lsls	r2, r3, #6
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	071b      	lsls	r3, r3, #28
 8004f0a:	4958      	ldr	r1, [pc, #352]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d004      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d02e      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f3c:	d129      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f4c:	4b47      	ldr	r3, [pc, #284]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f52:	0f1b      	lsrs	r3, r3, #28
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	019a      	lsls	r2, r3, #6
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	071b      	lsls	r3, r3, #28
 8004f72:	493e      	ldr	r1, [pc, #248]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f80:	f023 021f 	bic.w	r2, r3, #31
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	4938      	ldr	r1, [pc, #224]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01d      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f9e:	4b33      	ldr	r3, [pc, #204]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa4:	0e1b      	lsrs	r3, r3, #24
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fac:	4b2f      	ldr	r3, [pc, #188]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fb2:	0f1b      	lsrs	r3, r3, #28
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	019a      	lsls	r2, r3, #6
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	061b      	lsls	r3, r3, #24
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	071b      	lsls	r3, r3, #28
 8004fd2:	4926      	ldr	r1, [pc, #152]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d011      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	019a      	lsls	r2, r3, #6
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	061b      	lsls	r3, r3, #24
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	071b      	lsls	r3, r3, #28
 8005002:	491a      	ldr	r1, [pc, #104]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800500a:	4b18      	ldr	r3, [pc, #96]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a17      	ldr	r2, [pc, #92]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005010:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005016:	f7fd ff87 	bl	8002f28 <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800501e:	f7fd ff83 	bl	8002f28 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b64      	cmp	r3, #100	@ 0x64
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e0d8      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005030:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b01      	cmp	r3, #1
 8005040:	f040 80ce 	bne.w	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005044:	4b09      	ldr	r3, [pc, #36]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a08      	ldr	r2, [pc, #32]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800504e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005050:	f7fd ff6a 	bl	8002f28 <HAL_GetTick>
 8005054:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005056:	e00b      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005058:	f7fd ff66 	bl	8002f28 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	@ 0x64
 8005064:	d904      	bls.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0bb      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005070:	4b5e      	ldr	r3, [pc, #376]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800507c:	d0ec      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800509a:	2b00      	cmp	r3, #0
 800509c:	d02e      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d12a      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050a6:	4b51      	ldr	r3, [pc, #324]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050b4:	4b4d      	ldr	r3, [pc, #308]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ba:	0f1b      	lsrs	r3, r3, #28
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	019a      	lsls	r2, r3, #6
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	041b      	lsls	r3, r3, #16
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	431a      	orrs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	071b      	lsls	r3, r3, #28
 80050da:	4944      	ldr	r1, [pc, #272]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050e2:	4b42      	ldr	r3, [pc, #264]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	3b01      	subs	r3, #1
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	493d      	ldr	r1, [pc, #244]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d022      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800510c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005110:	d11d      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005112:	4b36      	ldr	r3, [pc, #216]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005118:	0e1b      	lsrs	r3, r3, #24
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005120:	4b32      	ldr	r3, [pc, #200]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005126:	0f1b      	lsrs	r3, r3, #28
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	019a      	lsls	r2, r3, #6
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	041b      	lsls	r3, r3, #16
 800513a:	431a      	orrs	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	431a      	orrs	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	071b      	lsls	r3, r3, #28
 8005146:	4929      	ldr	r1, [pc, #164]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d028      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800515a:	4b24      	ldr	r3, [pc, #144]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005160:	0e1b      	lsrs	r3, r3, #24
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005168:	4b20      	ldr	r3, [pc, #128]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516e:	0c1b      	lsrs	r3, r3, #16
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	019a      	lsls	r2, r3, #6
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	431a      	orrs	r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	071b      	lsls	r3, r3, #28
 800518e:	4917      	ldr	r1, [pc, #92]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005196:	4b15      	ldr	r3, [pc, #84]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800519c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	4911      	ldr	r1, [pc, #68]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051ac:	4b0f      	ldr	r3, [pc, #60]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0e      	ldr	r2, [pc, #56]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b8:	f7fd feb6 	bl	8002f28 <HAL_GetTick>
 80051bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051c0:	f7fd feb2 	bl	8002f28 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	@ 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e007      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051d2:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051de:	d1ef      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800

080051f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e09d      	b.n	800533e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	d108      	bne.n	800521c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005212:	d009      	beq.n	8005228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	61da      	str	r2, [r3, #28]
 800521a:	e005      	b.n	8005228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fcfc 	bl	8001c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800525e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005268:	d902      	bls.n	8005270 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e002      	b.n	8005276 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005274:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800527e:	d007      	beq.n	8005290 <HAL_SPI_Init+0xa0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005288:	d002      	beq.n	8005290 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d2:	ea42 0103 	orr.w	r1, r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	f003 0204 	and.w	r2, r3, #4
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800530c:	ea42 0103 	orr.w	r1, r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800532c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b088      	sub	sp, #32
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_SPI_Transmit+0x22>
 8005364:	2302      	movs	r3, #2
 8005366:	e15f      	b.n	8005628 <HAL_SPI_Transmit+0x2e2>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005370:	f7fd fdda 	bl	8002f28 <HAL_GetTick>
 8005374:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d002      	beq.n	800538c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005386:	2302      	movs	r3, #2
 8005388:	77fb      	strb	r3, [r7, #31]
    goto error;
 800538a:	e148      	b.n	800561e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Transmit+0x52>
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800539c:	e13f      	b.n	800561e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2203      	movs	r2, #3
 80053a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	88fa      	ldrh	r2, [r7, #6]
 80053b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e8:	d10f      	bne.n	800540a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005408:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005414:	2b40      	cmp	r3, #64	@ 0x40
 8005416:	d007      	beq.n	8005428 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005430:	d94f      	bls.n	80054d2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_SPI_Transmit+0xfa>
 800543a:	8afb      	ldrh	r3, [r7, #22]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d142      	bne.n	80054c6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005444:	881a      	ldrh	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005450:	1c9a      	adds	r2, r3, #2
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005464:	e02f      	b.n	80054c6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b02      	cmp	r3, #2
 8005472:	d112      	bne.n	800549a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005478:	881a      	ldrh	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	1c9a      	adds	r2, r3, #2
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005498:	e015      	b.n	80054c6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800549a:	f7fd fd45 	bl	8002f28 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d803      	bhi.n	80054b2 <HAL_SPI_Transmit+0x16c>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d102      	bne.n	80054b8 <HAL_SPI_Transmit+0x172>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80054c4:	e0ab      	b.n	800561e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ca      	bne.n	8005466 <HAL_SPI_Transmit+0x120>
 80054d0:	e080      	b.n	80055d4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_SPI_Transmit+0x19a>
 80054da:	8afb      	ldrh	r3, [r7, #22]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d174      	bne.n	80055ca <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d912      	bls.n	8005510 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ee:	881a      	ldrh	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fa:	1c9a      	adds	r2, r3, #2
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b02      	subs	r3, #2
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800550e:	e05c      	b.n	80055ca <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	7812      	ldrb	r2, [r2, #0]
 800551c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005536:	e048      	b.n	80055ca <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d12b      	bne.n	800559e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	d912      	bls.n	8005576 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	881a      	ldrh	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005560:	1c9a      	adds	r2, r3, #2
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b02      	subs	r3, #2
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005574:	e029      	b.n	80055ca <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	7812      	ldrb	r2, [r2, #0]
 8005582:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800559c:	e015      	b.n	80055ca <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800559e:	f7fd fcc3 	bl	8002f28 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d803      	bhi.n	80055b6 <HAL_SPI_Transmit+0x270>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d102      	bne.n	80055bc <HAL_SPI_Transmit+0x276>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80055c8:	e029      	b.n	800561e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1b1      	bne.n	8005538 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f947 	bl	800586c <SPI_EndRxTxTransaction>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055f2:	2300      	movs	r3, #0
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e003      	b.n	800561e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005626:	7ffb      	ldrb	r3, [r7, #31]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005640:	f7fd fc72 	bl	8002f28 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	4413      	add	r3, r2
 800564e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005650:	f7fd fc6a 	bl	8002f28 <HAL_GetTick>
 8005654:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005656:	4b39      	ldr	r3, [pc, #228]	@ (800573c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	015b      	lsls	r3, r3, #5
 800565c:	0d1b      	lsrs	r3, r3, #20
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	fb02 f303 	mul.w	r3, r2, r3
 8005664:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005666:	e054      	b.n	8005712 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d050      	beq.n	8005712 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005670:	f7fd fc5a 	bl	8002f28 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	429a      	cmp	r2, r3
 800567e:	d902      	bls.n	8005686 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d13d      	bne.n	8005702 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800569e:	d111      	bne.n	80056c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a8:	d004      	beq.n	80056b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b2:	d107      	bne.n	80056c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056cc:	d10f      	bne.n	80056ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e017      	b.n	8005732 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	3b01      	subs	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	429a      	cmp	r2, r3
 800572e:	d19b      	bne.n	8005668 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000058 	.word	0x20000058

08005740 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	@ 0x28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005752:	f7fd fbe9 	bl	8002f28 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	4413      	add	r3, r2
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005762:	f7fd fbe1 	bl	8002f28 <HAL_GetTick>
 8005766:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005770:	4b3d      	ldr	r3, [pc, #244]	@ (8005868 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	00da      	lsls	r2, r3, #3
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	0d1b      	lsrs	r3, r3, #20
 8005780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005788:	e060      	b.n	800584c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005790:	d107      	bne.n	80057a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d050      	beq.n	800584c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057aa:	f7fd fbbd 	bl	8002f28 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d902      	bls.n	80057c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d13d      	bne.n	800583c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057d8:	d111      	bne.n	80057fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e2:	d004      	beq.n	80057ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ec:	d107      	bne.n	80057fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005806:	d10f      	bne.n	8005828 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005826:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e010      	b.n	800585e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	3b01      	subs	r3, #1
 800584a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4013      	ands	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	d196      	bne.n	800578a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3728      	adds	r7, #40	@ 0x28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000058 	.word	0x20000058

0800586c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ff5b 	bl	8005740 <SPI_WaitFifoStateUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005894:	f043 0220 	orr.w	r2, r3, #32
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e046      	b.n	800592e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058a0:	4b25      	ldr	r3, [pc, #148]	@ (8005938 <SPI_EndRxTxTransaction+0xcc>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a25      	ldr	r2, [pc, #148]	@ (800593c <SPI_EndRxTxTransaction+0xd0>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	0d5b      	lsrs	r3, r3, #21
 80058ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058be:	d112      	bne.n	80058e6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2200      	movs	r2, #0
 80058c8:	2180      	movs	r1, #128	@ 0x80
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff feb0 	bl	8005630 <SPI_WaitFlagStateUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d016      	beq.n	8005904 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058da:	f043 0220 	orr.w	r2, r3, #32
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e023      	b.n	800592e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fc:	2b80      	cmp	r3, #128	@ 0x80
 80058fe:	d0f2      	beq.n	80058e6 <SPI_EndRxTxTransaction+0x7a>
 8005900:	e000      	b.n	8005904 <SPI_EndRxTxTransaction+0x98>
        break;
 8005902:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2200      	movs	r2, #0
 800590c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff ff15 	bl	8005740 <SPI_WaitFifoStateUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e000      	b.n	800592e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000058 	.word	0x20000058
 800593c:	165e9f81 	.word	0x165e9f81

08005940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e049      	b.n	80059e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc f9ae 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f000 fa74 	bl	8005e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e049      	b.n	8005a94 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f841 	bl	8005a9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	f000 fa1d 	bl	8005e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e0ff      	b.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b14      	cmp	r3, #20
 8005ada:	f200 80f0 	bhi.w	8005cbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ade:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005cbf 	.word	0x08005cbf
 8005aec:	08005cbf 	.word	0x08005cbf
 8005af0:	08005cbf 	.word	0x08005cbf
 8005af4:	08005b79 	.word	0x08005b79
 8005af8:	08005cbf 	.word	0x08005cbf
 8005afc:	08005cbf 	.word	0x08005cbf
 8005b00:	08005cbf 	.word	0x08005cbf
 8005b04:	08005bbb 	.word	0x08005bbb
 8005b08:	08005cbf 	.word	0x08005cbf
 8005b0c:	08005cbf 	.word	0x08005cbf
 8005b10:	08005cbf 	.word	0x08005cbf
 8005b14:	08005bfb 	.word	0x08005bfb
 8005b18:	08005cbf 	.word	0x08005cbf
 8005b1c:	08005cbf 	.word	0x08005cbf
 8005b20:	08005cbf 	.word	0x08005cbf
 8005b24:	08005c3d 	.word	0x08005c3d
 8005b28:	08005cbf 	.word	0x08005cbf
 8005b2c:	08005cbf 	.word	0x08005cbf
 8005b30:	08005cbf 	.word	0x08005cbf
 8005b34:	08005c7d 	.word	0x08005c7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fa40 	bl	8005fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0204 	bic.w	r2, r2, #4
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	619a      	str	r2, [r3, #24]
      break;
 8005b76:	e0a5      	b.n	8005cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fa92 	bl	80060a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	619a      	str	r2, [r3, #24]
      break;
 8005bb8:	e084      	b.n	8005cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fae9 	bl	8006198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0208 	orr.w	r2, r2, #8
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0204 	bic.w	r2, r2, #4
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	61da      	str	r2, [r3, #28]
      break;
 8005bf8:	e064      	b.n	8005cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fb3f 	bl	8006284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69d9      	ldr	r1, [r3, #28]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	021a      	lsls	r2, r3, #8
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	61da      	str	r2, [r3, #28]
      break;
 8005c3a:	e043      	b.n	8005cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fb76 	bl	8006334 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0208 	orr.w	r2, r2, #8
 8005c56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0204 	bic.w	r2, r2, #4
 8005c66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c7a:	e023      	b.n	8005cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fba8 	bl	80063d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cbc:	e002      	b.n	8005cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop

08005cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_TIM_ConfigClockSource+0x1c>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e0b4      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x186>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	4b56      	ldr	r3, [pc, #344]	@ (8005e68 <HAL_TIM_ConfigClockSource+0x190>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d2c:	d03e      	beq.n	8005dac <HAL_TIM_ConfigClockSource+0xd4>
 8005d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d32:	f200 8087 	bhi.w	8005e44 <HAL_TIM_ConfigClockSource+0x16c>
 8005d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d3a:	f000 8086 	beq.w	8005e4a <HAL_TIM_ConfigClockSource+0x172>
 8005d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d42:	d87f      	bhi.n	8005e44 <HAL_TIM_ConfigClockSource+0x16c>
 8005d44:	2b70      	cmp	r3, #112	@ 0x70
 8005d46:	d01a      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0xa6>
 8005d48:	2b70      	cmp	r3, #112	@ 0x70
 8005d4a:	d87b      	bhi.n	8005e44 <HAL_TIM_ConfigClockSource+0x16c>
 8005d4c:	2b60      	cmp	r3, #96	@ 0x60
 8005d4e:	d050      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0x11a>
 8005d50:	2b60      	cmp	r3, #96	@ 0x60
 8005d52:	d877      	bhi.n	8005e44 <HAL_TIM_ConfigClockSource+0x16c>
 8005d54:	2b50      	cmp	r3, #80	@ 0x50
 8005d56:	d03c      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0xfa>
 8005d58:	2b50      	cmp	r3, #80	@ 0x50
 8005d5a:	d873      	bhi.n	8005e44 <HAL_TIM_ConfigClockSource+0x16c>
 8005d5c:	2b40      	cmp	r3, #64	@ 0x40
 8005d5e:	d058      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x13a>
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d86f      	bhi.n	8005e44 <HAL_TIM_ConfigClockSource+0x16c>
 8005d64:	2b30      	cmp	r3, #48	@ 0x30
 8005d66:	d064      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0x15a>
 8005d68:	2b30      	cmp	r3, #48	@ 0x30
 8005d6a:	d86b      	bhi.n	8005e44 <HAL_TIM_ConfigClockSource+0x16c>
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d060      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0x15a>
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d867      	bhi.n	8005e44 <HAL_TIM_ConfigClockSource+0x16c>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d05c      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0x15a>
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d05a      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0x15a>
 8005d7c:	e062      	b.n	8005e44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d8e:	f000 fbf1 	bl	8006574 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005da0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	609a      	str	r2, [r3, #8]
      break;
 8005daa:	e04f      	b.n	8005e4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dbc:	f000 fbda 	bl	8006574 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dce:	609a      	str	r2, [r3, #8]
      break;
 8005dd0:	e03c      	b.n	8005e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dde:	461a      	mov	r2, r3
 8005de0:	f000 fb4e 	bl	8006480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2150      	movs	r1, #80	@ 0x50
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fba7 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 8005df0:	e02c      	b.n	8005e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f000 fb6d 	bl	80064de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2160      	movs	r1, #96	@ 0x60
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fb97 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 8005e10:	e01c      	b.n	8005e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f000 fb2e 	bl	8006480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2140      	movs	r1, #64	@ 0x40
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fb87 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 8005e30:	e00c      	b.n	8005e4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f000 fb7e 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 8005e42:	e003      	b.n	8005e4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
      break;
 8005e48:	e000      	b.n	8005e4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	fffeff88 	.word	0xfffeff88

08005e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a46      	ldr	r2, [pc, #280]	@ (8005f98 <TIM_Base_SetConfig+0x12c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e8a:	d00f      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a43      	ldr	r2, [pc, #268]	@ (8005f9c <TIM_Base_SetConfig+0x130>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00b      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a42      	ldr	r2, [pc, #264]	@ (8005fa0 <TIM_Base_SetConfig+0x134>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d007      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a41      	ldr	r2, [pc, #260]	@ (8005fa4 <TIM_Base_SetConfig+0x138>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a40      	ldr	r2, [pc, #256]	@ (8005fa8 <TIM_Base_SetConfig+0x13c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d108      	bne.n	8005ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a35      	ldr	r2, [pc, #212]	@ (8005f98 <TIM_Base_SetConfig+0x12c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d02b      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ecc:	d027      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a32      	ldr	r2, [pc, #200]	@ (8005f9c <TIM_Base_SetConfig+0x130>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d023      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a31      	ldr	r2, [pc, #196]	@ (8005fa0 <TIM_Base_SetConfig+0x134>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01f      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a30      	ldr	r2, [pc, #192]	@ (8005fa4 <TIM_Base_SetConfig+0x138>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01b      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa8 <TIM_Base_SetConfig+0x13c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d017      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8005fac <TIM_Base_SetConfig+0x140>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb0 <TIM_Base_SetConfig+0x144>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00f      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb4 <TIM_Base_SetConfig+0x148>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00b      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2b      	ldr	r2, [pc, #172]	@ (8005fb8 <TIM_Base_SetConfig+0x14c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2a      	ldr	r2, [pc, #168]	@ (8005fbc <TIM_Base_SetConfig+0x150>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a29      	ldr	r2, [pc, #164]	@ (8005fc0 <TIM_Base_SetConfig+0x154>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d108      	bne.n	8005f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a10      	ldr	r2, [pc, #64]	@ (8005f98 <TIM_Base_SetConfig+0x12c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_Base_SetConfig+0xf8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a12      	ldr	r2, [pc, #72]	@ (8005fa8 <TIM_Base_SetConfig+0x13c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d103      	bne.n	8005f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d105      	bne.n	8005f8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]
  }
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40010400 	.word	0x40010400
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40014400 	.word	0x40014400
 8005fb4:	40014800 	.word	0x40014800
 8005fb8:	40001800 	.word	0x40001800
 8005fbc:	40001c00 	.word	0x40001c00
 8005fc0:	40002000 	.word	0x40002000

08005fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f023 0201 	bic.w	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4b2b      	ldr	r3, [pc, #172]	@ (800609c <TIM_OC1_SetConfig+0xd8>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 0302 	bic.w	r3, r3, #2
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a21      	ldr	r2, [pc, #132]	@ (80060a0 <TIM_OC1_SetConfig+0xdc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_OC1_SetConfig+0x64>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a20      	ldr	r2, [pc, #128]	@ (80060a4 <TIM_OC1_SetConfig+0xe0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d10c      	bne.n	8006042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0308 	bic.w	r3, r3, #8
 800602e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a16      	ldr	r2, [pc, #88]	@ (80060a0 <TIM_OC1_SetConfig+0xdc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_OC1_SetConfig+0x8e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <TIM_OC1_SetConfig+0xe0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d111      	bne.n	8006076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	621a      	str	r2, [r3, #32]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	fffeff8f 	.word	0xfffeff8f
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40010400 	.word	0x40010400

080060a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	f023 0210 	bic.w	r2, r3, #16
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4b2e      	ldr	r3, [pc, #184]	@ (800618c <TIM_OC2_SetConfig+0xe4>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 0320 	bic.w	r3, r3, #32
 80060f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a23      	ldr	r2, [pc, #140]	@ (8006190 <TIM_OC2_SetConfig+0xe8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC2_SetConfig+0x68>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a22      	ldr	r2, [pc, #136]	@ (8006194 <TIM_OC2_SetConfig+0xec>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d10d      	bne.n	800612c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800612a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a18      	ldr	r2, [pc, #96]	@ (8006190 <TIM_OC2_SetConfig+0xe8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_OC2_SetConfig+0x94>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a17      	ldr	r2, [pc, #92]	@ (8006194 <TIM_OC2_SetConfig+0xec>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d113      	bne.n	8006164 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800614a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	feff8fff 	.word	0xfeff8fff
 8006190:	40010000 	.word	0x40010000
 8006194:	40010400 	.word	0x40010400

08006198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006278 <TIM_OC3_SetConfig+0xe0>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a22      	ldr	r2, [pc, #136]	@ (800627c <TIM_OC3_SetConfig+0xe4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_OC3_SetConfig+0x66>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a21      	ldr	r2, [pc, #132]	@ (8006280 <TIM_OC3_SetConfig+0xe8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d10d      	bne.n	800621a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a17      	ldr	r2, [pc, #92]	@ (800627c <TIM_OC3_SetConfig+0xe4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_OC3_SetConfig+0x92>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a16      	ldr	r2, [pc, #88]	@ (8006280 <TIM_OC3_SetConfig+0xe8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d113      	bne.n	8006252 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	621a      	str	r2, [r3, #32]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	fffeff8f 	.word	0xfffeff8f
 800627c:	40010000 	.word	0x40010000
 8006280:	40010400 	.word	0x40010400

08006284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006328 <TIM_OC4_SetConfig+0xa4>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	031b      	lsls	r3, r3, #12
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a13      	ldr	r2, [pc, #76]	@ (800632c <TIM_OC4_SetConfig+0xa8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d003      	beq.n	80062ec <TIM_OC4_SetConfig+0x68>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a12      	ldr	r2, [pc, #72]	@ (8006330 <TIM_OC4_SetConfig+0xac>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d109      	bne.n	8006300 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	019b      	lsls	r3, r3, #6
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	feff8fff 	.word	0xfeff8fff
 800632c:	40010000 	.word	0x40010000
 8006330:	40010400 	.word	0x40010400

08006334 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4b1b      	ldr	r3, [pc, #108]	@ (80063cc <TIM_OC5_SetConfig+0x98>)
 8006360:	4013      	ands	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006374:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a12      	ldr	r2, [pc, #72]	@ (80063d0 <TIM_OC5_SetConfig+0x9c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_OC5_SetConfig+0x5e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a11      	ldr	r2, [pc, #68]	@ (80063d4 <TIM_OC5_SetConfig+0xa0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d109      	bne.n	80063a6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006398:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	621a      	str	r2, [r3, #32]
}
 80063c0:	bf00      	nop
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	fffeff8f 	.word	0xfffeff8f
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40010400 	.word	0x40010400

080063d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4b1c      	ldr	r3, [pc, #112]	@ (8006474 <TIM_OC6_SetConfig+0x9c>)
 8006404:	4013      	ands	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800641a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	051b      	lsls	r3, r3, #20
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a13      	ldr	r2, [pc, #76]	@ (8006478 <TIM_OC6_SetConfig+0xa0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC6_SetConfig+0x60>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a12      	ldr	r2, [pc, #72]	@ (800647c <TIM_OC6_SetConfig+0xa4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d109      	bne.n	800644c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800643e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	029b      	lsls	r3, r3, #10
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	feff8fff 	.word	0xfeff8fff
 8006478:	40010000 	.word	0x40010000
 800647c:	40010400 	.word	0x40010400

08006480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f023 0201 	bic.w	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f023 030a 	bic.w	r3, r3, #10
 80064bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064de:	b480      	push	{r7}
 80064e0:	b087      	sub	sp, #28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f023 0210 	bic.w	r2, r3, #16
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	031b      	lsls	r3, r3, #12
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800651a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	f043 0307 	orr.w	r3, r3, #7
 8006560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	609a      	str	r2, [r3, #8]
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800658e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	021a      	lsls	r2, r3, #8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	431a      	orrs	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4313      	orrs	r3, r2
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	609a      	str	r2, [r3, #8]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e06d      	b.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a30      	ldr	r2, [pc, #192]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a2f      	ldr	r2, [pc, #188]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d108      	bne.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006606:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006618:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a20      	ldr	r2, [pc, #128]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d022      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663e:	d01d      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1d      	ldr	r2, [pc, #116]	@ (80066bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d018      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	@ (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1a      	ldr	r2, [pc, #104]	@ (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00e      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a15      	ldr	r2, [pc, #84]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d009      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a16      	ldr	r2, [pc, #88]	@ (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a15      	ldr	r2, [pc, #84]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d10c      	bne.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006682:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	4313      	orrs	r3, r2
 800668c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40010400 	.word	0x40010400
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40001800 	.word	0x40001800

080066d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e040      	b.n	8006764 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fb fb50 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2224      	movs	r2, #36	@ 0x24
 80066fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0201 	bic.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fe6c 	bl	80073f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fc05 	bl	8006f2c <UART_SetConfig>
 8006722:	4603      	mov	r3, r0
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e01b      	b.n	8006764 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800673a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800674a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 feeb 	bl	8007538 <UART_CheckIdleState>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	@ 0x28
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006780:	2b20      	cmp	r3, #32
 8006782:	d177      	bne.n	8006874 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <HAL_UART_Transmit+0x24>
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e070      	b.n	8006876 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2221      	movs	r2, #33	@ 0x21
 80067a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067a2:	f7fc fbc1 	bl	8002f28 <HAL_GetTick>
 80067a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	88fa      	ldrh	r2, [r7, #6]
 80067ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c0:	d108      	bne.n	80067d4 <HAL_UART_Transmit+0x68>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d104      	bne.n	80067d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	e003      	b.n	80067dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067dc:	e02f      	b.n	800683e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2200      	movs	r2, #0
 80067e6:	2180      	movs	r1, #128	@ 0x80
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 ff4d 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d004      	beq.n	80067fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e03b      	b.n	8006876 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006812:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	3302      	adds	r3, #2
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	e007      	b.n	800682c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	781a      	ldrb	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	3301      	adds	r3, #1
 800682a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1c9      	bne.n	80067de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2200      	movs	r2, #0
 8006852:	2140      	movs	r1, #64	@ 0x40
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 ff17 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e005      	b.n	8006876 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	e000      	b.n	8006876 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006874:	2302      	movs	r3, #2
  }
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b08a      	sub	sp, #40	@ 0x28
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	4613      	mov	r3, r2
 800688a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006892:	2b20      	cmp	r3, #32
 8006894:	d132      	bne.n	80068fc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_UART_Receive_IT+0x24>
 800689c:	88fb      	ldrh	r3, [r7, #6]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e02b      	b.n	80068fe <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d018      	beq.n	80068ec <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	613b      	str	r3, [r7, #16]
   return(result);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	69f9      	ldr	r1, [r7, #28]
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068ec:	88fb      	ldrh	r3, [r7, #6]
 80068ee:	461a      	mov	r2, r3
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 ff36 	bl	8007764 <UART_Start_Receive_IT>
 80068f8:	4603      	mov	r3, r0
 80068fa:	e000      	b.n	80068fe <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80068fc:	2302      	movs	r3, #2
  }
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3728      	adds	r7, #40	@ 0x28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b0ba      	sub	sp, #232	@ 0xe8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800692e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006932:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006936:	4013      	ands	r3, r2
 8006938:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800693c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d115      	bne.n	8006970 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00f      	beq.n	8006970 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d009      	beq.n	8006970 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 82ac 	beq.w	8006ebe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
      }
      return;
 800696e:	e2a6      	b.n	8006ebe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 8117 	beq.w	8006ba8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800697a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006986:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800698a:	4b85      	ldr	r3, [pc, #532]	@ (8006ba0 <HAL_UART_IRQHandler+0x298>)
 800698c:	4013      	ands	r3, r2
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 810a 	beq.w	8006ba8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d011      	beq.n	80069c4 <HAL_UART_IRQHandler+0xbc>
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2201      	movs	r2, #1
 80069b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ba:	f043 0201 	orr.w	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d011      	beq.n	80069f4 <HAL_UART_IRQHandler+0xec>
 80069d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2202      	movs	r2, #2
 80069e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ea:	f043 0204 	orr.w	r2, r3, #4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d011      	beq.n	8006a24 <HAL_UART_IRQHandler+0x11c>
 8006a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2204      	movs	r2, #4
 8006a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a1a:	f043 0202 	orr.w	r2, r3, #2
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d017      	beq.n	8006a60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a56:	f043 0208 	orr.w	r2, r3, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d012      	beq.n	8006a92 <HAL_UART_IRQHandler+0x18a>
 8006a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00c      	beq.n	8006a92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a88:	f043 0220 	orr.w	r2, r3, #32
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 8212 	beq.w	8006ec2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00d      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d007      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006acc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ada:	2b40      	cmp	r3, #64	@ 0x40
 8006adc:	d005      	beq.n	8006aea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ae2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d04f      	beq.n	8006b8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ff00 	bl	80078f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d141      	bne.n	8006b82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1d9      	bne.n	8006afe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d013      	beq.n	8006b7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b56:	4a13      	ldr	r2, [pc, #76]	@ (8006ba4 <HAL_UART_IRQHandler+0x29c>)
 8006b58:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fd f83a 	bl	8003bd8 <HAL_DMA_Abort_IT>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d017      	beq.n	8006b9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	e00f      	b.n	8006b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f9b6 	bl	8006eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b80:	e00b      	b.n	8006b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f9b2 	bl	8006eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	e007      	b.n	8006b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9ae 	bl	8006eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006b98:	e193      	b.n	8006ec2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9a:	bf00      	nop
    return;
 8006b9c:	e191      	b.n	8006ec2 <HAL_UART_IRQHandler+0x5ba>
 8006b9e:	bf00      	nop
 8006ba0:	04000120 	.word	0x04000120
 8006ba4:	080079b9 	.word	0x080079b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	f040 814c 	bne.w	8006e4a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb6:	f003 0310 	and.w	r3, r3, #16
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 8145 	beq.w	8006e4a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 813e 	beq.w	8006e4a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2210      	movs	r2, #16
 8006bd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be0:	2b40      	cmp	r3, #64	@ 0x40
 8006be2:	f040 80b6 	bne.w	8006d52 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8165 	beq.w	8006ec6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c06:	429a      	cmp	r2, r3
 8006c08:	f080 815d 	bcs.w	8006ec6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c20:	f000 8086 	beq.w	8006d30 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1da      	bne.n	8006c24 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3308      	adds	r3, #8
 8006c74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e1      	bne.n	8006c6e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006cce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e3      	bne.n	8006caa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d00:	f023 0310 	bic.w	r3, r3, #16
 8006d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e4      	bne.n	8006cf0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fc fee4 	bl	8003af8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8d8 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d50:	e0b9      	b.n	8006ec6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80ab 	beq.w	8006eca <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 80a6 	beq.w	8006eca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006da2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006da6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e4      	bne.n	8006d7e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3308      	adds	r3, #8
 8006dba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	623b      	str	r3, [r7, #32]
   return(result);
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	f023 0301 	bic.w	r3, r3, #1
 8006dca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dd8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e3      	bne.n	8006db4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f023 0310 	bic.w	r3, r3, #16
 8006e14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	69b9      	ldr	r1, [r7, #24]
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e4      	bne.n	8006e00 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f85c 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e48:	e03f      	b.n	8006eca <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00e      	beq.n	8006e74 <HAL_UART_IRQHandler+0x56c>
 8006e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f853 	bl	8006f18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e72:	e02d      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00e      	beq.n	8006e9e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01c      	beq.n	8006ece <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
    }
    return;
 8006e9c:	e017      	b.n	8006ece <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d012      	beq.n	8006ed0 <HAL_UART_IRQHandler+0x5c8>
 8006eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00c      	beq.n	8006ed0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fd94 	bl	80079e4 <UART_EndTransmit_IT>
    return;
 8006ebc:	e008      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006ebe:	bf00      	nop
 8006ec0:	e006      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006ec2:	bf00      	nop
 8006ec4:	e004      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006ec6:	bf00      	nop
 8006ec8:	e002      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006eca:	bf00      	nop
 8006ecc:	e000      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006ece:	bf00      	nop
  }

}
 8006ed0:	37e8      	adds	r7, #232	@ 0xe8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop

08006ed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4ba6      	ldr	r3, [pc, #664]	@ (80071f0 <UART_SetConfig+0x2c4>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	6979      	ldr	r1, [r7, #20]
 8006f60:	430b      	orrs	r3, r1
 8006f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a94      	ldr	r2, [pc, #592]	@ (80071f4 <UART_SetConfig+0x2c8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d120      	bne.n	8006fea <UART_SetConfig+0xbe>
 8006fa8:	4b93      	ldr	r3, [pc, #588]	@ (80071f8 <UART_SetConfig+0x2cc>)
 8006faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d816      	bhi.n	8006fe4 <UART_SetConfig+0xb8>
 8006fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fbc <UART_SetConfig+0x90>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006fd9 	.word	0x08006fd9
 8006fc4:	08006fd3 	.word	0x08006fd3
 8006fc8:	08006fdf 	.word	0x08006fdf
 8006fcc:	2301      	movs	r3, #1
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	e150      	b.n	8007274 <UART_SetConfig+0x348>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	77fb      	strb	r3, [r7, #31]
 8006fd6:	e14d      	b.n	8007274 <UART_SetConfig+0x348>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	e14a      	b.n	8007274 <UART_SetConfig+0x348>
 8006fde:	2308      	movs	r3, #8
 8006fe0:	77fb      	strb	r3, [r7, #31]
 8006fe2:	e147      	b.n	8007274 <UART_SetConfig+0x348>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e144      	b.n	8007274 <UART_SetConfig+0x348>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a83      	ldr	r2, [pc, #524]	@ (80071fc <UART_SetConfig+0x2d0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d132      	bne.n	800705a <UART_SetConfig+0x12e>
 8006ff4:	4b80      	ldr	r3, [pc, #512]	@ (80071f8 <UART_SetConfig+0x2cc>)
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffa:	f003 030c 	and.w	r3, r3, #12
 8006ffe:	2b0c      	cmp	r3, #12
 8007000:	d828      	bhi.n	8007054 <UART_SetConfig+0x128>
 8007002:	a201      	add	r2, pc, #4	@ (adr r2, 8007008 <UART_SetConfig+0xdc>)
 8007004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007008:	0800703d 	.word	0x0800703d
 800700c:	08007055 	.word	0x08007055
 8007010:	08007055 	.word	0x08007055
 8007014:	08007055 	.word	0x08007055
 8007018:	08007049 	.word	0x08007049
 800701c:	08007055 	.word	0x08007055
 8007020:	08007055 	.word	0x08007055
 8007024:	08007055 	.word	0x08007055
 8007028:	08007043 	.word	0x08007043
 800702c:	08007055 	.word	0x08007055
 8007030:	08007055 	.word	0x08007055
 8007034:	08007055 	.word	0x08007055
 8007038:	0800704f 	.word	0x0800704f
 800703c:	2300      	movs	r3, #0
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e118      	b.n	8007274 <UART_SetConfig+0x348>
 8007042:	2302      	movs	r3, #2
 8007044:	77fb      	strb	r3, [r7, #31]
 8007046:	e115      	b.n	8007274 <UART_SetConfig+0x348>
 8007048:	2304      	movs	r3, #4
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e112      	b.n	8007274 <UART_SetConfig+0x348>
 800704e:	2308      	movs	r3, #8
 8007050:	77fb      	strb	r3, [r7, #31]
 8007052:	e10f      	b.n	8007274 <UART_SetConfig+0x348>
 8007054:	2310      	movs	r3, #16
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e10c      	b.n	8007274 <UART_SetConfig+0x348>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a68      	ldr	r2, [pc, #416]	@ (8007200 <UART_SetConfig+0x2d4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d120      	bne.n	80070a6 <UART_SetConfig+0x17a>
 8007064:	4b64      	ldr	r3, [pc, #400]	@ (80071f8 <UART_SetConfig+0x2cc>)
 8007066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800706a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800706e:	2b30      	cmp	r3, #48	@ 0x30
 8007070:	d013      	beq.n	800709a <UART_SetConfig+0x16e>
 8007072:	2b30      	cmp	r3, #48	@ 0x30
 8007074:	d814      	bhi.n	80070a0 <UART_SetConfig+0x174>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d009      	beq.n	800708e <UART_SetConfig+0x162>
 800707a:	2b20      	cmp	r3, #32
 800707c:	d810      	bhi.n	80070a0 <UART_SetConfig+0x174>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <UART_SetConfig+0x15c>
 8007082:	2b10      	cmp	r3, #16
 8007084:	d006      	beq.n	8007094 <UART_SetConfig+0x168>
 8007086:	e00b      	b.n	80070a0 <UART_SetConfig+0x174>
 8007088:	2300      	movs	r3, #0
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e0f2      	b.n	8007274 <UART_SetConfig+0x348>
 800708e:	2302      	movs	r3, #2
 8007090:	77fb      	strb	r3, [r7, #31]
 8007092:	e0ef      	b.n	8007274 <UART_SetConfig+0x348>
 8007094:	2304      	movs	r3, #4
 8007096:	77fb      	strb	r3, [r7, #31]
 8007098:	e0ec      	b.n	8007274 <UART_SetConfig+0x348>
 800709a:	2308      	movs	r3, #8
 800709c:	77fb      	strb	r3, [r7, #31]
 800709e:	e0e9      	b.n	8007274 <UART_SetConfig+0x348>
 80070a0:	2310      	movs	r3, #16
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e0e6      	b.n	8007274 <UART_SetConfig+0x348>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a56      	ldr	r2, [pc, #344]	@ (8007204 <UART_SetConfig+0x2d8>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d120      	bne.n	80070f2 <UART_SetConfig+0x1c6>
 80070b0:	4b51      	ldr	r3, [pc, #324]	@ (80071f8 <UART_SetConfig+0x2cc>)
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80070bc:	d013      	beq.n	80070e6 <UART_SetConfig+0x1ba>
 80070be:	2bc0      	cmp	r3, #192	@ 0xc0
 80070c0:	d814      	bhi.n	80070ec <UART_SetConfig+0x1c0>
 80070c2:	2b80      	cmp	r3, #128	@ 0x80
 80070c4:	d009      	beq.n	80070da <UART_SetConfig+0x1ae>
 80070c6:	2b80      	cmp	r3, #128	@ 0x80
 80070c8:	d810      	bhi.n	80070ec <UART_SetConfig+0x1c0>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <UART_SetConfig+0x1a8>
 80070ce:	2b40      	cmp	r3, #64	@ 0x40
 80070d0:	d006      	beq.n	80070e0 <UART_SetConfig+0x1b4>
 80070d2:	e00b      	b.n	80070ec <UART_SetConfig+0x1c0>
 80070d4:	2300      	movs	r3, #0
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e0cc      	b.n	8007274 <UART_SetConfig+0x348>
 80070da:	2302      	movs	r3, #2
 80070dc:	77fb      	strb	r3, [r7, #31]
 80070de:	e0c9      	b.n	8007274 <UART_SetConfig+0x348>
 80070e0:	2304      	movs	r3, #4
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e0c6      	b.n	8007274 <UART_SetConfig+0x348>
 80070e6:	2308      	movs	r3, #8
 80070e8:	77fb      	strb	r3, [r7, #31]
 80070ea:	e0c3      	b.n	8007274 <UART_SetConfig+0x348>
 80070ec:	2310      	movs	r3, #16
 80070ee:	77fb      	strb	r3, [r7, #31]
 80070f0:	e0c0      	b.n	8007274 <UART_SetConfig+0x348>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a44      	ldr	r2, [pc, #272]	@ (8007208 <UART_SetConfig+0x2dc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d125      	bne.n	8007148 <UART_SetConfig+0x21c>
 80070fc:	4b3e      	ldr	r3, [pc, #248]	@ (80071f8 <UART_SetConfig+0x2cc>)
 80070fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800710a:	d017      	beq.n	800713c <UART_SetConfig+0x210>
 800710c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007110:	d817      	bhi.n	8007142 <UART_SetConfig+0x216>
 8007112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007116:	d00b      	beq.n	8007130 <UART_SetConfig+0x204>
 8007118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800711c:	d811      	bhi.n	8007142 <UART_SetConfig+0x216>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <UART_SetConfig+0x1fe>
 8007122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007126:	d006      	beq.n	8007136 <UART_SetConfig+0x20a>
 8007128:	e00b      	b.n	8007142 <UART_SetConfig+0x216>
 800712a:	2300      	movs	r3, #0
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e0a1      	b.n	8007274 <UART_SetConfig+0x348>
 8007130:	2302      	movs	r3, #2
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e09e      	b.n	8007274 <UART_SetConfig+0x348>
 8007136:	2304      	movs	r3, #4
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e09b      	b.n	8007274 <UART_SetConfig+0x348>
 800713c:	2308      	movs	r3, #8
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	e098      	b.n	8007274 <UART_SetConfig+0x348>
 8007142:	2310      	movs	r3, #16
 8007144:	77fb      	strb	r3, [r7, #31]
 8007146:	e095      	b.n	8007274 <UART_SetConfig+0x348>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2f      	ldr	r2, [pc, #188]	@ (800720c <UART_SetConfig+0x2e0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d125      	bne.n	800719e <UART_SetConfig+0x272>
 8007152:	4b29      	ldr	r3, [pc, #164]	@ (80071f8 <UART_SetConfig+0x2cc>)
 8007154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007158:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800715c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007160:	d017      	beq.n	8007192 <UART_SetConfig+0x266>
 8007162:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007166:	d817      	bhi.n	8007198 <UART_SetConfig+0x26c>
 8007168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800716c:	d00b      	beq.n	8007186 <UART_SetConfig+0x25a>
 800716e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007172:	d811      	bhi.n	8007198 <UART_SetConfig+0x26c>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <UART_SetConfig+0x254>
 8007178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800717c:	d006      	beq.n	800718c <UART_SetConfig+0x260>
 800717e:	e00b      	b.n	8007198 <UART_SetConfig+0x26c>
 8007180:	2301      	movs	r3, #1
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e076      	b.n	8007274 <UART_SetConfig+0x348>
 8007186:	2302      	movs	r3, #2
 8007188:	77fb      	strb	r3, [r7, #31]
 800718a:	e073      	b.n	8007274 <UART_SetConfig+0x348>
 800718c:	2304      	movs	r3, #4
 800718e:	77fb      	strb	r3, [r7, #31]
 8007190:	e070      	b.n	8007274 <UART_SetConfig+0x348>
 8007192:	2308      	movs	r3, #8
 8007194:	77fb      	strb	r3, [r7, #31]
 8007196:	e06d      	b.n	8007274 <UART_SetConfig+0x348>
 8007198:	2310      	movs	r3, #16
 800719a:	77fb      	strb	r3, [r7, #31]
 800719c:	e06a      	b.n	8007274 <UART_SetConfig+0x348>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007210 <UART_SetConfig+0x2e4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d138      	bne.n	800721a <UART_SetConfig+0x2ee>
 80071a8:	4b13      	ldr	r3, [pc, #76]	@ (80071f8 <UART_SetConfig+0x2cc>)
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80071b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071b6:	d017      	beq.n	80071e8 <UART_SetConfig+0x2bc>
 80071b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071bc:	d82a      	bhi.n	8007214 <UART_SetConfig+0x2e8>
 80071be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c2:	d00b      	beq.n	80071dc <UART_SetConfig+0x2b0>
 80071c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c8:	d824      	bhi.n	8007214 <UART_SetConfig+0x2e8>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <UART_SetConfig+0x2aa>
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d2:	d006      	beq.n	80071e2 <UART_SetConfig+0x2b6>
 80071d4:	e01e      	b.n	8007214 <UART_SetConfig+0x2e8>
 80071d6:	2300      	movs	r3, #0
 80071d8:	77fb      	strb	r3, [r7, #31]
 80071da:	e04b      	b.n	8007274 <UART_SetConfig+0x348>
 80071dc:	2302      	movs	r3, #2
 80071de:	77fb      	strb	r3, [r7, #31]
 80071e0:	e048      	b.n	8007274 <UART_SetConfig+0x348>
 80071e2:	2304      	movs	r3, #4
 80071e4:	77fb      	strb	r3, [r7, #31]
 80071e6:	e045      	b.n	8007274 <UART_SetConfig+0x348>
 80071e8:	2308      	movs	r3, #8
 80071ea:	77fb      	strb	r3, [r7, #31]
 80071ec:	e042      	b.n	8007274 <UART_SetConfig+0x348>
 80071ee:	bf00      	nop
 80071f0:	efff69f3 	.word	0xefff69f3
 80071f4:	40011000 	.word	0x40011000
 80071f8:	40023800 	.word	0x40023800
 80071fc:	40004400 	.word	0x40004400
 8007200:	40004800 	.word	0x40004800
 8007204:	40004c00 	.word	0x40004c00
 8007208:	40005000 	.word	0x40005000
 800720c:	40011400 	.word	0x40011400
 8007210:	40007800 	.word	0x40007800
 8007214:	2310      	movs	r3, #16
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	e02c      	b.n	8007274 <UART_SetConfig+0x348>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a72      	ldr	r2, [pc, #456]	@ (80073e8 <UART_SetConfig+0x4bc>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d125      	bne.n	8007270 <UART_SetConfig+0x344>
 8007224:	4b71      	ldr	r3, [pc, #452]	@ (80073ec <UART_SetConfig+0x4c0>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800722e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007232:	d017      	beq.n	8007264 <UART_SetConfig+0x338>
 8007234:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007238:	d817      	bhi.n	800726a <UART_SetConfig+0x33e>
 800723a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800723e:	d00b      	beq.n	8007258 <UART_SetConfig+0x32c>
 8007240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007244:	d811      	bhi.n	800726a <UART_SetConfig+0x33e>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <UART_SetConfig+0x326>
 800724a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800724e:	d006      	beq.n	800725e <UART_SetConfig+0x332>
 8007250:	e00b      	b.n	800726a <UART_SetConfig+0x33e>
 8007252:	2300      	movs	r3, #0
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e00d      	b.n	8007274 <UART_SetConfig+0x348>
 8007258:	2302      	movs	r3, #2
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e00a      	b.n	8007274 <UART_SetConfig+0x348>
 800725e:	2304      	movs	r3, #4
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	e007      	b.n	8007274 <UART_SetConfig+0x348>
 8007264:	2308      	movs	r3, #8
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e004      	b.n	8007274 <UART_SetConfig+0x348>
 800726a:	2310      	movs	r3, #16
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e001      	b.n	8007274 <UART_SetConfig+0x348>
 8007270:	2310      	movs	r3, #16
 8007272:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800727c:	d15b      	bne.n	8007336 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800727e:	7ffb      	ldrb	r3, [r7, #31]
 8007280:	2b08      	cmp	r3, #8
 8007282:	d828      	bhi.n	80072d6 <UART_SetConfig+0x3aa>
 8007284:	a201      	add	r2, pc, #4	@ (adr r2, 800728c <UART_SetConfig+0x360>)
 8007286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728a:	bf00      	nop
 800728c:	080072b1 	.word	0x080072b1
 8007290:	080072b9 	.word	0x080072b9
 8007294:	080072c1 	.word	0x080072c1
 8007298:	080072d7 	.word	0x080072d7
 800729c:	080072c7 	.word	0x080072c7
 80072a0:	080072d7 	.word	0x080072d7
 80072a4:	080072d7 	.word	0x080072d7
 80072a8:	080072d7 	.word	0x080072d7
 80072ac:	080072cf 	.word	0x080072cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b0:	f7fd fb4e 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 80072b4:	61b8      	str	r0, [r7, #24]
        break;
 80072b6:	e013      	b.n	80072e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b8:	f7fd fb5e 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 80072bc:	61b8      	str	r0, [r7, #24]
        break;
 80072be:	e00f      	b.n	80072e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072c0:	4b4b      	ldr	r3, [pc, #300]	@ (80073f0 <UART_SetConfig+0x4c4>)
 80072c2:	61bb      	str	r3, [r7, #24]
        break;
 80072c4:	e00c      	b.n	80072e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c6:	f7fd fa71 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 80072ca:	61b8      	str	r0, [r7, #24]
        break;
 80072cc:	e008      	b.n	80072e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072d2:	61bb      	str	r3, [r7, #24]
        break;
 80072d4:	e004      	b.n	80072e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	77bb      	strb	r3, [r7, #30]
        break;
 80072de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d074      	beq.n	80073d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	005a      	lsls	r2, r3, #1
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	441a      	add	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b0f      	cmp	r3, #15
 8007300:	d916      	bls.n	8007330 <UART_SetConfig+0x404>
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007308:	d212      	bcs.n	8007330 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f023 030f 	bic.w	r3, r3, #15
 8007312:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	b29b      	uxth	r3, r3
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	b29a      	uxth	r2, r3
 8007320:	89fb      	ldrh	r3, [r7, #14]
 8007322:	4313      	orrs	r3, r2
 8007324:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	89fa      	ldrh	r2, [r7, #14]
 800732c:	60da      	str	r2, [r3, #12]
 800732e:	e04f      	b.n	80073d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	77bb      	strb	r3, [r7, #30]
 8007334:	e04c      	b.n	80073d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007336:	7ffb      	ldrb	r3, [r7, #31]
 8007338:	2b08      	cmp	r3, #8
 800733a:	d828      	bhi.n	800738e <UART_SetConfig+0x462>
 800733c:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <UART_SetConfig+0x418>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007369 	.word	0x08007369
 8007348:	08007371 	.word	0x08007371
 800734c:	08007379 	.word	0x08007379
 8007350:	0800738f 	.word	0x0800738f
 8007354:	0800737f 	.word	0x0800737f
 8007358:	0800738f 	.word	0x0800738f
 800735c:	0800738f 	.word	0x0800738f
 8007360:	0800738f 	.word	0x0800738f
 8007364:	08007387 	.word	0x08007387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007368:	f7fd faf2 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 800736c:	61b8      	str	r0, [r7, #24]
        break;
 800736e:	e013      	b.n	8007398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007370:	f7fd fb02 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 8007374:	61b8      	str	r0, [r7, #24]
        break;
 8007376:	e00f      	b.n	8007398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007378:	4b1d      	ldr	r3, [pc, #116]	@ (80073f0 <UART_SetConfig+0x4c4>)
 800737a:	61bb      	str	r3, [r7, #24]
        break;
 800737c:	e00c      	b.n	8007398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800737e:	f7fd fa15 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 8007382:	61b8      	str	r0, [r7, #24]
        break;
 8007384:	e008      	b.n	8007398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800738a:	61bb      	str	r3, [r7, #24]
        break;
 800738c:	e004      	b.n	8007398 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	77bb      	strb	r3, [r7, #30]
        break;
 8007396:	bf00      	nop
    }

    if (pclk != 0U)
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d018      	beq.n	80073d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	085a      	lsrs	r2, r3, #1
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	441a      	add	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b0f      	cmp	r3, #15
 80073b6:	d909      	bls.n	80073cc <UART_SetConfig+0x4a0>
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073be:	d205      	bcs.n	80073cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	e001      	b.n	80073d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80073dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	40007c00 	.word	0x40007c00
 80073ec:	40023800 	.word	0x40023800
 80073f0:	00f42400 	.word	0x00f42400

080073f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00a      	beq.n	8007462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007488:	f003 0310 	and.w	r3, r3, #16
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01a      	beq.n	800750a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074f2:	d10a      	bne.n	800750a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	605a      	str	r2, [r3, #4]
  }
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b098      	sub	sp, #96	@ 0x60
 800753c:	af02      	add	r7, sp, #8
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007548:	f7fb fcee 	bl	8002f28 <HAL_GetTick>
 800754c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b08      	cmp	r3, #8
 800755a:	d12e      	bne.n	80075ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800755c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007564:	2200      	movs	r2, #0
 8007566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f88c 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d021      	beq.n	80075ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800758a:	653b      	str	r3, [r7, #80]	@ 0x50
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007594:	647b      	str	r3, [r7, #68]	@ 0x44
 8007596:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800759a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e6      	bne.n	8007576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e062      	b.n	8007680 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d149      	bne.n	800765c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075d0:	2200      	movs	r2, #0
 80075d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f856 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d03c      	beq.n	800765c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	623b      	str	r3, [r7, #32]
   return(result);
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007600:	633b      	str	r3, [r7, #48]	@ 0x30
 8007602:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800760e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e6      	bne.n	80075e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3308      	adds	r3, #8
 800761a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	60fb      	str	r3, [r7, #12]
   return(result);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0301 	bic.w	r3, r3, #1
 800762a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007634:	61fa      	str	r2, [r7, #28]
 8007636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	69b9      	ldr	r1, [r7, #24]
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	617b      	str	r3, [r7, #20]
   return(result);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e5      	bne.n	8007614 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e011      	b.n	8007680 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3758      	adds	r7, #88	@ 0x58
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	4613      	mov	r3, r2
 8007696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007698:	e04f      	b.n	800773a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d04b      	beq.n	800773a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a2:	f7fb fc41 	bl	8002f28 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d302      	bcc.n	80076b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e04e      	b.n	800775a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d037      	beq.n	800773a <UART_WaitOnFlagUntilTimeout+0xb2>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b80      	cmp	r3, #128	@ 0x80
 80076ce:	d034      	beq.n	800773a <UART_WaitOnFlagUntilTimeout+0xb2>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b40      	cmp	r3, #64	@ 0x40
 80076d4:	d031      	beq.n	800773a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f003 0308 	and.w	r3, r3, #8
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	d110      	bne.n	8007706 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2208      	movs	r2, #8
 80076ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f8ff 	bl	80078f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2208      	movs	r2, #8
 80076f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e029      	b.n	800775a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007714:	d111      	bne.n	800773a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800771e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 f8e5 	bl	80078f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2220      	movs	r2, #32
 800772a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e00f      	b.n	800775a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4013      	ands	r3, r2
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	429a      	cmp	r2, r3
 8007748:	bf0c      	ite	eq
 800774a:	2301      	moveq	r3, #1
 800774c:	2300      	movne	r3, #0
 800774e:	b2db      	uxtb	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	429a      	cmp	r2, r3
 8007756:	d0a0      	beq.n	800769a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007764:	b480      	push	{r7}
 8007766:	b097      	sub	sp, #92	@ 0x5c
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	88fa      	ldrh	r2, [r7, #6]
 800777c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	88fa      	ldrh	r2, [r7, #6]
 8007784:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007796:	d10e      	bne.n	80077b6 <UART_Start_Receive_IT+0x52>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <UART_Start_Receive_IT+0x48>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80077a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077aa:	e02d      	b.n	8007808 <UART_Start_Receive_IT+0xa4>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	22ff      	movs	r2, #255	@ 0xff
 80077b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077b4:	e028      	b.n	8007808 <UART_Start_Receive_IT+0xa4>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10d      	bne.n	80077da <UART_Start_Receive_IT+0x76>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d104      	bne.n	80077d0 <UART_Start_Receive_IT+0x6c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	22ff      	movs	r2, #255	@ 0xff
 80077ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077ce:	e01b      	b.n	8007808 <UART_Start_Receive_IT+0xa4>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	227f      	movs	r2, #127	@ 0x7f
 80077d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077d8:	e016      	b.n	8007808 <UART_Start_Receive_IT+0xa4>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077e2:	d10d      	bne.n	8007800 <UART_Start_Receive_IT+0x9c>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <UART_Start_Receive_IT+0x92>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	227f      	movs	r2, #127	@ 0x7f
 80077f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077f4:	e008      	b.n	8007808 <UART_Start_Receive_IT+0xa4>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	223f      	movs	r2, #63	@ 0x3f
 80077fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077fe:	e003      	b.n	8007808 <UART_Start_Receive_IT+0xa4>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2222      	movs	r2, #34	@ 0x22
 8007814:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3308      	adds	r3, #8
 800781e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782a:	f043 0301 	orr.w	r3, r3, #1
 800782e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007838:	64ba      	str	r2, [r7, #72]	@ 0x48
 800783a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800783e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007854:	d107      	bne.n	8007866 <UART_Start_Receive_IT+0x102>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d103      	bne.n	8007866 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4a21      	ldr	r2, [pc, #132]	@ (80078e8 <UART_Start_Receive_IT+0x184>)
 8007862:	669a      	str	r2, [r3, #104]	@ 0x68
 8007864:	e002      	b.n	800786c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4a20      	ldr	r2, [pc, #128]	@ (80078ec <UART_Start_Receive_IT+0x188>)
 800786a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d019      	beq.n	80078a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007888:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
 8007894:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80078a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e6      	bne.n	8007874 <UART_Start_Receive_IT+0x110>
 80078a6:	e018      	b.n	80078da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	613b      	str	r3, [r7, #16]
   return(result);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f043 0320 	orr.w	r3, r3, #32
 80078bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	69f9      	ldr	r1, [r7, #28]
 80078cc:	6a3a      	ldr	r2, [r7, #32]
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e6      	bne.n	80078a8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	375c      	adds	r7, #92	@ 0x5c
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	08007be1 	.word	0x08007be1
 80078ec:	08007a39 	.word	0x08007a39

080078f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b095      	sub	sp, #84	@ 0x54
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800790c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007916:	643b      	str	r3, [r7, #64]	@ 0x40
 8007918:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800791c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e6      	bne.n	80078f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3308      	adds	r3, #8
 8007930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	61fb      	str	r3, [r7, #28]
   return(result);
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	f023 0301 	bic.w	r3, r3, #1
 8007940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3308      	adds	r3, #8
 8007948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800794a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800794c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e5      	bne.n	800792a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007962:	2b01      	cmp	r3, #1
 8007964:	d118      	bne.n	8007998 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	60bb      	str	r3, [r7, #8]
   return(result);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	f023 0310 	bic.w	r3, r3, #16
 800797a:	647b      	str	r3, [r7, #68]	@ 0x44
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6979      	ldr	r1, [r7, #20]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	613b      	str	r3, [r7, #16]
   return(result);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e6      	bne.n	8007966 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80079ac:	bf00      	nop
 80079ae:	3754      	adds	r7, #84	@ 0x54
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff fa88 	bl	8006eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079dc:	bf00      	nop
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a00:	61fb      	str	r3, [r7, #28]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	61bb      	str	r3, [r7, #24]
 8007a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6979      	ldr	r1, [r7, #20]
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	613b      	str	r3, [r7, #16]
   return(result);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e6      	bne.n	80079ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fa54 	bl	8006ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a30:	bf00      	nop
 8007a32:	3720      	adds	r7, #32
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b09c      	sub	sp, #112	@ 0x70
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a50:	2b22      	cmp	r3, #34	@ 0x22
 8007a52:	f040 80b9 	bne.w	8007bc8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a64:	b2d9      	uxtb	r1, r3
 8007a66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a70:	400a      	ands	r2, r1
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 809c 	bne.w	8007bd8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007abe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ac0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ac4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e6      	bne.n	8007aa0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae4:	f023 0301 	bic.w	r3, r3, #1
 8007ae8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007af2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007af4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e5      	bne.n	8007ad2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d018      	beq.n	8007b5a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	623b      	str	r3, [r7, #32]
   return(result);
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b46:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e6      	bne.n	8007b28 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d12e      	bne.n	8007bc0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f023 0310 	bic.w	r3, r3, #16
 8007b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	69b9      	ldr	r1, [r7, #24]
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	617b      	str	r3, [r7, #20]
   return(result);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e6      	bne.n	8007b68 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d103      	bne.n	8007bb0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2210      	movs	r2, #16
 8007bae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff f9a1 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bbe:	e00b      	b.n	8007bd8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7f9 f9d7 	bl	8000f74 <HAL_UART_RxCpltCallback>
}
 8007bc6:	e007      	b.n	8007bd8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0208 	orr.w	r2, r2, #8
 8007bd6:	619a      	str	r2, [r3, #24]
}
 8007bd8:	bf00      	nop
 8007bda:	3770      	adds	r7, #112	@ 0x70
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b09c      	sub	sp, #112	@ 0x70
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf8:	2b22      	cmp	r3, #34	@ 0x22
 8007bfa:	f040 80b9 	bne.w	8007d70 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007c12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c16:	4013      	ands	r3, r2
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c22:	1c9a      	adds	r2, r3, #2
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f040 809c 	bne.w	8007d80 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c66:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e6      	bne.n	8007c48 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3308      	adds	r3, #8
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	f023 0301 	bic.w	r3, r3, #1
 8007c90:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3308      	adds	r3, #8
 8007c98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ca0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e5      	bne.n	8007c7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d018      	beq.n	8007d02 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cf0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e6      	bne.n	8007cd0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d12e      	bne.n	8007d68 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f023 0310 	bic.w	r3, r3, #16
 8007d24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d2e:	61bb      	str	r3, [r7, #24]
 8007d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6979      	ldr	r1, [r7, #20]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e6      	bne.n	8007d10 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d103      	bne.n	8007d58 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2210      	movs	r2, #16
 8007d56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff f8cd 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d66:	e00b      	b.n	8007d80 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7f9 f903 	bl	8000f74 <HAL_UART_RxCpltCallback>
}
 8007d6e:	e007      	b.n	8007d80 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699a      	ldr	r2, [r3, #24]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0208 	orr.w	r2, r2, #8
 8007d7e:	619a      	str	r2, [r3, #24]
}
 8007d80:	bf00      	nop
 8007d82:	3770      	adds	r7, #112	@ 0x70
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <rand>:
 8007d88:	4b16      	ldr	r3, [pc, #88]	@ (8007de4 <rand+0x5c>)
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	681c      	ldr	r4, [r3, #0]
 8007d8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007d90:	b9b3      	cbnz	r3, 8007dc0 <rand+0x38>
 8007d92:	2018      	movs	r0, #24
 8007d94:	f000 fa40 	bl	8008218 <malloc>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	6320      	str	r0, [r4, #48]	@ 0x30
 8007d9c:	b920      	cbnz	r0, 8007da8 <rand+0x20>
 8007d9e:	4b12      	ldr	r3, [pc, #72]	@ (8007de8 <rand+0x60>)
 8007da0:	4812      	ldr	r0, [pc, #72]	@ (8007dec <rand+0x64>)
 8007da2:	2152      	movs	r1, #82	@ 0x52
 8007da4:	f000 f9d0 	bl	8008148 <__assert_func>
 8007da8:	4911      	ldr	r1, [pc, #68]	@ (8007df0 <rand+0x68>)
 8007daa:	4b12      	ldr	r3, [pc, #72]	@ (8007df4 <rand+0x6c>)
 8007dac:	e9c0 1300 	strd	r1, r3, [r0]
 8007db0:	4b11      	ldr	r3, [pc, #68]	@ (8007df8 <rand+0x70>)
 8007db2:	6083      	str	r3, [r0, #8]
 8007db4:	230b      	movs	r3, #11
 8007db6:	8183      	strh	r3, [r0, #12]
 8007db8:	2100      	movs	r1, #0
 8007dba:	2001      	movs	r0, #1
 8007dbc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007dc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007dc2:	480e      	ldr	r0, [pc, #56]	@ (8007dfc <rand+0x74>)
 8007dc4:	690b      	ldr	r3, [r1, #16]
 8007dc6:	694c      	ldr	r4, [r1, #20]
 8007dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8007e00 <rand+0x78>)
 8007dca:	4358      	muls	r0, r3
 8007dcc:	fb02 0004 	mla	r0, r2, r4, r0
 8007dd0:	fba3 3202 	umull	r3, r2, r3, r2
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	eb40 0002 	adc.w	r0, r0, r2
 8007dda:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007dde:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007de2:	bd10      	pop	{r4, pc}
 8007de4:	20000074 	.word	0x20000074
 8007de8:	080098f4 	.word	0x080098f4
 8007dec:	0800990b 	.word	0x0800990b
 8007df0:	abcd330e 	.word	0xabcd330e
 8007df4:	e66d1234 	.word	0xe66d1234
 8007df8:	0005deec 	.word	0x0005deec
 8007dfc:	5851f42d 	.word	0x5851f42d
 8007e00:	4c957f2d 	.word	0x4c957f2d

08007e04 <std>:
 8007e04:	2300      	movs	r3, #0
 8007e06:	b510      	push	{r4, lr}
 8007e08:	4604      	mov	r4, r0
 8007e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e12:	6083      	str	r3, [r0, #8]
 8007e14:	8181      	strh	r1, [r0, #12]
 8007e16:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e18:	81c2      	strh	r2, [r0, #14]
 8007e1a:	6183      	str	r3, [r0, #24]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	2208      	movs	r2, #8
 8007e20:	305c      	adds	r0, #92	@ 0x5c
 8007e22:	f000 f914 	bl	800804e <memset>
 8007e26:	4b0d      	ldr	r3, [pc, #52]	@ (8007e5c <std+0x58>)
 8007e28:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e60 <std+0x5c>)
 8007e2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <std+0x60>)
 8007e30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <std+0x64>)
 8007e34:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e36:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <std+0x68>)
 8007e38:	6224      	str	r4, [r4, #32]
 8007e3a:	429c      	cmp	r4, r3
 8007e3c:	d006      	beq.n	8007e4c <std+0x48>
 8007e3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e42:	4294      	cmp	r4, r2
 8007e44:	d002      	beq.n	8007e4c <std+0x48>
 8007e46:	33d0      	adds	r3, #208	@ 0xd0
 8007e48:	429c      	cmp	r4, r3
 8007e4a:	d105      	bne.n	8007e58 <std+0x54>
 8007e4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e54:	f000 b974 	b.w	8008140 <__retarget_lock_init_recursive>
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	bf00      	nop
 8007e5c:	08007fc9 	.word	0x08007fc9
 8007e60:	08007feb 	.word	0x08007feb
 8007e64:	08008023 	.word	0x08008023
 8007e68:	08008047 	.word	0x08008047
 8007e6c:	2000035c 	.word	0x2000035c

08007e70 <stdio_exit_handler>:
 8007e70:	4a02      	ldr	r2, [pc, #8]	@ (8007e7c <stdio_exit_handler+0xc>)
 8007e72:	4903      	ldr	r1, [pc, #12]	@ (8007e80 <stdio_exit_handler+0x10>)
 8007e74:	4803      	ldr	r0, [pc, #12]	@ (8007e84 <stdio_exit_handler+0x14>)
 8007e76:	f000 b869 	b.w	8007f4c <_fwalk_sglue>
 8007e7a:	bf00      	nop
 8007e7c:	20000068 	.word	0x20000068
 8007e80:	08008a59 	.word	0x08008a59
 8007e84:	20000078 	.word	0x20000078

08007e88 <cleanup_stdio>:
 8007e88:	6841      	ldr	r1, [r0, #4]
 8007e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ebc <cleanup_stdio+0x34>)
 8007e8c:	4299      	cmp	r1, r3
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	4604      	mov	r4, r0
 8007e92:	d001      	beq.n	8007e98 <cleanup_stdio+0x10>
 8007e94:	f000 fde0 	bl	8008a58 <_fflush_r>
 8007e98:	68a1      	ldr	r1, [r4, #8]
 8007e9a:	4b09      	ldr	r3, [pc, #36]	@ (8007ec0 <cleanup_stdio+0x38>)
 8007e9c:	4299      	cmp	r1, r3
 8007e9e:	d002      	beq.n	8007ea6 <cleanup_stdio+0x1e>
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fdd9 	bl	8008a58 <_fflush_r>
 8007ea6:	68e1      	ldr	r1, [r4, #12]
 8007ea8:	4b06      	ldr	r3, [pc, #24]	@ (8007ec4 <cleanup_stdio+0x3c>)
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	d004      	beq.n	8007eb8 <cleanup_stdio+0x30>
 8007eae:	4620      	mov	r0, r4
 8007eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb4:	f000 bdd0 	b.w	8008a58 <_fflush_r>
 8007eb8:	bd10      	pop	{r4, pc}
 8007eba:	bf00      	nop
 8007ebc:	2000035c 	.word	0x2000035c
 8007ec0:	200003c4 	.word	0x200003c4
 8007ec4:	2000042c 	.word	0x2000042c

08007ec8 <global_stdio_init.part.0>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef8 <global_stdio_init.part.0+0x30>)
 8007ecc:	4c0b      	ldr	r4, [pc, #44]	@ (8007efc <global_stdio_init.part.0+0x34>)
 8007ece:	4a0c      	ldr	r2, [pc, #48]	@ (8007f00 <global_stdio_init.part.0+0x38>)
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2104      	movs	r1, #4
 8007ed8:	f7ff ff94 	bl	8007e04 <std>
 8007edc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	2109      	movs	r1, #9
 8007ee4:	f7ff ff8e 	bl	8007e04 <std>
 8007ee8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007eec:	2202      	movs	r2, #2
 8007eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef2:	2112      	movs	r1, #18
 8007ef4:	f7ff bf86 	b.w	8007e04 <std>
 8007ef8:	20000494 	.word	0x20000494
 8007efc:	2000035c 	.word	0x2000035c
 8007f00:	08007e71 	.word	0x08007e71

08007f04 <__sfp_lock_acquire>:
 8007f04:	4801      	ldr	r0, [pc, #4]	@ (8007f0c <__sfp_lock_acquire+0x8>)
 8007f06:	f000 b91c 	b.w	8008142 <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	2000049d 	.word	0x2000049d

08007f10 <__sfp_lock_release>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__sfp_lock_release+0x8>)
 8007f12:	f000 b917 	b.w	8008144 <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	2000049d 	.word	0x2000049d

08007f1c <__sinit>:
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	4604      	mov	r4, r0
 8007f20:	f7ff fff0 	bl	8007f04 <__sfp_lock_acquire>
 8007f24:	6a23      	ldr	r3, [r4, #32]
 8007f26:	b11b      	cbz	r3, 8007f30 <__sinit+0x14>
 8007f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f2c:	f7ff bff0 	b.w	8007f10 <__sfp_lock_release>
 8007f30:	4b04      	ldr	r3, [pc, #16]	@ (8007f44 <__sinit+0x28>)
 8007f32:	6223      	str	r3, [r4, #32]
 8007f34:	4b04      	ldr	r3, [pc, #16]	@ (8007f48 <__sinit+0x2c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f5      	bne.n	8007f28 <__sinit+0xc>
 8007f3c:	f7ff ffc4 	bl	8007ec8 <global_stdio_init.part.0>
 8007f40:	e7f2      	b.n	8007f28 <__sinit+0xc>
 8007f42:	bf00      	nop
 8007f44:	08007e89 	.word	0x08007e89
 8007f48:	20000494 	.word	0x20000494

08007f4c <_fwalk_sglue>:
 8007f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f50:	4607      	mov	r7, r0
 8007f52:	4688      	mov	r8, r1
 8007f54:	4614      	mov	r4, r2
 8007f56:	2600      	movs	r6, #0
 8007f58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f5c:	f1b9 0901 	subs.w	r9, r9, #1
 8007f60:	d505      	bpl.n	8007f6e <_fwalk_sglue+0x22>
 8007f62:	6824      	ldr	r4, [r4, #0]
 8007f64:	2c00      	cmp	r4, #0
 8007f66:	d1f7      	bne.n	8007f58 <_fwalk_sglue+0xc>
 8007f68:	4630      	mov	r0, r6
 8007f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d907      	bls.n	8007f84 <_fwalk_sglue+0x38>
 8007f74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	d003      	beq.n	8007f84 <_fwalk_sglue+0x38>
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4638      	mov	r0, r7
 8007f80:	47c0      	blx	r8
 8007f82:	4306      	orrs	r6, r0
 8007f84:	3568      	adds	r5, #104	@ 0x68
 8007f86:	e7e9      	b.n	8007f5c <_fwalk_sglue+0x10>

08007f88 <siprintf>:
 8007f88:	b40e      	push	{r1, r2, r3}
 8007f8a:	b500      	push	{lr}
 8007f8c:	b09c      	sub	sp, #112	@ 0x70
 8007f8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f90:	9002      	str	r0, [sp, #8]
 8007f92:	9006      	str	r0, [sp, #24]
 8007f94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f98:	4809      	ldr	r0, [pc, #36]	@ (8007fc0 <siprintf+0x38>)
 8007f9a:	9107      	str	r1, [sp, #28]
 8007f9c:	9104      	str	r1, [sp, #16]
 8007f9e:	4909      	ldr	r1, [pc, #36]	@ (8007fc4 <siprintf+0x3c>)
 8007fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa4:	9105      	str	r1, [sp, #20]
 8007fa6:	6800      	ldr	r0, [r0, #0]
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	a902      	add	r1, sp, #8
 8007fac:	f000 fa46 	bl	800843c <_svfiprintf_r>
 8007fb0:	9b02      	ldr	r3, [sp, #8]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]
 8007fb6:	b01c      	add	sp, #112	@ 0x70
 8007fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fbc:	b003      	add	sp, #12
 8007fbe:	4770      	bx	lr
 8007fc0:	20000074 	.word	0x20000074
 8007fc4:	ffff0208 	.word	0xffff0208

08007fc8 <__sread>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	460c      	mov	r4, r1
 8007fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd0:	f000 f868 	bl	80080a4 <_read_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	bfab      	itete	ge
 8007fd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fda:	89a3      	ldrhlt	r3, [r4, #12]
 8007fdc:	181b      	addge	r3, r3, r0
 8007fde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fe2:	bfac      	ite	ge
 8007fe4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fe6:	81a3      	strhlt	r3, [r4, #12]
 8007fe8:	bd10      	pop	{r4, pc}

08007fea <__swrite>:
 8007fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fee:	461f      	mov	r7, r3
 8007ff0:	898b      	ldrh	r3, [r1, #12]
 8007ff2:	05db      	lsls	r3, r3, #23
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	4616      	mov	r6, r2
 8007ffa:	d505      	bpl.n	8008008 <__swrite+0x1e>
 8007ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008000:	2302      	movs	r3, #2
 8008002:	2200      	movs	r2, #0
 8008004:	f000 f83c 	bl	8008080 <_lseek_r>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800800e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	4632      	mov	r2, r6
 8008016:	463b      	mov	r3, r7
 8008018:	4628      	mov	r0, r5
 800801a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800801e:	f000 b853 	b.w	80080c8 <_write_r>

08008022 <__sseek>:
 8008022:	b510      	push	{r4, lr}
 8008024:	460c      	mov	r4, r1
 8008026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802a:	f000 f829 	bl	8008080 <_lseek_r>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	bf15      	itete	ne
 8008034:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008036:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800803a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800803e:	81a3      	strheq	r3, [r4, #12]
 8008040:	bf18      	it	ne
 8008042:	81a3      	strhne	r3, [r4, #12]
 8008044:	bd10      	pop	{r4, pc}

08008046 <__sclose>:
 8008046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804a:	f000 b809 	b.w	8008060 <_close_r>

0800804e <memset>:
 800804e:	4402      	add	r2, r0
 8008050:	4603      	mov	r3, r0
 8008052:	4293      	cmp	r3, r2
 8008054:	d100      	bne.n	8008058 <memset+0xa>
 8008056:	4770      	bx	lr
 8008058:	f803 1b01 	strb.w	r1, [r3], #1
 800805c:	e7f9      	b.n	8008052 <memset+0x4>
	...

08008060 <_close_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d06      	ldr	r5, [pc, #24]	@ (800807c <_close_r+0x1c>)
 8008064:	2300      	movs	r3, #0
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	f7f9 ffe6 	bl	800203c <_close>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_close_r+0x1a>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_close_r+0x1a>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	20000498 	.word	0x20000498

08008080 <_lseek_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	4d07      	ldr	r5, [pc, #28]	@ (80080a0 <_lseek_r+0x20>)
 8008084:	4604      	mov	r4, r0
 8008086:	4608      	mov	r0, r1
 8008088:	4611      	mov	r1, r2
 800808a:	2200      	movs	r2, #0
 800808c:	602a      	str	r2, [r5, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	f7f9 fffb 	bl	800208a <_lseek>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_lseek_r+0x1e>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_lseek_r+0x1e>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	20000498 	.word	0x20000498

080080a4 <_read_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d07      	ldr	r5, [pc, #28]	@ (80080c4 <_read_r+0x20>)
 80080a8:	4604      	mov	r4, r0
 80080aa:	4608      	mov	r0, r1
 80080ac:	4611      	mov	r1, r2
 80080ae:	2200      	movs	r2, #0
 80080b0:	602a      	str	r2, [r5, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	f7f9 ff89 	bl	8001fca <_read>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_read_r+0x1e>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_read_r+0x1e>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20000498 	.word	0x20000498

080080c8 <_write_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d07      	ldr	r5, [pc, #28]	@ (80080e8 <_write_r+0x20>)
 80080cc:	4604      	mov	r4, r0
 80080ce:	4608      	mov	r0, r1
 80080d0:	4611      	mov	r1, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	602a      	str	r2, [r5, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f7f9 ff94 	bl	8002004 <_write>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_write_r+0x1e>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_write_r+0x1e>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	20000498 	.word	0x20000498

080080ec <__errno>:
 80080ec:	4b01      	ldr	r3, [pc, #4]	@ (80080f4 <__errno+0x8>)
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000074 	.word	0x20000074

080080f8 <__libc_init_array>:
 80080f8:	b570      	push	{r4, r5, r6, lr}
 80080fa:	4d0d      	ldr	r5, [pc, #52]	@ (8008130 <__libc_init_array+0x38>)
 80080fc:	4c0d      	ldr	r4, [pc, #52]	@ (8008134 <__libc_init_array+0x3c>)
 80080fe:	1b64      	subs	r4, r4, r5
 8008100:	10a4      	asrs	r4, r4, #2
 8008102:	2600      	movs	r6, #0
 8008104:	42a6      	cmp	r6, r4
 8008106:	d109      	bne.n	800811c <__libc_init_array+0x24>
 8008108:	4d0b      	ldr	r5, [pc, #44]	@ (8008138 <__libc_init_array+0x40>)
 800810a:	4c0c      	ldr	r4, [pc, #48]	@ (800813c <__libc_init_array+0x44>)
 800810c:	f000 fff0 	bl	80090f0 <_init>
 8008110:	1b64      	subs	r4, r4, r5
 8008112:	10a4      	asrs	r4, r4, #2
 8008114:	2600      	movs	r6, #0
 8008116:	42a6      	cmp	r6, r4
 8008118:	d105      	bne.n	8008126 <__libc_init_array+0x2e>
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008120:	4798      	blx	r3
 8008122:	3601      	adds	r6, #1
 8008124:	e7ee      	b.n	8008104 <__libc_init_array+0xc>
 8008126:	f855 3b04 	ldr.w	r3, [r5], #4
 800812a:	4798      	blx	r3
 800812c:	3601      	adds	r6, #1
 800812e:	e7f2      	b.n	8008116 <__libc_init_array+0x1e>
 8008130:	080099dc 	.word	0x080099dc
 8008134:	080099dc 	.word	0x080099dc
 8008138:	080099dc 	.word	0x080099dc
 800813c:	080099e0 	.word	0x080099e0

08008140 <__retarget_lock_init_recursive>:
 8008140:	4770      	bx	lr

08008142 <__retarget_lock_acquire_recursive>:
 8008142:	4770      	bx	lr

08008144 <__retarget_lock_release_recursive>:
 8008144:	4770      	bx	lr
	...

08008148 <__assert_func>:
 8008148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800814a:	4614      	mov	r4, r2
 800814c:	461a      	mov	r2, r3
 800814e:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <__assert_func+0x2c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4605      	mov	r5, r0
 8008154:	68d8      	ldr	r0, [r3, #12]
 8008156:	b954      	cbnz	r4, 800816e <__assert_func+0x26>
 8008158:	4b07      	ldr	r3, [pc, #28]	@ (8008178 <__assert_func+0x30>)
 800815a:	461c      	mov	r4, r3
 800815c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008160:	9100      	str	r1, [sp, #0]
 8008162:	462b      	mov	r3, r5
 8008164:	4905      	ldr	r1, [pc, #20]	@ (800817c <__assert_func+0x34>)
 8008166:	f000 fc9f 	bl	8008aa8 <fiprintf>
 800816a:	f000 fce7 	bl	8008b3c <abort>
 800816e:	4b04      	ldr	r3, [pc, #16]	@ (8008180 <__assert_func+0x38>)
 8008170:	e7f4      	b.n	800815c <__assert_func+0x14>
 8008172:	bf00      	nop
 8008174:	20000074 	.word	0x20000074
 8008178:	0800999e 	.word	0x0800999e
 800817c:	08009970 	.word	0x08009970
 8008180:	08009963 	.word	0x08009963

08008184 <_free_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4605      	mov	r5, r0
 8008188:	2900      	cmp	r1, #0
 800818a:	d041      	beq.n	8008210 <_free_r+0x8c>
 800818c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008190:	1f0c      	subs	r4, r1, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfb8      	it	lt
 8008196:	18e4      	addlt	r4, r4, r3
 8008198:	f000 f8e8 	bl	800836c <__malloc_lock>
 800819c:	4a1d      	ldr	r2, [pc, #116]	@ (8008214 <_free_r+0x90>)
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	b933      	cbnz	r3, 80081b0 <_free_r+0x2c>
 80081a2:	6063      	str	r3, [r4, #4]
 80081a4:	6014      	str	r4, [r2, #0]
 80081a6:	4628      	mov	r0, r5
 80081a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ac:	f000 b8e4 	b.w	8008378 <__malloc_unlock>
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d908      	bls.n	80081c6 <_free_r+0x42>
 80081b4:	6820      	ldr	r0, [r4, #0]
 80081b6:	1821      	adds	r1, r4, r0
 80081b8:	428b      	cmp	r3, r1
 80081ba:	bf01      	itttt	eq
 80081bc:	6819      	ldreq	r1, [r3, #0]
 80081be:	685b      	ldreq	r3, [r3, #4]
 80081c0:	1809      	addeq	r1, r1, r0
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	e7ed      	b.n	80081a2 <_free_r+0x1e>
 80081c6:	461a      	mov	r2, r3
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b10b      	cbz	r3, 80081d0 <_free_r+0x4c>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d9fa      	bls.n	80081c6 <_free_r+0x42>
 80081d0:	6811      	ldr	r1, [r2, #0]
 80081d2:	1850      	adds	r0, r2, r1
 80081d4:	42a0      	cmp	r0, r4
 80081d6:	d10b      	bne.n	80081f0 <_free_r+0x6c>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	4401      	add	r1, r0
 80081dc:	1850      	adds	r0, r2, r1
 80081de:	4283      	cmp	r3, r0
 80081e0:	6011      	str	r1, [r2, #0]
 80081e2:	d1e0      	bne.n	80081a6 <_free_r+0x22>
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	6053      	str	r3, [r2, #4]
 80081ea:	4408      	add	r0, r1
 80081ec:	6010      	str	r0, [r2, #0]
 80081ee:	e7da      	b.n	80081a6 <_free_r+0x22>
 80081f0:	d902      	bls.n	80081f8 <_free_r+0x74>
 80081f2:	230c      	movs	r3, #12
 80081f4:	602b      	str	r3, [r5, #0]
 80081f6:	e7d6      	b.n	80081a6 <_free_r+0x22>
 80081f8:	6820      	ldr	r0, [r4, #0]
 80081fa:	1821      	adds	r1, r4, r0
 80081fc:	428b      	cmp	r3, r1
 80081fe:	bf04      	itt	eq
 8008200:	6819      	ldreq	r1, [r3, #0]
 8008202:	685b      	ldreq	r3, [r3, #4]
 8008204:	6063      	str	r3, [r4, #4]
 8008206:	bf04      	itt	eq
 8008208:	1809      	addeq	r1, r1, r0
 800820a:	6021      	streq	r1, [r4, #0]
 800820c:	6054      	str	r4, [r2, #4]
 800820e:	e7ca      	b.n	80081a6 <_free_r+0x22>
 8008210:	bd38      	pop	{r3, r4, r5, pc}
 8008212:	bf00      	nop
 8008214:	200004a4 	.word	0x200004a4

08008218 <malloc>:
 8008218:	4b02      	ldr	r3, [pc, #8]	@ (8008224 <malloc+0xc>)
 800821a:	4601      	mov	r1, r0
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	f000 b825 	b.w	800826c <_malloc_r>
 8008222:	bf00      	nop
 8008224:	20000074 	.word	0x20000074

08008228 <sbrk_aligned>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	4e0f      	ldr	r6, [pc, #60]	@ (8008268 <sbrk_aligned+0x40>)
 800822c:	460c      	mov	r4, r1
 800822e:	6831      	ldr	r1, [r6, #0]
 8008230:	4605      	mov	r5, r0
 8008232:	b911      	cbnz	r1, 800823a <sbrk_aligned+0x12>
 8008234:	f000 fc64 	bl	8008b00 <_sbrk_r>
 8008238:	6030      	str	r0, [r6, #0]
 800823a:	4621      	mov	r1, r4
 800823c:	4628      	mov	r0, r5
 800823e:	f000 fc5f 	bl	8008b00 <_sbrk_r>
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	d103      	bne.n	800824e <sbrk_aligned+0x26>
 8008246:	f04f 34ff 	mov.w	r4, #4294967295
 800824a:	4620      	mov	r0, r4
 800824c:	bd70      	pop	{r4, r5, r6, pc}
 800824e:	1cc4      	adds	r4, r0, #3
 8008250:	f024 0403 	bic.w	r4, r4, #3
 8008254:	42a0      	cmp	r0, r4
 8008256:	d0f8      	beq.n	800824a <sbrk_aligned+0x22>
 8008258:	1a21      	subs	r1, r4, r0
 800825a:	4628      	mov	r0, r5
 800825c:	f000 fc50 	bl	8008b00 <_sbrk_r>
 8008260:	3001      	adds	r0, #1
 8008262:	d1f2      	bne.n	800824a <sbrk_aligned+0x22>
 8008264:	e7ef      	b.n	8008246 <sbrk_aligned+0x1e>
 8008266:	bf00      	nop
 8008268:	200004a0 	.word	0x200004a0

0800826c <_malloc_r>:
 800826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008270:	1ccd      	adds	r5, r1, #3
 8008272:	f025 0503 	bic.w	r5, r5, #3
 8008276:	3508      	adds	r5, #8
 8008278:	2d0c      	cmp	r5, #12
 800827a:	bf38      	it	cc
 800827c:	250c      	movcc	r5, #12
 800827e:	2d00      	cmp	r5, #0
 8008280:	4606      	mov	r6, r0
 8008282:	db01      	blt.n	8008288 <_malloc_r+0x1c>
 8008284:	42a9      	cmp	r1, r5
 8008286:	d904      	bls.n	8008292 <_malloc_r+0x26>
 8008288:	230c      	movs	r3, #12
 800828a:	6033      	str	r3, [r6, #0]
 800828c:	2000      	movs	r0, #0
 800828e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008292:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008368 <_malloc_r+0xfc>
 8008296:	f000 f869 	bl	800836c <__malloc_lock>
 800829a:	f8d8 3000 	ldr.w	r3, [r8]
 800829e:	461c      	mov	r4, r3
 80082a0:	bb44      	cbnz	r4, 80082f4 <_malloc_r+0x88>
 80082a2:	4629      	mov	r1, r5
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff ffbf 	bl	8008228 <sbrk_aligned>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	4604      	mov	r4, r0
 80082ae:	d158      	bne.n	8008362 <_malloc_r+0xf6>
 80082b0:	f8d8 4000 	ldr.w	r4, [r8]
 80082b4:	4627      	mov	r7, r4
 80082b6:	2f00      	cmp	r7, #0
 80082b8:	d143      	bne.n	8008342 <_malloc_r+0xd6>
 80082ba:	2c00      	cmp	r4, #0
 80082bc:	d04b      	beq.n	8008356 <_malloc_r+0xea>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	4639      	mov	r1, r7
 80082c2:	4630      	mov	r0, r6
 80082c4:	eb04 0903 	add.w	r9, r4, r3
 80082c8:	f000 fc1a 	bl	8008b00 <_sbrk_r>
 80082cc:	4581      	cmp	r9, r0
 80082ce:	d142      	bne.n	8008356 <_malloc_r+0xea>
 80082d0:	6821      	ldr	r1, [r4, #0]
 80082d2:	1a6d      	subs	r5, r5, r1
 80082d4:	4629      	mov	r1, r5
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7ff ffa6 	bl	8008228 <sbrk_aligned>
 80082dc:	3001      	adds	r0, #1
 80082de:	d03a      	beq.n	8008356 <_malloc_r+0xea>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	442b      	add	r3, r5
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	f8d8 3000 	ldr.w	r3, [r8]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	bb62      	cbnz	r2, 8008348 <_malloc_r+0xdc>
 80082ee:	f8c8 7000 	str.w	r7, [r8]
 80082f2:	e00f      	b.n	8008314 <_malloc_r+0xa8>
 80082f4:	6822      	ldr	r2, [r4, #0]
 80082f6:	1b52      	subs	r2, r2, r5
 80082f8:	d420      	bmi.n	800833c <_malloc_r+0xd0>
 80082fa:	2a0b      	cmp	r2, #11
 80082fc:	d917      	bls.n	800832e <_malloc_r+0xc2>
 80082fe:	1961      	adds	r1, r4, r5
 8008300:	42a3      	cmp	r3, r4
 8008302:	6025      	str	r5, [r4, #0]
 8008304:	bf18      	it	ne
 8008306:	6059      	strne	r1, [r3, #4]
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	bf08      	it	eq
 800830c:	f8c8 1000 	streq.w	r1, [r8]
 8008310:	5162      	str	r2, [r4, r5]
 8008312:	604b      	str	r3, [r1, #4]
 8008314:	4630      	mov	r0, r6
 8008316:	f000 f82f 	bl	8008378 <__malloc_unlock>
 800831a:	f104 000b 	add.w	r0, r4, #11
 800831e:	1d23      	adds	r3, r4, #4
 8008320:	f020 0007 	bic.w	r0, r0, #7
 8008324:	1ac2      	subs	r2, r0, r3
 8008326:	bf1c      	itt	ne
 8008328:	1a1b      	subne	r3, r3, r0
 800832a:	50a3      	strne	r3, [r4, r2]
 800832c:	e7af      	b.n	800828e <_malloc_r+0x22>
 800832e:	6862      	ldr	r2, [r4, #4]
 8008330:	42a3      	cmp	r3, r4
 8008332:	bf0c      	ite	eq
 8008334:	f8c8 2000 	streq.w	r2, [r8]
 8008338:	605a      	strne	r2, [r3, #4]
 800833a:	e7eb      	b.n	8008314 <_malloc_r+0xa8>
 800833c:	4623      	mov	r3, r4
 800833e:	6864      	ldr	r4, [r4, #4]
 8008340:	e7ae      	b.n	80082a0 <_malloc_r+0x34>
 8008342:	463c      	mov	r4, r7
 8008344:	687f      	ldr	r7, [r7, #4]
 8008346:	e7b6      	b.n	80082b6 <_malloc_r+0x4a>
 8008348:	461a      	mov	r2, r3
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	42a3      	cmp	r3, r4
 800834e:	d1fb      	bne.n	8008348 <_malloc_r+0xdc>
 8008350:	2300      	movs	r3, #0
 8008352:	6053      	str	r3, [r2, #4]
 8008354:	e7de      	b.n	8008314 <_malloc_r+0xa8>
 8008356:	230c      	movs	r3, #12
 8008358:	6033      	str	r3, [r6, #0]
 800835a:	4630      	mov	r0, r6
 800835c:	f000 f80c 	bl	8008378 <__malloc_unlock>
 8008360:	e794      	b.n	800828c <_malloc_r+0x20>
 8008362:	6005      	str	r5, [r0, #0]
 8008364:	e7d6      	b.n	8008314 <_malloc_r+0xa8>
 8008366:	bf00      	nop
 8008368:	200004a4 	.word	0x200004a4

0800836c <__malloc_lock>:
 800836c:	4801      	ldr	r0, [pc, #4]	@ (8008374 <__malloc_lock+0x8>)
 800836e:	f7ff bee8 	b.w	8008142 <__retarget_lock_acquire_recursive>
 8008372:	bf00      	nop
 8008374:	2000049c 	.word	0x2000049c

08008378 <__malloc_unlock>:
 8008378:	4801      	ldr	r0, [pc, #4]	@ (8008380 <__malloc_unlock+0x8>)
 800837a:	f7ff bee3 	b.w	8008144 <__retarget_lock_release_recursive>
 800837e:	bf00      	nop
 8008380:	2000049c 	.word	0x2000049c

08008384 <__ssputs_r>:
 8008384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	688e      	ldr	r6, [r1, #8]
 800838a:	461f      	mov	r7, r3
 800838c:	42be      	cmp	r6, r7
 800838e:	680b      	ldr	r3, [r1, #0]
 8008390:	4682      	mov	sl, r0
 8008392:	460c      	mov	r4, r1
 8008394:	4690      	mov	r8, r2
 8008396:	d82d      	bhi.n	80083f4 <__ssputs_r+0x70>
 8008398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800839c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083a0:	d026      	beq.n	80083f0 <__ssputs_r+0x6c>
 80083a2:	6965      	ldr	r5, [r4, #20]
 80083a4:	6909      	ldr	r1, [r1, #16]
 80083a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083aa:	eba3 0901 	sub.w	r9, r3, r1
 80083ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083b2:	1c7b      	adds	r3, r7, #1
 80083b4:	444b      	add	r3, r9
 80083b6:	106d      	asrs	r5, r5, #1
 80083b8:	429d      	cmp	r5, r3
 80083ba:	bf38      	it	cc
 80083bc:	461d      	movcc	r5, r3
 80083be:	0553      	lsls	r3, r2, #21
 80083c0:	d527      	bpl.n	8008412 <__ssputs_r+0x8e>
 80083c2:	4629      	mov	r1, r5
 80083c4:	f7ff ff52 	bl	800826c <_malloc_r>
 80083c8:	4606      	mov	r6, r0
 80083ca:	b360      	cbz	r0, 8008426 <__ssputs_r+0xa2>
 80083cc:	6921      	ldr	r1, [r4, #16]
 80083ce:	464a      	mov	r2, r9
 80083d0:	f000 fba6 	bl	8008b20 <memcpy>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	6126      	str	r6, [r4, #16]
 80083e2:	6165      	str	r5, [r4, #20]
 80083e4:	444e      	add	r6, r9
 80083e6:	eba5 0509 	sub.w	r5, r5, r9
 80083ea:	6026      	str	r6, [r4, #0]
 80083ec:	60a5      	str	r5, [r4, #8]
 80083ee:	463e      	mov	r6, r7
 80083f0:	42be      	cmp	r6, r7
 80083f2:	d900      	bls.n	80083f6 <__ssputs_r+0x72>
 80083f4:	463e      	mov	r6, r7
 80083f6:	6820      	ldr	r0, [r4, #0]
 80083f8:	4632      	mov	r2, r6
 80083fa:	4641      	mov	r1, r8
 80083fc:	f000 fb66 	bl	8008acc <memmove>
 8008400:	68a3      	ldr	r3, [r4, #8]
 8008402:	1b9b      	subs	r3, r3, r6
 8008404:	60a3      	str	r3, [r4, #8]
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	4433      	add	r3, r6
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	2000      	movs	r0, #0
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	462a      	mov	r2, r5
 8008414:	f000 fb99 	bl	8008b4a <_realloc_r>
 8008418:	4606      	mov	r6, r0
 800841a:	2800      	cmp	r0, #0
 800841c:	d1e0      	bne.n	80083e0 <__ssputs_r+0x5c>
 800841e:	6921      	ldr	r1, [r4, #16]
 8008420:	4650      	mov	r0, sl
 8008422:	f7ff feaf 	bl	8008184 <_free_r>
 8008426:	230c      	movs	r3, #12
 8008428:	f8ca 3000 	str.w	r3, [sl]
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	f04f 30ff 	mov.w	r0, #4294967295
 8008438:	e7e9      	b.n	800840e <__ssputs_r+0x8a>
	...

0800843c <_svfiprintf_r>:
 800843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	4698      	mov	r8, r3
 8008442:	898b      	ldrh	r3, [r1, #12]
 8008444:	061b      	lsls	r3, r3, #24
 8008446:	b09d      	sub	sp, #116	@ 0x74
 8008448:	4607      	mov	r7, r0
 800844a:	460d      	mov	r5, r1
 800844c:	4614      	mov	r4, r2
 800844e:	d510      	bpl.n	8008472 <_svfiprintf_r+0x36>
 8008450:	690b      	ldr	r3, [r1, #16]
 8008452:	b973      	cbnz	r3, 8008472 <_svfiprintf_r+0x36>
 8008454:	2140      	movs	r1, #64	@ 0x40
 8008456:	f7ff ff09 	bl	800826c <_malloc_r>
 800845a:	6028      	str	r0, [r5, #0]
 800845c:	6128      	str	r0, [r5, #16]
 800845e:	b930      	cbnz	r0, 800846e <_svfiprintf_r+0x32>
 8008460:	230c      	movs	r3, #12
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	b01d      	add	sp, #116	@ 0x74
 800846a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846e:	2340      	movs	r3, #64	@ 0x40
 8008470:	616b      	str	r3, [r5, #20]
 8008472:	2300      	movs	r3, #0
 8008474:	9309      	str	r3, [sp, #36]	@ 0x24
 8008476:	2320      	movs	r3, #32
 8008478:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800847c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008480:	2330      	movs	r3, #48	@ 0x30
 8008482:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008620 <_svfiprintf_r+0x1e4>
 8008486:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800848a:	f04f 0901 	mov.w	r9, #1
 800848e:	4623      	mov	r3, r4
 8008490:	469a      	mov	sl, r3
 8008492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008496:	b10a      	cbz	r2, 800849c <_svfiprintf_r+0x60>
 8008498:	2a25      	cmp	r2, #37	@ 0x25
 800849a:	d1f9      	bne.n	8008490 <_svfiprintf_r+0x54>
 800849c:	ebba 0b04 	subs.w	fp, sl, r4
 80084a0:	d00b      	beq.n	80084ba <_svfiprintf_r+0x7e>
 80084a2:	465b      	mov	r3, fp
 80084a4:	4622      	mov	r2, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff ff6b 	bl	8008384 <__ssputs_r>
 80084ae:	3001      	adds	r0, #1
 80084b0:	f000 80a7 	beq.w	8008602 <_svfiprintf_r+0x1c6>
 80084b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084b6:	445a      	add	r2, fp
 80084b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80084ba:	f89a 3000 	ldrb.w	r3, [sl]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 809f 	beq.w	8008602 <_svfiprintf_r+0x1c6>
 80084c4:	2300      	movs	r3, #0
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ce:	f10a 0a01 	add.w	sl, sl, #1
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	9307      	str	r3, [sp, #28]
 80084d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084da:	931a      	str	r3, [sp, #104]	@ 0x68
 80084dc:	4654      	mov	r4, sl
 80084de:	2205      	movs	r2, #5
 80084e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e4:	484e      	ldr	r0, [pc, #312]	@ (8008620 <_svfiprintf_r+0x1e4>)
 80084e6:	f7f7 feb3 	bl	8000250 <memchr>
 80084ea:	9a04      	ldr	r2, [sp, #16]
 80084ec:	b9d8      	cbnz	r0, 8008526 <_svfiprintf_r+0xea>
 80084ee:	06d0      	lsls	r0, r2, #27
 80084f0:	bf44      	itt	mi
 80084f2:	2320      	movmi	r3, #32
 80084f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f8:	0711      	lsls	r1, r2, #28
 80084fa:	bf44      	itt	mi
 80084fc:	232b      	movmi	r3, #43	@ 0x2b
 80084fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008502:	f89a 3000 	ldrb.w	r3, [sl]
 8008506:	2b2a      	cmp	r3, #42	@ 0x2a
 8008508:	d015      	beq.n	8008536 <_svfiprintf_r+0xfa>
 800850a:	9a07      	ldr	r2, [sp, #28]
 800850c:	4654      	mov	r4, sl
 800850e:	2000      	movs	r0, #0
 8008510:	f04f 0c0a 	mov.w	ip, #10
 8008514:	4621      	mov	r1, r4
 8008516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851a:	3b30      	subs	r3, #48	@ 0x30
 800851c:	2b09      	cmp	r3, #9
 800851e:	d94b      	bls.n	80085b8 <_svfiprintf_r+0x17c>
 8008520:	b1b0      	cbz	r0, 8008550 <_svfiprintf_r+0x114>
 8008522:	9207      	str	r2, [sp, #28]
 8008524:	e014      	b.n	8008550 <_svfiprintf_r+0x114>
 8008526:	eba0 0308 	sub.w	r3, r0, r8
 800852a:	fa09 f303 	lsl.w	r3, r9, r3
 800852e:	4313      	orrs	r3, r2
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	46a2      	mov	sl, r4
 8008534:	e7d2      	b.n	80084dc <_svfiprintf_r+0xa0>
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	1d19      	adds	r1, r3, #4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	9103      	str	r1, [sp, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfbb      	ittet	lt
 8008542:	425b      	neglt	r3, r3
 8008544:	f042 0202 	orrlt.w	r2, r2, #2
 8008548:	9307      	strge	r3, [sp, #28]
 800854a:	9307      	strlt	r3, [sp, #28]
 800854c:	bfb8      	it	lt
 800854e:	9204      	strlt	r2, [sp, #16]
 8008550:	7823      	ldrb	r3, [r4, #0]
 8008552:	2b2e      	cmp	r3, #46	@ 0x2e
 8008554:	d10a      	bne.n	800856c <_svfiprintf_r+0x130>
 8008556:	7863      	ldrb	r3, [r4, #1]
 8008558:	2b2a      	cmp	r3, #42	@ 0x2a
 800855a:	d132      	bne.n	80085c2 <_svfiprintf_r+0x186>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	1d1a      	adds	r2, r3, #4
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	9203      	str	r2, [sp, #12]
 8008564:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008568:	3402      	adds	r4, #2
 800856a:	9305      	str	r3, [sp, #20]
 800856c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008630 <_svfiprintf_r+0x1f4>
 8008570:	7821      	ldrb	r1, [r4, #0]
 8008572:	2203      	movs	r2, #3
 8008574:	4650      	mov	r0, sl
 8008576:	f7f7 fe6b 	bl	8000250 <memchr>
 800857a:	b138      	cbz	r0, 800858c <_svfiprintf_r+0x150>
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	eba0 000a 	sub.w	r0, r0, sl
 8008582:	2240      	movs	r2, #64	@ 0x40
 8008584:	4082      	lsls	r2, r0
 8008586:	4313      	orrs	r3, r2
 8008588:	3401      	adds	r4, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008590:	4824      	ldr	r0, [pc, #144]	@ (8008624 <_svfiprintf_r+0x1e8>)
 8008592:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008596:	2206      	movs	r2, #6
 8008598:	f7f7 fe5a 	bl	8000250 <memchr>
 800859c:	2800      	cmp	r0, #0
 800859e:	d036      	beq.n	800860e <_svfiprintf_r+0x1d2>
 80085a0:	4b21      	ldr	r3, [pc, #132]	@ (8008628 <_svfiprintf_r+0x1ec>)
 80085a2:	bb1b      	cbnz	r3, 80085ec <_svfiprintf_r+0x1b0>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	3307      	adds	r3, #7
 80085a8:	f023 0307 	bic.w	r3, r3, #7
 80085ac:	3308      	adds	r3, #8
 80085ae:	9303      	str	r3, [sp, #12]
 80085b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b2:	4433      	add	r3, r6
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	e76a      	b.n	800848e <_svfiprintf_r+0x52>
 80085b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80085bc:	460c      	mov	r4, r1
 80085be:	2001      	movs	r0, #1
 80085c0:	e7a8      	b.n	8008514 <_svfiprintf_r+0xd8>
 80085c2:	2300      	movs	r3, #0
 80085c4:	3401      	adds	r4, #1
 80085c6:	9305      	str	r3, [sp, #20]
 80085c8:	4619      	mov	r1, r3
 80085ca:	f04f 0c0a 	mov.w	ip, #10
 80085ce:	4620      	mov	r0, r4
 80085d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d4:	3a30      	subs	r2, #48	@ 0x30
 80085d6:	2a09      	cmp	r2, #9
 80085d8:	d903      	bls.n	80085e2 <_svfiprintf_r+0x1a6>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0c6      	beq.n	800856c <_svfiprintf_r+0x130>
 80085de:	9105      	str	r1, [sp, #20]
 80085e0:	e7c4      	b.n	800856c <_svfiprintf_r+0x130>
 80085e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80085e6:	4604      	mov	r4, r0
 80085e8:	2301      	movs	r3, #1
 80085ea:	e7f0      	b.n	80085ce <_svfiprintf_r+0x192>
 80085ec:	ab03      	add	r3, sp, #12
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	462a      	mov	r2, r5
 80085f2:	4b0e      	ldr	r3, [pc, #56]	@ (800862c <_svfiprintf_r+0x1f0>)
 80085f4:	a904      	add	r1, sp, #16
 80085f6:	4638      	mov	r0, r7
 80085f8:	f3af 8000 	nop.w
 80085fc:	1c42      	adds	r2, r0, #1
 80085fe:	4606      	mov	r6, r0
 8008600:	d1d6      	bne.n	80085b0 <_svfiprintf_r+0x174>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	065b      	lsls	r3, r3, #25
 8008606:	f53f af2d 	bmi.w	8008464 <_svfiprintf_r+0x28>
 800860a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800860c:	e72c      	b.n	8008468 <_svfiprintf_r+0x2c>
 800860e:	ab03      	add	r3, sp, #12
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	462a      	mov	r2, r5
 8008614:	4b05      	ldr	r3, [pc, #20]	@ (800862c <_svfiprintf_r+0x1f0>)
 8008616:	a904      	add	r1, sp, #16
 8008618:	4638      	mov	r0, r7
 800861a:	f000 f879 	bl	8008710 <_printf_i>
 800861e:	e7ed      	b.n	80085fc <_svfiprintf_r+0x1c0>
 8008620:	0800999f 	.word	0x0800999f
 8008624:	080099a9 	.word	0x080099a9
 8008628:	00000000 	.word	0x00000000
 800862c:	08008385 	.word	0x08008385
 8008630:	080099a5 	.word	0x080099a5

08008634 <_printf_common>:
 8008634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	4616      	mov	r6, r2
 800863a:	4698      	mov	r8, r3
 800863c:	688a      	ldr	r2, [r1, #8]
 800863e:	690b      	ldr	r3, [r1, #16]
 8008640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008644:	4293      	cmp	r3, r2
 8008646:	bfb8      	it	lt
 8008648:	4613      	movlt	r3, r2
 800864a:	6033      	str	r3, [r6, #0]
 800864c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008650:	4607      	mov	r7, r0
 8008652:	460c      	mov	r4, r1
 8008654:	b10a      	cbz	r2, 800865a <_printf_common+0x26>
 8008656:	3301      	adds	r3, #1
 8008658:	6033      	str	r3, [r6, #0]
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	0699      	lsls	r1, r3, #26
 800865e:	bf42      	ittt	mi
 8008660:	6833      	ldrmi	r3, [r6, #0]
 8008662:	3302      	addmi	r3, #2
 8008664:	6033      	strmi	r3, [r6, #0]
 8008666:	6825      	ldr	r5, [r4, #0]
 8008668:	f015 0506 	ands.w	r5, r5, #6
 800866c:	d106      	bne.n	800867c <_printf_common+0x48>
 800866e:	f104 0a19 	add.w	sl, r4, #25
 8008672:	68e3      	ldr	r3, [r4, #12]
 8008674:	6832      	ldr	r2, [r6, #0]
 8008676:	1a9b      	subs	r3, r3, r2
 8008678:	42ab      	cmp	r3, r5
 800867a:	dc26      	bgt.n	80086ca <_printf_common+0x96>
 800867c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008680:	6822      	ldr	r2, [r4, #0]
 8008682:	3b00      	subs	r3, #0
 8008684:	bf18      	it	ne
 8008686:	2301      	movne	r3, #1
 8008688:	0692      	lsls	r2, r2, #26
 800868a:	d42b      	bmi.n	80086e4 <_printf_common+0xb0>
 800868c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008690:	4641      	mov	r1, r8
 8008692:	4638      	mov	r0, r7
 8008694:	47c8      	blx	r9
 8008696:	3001      	adds	r0, #1
 8008698:	d01e      	beq.n	80086d8 <_printf_common+0xa4>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	6922      	ldr	r2, [r4, #16]
 800869e:	f003 0306 	and.w	r3, r3, #6
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	bf02      	ittt	eq
 80086a6:	68e5      	ldreq	r5, [r4, #12]
 80086a8:	6833      	ldreq	r3, [r6, #0]
 80086aa:	1aed      	subeq	r5, r5, r3
 80086ac:	68a3      	ldr	r3, [r4, #8]
 80086ae:	bf0c      	ite	eq
 80086b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086b4:	2500      	movne	r5, #0
 80086b6:	4293      	cmp	r3, r2
 80086b8:	bfc4      	itt	gt
 80086ba:	1a9b      	subgt	r3, r3, r2
 80086bc:	18ed      	addgt	r5, r5, r3
 80086be:	2600      	movs	r6, #0
 80086c0:	341a      	adds	r4, #26
 80086c2:	42b5      	cmp	r5, r6
 80086c4:	d11a      	bne.n	80086fc <_printf_common+0xc8>
 80086c6:	2000      	movs	r0, #0
 80086c8:	e008      	b.n	80086dc <_printf_common+0xa8>
 80086ca:	2301      	movs	r3, #1
 80086cc:	4652      	mov	r2, sl
 80086ce:	4641      	mov	r1, r8
 80086d0:	4638      	mov	r0, r7
 80086d2:	47c8      	blx	r9
 80086d4:	3001      	adds	r0, #1
 80086d6:	d103      	bne.n	80086e0 <_printf_common+0xac>
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e0:	3501      	adds	r5, #1
 80086e2:	e7c6      	b.n	8008672 <_printf_common+0x3e>
 80086e4:	18e1      	adds	r1, r4, r3
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	2030      	movs	r0, #48	@ 0x30
 80086ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086ee:	4422      	add	r2, r4
 80086f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086f8:	3302      	adds	r3, #2
 80086fa:	e7c7      	b.n	800868c <_printf_common+0x58>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4622      	mov	r2, r4
 8008700:	4641      	mov	r1, r8
 8008702:	4638      	mov	r0, r7
 8008704:	47c8      	blx	r9
 8008706:	3001      	adds	r0, #1
 8008708:	d0e6      	beq.n	80086d8 <_printf_common+0xa4>
 800870a:	3601      	adds	r6, #1
 800870c:	e7d9      	b.n	80086c2 <_printf_common+0x8e>
	...

08008710 <_printf_i>:
 8008710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008714:	7e0f      	ldrb	r7, [r1, #24]
 8008716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008718:	2f78      	cmp	r7, #120	@ 0x78
 800871a:	4691      	mov	r9, r2
 800871c:	4680      	mov	r8, r0
 800871e:	460c      	mov	r4, r1
 8008720:	469a      	mov	sl, r3
 8008722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008726:	d807      	bhi.n	8008738 <_printf_i+0x28>
 8008728:	2f62      	cmp	r7, #98	@ 0x62
 800872a:	d80a      	bhi.n	8008742 <_printf_i+0x32>
 800872c:	2f00      	cmp	r7, #0
 800872e:	f000 80d2 	beq.w	80088d6 <_printf_i+0x1c6>
 8008732:	2f58      	cmp	r7, #88	@ 0x58
 8008734:	f000 80b9 	beq.w	80088aa <_printf_i+0x19a>
 8008738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800873c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008740:	e03a      	b.n	80087b8 <_printf_i+0xa8>
 8008742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008746:	2b15      	cmp	r3, #21
 8008748:	d8f6      	bhi.n	8008738 <_printf_i+0x28>
 800874a:	a101      	add	r1, pc, #4	@ (adr r1, 8008750 <_printf_i+0x40>)
 800874c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008750:	080087a9 	.word	0x080087a9
 8008754:	080087bd 	.word	0x080087bd
 8008758:	08008739 	.word	0x08008739
 800875c:	08008739 	.word	0x08008739
 8008760:	08008739 	.word	0x08008739
 8008764:	08008739 	.word	0x08008739
 8008768:	080087bd 	.word	0x080087bd
 800876c:	08008739 	.word	0x08008739
 8008770:	08008739 	.word	0x08008739
 8008774:	08008739 	.word	0x08008739
 8008778:	08008739 	.word	0x08008739
 800877c:	080088bd 	.word	0x080088bd
 8008780:	080087e7 	.word	0x080087e7
 8008784:	08008877 	.word	0x08008877
 8008788:	08008739 	.word	0x08008739
 800878c:	08008739 	.word	0x08008739
 8008790:	080088df 	.word	0x080088df
 8008794:	08008739 	.word	0x08008739
 8008798:	080087e7 	.word	0x080087e7
 800879c:	08008739 	.word	0x08008739
 80087a0:	08008739 	.word	0x08008739
 80087a4:	0800887f 	.word	0x0800887f
 80087a8:	6833      	ldr	r3, [r6, #0]
 80087aa:	1d1a      	adds	r2, r3, #4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6032      	str	r2, [r6, #0]
 80087b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087b8:	2301      	movs	r3, #1
 80087ba:	e09d      	b.n	80088f8 <_printf_i+0x1e8>
 80087bc:	6833      	ldr	r3, [r6, #0]
 80087be:	6820      	ldr	r0, [r4, #0]
 80087c0:	1d19      	adds	r1, r3, #4
 80087c2:	6031      	str	r1, [r6, #0]
 80087c4:	0606      	lsls	r6, r0, #24
 80087c6:	d501      	bpl.n	80087cc <_printf_i+0xbc>
 80087c8:	681d      	ldr	r5, [r3, #0]
 80087ca:	e003      	b.n	80087d4 <_printf_i+0xc4>
 80087cc:	0645      	lsls	r5, r0, #25
 80087ce:	d5fb      	bpl.n	80087c8 <_printf_i+0xb8>
 80087d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087d4:	2d00      	cmp	r5, #0
 80087d6:	da03      	bge.n	80087e0 <_printf_i+0xd0>
 80087d8:	232d      	movs	r3, #45	@ 0x2d
 80087da:	426d      	negs	r5, r5
 80087dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087e0:	4859      	ldr	r0, [pc, #356]	@ (8008948 <_printf_i+0x238>)
 80087e2:	230a      	movs	r3, #10
 80087e4:	e011      	b.n	800880a <_printf_i+0xfa>
 80087e6:	6821      	ldr	r1, [r4, #0]
 80087e8:	6833      	ldr	r3, [r6, #0]
 80087ea:	0608      	lsls	r0, r1, #24
 80087ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80087f0:	d402      	bmi.n	80087f8 <_printf_i+0xe8>
 80087f2:	0649      	lsls	r1, r1, #25
 80087f4:	bf48      	it	mi
 80087f6:	b2ad      	uxthmi	r5, r5
 80087f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80087fa:	4853      	ldr	r0, [pc, #332]	@ (8008948 <_printf_i+0x238>)
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	bf14      	ite	ne
 8008800:	230a      	movne	r3, #10
 8008802:	2308      	moveq	r3, #8
 8008804:	2100      	movs	r1, #0
 8008806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800880a:	6866      	ldr	r6, [r4, #4]
 800880c:	60a6      	str	r6, [r4, #8]
 800880e:	2e00      	cmp	r6, #0
 8008810:	bfa2      	ittt	ge
 8008812:	6821      	ldrge	r1, [r4, #0]
 8008814:	f021 0104 	bicge.w	r1, r1, #4
 8008818:	6021      	strge	r1, [r4, #0]
 800881a:	b90d      	cbnz	r5, 8008820 <_printf_i+0x110>
 800881c:	2e00      	cmp	r6, #0
 800881e:	d04b      	beq.n	80088b8 <_printf_i+0x1a8>
 8008820:	4616      	mov	r6, r2
 8008822:	fbb5 f1f3 	udiv	r1, r5, r3
 8008826:	fb03 5711 	mls	r7, r3, r1, r5
 800882a:	5dc7      	ldrb	r7, [r0, r7]
 800882c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008830:	462f      	mov	r7, r5
 8008832:	42bb      	cmp	r3, r7
 8008834:	460d      	mov	r5, r1
 8008836:	d9f4      	bls.n	8008822 <_printf_i+0x112>
 8008838:	2b08      	cmp	r3, #8
 800883a:	d10b      	bne.n	8008854 <_printf_i+0x144>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	07df      	lsls	r7, r3, #31
 8008840:	d508      	bpl.n	8008854 <_printf_i+0x144>
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	6861      	ldr	r1, [r4, #4]
 8008846:	4299      	cmp	r1, r3
 8008848:	bfde      	ittt	le
 800884a:	2330      	movle	r3, #48	@ 0x30
 800884c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008850:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008854:	1b92      	subs	r2, r2, r6
 8008856:	6122      	str	r2, [r4, #16]
 8008858:	f8cd a000 	str.w	sl, [sp]
 800885c:	464b      	mov	r3, r9
 800885e:	aa03      	add	r2, sp, #12
 8008860:	4621      	mov	r1, r4
 8008862:	4640      	mov	r0, r8
 8008864:	f7ff fee6 	bl	8008634 <_printf_common>
 8008868:	3001      	adds	r0, #1
 800886a:	d14a      	bne.n	8008902 <_printf_i+0x1f2>
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	b004      	add	sp, #16
 8008872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	f043 0320 	orr.w	r3, r3, #32
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	4833      	ldr	r0, [pc, #204]	@ (800894c <_printf_i+0x23c>)
 8008880:	2778      	movs	r7, #120	@ 0x78
 8008882:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	6831      	ldr	r1, [r6, #0]
 800888a:	061f      	lsls	r7, r3, #24
 800888c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008890:	d402      	bmi.n	8008898 <_printf_i+0x188>
 8008892:	065f      	lsls	r7, r3, #25
 8008894:	bf48      	it	mi
 8008896:	b2ad      	uxthmi	r5, r5
 8008898:	6031      	str	r1, [r6, #0]
 800889a:	07d9      	lsls	r1, r3, #31
 800889c:	bf44      	itt	mi
 800889e:	f043 0320 	orrmi.w	r3, r3, #32
 80088a2:	6023      	strmi	r3, [r4, #0]
 80088a4:	b11d      	cbz	r5, 80088ae <_printf_i+0x19e>
 80088a6:	2310      	movs	r3, #16
 80088a8:	e7ac      	b.n	8008804 <_printf_i+0xf4>
 80088aa:	4827      	ldr	r0, [pc, #156]	@ (8008948 <_printf_i+0x238>)
 80088ac:	e7e9      	b.n	8008882 <_printf_i+0x172>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	f023 0320 	bic.w	r3, r3, #32
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	e7f6      	b.n	80088a6 <_printf_i+0x196>
 80088b8:	4616      	mov	r6, r2
 80088ba:	e7bd      	b.n	8008838 <_printf_i+0x128>
 80088bc:	6833      	ldr	r3, [r6, #0]
 80088be:	6825      	ldr	r5, [r4, #0]
 80088c0:	6961      	ldr	r1, [r4, #20]
 80088c2:	1d18      	adds	r0, r3, #4
 80088c4:	6030      	str	r0, [r6, #0]
 80088c6:	062e      	lsls	r6, r5, #24
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	d501      	bpl.n	80088d0 <_printf_i+0x1c0>
 80088cc:	6019      	str	r1, [r3, #0]
 80088ce:	e002      	b.n	80088d6 <_printf_i+0x1c6>
 80088d0:	0668      	lsls	r0, r5, #25
 80088d2:	d5fb      	bpl.n	80088cc <_printf_i+0x1bc>
 80088d4:	8019      	strh	r1, [r3, #0]
 80088d6:	2300      	movs	r3, #0
 80088d8:	6123      	str	r3, [r4, #16]
 80088da:	4616      	mov	r6, r2
 80088dc:	e7bc      	b.n	8008858 <_printf_i+0x148>
 80088de:	6833      	ldr	r3, [r6, #0]
 80088e0:	1d1a      	adds	r2, r3, #4
 80088e2:	6032      	str	r2, [r6, #0]
 80088e4:	681e      	ldr	r6, [r3, #0]
 80088e6:	6862      	ldr	r2, [r4, #4]
 80088e8:	2100      	movs	r1, #0
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7f7 fcb0 	bl	8000250 <memchr>
 80088f0:	b108      	cbz	r0, 80088f6 <_printf_i+0x1e6>
 80088f2:	1b80      	subs	r0, r0, r6
 80088f4:	6060      	str	r0, [r4, #4]
 80088f6:	6863      	ldr	r3, [r4, #4]
 80088f8:	6123      	str	r3, [r4, #16]
 80088fa:	2300      	movs	r3, #0
 80088fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008900:	e7aa      	b.n	8008858 <_printf_i+0x148>
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	4632      	mov	r2, r6
 8008906:	4649      	mov	r1, r9
 8008908:	4640      	mov	r0, r8
 800890a:	47d0      	blx	sl
 800890c:	3001      	adds	r0, #1
 800890e:	d0ad      	beq.n	800886c <_printf_i+0x15c>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	079b      	lsls	r3, r3, #30
 8008914:	d413      	bmi.n	800893e <_printf_i+0x22e>
 8008916:	68e0      	ldr	r0, [r4, #12]
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	4298      	cmp	r0, r3
 800891c:	bfb8      	it	lt
 800891e:	4618      	movlt	r0, r3
 8008920:	e7a6      	b.n	8008870 <_printf_i+0x160>
 8008922:	2301      	movs	r3, #1
 8008924:	4632      	mov	r2, r6
 8008926:	4649      	mov	r1, r9
 8008928:	4640      	mov	r0, r8
 800892a:	47d0      	blx	sl
 800892c:	3001      	adds	r0, #1
 800892e:	d09d      	beq.n	800886c <_printf_i+0x15c>
 8008930:	3501      	adds	r5, #1
 8008932:	68e3      	ldr	r3, [r4, #12]
 8008934:	9903      	ldr	r1, [sp, #12]
 8008936:	1a5b      	subs	r3, r3, r1
 8008938:	42ab      	cmp	r3, r5
 800893a:	dcf2      	bgt.n	8008922 <_printf_i+0x212>
 800893c:	e7eb      	b.n	8008916 <_printf_i+0x206>
 800893e:	2500      	movs	r5, #0
 8008940:	f104 0619 	add.w	r6, r4, #25
 8008944:	e7f5      	b.n	8008932 <_printf_i+0x222>
 8008946:	bf00      	nop
 8008948:	080099b0 	.word	0x080099b0
 800894c:	080099c1 	.word	0x080099c1

08008950 <__sflush_r>:
 8008950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008958:	0716      	lsls	r6, r2, #28
 800895a:	4605      	mov	r5, r0
 800895c:	460c      	mov	r4, r1
 800895e:	d454      	bmi.n	8008a0a <__sflush_r+0xba>
 8008960:	684b      	ldr	r3, [r1, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	dc02      	bgt.n	800896c <__sflush_r+0x1c>
 8008966:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008968:	2b00      	cmp	r3, #0
 800896a:	dd48      	ble.n	80089fe <__sflush_r+0xae>
 800896c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800896e:	2e00      	cmp	r6, #0
 8008970:	d045      	beq.n	80089fe <__sflush_r+0xae>
 8008972:	2300      	movs	r3, #0
 8008974:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008978:	682f      	ldr	r7, [r5, #0]
 800897a:	6a21      	ldr	r1, [r4, #32]
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	d030      	beq.n	80089e2 <__sflush_r+0x92>
 8008980:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	0759      	lsls	r1, r3, #29
 8008986:	d505      	bpl.n	8008994 <__sflush_r+0x44>
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	1ad2      	subs	r2, r2, r3
 800898c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800898e:	b10b      	cbz	r3, 8008994 <__sflush_r+0x44>
 8008990:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008992:	1ad2      	subs	r2, r2, r3
 8008994:	2300      	movs	r3, #0
 8008996:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008998:	6a21      	ldr	r1, [r4, #32]
 800899a:	4628      	mov	r0, r5
 800899c:	47b0      	blx	r6
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	d106      	bne.n	80089b2 <__sflush_r+0x62>
 80089a4:	6829      	ldr	r1, [r5, #0]
 80089a6:	291d      	cmp	r1, #29
 80089a8:	d82b      	bhi.n	8008a02 <__sflush_r+0xb2>
 80089aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008a54 <__sflush_r+0x104>)
 80089ac:	410a      	asrs	r2, r1
 80089ae:	07d6      	lsls	r6, r2, #31
 80089b0:	d427      	bmi.n	8008a02 <__sflush_r+0xb2>
 80089b2:	2200      	movs	r2, #0
 80089b4:	6062      	str	r2, [r4, #4]
 80089b6:	04d9      	lsls	r1, r3, #19
 80089b8:	6922      	ldr	r2, [r4, #16]
 80089ba:	6022      	str	r2, [r4, #0]
 80089bc:	d504      	bpl.n	80089c8 <__sflush_r+0x78>
 80089be:	1c42      	adds	r2, r0, #1
 80089c0:	d101      	bne.n	80089c6 <__sflush_r+0x76>
 80089c2:	682b      	ldr	r3, [r5, #0]
 80089c4:	b903      	cbnz	r3, 80089c8 <__sflush_r+0x78>
 80089c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80089c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ca:	602f      	str	r7, [r5, #0]
 80089cc:	b1b9      	cbz	r1, 80089fe <__sflush_r+0xae>
 80089ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089d2:	4299      	cmp	r1, r3
 80089d4:	d002      	beq.n	80089dc <__sflush_r+0x8c>
 80089d6:	4628      	mov	r0, r5
 80089d8:	f7ff fbd4 	bl	8008184 <_free_r>
 80089dc:	2300      	movs	r3, #0
 80089de:	6363      	str	r3, [r4, #52]	@ 0x34
 80089e0:	e00d      	b.n	80089fe <__sflush_r+0xae>
 80089e2:	2301      	movs	r3, #1
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b0      	blx	r6
 80089e8:	4602      	mov	r2, r0
 80089ea:	1c50      	adds	r0, r2, #1
 80089ec:	d1c9      	bne.n	8008982 <__sflush_r+0x32>
 80089ee:	682b      	ldr	r3, [r5, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0c6      	beq.n	8008982 <__sflush_r+0x32>
 80089f4:	2b1d      	cmp	r3, #29
 80089f6:	d001      	beq.n	80089fc <__sflush_r+0xac>
 80089f8:	2b16      	cmp	r3, #22
 80089fa:	d11e      	bne.n	8008a3a <__sflush_r+0xea>
 80089fc:	602f      	str	r7, [r5, #0]
 80089fe:	2000      	movs	r0, #0
 8008a00:	e022      	b.n	8008a48 <__sflush_r+0xf8>
 8008a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a06:	b21b      	sxth	r3, r3
 8008a08:	e01b      	b.n	8008a42 <__sflush_r+0xf2>
 8008a0a:	690f      	ldr	r7, [r1, #16]
 8008a0c:	2f00      	cmp	r7, #0
 8008a0e:	d0f6      	beq.n	80089fe <__sflush_r+0xae>
 8008a10:	0793      	lsls	r3, r2, #30
 8008a12:	680e      	ldr	r6, [r1, #0]
 8008a14:	bf08      	it	eq
 8008a16:	694b      	ldreq	r3, [r1, #20]
 8008a18:	600f      	str	r7, [r1, #0]
 8008a1a:	bf18      	it	ne
 8008a1c:	2300      	movne	r3, #0
 8008a1e:	eba6 0807 	sub.w	r8, r6, r7
 8008a22:	608b      	str	r3, [r1, #8]
 8008a24:	f1b8 0f00 	cmp.w	r8, #0
 8008a28:	dde9      	ble.n	80089fe <__sflush_r+0xae>
 8008a2a:	6a21      	ldr	r1, [r4, #32]
 8008a2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a2e:	4643      	mov	r3, r8
 8008a30:	463a      	mov	r2, r7
 8008a32:	4628      	mov	r0, r5
 8008a34:	47b0      	blx	r6
 8008a36:	2800      	cmp	r0, #0
 8008a38:	dc08      	bgt.n	8008a4c <__sflush_r+0xfc>
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a42:	81a3      	strh	r3, [r4, #12]
 8008a44:	f04f 30ff 	mov.w	r0, #4294967295
 8008a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a4c:	4407      	add	r7, r0
 8008a4e:	eba8 0800 	sub.w	r8, r8, r0
 8008a52:	e7e7      	b.n	8008a24 <__sflush_r+0xd4>
 8008a54:	dfbffffe 	.word	0xdfbffffe

08008a58 <_fflush_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	690b      	ldr	r3, [r1, #16]
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	460c      	mov	r4, r1
 8008a60:	b913      	cbnz	r3, 8008a68 <_fflush_r+0x10>
 8008a62:	2500      	movs	r5, #0
 8008a64:	4628      	mov	r0, r5
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	b118      	cbz	r0, 8008a72 <_fflush_r+0x1a>
 8008a6a:	6a03      	ldr	r3, [r0, #32]
 8008a6c:	b90b      	cbnz	r3, 8008a72 <_fflush_r+0x1a>
 8008a6e:	f7ff fa55 	bl	8007f1c <__sinit>
 8008a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0f3      	beq.n	8008a62 <_fflush_r+0xa>
 8008a7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a7c:	07d0      	lsls	r0, r2, #31
 8008a7e:	d404      	bmi.n	8008a8a <_fflush_r+0x32>
 8008a80:	0599      	lsls	r1, r3, #22
 8008a82:	d402      	bmi.n	8008a8a <_fflush_r+0x32>
 8008a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a86:	f7ff fb5c 	bl	8008142 <__retarget_lock_acquire_recursive>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	f7ff ff5f 	bl	8008950 <__sflush_r>
 8008a92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a94:	07da      	lsls	r2, r3, #31
 8008a96:	4605      	mov	r5, r0
 8008a98:	d4e4      	bmi.n	8008a64 <_fflush_r+0xc>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	059b      	lsls	r3, r3, #22
 8008a9e:	d4e1      	bmi.n	8008a64 <_fflush_r+0xc>
 8008aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aa2:	f7ff fb4f 	bl	8008144 <__retarget_lock_release_recursive>
 8008aa6:	e7dd      	b.n	8008a64 <_fflush_r+0xc>

08008aa8 <fiprintf>:
 8008aa8:	b40e      	push	{r1, r2, r3}
 8008aaa:	b503      	push	{r0, r1, lr}
 8008aac:	4601      	mov	r1, r0
 8008aae:	ab03      	add	r3, sp, #12
 8008ab0:	4805      	ldr	r0, [pc, #20]	@ (8008ac8 <fiprintf+0x20>)
 8008ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab6:	6800      	ldr	r0, [r0, #0]
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	f000 f89d 	bl	8008bf8 <_vfiprintf_r>
 8008abe:	b002      	add	sp, #8
 8008ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ac4:	b003      	add	sp, #12
 8008ac6:	4770      	bx	lr
 8008ac8:	20000074 	.word	0x20000074

08008acc <memmove>:
 8008acc:	4288      	cmp	r0, r1
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	eb01 0402 	add.w	r4, r1, r2
 8008ad4:	d902      	bls.n	8008adc <memmove+0x10>
 8008ad6:	4284      	cmp	r4, r0
 8008ad8:	4623      	mov	r3, r4
 8008ada:	d807      	bhi.n	8008aec <memmove+0x20>
 8008adc:	1e43      	subs	r3, r0, #1
 8008ade:	42a1      	cmp	r1, r4
 8008ae0:	d008      	beq.n	8008af4 <memmove+0x28>
 8008ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aea:	e7f8      	b.n	8008ade <memmove+0x12>
 8008aec:	4402      	add	r2, r0
 8008aee:	4601      	mov	r1, r0
 8008af0:	428a      	cmp	r2, r1
 8008af2:	d100      	bne.n	8008af6 <memmove+0x2a>
 8008af4:	bd10      	pop	{r4, pc}
 8008af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008afa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008afe:	e7f7      	b.n	8008af0 <memmove+0x24>

08008b00 <_sbrk_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4d06      	ldr	r5, [pc, #24]	@ (8008b1c <_sbrk_r+0x1c>)
 8008b04:	2300      	movs	r3, #0
 8008b06:	4604      	mov	r4, r0
 8008b08:	4608      	mov	r0, r1
 8008b0a:	602b      	str	r3, [r5, #0]
 8008b0c:	f7f9 faca 	bl	80020a4 <_sbrk>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_sbrk_r+0x1a>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_sbrk_r+0x1a>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	20000498 	.word	0x20000498

08008b20 <memcpy>:
 8008b20:	440a      	add	r2, r1
 8008b22:	4291      	cmp	r1, r2
 8008b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b28:	d100      	bne.n	8008b2c <memcpy+0xc>
 8008b2a:	4770      	bx	lr
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b36:	4291      	cmp	r1, r2
 8008b38:	d1f9      	bne.n	8008b2e <memcpy+0xe>
 8008b3a:	bd10      	pop	{r4, pc}

08008b3c <abort>:
 8008b3c:	b508      	push	{r3, lr}
 8008b3e:	2006      	movs	r0, #6
 8008b40:	f000 fa2e 	bl	8008fa0 <raise>
 8008b44:	2001      	movs	r0, #1
 8008b46:	f7f9 fa35 	bl	8001fb4 <_exit>

08008b4a <_realloc_r>:
 8008b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4e:	4680      	mov	r8, r0
 8008b50:	4615      	mov	r5, r2
 8008b52:	460c      	mov	r4, r1
 8008b54:	b921      	cbnz	r1, 8008b60 <_realloc_r+0x16>
 8008b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	f7ff bb86 	b.w	800826c <_malloc_r>
 8008b60:	b92a      	cbnz	r2, 8008b6e <_realloc_r+0x24>
 8008b62:	f7ff fb0f 	bl	8008184 <_free_r>
 8008b66:	2400      	movs	r4, #0
 8008b68:	4620      	mov	r0, r4
 8008b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6e:	f000 fa33 	bl	8008fd8 <_malloc_usable_size_r>
 8008b72:	4285      	cmp	r5, r0
 8008b74:	4606      	mov	r6, r0
 8008b76:	d802      	bhi.n	8008b7e <_realloc_r+0x34>
 8008b78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b7c:	d8f4      	bhi.n	8008b68 <_realloc_r+0x1e>
 8008b7e:	4629      	mov	r1, r5
 8008b80:	4640      	mov	r0, r8
 8008b82:	f7ff fb73 	bl	800826c <_malloc_r>
 8008b86:	4607      	mov	r7, r0
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d0ec      	beq.n	8008b66 <_realloc_r+0x1c>
 8008b8c:	42b5      	cmp	r5, r6
 8008b8e:	462a      	mov	r2, r5
 8008b90:	4621      	mov	r1, r4
 8008b92:	bf28      	it	cs
 8008b94:	4632      	movcs	r2, r6
 8008b96:	f7ff ffc3 	bl	8008b20 <memcpy>
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	f7ff faf1 	bl	8008184 <_free_r>
 8008ba2:	463c      	mov	r4, r7
 8008ba4:	e7e0      	b.n	8008b68 <_realloc_r+0x1e>

08008ba6 <__sfputc_r>:
 8008ba6:	6893      	ldr	r3, [r2, #8]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	b410      	push	{r4}
 8008bae:	6093      	str	r3, [r2, #8]
 8008bb0:	da08      	bge.n	8008bc4 <__sfputc_r+0x1e>
 8008bb2:	6994      	ldr	r4, [r2, #24]
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	db01      	blt.n	8008bbc <__sfputc_r+0x16>
 8008bb8:	290a      	cmp	r1, #10
 8008bba:	d103      	bne.n	8008bc4 <__sfputc_r+0x1e>
 8008bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc0:	f000 b932 	b.w	8008e28 <__swbuf_r>
 8008bc4:	6813      	ldr	r3, [r2, #0]
 8008bc6:	1c58      	adds	r0, r3, #1
 8008bc8:	6010      	str	r0, [r2, #0]
 8008bca:	7019      	strb	r1, [r3, #0]
 8008bcc:	4608      	mov	r0, r1
 8008bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <__sfputs_r>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	460f      	mov	r7, r1
 8008bda:	4614      	mov	r4, r2
 8008bdc:	18d5      	adds	r5, r2, r3
 8008bde:	42ac      	cmp	r4, r5
 8008be0:	d101      	bne.n	8008be6 <__sfputs_r+0x12>
 8008be2:	2000      	movs	r0, #0
 8008be4:	e007      	b.n	8008bf6 <__sfputs_r+0x22>
 8008be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bea:	463a      	mov	r2, r7
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7ff ffda 	bl	8008ba6 <__sfputc_r>
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	d1f3      	bne.n	8008bde <__sfputs_r+0xa>
 8008bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bf8 <_vfiprintf_r>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	460d      	mov	r5, r1
 8008bfe:	b09d      	sub	sp, #116	@ 0x74
 8008c00:	4614      	mov	r4, r2
 8008c02:	4698      	mov	r8, r3
 8008c04:	4606      	mov	r6, r0
 8008c06:	b118      	cbz	r0, 8008c10 <_vfiprintf_r+0x18>
 8008c08:	6a03      	ldr	r3, [r0, #32]
 8008c0a:	b90b      	cbnz	r3, 8008c10 <_vfiprintf_r+0x18>
 8008c0c:	f7ff f986 	bl	8007f1c <__sinit>
 8008c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c12:	07d9      	lsls	r1, r3, #31
 8008c14:	d405      	bmi.n	8008c22 <_vfiprintf_r+0x2a>
 8008c16:	89ab      	ldrh	r3, [r5, #12]
 8008c18:	059a      	lsls	r2, r3, #22
 8008c1a:	d402      	bmi.n	8008c22 <_vfiprintf_r+0x2a>
 8008c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c1e:	f7ff fa90 	bl	8008142 <__retarget_lock_acquire_recursive>
 8008c22:	89ab      	ldrh	r3, [r5, #12]
 8008c24:	071b      	lsls	r3, r3, #28
 8008c26:	d501      	bpl.n	8008c2c <_vfiprintf_r+0x34>
 8008c28:	692b      	ldr	r3, [r5, #16]
 8008c2a:	b99b      	cbnz	r3, 8008c54 <_vfiprintf_r+0x5c>
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f000 f938 	bl	8008ea4 <__swsetup_r>
 8008c34:	b170      	cbz	r0, 8008c54 <_vfiprintf_r+0x5c>
 8008c36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c38:	07dc      	lsls	r4, r3, #31
 8008c3a:	d504      	bpl.n	8008c46 <_vfiprintf_r+0x4e>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	b01d      	add	sp, #116	@ 0x74
 8008c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c46:	89ab      	ldrh	r3, [r5, #12]
 8008c48:	0598      	lsls	r0, r3, #22
 8008c4a:	d4f7      	bmi.n	8008c3c <_vfiprintf_r+0x44>
 8008c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c4e:	f7ff fa79 	bl	8008144 <__retarget_lock_release_recursive>
 8008c52:	e7f3      	b.n	8008c3c <_vfiprintf_r+0x44>
 8008c54:	2300      	movs	r3, #0
 8008c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c58:	2320      	movs	r3, #32
 8008c5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c62:	2330      	movs	r3, #48	@ 0x30
 8008c64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e14 <_vfiprintf_r+0x21c>
 8008c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c6c:	f04f 0901 	mov.w	r9, #1
 8008c70:	4623      	mov	r3, r4
 8008c72:	469a      	mov	sl, r3
 8008c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c78:	b10a      	cbz	r2, 8008c7e <_vfiprintf_r+0x86>
 8008c7a:	2a25      	cmp	r2, #37	@ 0x25
 8008c7c:	d1f9      	bne.n	8008c72 <_vfiprintf_r+0x7a>
 8008c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008c82:	d00b      	beq.n	8008c9c <_vfiprintf_r+0xa4>
 8008c84:	465b      	mov	r3, fp
 8008c86:	4622      	mov	r2, r4
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7ff ffa2 	bl	8008bd4 <__sfputs_r>
 8008c90:	3001      	adds	r0, #1
 8008c92:	f000 80a7 	beq.w	8008de4 <_vfiprintf_r+0x1ec>
 8008c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c98:	445a      	add	r2, fp
 8008c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 809f 	beq.w	8008de4 <_vfiprintf_r+0x1ec>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cb0:	f10a 0a01 	add.w	sl, sl, #1
 8008cb4:	9304      	str	r3, [sp, #16]
 8008cb6:	9307      	str	r3, [sp, #28]
 8008cb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cbe:	4654      	mov	r4, sl
 8008cc0:	2205      	movs	r2, #5
 8008cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc6:	4853      	ldr	r0, [pc, #332]	@ (8008e14 <_vfiprintf_r+0x21c>)
 8008cc8:	f7f7 fac2 	bl	8000250 <memchr>
 8008ccc:	9a04      	ldr	r2, [sp, #16]
 8008cce:	b9d8      	cbnz	r0, 8008d08 <_vfiprintf_r+0x110>
 8008cd0:	06d1      	lsls	r1, r2, #27
 8008cd2:	bf44      	itt	mi
 8008cd4:	2320      	movmi	r3, #32
 8008cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cda:	0713      	lsls	r3, r2, #28
 8008cdc:	bf44      	itt	mi
 8008cde:	232b      	movmi	r3, #43	@ 0x2b
 8008ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cea:	d015      	beq.n	8008d18 <_vfiprintf_r+0x120>
 8008cec:	9a07      	ldr	r2, [sp, #28]
 8008cee:	4654      	mov	r4, sl
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	f04f 0c0a 	mov.w	ip, #10
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cfc:	3b30      	subs	r3, #48	@ 0x30
 8008cfe:	2b09      	cmp	r3, #9
 8008d00:	d94b      	bls.n	8008d9a <_vfiprintf_r+0x1a2>
 8008d02:	b1b0      	cbz	r0, 8008d32 <_vfiprintf_r+0x13a>
 8008d04:	9207      	str	r2, [sp, #28]
 8008d06:	e014      	b.n	8008d32 <_vfiprintf_r+0x13a>
 8008d08:	eba0 0308 	sub.w	r3, r0, r8
 8008d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d10:	4313      	orrs	r3, r2
 8008d12:	9304      	str	r3, [sp, #16]
 8008d14:	46a2      	mov	sl, r4
 8008d16:	e7d2      	b.n	8008cbe <_vfiprintf_r+0xc6>
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	1d19      	adds	r1, r3, #4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	9103      	str	r1, [sp, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bfbb      	ittet	lt
 8008d24:	425b      	neglt	r3, r3
 8008d26:	f042 0202 	orrlt.w	r2, r2, #2
 8008d2a:	9307      	strge	r3, [sp, #28]
 8008d2c:	9307      	strlt	r3, [sp, #28]
 8008d2e:	bfb8      	it	lt
 8008d30:	9204      	strlt	r2, [sp, #16]
 8008d32:	7823      	ldrb	r3, [r4, #0]
 8008d34:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d36:	d10a      	bne.n	8008d4e <_vfiprintf_r+0x156>
 8008d38:	7863      	ldrb	r3, [r4, #1]
 8008d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d3c:	d132      	bne.n	8008da4 <_vfiprintf_r+0x1ac>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	1d1a      	adds	r2, r3, #4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	9203      	str	r2, [sp, #12]
 8008d46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d4a:	3402      	adds	r4, #2
 8008d4c:	9305      	str	r3, [sp, #20]
 8008d4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e24 <_vfiprintf_r+0x22c>
 8008d52:	7821      	ldrb	r1, [r4, #0]
 8008d54:	2203      	movs	r2, #3
 8008d56:	4650      	mov	r0, sl
 8008d58:	f7f7 fa7a 	bl	8000250 <memchr>
 8008d5c:	b138      	cbz	r0, 8008d6e <_vfiprintf_r+0x176>
 8008d5e:	9b04      	ldr	r3, [sp, #16]
 8008d60:	eba0 000a 	sub.w	r0, r0, sl
 8008d64:	2240      	movs	r2, #64	@ 0x40
 8008d66:	4082      	lsls	r2, r0
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	3401      	adds	r4, #1
 8008d6c:	9304      	str	r3, [sp, #16]
 8008d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d72:	4829      	ldr	r0, [pc, #164]	@ (8008e18 <_vfiprintf_r+0x220>)
 8008d74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d78:	2206      	movs	r2, #6
 8008d7a:	f7f7 fa69 	bl	8000250 <memchr>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d03f      	beq.n	8008e02 <_vfiprintf_r+0x20a>
 8008d82:	4b26      	ldr	r3, [pc, #152]	@ (8008e1c <_vfiprintf_r+0x224>)
 8008d84:	bb1b      	cbnz	r3, 8008dce <_vfiprintf_r+0x1d6>
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	3307      	adds	r3, #7
 8008d8a:	f023 0307 	bic.w	r3, r3, #7
 8008d8e:	3308      	adds	r3, #8
 8008d90:	9303      	str	r3, [sp, #12]
 8008d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d94:	443b      	add	r3, r7
 8008d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d98:	e76a      	b.n	8008c70 <_vfiprintf_r+0x78>
 8008d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d9e:	460c      	mov	r4, r1
 8008da0:	2001      	movs	r0, #1
 8008da2:	e7a8      	b.n	8008cf6 <_vfiprintf_r+0xfe>
 8008da4:	2300      	movs	r3, #0
 8008da6:	3401      	adds	r4, #1
 8008da8:	9305      	str	r3, [sp, #20]
 8008daa:	4619      	mov	r1, r3
 8008dac:	f04f 0c0a 	mov.w	ip, #10
 8008db0:	4620      	mov	r0, r4
 8008db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008db6:	3a30      	subs	r2, #48	@ 0x30
 8008db8:	2a09      	cmp	r2, #9
 8008dba:	d903      	bls.n	8008dc4 <_vfiprintf_r+0x1cc>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0c6      	beq.n	8008d4e <_vfiprintf_r+0x156>
 8008dc0:	9105      	str	r1, [sp, #20]
 8008dc2:	e7c4      	b.n	8008d4e <_vfiprintf_r+0x156>
 8008dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dc8:	4604      	mov	r4, r0
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e7f0      	b.n	8008db0 <_vfiprintf_r+0x1b8>
 8008dce:	ab03      	add	r3, sp, #12
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4b12      	ldr	r3, [pc, #72]	@ (8008e20 <_vfiprintf_r+0x228>)
 8008dd6:	a904      	add	r1, sp, #16
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f3af 8000 	nop.w
 8008dde:	4607      	mov	r7, r0
 8008de0:	1c78      	adds	r0, r7, #1
 8008de2:	d1d6      	bne.n	8008d92 <_vfiprintf_r+0x19a>
 8008de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008de6:	07d9      	lsls	r1, r3, #31
 8008de8:	d405      	bmi.n	8008df6 <_vfiprintf_r+0x1fe>
 8008dea:	89ab      	ldrh	r3, [r5, #12]
 8008dec:	059a      	lsls	r2, r3, #22
 8008dee:	d402      	bmi.n	8008df6 <_vfiprintf_r+0x1fe>
 8008df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008df2:	f7ff f9a7 	bl	8008144 <__retarget_lock_release_recursive>
 8008df6:	89ab      	ldrh	r3, [r5, #12]
 8008df8:	065b      	lsls	r3, r3, #25
 8008dfa:	f53f af1f 	bmi.w	8008c3c <_vfiprintf_r+0x44>
 8008dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e00:	e71e      	b.n	8008c40 <_vfiprintf_r+0x48>
 8008e02:	ab03      	add	r3, sp, #12
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	462a      	mov	r2, r5
 8008e08:	4b05      	ldr	r3, [pc, #20]	@ (8008e20 <_vfiprintf_r+0x228>)
 8008e0a:	a904      	add	r1, sp, #16
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f7ff fc7f 	bl	8008710 <_printf_i>
 8008e12:	e7e4      	b.n	8008dde <_vfiprintf_r+0x1e6>
 8008e14:	0800999f 	.word	0x0800999f
 8008e18:	080099a9 	.word	0x080099a9
 8008e1c:	00000000 	.word	0x00000000
 8008e20:	08008bd5 	.word	0x08008bd5
 8008e24:	080099a5 	.word	0x080099a5

08008e28 <__swbuf_r>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	460e      	mov	r6, r1
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	4605      	mov	r5, r0
 8008e30:	b118      	cbz	r0, 8008e3a <__swbuf_r+0x12>
 8008e32:	6a03      	ldr	r3, [r0, #32]
 8008e34:	b90b      	cbnz	r3, 8008e3a <__swbuf_r+0x12>
 8008e36:	f7ff f871 	bl	8007f1c <__sinit>
 8008e3a:	69a3      	ldr	r3, [r4, #24]
 8008e3c:	60a3      	str	r3, [r4, #8]
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	071a      	lsls	r2, r3, #28
 8008e42:	d501      	bpl.n	8008e48 <__swbuf_r+0x20>
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	b943      	cbnz	r3, 8008e5a <__swbuf_r+0x32>
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f000 f82a 	bl	8008ea4 <__swsetup_r>
 8008e50:	b118      	cbz	r0, 8008e5a <__swbuf_r+0x32>
 8008e52:	f04f 37ff 	mov.w	r7, #4294967295
 8008e56:	4638      	mov	r0, r7
 8008e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	6922      	ldr	r2, [r4, #16]
 8008e5e:	1a98      	subs	r0, r3, r2
 8008e60:	6963      	ldr	r3, [r4, #20]
 8008e62:	b2f6      	uxtb	r6, r6
 8008e64:	4283      	cmp	r3, r0
 8008e66:	4637      	mov	r7, r6
 8008e68:	dc05      	bgt.n	8008e76 <__swbuf_r+0x4e>
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f7ff fdf3 	bl	8008a58 <_fflush_r>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d1ed      	bne.n	8008e52 <__swbuf_r+0x2a>
 8008e76:	68a3      	ldr	r3, [r4, #8]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	60a3      	str	r3, [r4, #8]
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	6022      	str	r2, [r4, #0]
 8008e82:	701e      	strb	r6, [r3, #0]
 8008e84:	6962      	ldr	r2, [r4, #20]
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d004      	beq.n	8008e96 <__swbuf_r+0x6e>
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	07db      	lsls	r3, r3, #31
 8008e90:	d5e1      	bpl.n	8008e56 <__swbuf_r+0x2e>
 8008e92:	2e0a      	cmp	r6, #10
 8008e94:	d1df      	bne.n	8008e56 <__swbuf_r+0x2e>
 8008e96:	4621      	mov	r1, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f7ff fddd 	bl	8008a58 <_fflush_r>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d0d9      	beq.n	8008e56 <__swbuf_r+0x2e>
 8008ea2:	e7d6      	b.n	8008e52 <__swbuf_r+0x2a>

08008ea4 <__swsetup_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4b29      	ldr	r3, [pc, #164]	@ (8008f4c <__swsetup_r+0xa8>)
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	460c      	mov	r4, r1
 8008eae:	b118      	cbz	r0, 8008eb8 <__swsetup_r+0x14>
 8008eb0:	6a03      	ldr	r3, [r0, #32]
 8008eb2:	b90b      	cbnz	r3, 8008eb8 <__swsetup_r+0x14>
 8008eb4:	f7ff f832 	bl	8007f1c <__sinit>
 8008eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ebc:	0719      	lsls	r1, r3, #28
 8008ebe:	d422      	bmi.n	8008f06 <__swsetup_r+0x62>
 8008ec0:	06da      	lsls	r2, r3, #27
 8008ec2:	d407      	bmi.n	8008ed4 <__swsetup_r+0x30>
 8008ec4:	2209      	movs	r2, #9
 8008ec6:	602a      	str	r2, [r5, #0]
 8008ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	e033      	b.n	8008f3c <__swsetup_r+0x98>
 8008ed4:	0758      	lsls	r0, r3, #29
 8008ed6:	d512      	bpl.n	8008efe <__swsetup_r+0x5a>
 8008ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008eda:	b141      	cbz	r1, 8008eee <__swsetup_r+0x4a>
 8008edc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	d002      	beq.n	8008eea <__swsetup_r+0x46>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f7ff f94d 	bl	8008184 <_free_r>
 8008eea:	2300      	movs	r3, #0
 8008eec:	6363      	str	r3, [r4, #52]	@ 0x34
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ef4:	81a3      	strh	r3, [r4, #12]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	f043 0308 	orr.w	r3, r3, #8
 8008f04:	81a3      	strh	r3, [r4, #12]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	b94b      	cbnz	r3, 8008f1e <__swsetup_r+0x7a>
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f14:	d003      	beq.n	8008f1e <__swsetup_r+0x7a>
 8008f16:	4621      	mov	r1, r4
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f000 f88b 	bl	8009034 <__smakebuf_r>
 8008f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f22:	f013 0201 	ands.w	r2, r3, #1
 8008f26:	d00a      	beq.n	8008f3e <__swsetup_r+0x9a>
 8008f28:	2200      	movs	r2, #0
 8008f2a:	60a2      	str	r2, [r4, #8]
 8008f2c:	6962      	ldr	r2, [r4, #20]
 8008f2e:	4252      	negs	r2, r2
 8008f30:	61a2      	str	r2, [r4, #24]
 8008f32:	6922      	ldr	r2, [r4, #16]
 8008f34:	b942      	cbnz	r2, 8008f48 <__swsetup_r+0xa4>
 8008f36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f3a:	d1c5      	bne.n	8008ec8 <__swsetup_r+0x24>
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	0799      	lsls	r1, r3, #30
 8008f40:	bf58      	it	pl
 8008f42:	6962      	ldrpl	r2, [r4, #20]
 8008f44:	60a2      	str	r2, [r4, #8]
 8008f46:	e7f4      	b.n	8008f32 <__swsetup_r+0x8e>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e7f7      	b.n	8008f3c <__swsetup_r+0x98>
 8008f4c:	20000074 	.word	0x20000074

08008f50 <_raise_r>:
 8008f50:	291f      	cmp	r1, #31
 8008f52:	b538      	push	{r3, r4, r5, lr}
 8008f54:	4605      	mov	r5, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	d904      	bls.n	8008f64 <_raise_r+0x14>
 8008f5a:	2316      	movs	r3, #22
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f66:	b112      	cbz	r2, 8008f6e <_raise_r+0x1e>
 8008f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f6c:	b94b      	cbnz	r3, 8008f82 <_raise_r+0x32>
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f000 f830 	bl	8008fd4 <_getpid_r>
 8008f74:	4622      	mov	r2, r4
 8008f76:	4601      	mov	r1, r0
 8008f78:	4628      	mov	r0, r5
 8008f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f7e:	f000 b817 	b.w	8008fb0 <_kill_r>
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d00a      	beq.n	8008f9c <_raise_r+0x4c>
 8008f86:	1c59      	adds	r1, r3, #1
 8008f88:	d103      	bne.n	8008f92 <_raise_r+0x42>
 8008f8a:	2316      	movs	r3, #22
 8008f8c:	6003      	str	r3, [r0, #0]
 8008f8e:	2001      	movs	r0, #1
 8008f90:	e7e7      	b.n	8008f62 <_raise_r+0x12>
 8008f92:	2100      	movs	r1, #0
 8008f94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f98:	4620      	mov	r0, r4
 8008f9a:	4798      	blx	r3
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e7e0      	b.n	8008f62 <_raise_r+0x12>

08008fa0 <raise>:
 8008fa0:	4b02      	ldr	r3, [pc, #8]	@ (8008fac <raise+0xc>)
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	f7ff bfd3 	b.w	8008f50 <_raise_r>
 8008faa:	bf00      	nop
 8008fac:	20000074 	.word	0x20000074

08008fb0 <_kill_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4d07      	ldr	r5, [pc, #28]	@ (8008fd0 <_kill_r+0x20>)
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4608      	mov	r0, r1
 8008fba:	4611      	mov	r1, r2
 8008fbc:	602b      	str	r3, [r5, #0]
 8008fbe:	f7f8 ffe9 	bl	8001f94 <_kill>
 8008fc2:	1c43      	adds	r3, r0, #1
 8008fc4:	d102      	bne.n	8008fcc <_kill_r+0x1c>
 8008fc6:	682b      	ldr	r3, [r5, #0]
 8008fc8:	b103      	cbz	r3, 8008fcc <_kill_r+0x1c>
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	bd38      	pop	{r3, r4, r5, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000498 	.word	0x20000498

08008fd4 <_getpid_r>:
 8008fd4:	f7f8 bfd6 	b.w	8001f84 <_getpid>

08008fd8 <_malloc_usable_size_r>:
 8008fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fdc:	1f18      	subs	r0, r3, #4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bfbc      	itt	lt
 8008fe2:	580b      	ldrlt	r3, [r1, r0]
 8008fe4:	18c0      	addlt	r0, r0, r3
 8008fe6:	4770      	bx	lr

08008fe8 <__swhatbuf_r>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	460c      	mov	r4, r1
 8008fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff0:	2900      	cmp	r1, #0
 8008ff2:	b096      	sub	sp, #88	@ 0x58
 8008ff4:	4615      	mov	r5, r2
 8008ff6:	461e      	mov	r6, r3
 8008ff8:	da0d      	bge.n	8009016 <__swhatbuf_r+0x2e>
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009000:	f04f 0100 	mov.w	r1, #0
 8009004:	bf14      	ite	ne
 8009006:	2340      	movne	r3, #64	@ 0x40
 8009008:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800900c:	2000      	movs	r0, #0
 800900e:	6031      	str	r1, [r6, #0]
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	b016      	add	sp, #88	@ 0x58
 8009014:	bd70      	pop	{r4, r5, r6, pc}
 8009016:	466a      	mov	r2, sp
 8009018:	f000 f848 	bl	80090ac <_fstat_r>
 800901c:	2800      	cmp	r0, #0
 800901e:	dbec      	blt.n	8008ffa <__swhatbuf_r+0x12>
 8009020:	9901      	ldr	r1, [sp, #4]
 8009022:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009026:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800902a:	4259      	negs	r1, r3
 800902c:	4159      	adcs	r1, r3
 800902e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009032:	e7eb      	b.n	800900c <__swhatbuf_r+0x24>

08009034 <__smakebuf_r>:
 8009034:	898b      	ldrh	r3, [r1, #12]
 8009036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009038:	079d      	lsls	r5, r3, #30
 800903a:	4606      	mov	r6, r0
 800903c:	460c      	mov	r4, r1
 800903e:	d507      	bpl.n	8009050 <__smakebuf_r+0x1c>
 8009040:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	2301      	movs	r3, #1
 800904a:	6163      	str	r3, [r4, #20]
 800904c:	b003      	add	sp, #12
 800904e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009050:	ab01      	add	r3, sp, #4
 8009052:	466a      	mov	r2, sp
 8009054:	f7ff ffc8 	bl	8008fe8 <__swhatbuf_r>
 8009058:	9f00      	ldr	r7, [sp, #0]
 800905a:	4605      	mov	r5, r0
 800905c:	4639      	mov	r1, r7
 800905e:	4630      	mov	r0, r6
 8009060:	f7ff f904 	bl	800826c <_malloc_r>
 8009064:	b948      	cbnz	r0, 800907a <__smakebuf_r+0x46>
 8009066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906a:	059a      	lsls	r2, r3, #22
 800906c:	d4ee      	bmi.n	800904c <__smakebuf_r+0x18>
 800906e:	f023 0303 	bic.w	r3, r3, #3
 8009072:	f043 0302 	orr.w	r3, r3, #2
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	e7e2      	b.n	8009040 <__smakebuf_r+0xc>
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	6020      	str	r0, [r4, #0]
 800907e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009082:	81a3      	strh	r3, [r4, #12]
 8009084:	9b01      	ldr	r3, [sp, #4]
 8009086:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800908a:	b15b      	cbz	r3, 80090a4 <__smakebuf_r+0x70>
 800908c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009090:	4630      	mov	r0, r6
 8009092:	f000 f81d 	bl	80090d0 <_isatty_r>
 8009096:	b128      	cbz	r0, 80090a4 <__smakebuf_r+0x70>
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	f023 0303 	bic.w	r3, r3, #3
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	81a3      	strh	r3, [r4, #12]
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	431d      	orrs	r5, r3
 80090a8:	81a5      	strh	r5, [r4, #12]
 80090aa:	e7cf      	b.n	800904c <__smakebuf_r+0x18>

080090ac <_fstat_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4d07      	ldr	r5, [pc, #28]	@ (80090cc <_fstat_r+0x20>)
 80090b0:	2300      	movs	r3, #0
 80090b2:	4604      	mov	r4, r0
 80090b4:	4608      	mov	r0, r1
 80090b6:	4611      	mov	r1, r2
 80090b8:	602b      	str	r3, [r5, #0]
 80090ba:	f7f8 ffcb 	bl	8002054 <_fstat>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d102      	bne.n	80090c8 <_fstat_r+0x1c>
 80090c2:	682b      	ldr	r3, [r5, #0]
 80090c4:	b103      	cbz	r3, 80090c8 <_fstat_r+0x1c>
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	bd38      	pop	{r3, r4, r5, pc}
 80090ca:	bf00      	nop
 80090cc:	20000498 	.word	0x20000498

080090d0 <_isatty_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d06      	ldr	r5, [pc, #24]	@ (80090ec <_isatty_r+0x1c>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4604      	mov	r4, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	f7f8 ffca 	bl	8002074 <_isatty>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_isatty_r+0x1a>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_isatty_r+0x1a>
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	20000498 	.word	0x20000498

080090f0 <_init>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	bf00      	nop
 80090f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f6:	bc08      	pop	{r3}
 80090f8:	469e      	mov	lr, r3
 80090fa:	4770      	bx	lr

080090fc <_fini>:
 80090fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fe:	bf00      	nop
 8009100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009102:	bc08      	pop	{r3}
 8009104:	469e      	mov	lr, r3
 8009106:	4770      	bx	lr
