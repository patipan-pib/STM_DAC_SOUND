
tfplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f8  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080042f0  080042f0  000052f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004310  08004310  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004310  08004310  00005310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004318  08004318  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004318  08004318  00005318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800431c  0800431c  0000531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004320  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  0800432c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800432c  000061dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113e1  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246e  00000000  00000000  0001741b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00019890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b94  00000000  00000000  0001a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028951  00000000  00000000  0001b2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012970  00000000  00000000  00043c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100873  00000000  00000000  000565ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156e20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df4  00000000  00000000  00156e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0015ac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080042d8 	.word	0x080042d8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080042d8 	.word	0x080042d8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <TF_Send_Command>:
#include "main.h"

uint16_t CheckSum;

void TF_Send_Command(uint8_t cmd, uint8_t parameter1, uint8_t parameter2)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	460b      	mov	r3, r1
 8000534:	71bb      	strb	r3, [r7, #6]
 8000536:	4613      	mov	r3, r2
 8000538:	717b      	strb	r3, [r7, #5]
	CheckSum = VERSION + CMD_LEN + cmd + FEEDBACK + parameter1 + parameter2;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	b29a      	uxth	r2, r3
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	b29b      	uxth	r3, r3
 8000542:	4413      	add	r3, r2
 8000544:	b29a      	uxth	r2, r3
 8000546:	797b      	ldrb	r3, [r7, #5]
 8000548:	b29b      	uxth	r3, r3
 800054a:	4413      	add	r3, r2
 800054c:	b29b      	uxth	r3, r3
 800054e:	f203 1305 	addw	r3, r3, #261	@ 0x105
 8000552:	b29a      	uxth	r2, r3
 8000554:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <TF_Send_Command+0x88>)
 8000556:	801a      	strh	r2, [r3, #0]
	CheckSum = 0 - CheckSum;
 8000558:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <TF_Send_Command+0x88>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	425b      	negs	r3, r3
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <TF_Send_Command+0x88>)
 8000562:	801a      	strh	r2, [r3, #0]

	/* Command Packet： START  VER  Length  CMD  Feedback  parameter1  parameter2  CheckSum <2 bytes>  END  */
	uint8_t CommandPacket[10] = {START_BYTE, VERSION, CMD_LEN, cmd, FEEDBACK, parameter1, parameter2, (CheckSum >> 8) & 0xFF, (CheckSum & 0xFF), END_BYTE};
 8000564:	237e      	movs	r3, #126	@ 0x7e
 8000566:	733b      	strb	r3, [r7, #12]
 8000568:	23ff      	movs	r3, #255	@ 0xff
 800056a:	737b      	strb	r3, [r7, #13]
 800056c:	2306      	movs	r3, #6
 800056e:	73bb      	strb	r3, [r7, #14]
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	2300      	movs	r3, #0
 8000576:	743b      	strb	r3, [r7, #16]
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	747b      	strb	r3, [r7, #17]
 800057c:	797b      	ldrb	r3, [r7, #5]
 800057e:	74bb      	strb	r3, [r7, #18]
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <TF_Send_Command+0x88>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	b29b      	uxth	r3, r3
 8000588:	b2db      	uxtb	r3, r3
 800058a:	74fb      	strb	r3, [r7, #19]
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <TF_Send_Command+0x88>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	753b      	strb	r3, [r7, #20]
 8000594:	23ef      	movs	r3, #239	@ 0xef
 8000596:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(TF_UART, CommandPacket, 10, HAL_MAX_DELAY);
 8000598:	f107 010c 	add.w	r1, r7, #12
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	220a      	movs	r2, #10
 80005a2:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <TF_Send_Command+0x8c>)
 80005a4:	f003 f89a 	bl	80036dc <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000028 	.word	0x20000028
 80005b4:	200000c8 	.word	0x200000c8

080005b8 <TF_Init>:

void TF_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	TF_Send_Command(INIT_CMD, 0x00, SOURCE_TF_Card);
 80005bc:	2202      	movs	r2, #2
 80005be:	2100      	movs	r1, #0
 80005c0:	203f      	movs	r0, #63	@ 0x3f
 80005c2:	f7ff ffb1 	bl	8000528 <TF_Send_Command>
	HAL_Delay(1000);
 80005c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ca:	f000 fcb7 	bl	8000f3c <HAL_Delay>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <TF_Play>:

void TF_Play(uint8_t audio_num)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	4603      	mov	r3, r0
 80005da:	71fb      	strb	r3, [r7, #7]
	TF_Send_Command(0x03, 0x00, audio_num);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	461a      	mov	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	2003      	movs	r0, #3
 80005e4:	f7ff ffa0 	bl	8000528 <TF_Send_Command>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <TF_Next>:
{
	TF_Send_Command(0x06, 0x00, volume);
}

void TF_Next(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	TF_Send_Command(0x01, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2001      	movs	r0, #1
 80005fa:	f7ff ff95 	bl	8000528 <TF_Send_Command>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}

08000602 <TF_Previous>:

void TF_Previous(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	af00      	add	r7, sp, #0
	TF_Send_Command(0x02, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2002      	movs	r0, #2
 800060c:	f7ff ff8c 	bl	8000528 <TF_Send_Command>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <TF_Pause>:

void TF_Pause(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	TF_Send_Command(0x0E, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	200e      	movs	r0, #14
 800061e:	f7ff ff83 	bl	8000528 <TF_Send_Command>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}

08000626 <TF_Resume>:

void TF_Resume(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
	TF_Send_Command(0x0D, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	200d      	movs	r0, #13
 8000630:	f7ff ff7a 	bl	8000528 <TF_Send_Command>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <HAL_ADC_ConvCpltCallback>:
void HAL_TIM_PeriodElaspedCallback(TIM_HandleTypeDef *htim) {
	TF_Set_Volume(volume);
	HAL_ADC_Start_IT(&hadc1);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	adc_val = HAL_ADC_GetValue(hadc);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 fecb 	bl	80013dc <HAL_ADC_GetValue>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <HAL_ADC_ConvCpltCallback+0x48>)
 800064a:	6013      	str	r3, [r2, #0]
	volume = adc_val * (30.0 / 4095);
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <HAL_ADC_ConvCpltCallback+0x48>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000658:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8000678 <HAL_ADC_ConvCpltCallback+0x40>
 800065c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000660:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000664:	edc7 7a00 	vstr	s15, [r7]
 8000668:	783b      	ldrb	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x4c>)
 800066e:	701a      	strb	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	1e01e01e 	.word	0x1e01e01e
 800067c:	3f7e01e0 	.word	0x3f7e01e0
 8000680:	2000002c 	.word	0x2000002c
 8000684:	20000030 	.word	0x20000030

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint8_t isPaused =0;
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000692:	f000 fa11 	bl	8000ab8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fbf4 	bl	8000e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f86d 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f9af 	bl	8000a00 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a2:	f000 f8d7 	bl	8000854 <MX_ADC1_Init>
  MX_TIM10_Init();
 80006a6:	f000 f927 	bl	80008f8 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80006aa:	f000 f949 	bl	8000940 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006ae:	f000 f977 	bl	80009a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80006b2:	482c      	ldr	r0, [pc, #176]	@ (8000764 <main+0xdc>)
 80006b4:	f000 fcaa 	bl	800100c <HAL_ADC_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim10);
  TF_Init();
 80006b8:	f7ff ff7e 	bl	80005b8 <TF_Init>
  TF_Play(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ff88 	bl	80005d2 <TF_Play>
  HAL_UART_Transmit(&huart3, (uint8_t*)"test\r\n", 6, 100);
 80006c2:	2364      	movs	r3, #100	@ 0x64
 80006c4:	2206      	movs	r2, #6
 80006c6:	4928      	ldr	r1, [pc, #160]	@ (8000768 <main+0xe0>)
 80006c8:	4828      	ldr	r0, [pc, #160]	@ (800076c <main+0xe4>)
 80006ca:	f003 f807 	bl	80036dc <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_UART_Transmit(&huart3, (uint8_t*)"test\r\n", 6, 100);
 80006ce:	2364      	movs	r3, #100	@ 0x64
 80006d0:	2206      	movs	r2, #6
 80006d2:	4925      	ldr	r1, [pc, #148]	@ (8000768 <main+0xe0>)
 80006d4:	4825      	ldr	r0, [pc, #148]	@ (800076c <main+0xe4>)
 80006d6:	f003 f801 	bl	80036dc <HAL_UART_Transmit>
	  if (HAL_UART_Receive(&huart3, (uint8_t*)&rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY) == HAL_OK)
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	2201      	movs	r2, #1
 80006e0:	4923      	ldr	r1, [pc, #140]	@ (8000770 <main+0xe8>)
 80006e2:	4822      	ldr	r0, [pc, #136]	@ (800076c <main+0xe4>)
 80006e4:	f003 f883 	bl	80037ee <HAL_UART_Receive>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1ef      	bne.n	80006ce <main+0x46>
		  {
			  HAL_UART_Transmit(&huart3, (uint8_t*)&rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	2201      	movs	r2, #1
 80006f4:	491e      	ldr	r1, [pc, #120]	@ (8000770 <main+0xe8>)
 80006f6:	481d      	ldr	r0, [pc, #116]	@ (800076c <main+0xe4>)
 80006f8:	f002 fff0 	bl	80036dc <HAL_UART_Transmit>
			  if (rx_buffer == '1') {
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xe8>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b31      	cmp	r3, #49	@ 0x31
 8000702:	d107      	bne.n	8000714 <main+0x8c>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	481a      	ldr	r0, [pc, #104]	@ (8000774 <main+0xec>)
 800070a:	f001 fc19 	bl	8001f40 <HAL_GPIO_WritePin>
				  TF_Next();
 800070e:	f7ff ff6f 	bl	80005f0 <TF_Next>
 8000712:	e7dc      	b.n	80006ce <main+0x46>
			  } else if (rx_buffer == '2') {
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <main+0xe8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b32      	cmp	r3, #50	@ 0x32
 800071a:	d107      	bne.n	800072c <main+0xa4>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	2180      	movs	r1, #128	@ 0x80
 8000720:	4814      	ldr	r0, [pc, #80]	@ (8000774 <main+0xec>)
 8000722:	f001 fc0d 	bl	8001f40 <HAL_GPIO_WritePin>
				  TF_Previous();
 8000726:	f7ff ff6c 	bl	8000602 <TF_Previous>
 800072a:	e7d0      	b.n	80006ce <main+0x46>
			  } else if (rx_buffer == '3') {
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <main+0xe8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b33      	cmp	r3, #51	@ 0x33
 8000732:	d10c      	bne.n	800074e <main+0xc6>
				  if (isPaused)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d004      	beq.n	8000744 <main+0xbc>
				  {
					  TF_Resume();
 800073a:	f7ff ff74 	bl	8000626 <TF_Resume>
					  isPaused = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]
 8000742:	e7c4      	b.n	80006ce <main+0x46>
				  } else {
					  TF_Pause();
 8000744:	f7ff ff66 	bl	8000614 <TF_Pause>
					  isPaused = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	e7bf      	b.n	80006ce <main+0x46>
				  }
			  } else {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2180      	movs	r1, #128	@ 0x80
 8000752:	4808      	ldr	r0, [pc, #32]	@ (8000774 <main+0xec>)
 8000754:	f001 fbf4 	bl	8001f40 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <main+0xec>)
 800075e:	f001 fbef 	bl	8001f40 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart3, (uint8_t*)"test\r\n", 6, 100);
 8000762:	e7b4      	b.n	80006ce <main+0x46>
 8000764:	20000034 	.word	0x20000034
 8000768:	080042f0 	.word	0x080042f0
 800076c:	20000150 	.word	0x20000150
 8000770:	20000031 	.word	0x20000031
 8000774:	40020400 	.word	0x40020400

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2234      	movs	r2, #52	@ 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fd79 	bl	800427e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	4b2b      	ldr	r3, [pc, #172]	@ (800084c <SystemClock_Config+0xd4>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	4a2a      	ldr	r2, [pc, #168]	@ (800084c <SystemClock_Config+0xd4>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a8:	4b28      	ldr	r3, [pc, #160]	@ (800084c <SystemClock_Config+0xd4>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <SystemClock_Config+0xd8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a25      	ldr	r2, [pc, #148]	@ (8000850 <SystemClock_Config+0xd8>)
 80007ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <SystemClock_Config+0xd8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e0:	2308      	movs	r3, #8
 80007e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007e4:	23d8      	movs	r3, #216	@ 0xd8
 80007e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fc0b 	bl	8002014 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000804:	f000 f984 	bl	8000b10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000808:	f001 fbb4 	bl	8001f74 <HAL_PWREx_EnableOverDrive>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000812:	f000 f97d 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000822:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	2107      	movs	r1, #7
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fe9b 	bl	8002570 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000840:	f000 f966 	bl	8000b10 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3750      	adds	r7, #80	@ 0x50
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <MX_ADC1_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_ADC1_Init+0x98>)
 800086e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000882:	2201      	movs	r2, #1
 8000884:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000896:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <MX_ADC1_Init+0xa0>)
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008b6:	f000 fb65 	bl	8000f84 <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 f926 	bl	8000b10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008c4:	230a      	movs	r3, #10
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008d6:	f000 fda3 	bl	8001420 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e0:	f000 f916 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000034 	.word	0x20000034
 80008f0:	40012000 	.word	0x40012000
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_TIM10_Init+0x40>)
 80008fe:	4a0f      	ldr	r2, [pc, #60]	@ (800093c <MX_TIM10_Init+0x44>)
 8000900:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 41999;
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <MX_TIM10_Init+0x40>)
 8000904:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000908:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_TIM10_Init+0x40>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_TIM10_Init+0x40>)
 8000912:	2263      	movs	r2, #99	@ 0x63
 8000914:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_TIM10_Init+0x40>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_TIM10_Init+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_TIM10_Init+0x40>)
 8000924:	f002 fc32 	bl	800318c <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800092e:	f000 f8ef 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000007c 	.word	0x2000007c
 800093c:	40014400 	.word	0x40014400

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	@ (800099c <MX_USART2_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 800094c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_USART2_UART_Init+0x58>)
 8000984:	f002 fe5c 	bl	8003640 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 f8bf 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000c8 	.word	0x200000c8
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009a6:	4a15      	ldr	r2, [pc, #84]	@ (80009fc <MX_USART3_UART_Init+0x5c>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_USART3_UART_Init+0x58>)
 80009e4:	f002 fe2c 	bl	8003640 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f88f 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000150 	.word	0x20000150
 80009fc:	40004800 	.word	0x40004800

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a24      	ldr	r2, [pc, #144]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a1e      	ldr	r2, [pc, #120]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a64:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <MX_GPIO_Init+0xb0>)
 8000a66:	f001 fa6b 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000a6a:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <MX_GPIO_Init+0xb0>)
 8000a84:	f001 f8b0 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000a88:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000a8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a9e:	f001 f8a3 	bl	8001be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000aca:	f001 f815 	bl	8001af8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ada:	231f      	movs	r3, #31
 8000adc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ade:	2387      	movs	r3, #135	@ 0x87
 8000ae0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aee:	2301      	movs	r3, #1
 8000af0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000afa:	463b      	mov	r3, r7
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f833 	bl	8001b68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b02:	2004      	movs	r0, #4
 8000b04:	f001 f810 	bl	8001b28 <HAL_MPU_Enable>

}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b52:	2005      	movs	r0, #5
 8000b54:	f000 ff8e 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a19      	ldr	r2, [pc, #100]	@ (8000be8 <HAL_ADC_MspInit+0x84>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d12b      	bne.n	8000bde <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_ADC_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	4a18      	ldr	r2, [pc, #96]	@ (8000bec <HAL_ADC_MspInit+0x88>)
 8000b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <HAL_ADC_MspInit+0x88>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <HAL_ADC_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <HAL_ADC_MspInit+0x88>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <HAL_ADC_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <HAL_ADC_MspInit+0x8c>)
 8000bca:	f001 f80d 	bl	8001be8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	2012      	movs	r0, #18
 8000bd4:	f000 ff59 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bd8:	2012      	movs	r0, #18
 8000bda:	f000 ff72 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40012000 	.word	0x40012000
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d113      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <HAL_TIM_Base_MspInit+0x48>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <HAL_TIM_Base_MspInit+0x48>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_TIM_Base_MspInit+0x48>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2103      	movs	r1, #3
 8000c22:	2019      	movs	r0, #25
 8000c24:	f000 ff31 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c28:	2019      	movs	r0, #25
 8000c2a:	f000 ff4a 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40014400 	.word	0x40014400
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0b0      	sub	sp, #192	@ 0xc0
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2290      	movs	r2, #144	@ 0x90
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 fb0c 	bl	800427e <memset>
  if(huart->Instance==USART2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a42      	ldr	r2, [pc, #264]	@ (8000d74 <HAL_UART_MspInit+0x134>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d13b      	bne.n	8000ce8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c70:	2380      	movs	r3, #128	@ 0x80
 8000c72:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fe5d 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c88:	f7ff ff42 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	4a39      	ldr	r2, [pc, #228]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c98:	4b37      	ldr	r3, [pc, #220]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca4:	4b34      	ldr	r3, [pc, #208]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	4a33      	ldr	r2, [pc, #204]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb0:	4b31      	ldr	r3, [pc, #196]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cbc:	2360      	movs	r3, #96	@ 0x60
 8000cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4826      	ldr	r0, [pc, #152]	@ (8000d7c <HAL_UART_MspInit+0x13c>)
 8000ce2:	f000 ff81 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce6:	e041      	b.n	8000d6c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a24      	ldr	r2, [pc, #144]	@ (8000d80 <HAL_UART_MspInit+0x140>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d13c      	bne.n	8000d6c <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fe1b 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000d0c:	f7ff ff00 	bl	8000b10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	4a18      	ldr	r2, [pc, #96]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000d16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1c:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2c:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_UART_MspInit+0x13c>)
 8000d68:	f000 ff3e 	bl	8001be8 <HAL_GPIO_Init>
}
 8000d6c:	bf00      	nop
 8000d6e:	37c0      	adds	r7, #192	@ 0xc0
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40004400 	.word	0x40004400
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	40004800 	.word	0x40004800

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <NMI_Handler+0x4>

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <UsageFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dda:	f000 f88f 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <ADC_IRQHandler+0x10>)
 8000dea:	f000 f9e7 	bl	80011bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000034 	.word	0x20000034

08000df8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dfe:	f002 fa1c 	bl	800323a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000007c 	.word	0x2000007c

08000e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f003 fa17 	bl	8004290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fc11 	bl	8000688 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e74:	08004320 	.word	0x08004320
  ldr r2, =_sbss
 8000e78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e7c:	200001dc 	.word	0x200001dc

08000e80 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <CAN1_RX0_IRQHandler>

08000e82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 fdf4 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f000 f805 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e92:	f7ff fe43 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fe0f 	bl	8001ade <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 fdd7 	bl	8001a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	200001d8 	.word	0x200001d8

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200001d8 	.word	0x200001d8

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008

08000f84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e031      	b.n	8000ffe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d109      	bne.n	8000fb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fdde 	bl	8000b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d116      	bne.n	8000ff0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <HAL_ADC_Init+0x84>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	f043 0202 	orr.w	r2, r3, #2
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fb7a 	bl	80016cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f023 0303 	bic.w	r3, r3, #3
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fee:	e001      	b.n	8000ff4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	ffffeefd 	.word	0xffffeefd

0800100c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Start_IT+0x1a>
 8001022:	2302      	movs	r3, #2
 8001024:	e0b5      	b.n	8001192 <HAL_ADC_Start_IT+0x186>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b01      	cmp	r3, #1
 800103a:	d018      	beq.n	800106e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800104c:	4b54      	ldr	r3, [pc, #336]	@ (80011a0 <HAL_ADC_Start_IT+0x194>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a54      	ldr	r2, [pc, #336]	@ (80011a4 <HAL_ADC_Start_IT+0x198>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	0c9a      	lsrs	r2, r3, #18
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001060:	e002      	b.n	8001068 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3b01      	subs	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f9      	bne.n	8001062 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b01      	cmp	r3, #1
 800107a:	d17d      	bne.n	8001178 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001080:	4b49      	ldr	r3, [pc, #292]	@ (80011a8 <HAL_ADC_Start_IT+0x19c>)
 8001082:	4013      	ands	r3, r2
 8001084:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010b6:	d106      	bne.n	80010c6 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010bc:	f023 0206 	bic.w	r2, r3, #6
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80010c4:	e002      	b.n	80010cc <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010dc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6859      	ldr	r1, [r3, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <HAL_ADC_Start_IT+0x1a0>)
 80010ea:	430b      	orrs	r3, r1
 80010ec:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80010ee:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <HAL_ADC_Start_IT+0x1a4>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10f      	bne.n	800111a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d143      	bne.n	8001190 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	e03a      	b.n	8001190 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a25      	ldr	r2, [pc, #148]	@ (80011b4 <HAL_ADC_Start_IT+0x1a8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d10e      	bne.n	8001142 <HAL_ADC_Start_IT+0x136>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d107      	bne.n	8001142 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001140:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001142:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <HAL_ADC_Start_IT+0x1a4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	d120      	bne.n	8001190 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_ADC_Start_IT+0x1ac>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d11b      	bne.n	8001190 <HAL_ADC_Start_IT+0x184>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d114      	bne.n	8001190 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	e00b      	b.n	8001190 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	f043 0210 	orr.w	r2, r3, #16
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001188:	f043 0201 	orr.w	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83
 80011a8:	fffff8fe 	.word	0xfffff8fe
 80011ac:	04000020 	.word	0x04000020
 80011b0:	40012300 	.word	0x40012300
 80011b4:	40012000 	.word	0x40012000
 80011b8:	40012200 	.word	0x40012200

080011bc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d049      	beq.n	8001286 <HAL_ADC_IRQHandler+0xca>
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d046      	beq.n	8001286 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	d105      	bne.n	8001210 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d12b      	bne.n	8001276 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001222:	2b00      	cmp	r3, #0
 8001224:	d127      	bne.n	8001276 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800123e:	2b00      	cmp	r3, #0
 8001240:	d119      	bne.n	8001276 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0220 	bic.w	r2, r2, #32
 8001250:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d105      	bne.n	8001276 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f043 0201 	orr.w	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff f9de 	bl	8000638 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f06f 0212 	mvn.w	r2, #18
 8001284:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001294:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d057      	beq.n	800134c <HAL_ADC_IRQHandler+0x190>
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d054      	beq.n	800134c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d139      	bne.n	800133c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12b      	bne.n	800133c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d124      	bne.n	800133c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d11d      	bne.n	800133c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001304:	2b00      	cmp	r3, #0
 8001306:	d119      	bne.n	800133c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001316:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f043 0201 	orr.w	r2, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 fabf 	bl	80018c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f06f 020c 	mvn.w	r2, #12
 800134a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800135a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d017      	beq.n	8001392 <HAL_ADC_IRQHandler+0x1d6>
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d014      	beq.n	8001392 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10d      	bne.n	8001392 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f837 	bl	80013f6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0201 	mvn.w	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013a0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d015      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x218>
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d012      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	f043 0202 	orr.w	r2, r3, #2
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f06f 0220 	mvn.w	r2, #32
 80013c2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f820 	bl	800140a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f06f 0220 	mvn.w	r2, #32
 80013d2:	601a      	str	r2, [r3, #0]
  }
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1c>
 8001438:	2302      	movs	r3, #2
 800143a:	e136      	b.n	80016aa <HAL_ADC_ConfigChannel+0x28a>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b09      	cmp	r3, #9
 800144a:	d93a      	bls.n	80014c2 <HAL_ADC_ConfigChannel+0xa2>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001454:	d035      	beq.n	80014c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68d9      	ldr	r1, [r3, #12]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	3b1e      	subs	r3, #30
 800146c:	2207      	movs	r2, #7
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a8d      	ldr	r2, [pc, #564]	@ (80016b8 <HAL_ADC_ConfigChannel+0x298>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d10a      	bne.n	800149c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68d9      	ldr	r1, [r3, #12]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	061a      	lsls	r2, r3, #24
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800149a:	e035      	b.n	8001508 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68d9      	ldr	r1, [r3, #12]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4403      	add	r3, r0
 80014b4:	3b1e      	subs	r3, #30
 80014b6:	409a      	lsls	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c0:	e022      	b.n	8001508 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6919      	ldr	r1, [r3, #16]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43da      	mvns	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	400a      	ands	r2, r1
 80014e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6919      	ldr	r1, [r3, #16]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4403      	add	r3, r0
 80014fe:	409a      	lsls	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b06      	cmp	r3, #6
 800150e:	d824      	bhi.n	800155a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b05      	subs	r3, #5
 8001522:	221f      	movs	r2, #31
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43da      	mvns	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	400a      	ands	r2, r1
 8001530:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3b05      	subs	r3, #5
 800154c:	fa00 f203 	lsl.w	r2, r0, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34
 8001558:	e04c      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d824      	bhi.n	80015ac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3b23      	subs	r3, #35	@ 0x23
 8001574:	221f      	movs	r2, #31
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	400a      	ands	r2, r1
 8001582:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3b23      	subs	r3, #35	@ 0x23
 800159e:	fa00 f203 	lsl.w	r2, r0, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80015aa:	e023      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b41      	subs	r3, #65	@ 0x41
 80015be:	221f      	movs	r2, #31
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43da      	mvns	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	400a      	ands	r2, r1
 80015cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	3b41      	subs	r3, #65	@ 0x41
 80015e8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a30      	ldr	r2, [pc, #192]	@ (80016bc <HAL_ADC_ConfigChannel+0x29c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10a      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1f4>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001606:	d105      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001608:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a2c      	ldr	r2, [pc, #176]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800160e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001612:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a28      	ldr	r2, [pc, #160]	@ (80016bc <HAL_ADC_ConfigChannel+0x29c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d10f      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b12      	cmp	r3, #18
 8001624:	d10b      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001626:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4a25      	ldr	r2, [pc, #148]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800162c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001630:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001632:	4b23      	ldr	r3, [pc, #140]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4a22      	ldr	r2, [pc, #136]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800163c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1e      	ldr	r2, [pc, #120]	@ (80016bc <HAL_ADC_ConfigChannel+0x29c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d12b      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x280>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1a      	ldr	r2, [pc, #104]	@ (80016b8 <HAL_ADC_ConfigChannel+0x298>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d003      	beq.n	800165a <HAL_ADC_ConfigChannel+0x23a>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b11      	cmp	r3, #17
 8001658:	d122      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a18      	ldr	r2, [pc, #96]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001660:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001664:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800166c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001670:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <HAL_ADC_ConfigChannel+0x298>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d111      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_ADC_ConfigChannel+0x2a4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a11      	ldr	r2, [pc, #68]	@ (80016c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0c9a      	lsrs	r2, r3, #18
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001692:	e002      	b.n	800169a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3b01      	subs	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f9      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	10000012 	.word	0x10000012
 80016bc:	40012000 	.word	0x40012000
 80016c0:	40012300 	.word	0x40012300
 80016c4:	20000000 	.word	0x20000000
 80016c8:	431bde83 	.word	0x431bde83

080016cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80016d4:	4b78      	ldr	r3, [pc, #480]	@ (80018b8 <ADC_Init+0x1ec>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a77      	ldr	r2, [pc, #476]	@ (80018b8 <ADC_Init+0x1ec>)
 80016da:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80016de:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016e0:	4b75      	ldr	r3, [pc, #468]	@ (80018b8 <ADC_Init+0x1ec>)
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4973      	ldr	r1, [pc, #460]	@ (80018b8 <ADC_Init+0x1ec>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	021a      	lsls	r2, r3, #8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6899      	ldr	r1, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	4a58      	ldr	r2, [pc, #352]	@ (80018bc <ADC_Init+0x1f0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d022      	beq.n	80017a6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800176e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6899      	ldr	r1, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6899      	ldr	r1, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	e00f      	b.n	80017c6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0202 	bic.w	r2, r2, #2
 80017d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6899      	ldr	r1, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	005a      	lsls	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01b      	beq.n	800182c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001802:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001812:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6859      	ldr	r1, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	3b01      	subs	r3, #1
 8001820:	035a      	lsls	r2, r3, #13
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	e007      	b.n	800183c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800183a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800184a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	3b01      	subs	r3, #1
 8001858:	051a      	lsls	r2, r3, #20
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800187e:	025a      	lsls	r2, r3, #9
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	029a      	lsls	r2, r3, #10
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40012300 	.word	0x40012300
 80018bc:	0f000001 	.word	0x0f000001

080018c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <__NVIC_SetPriorityGrouping+0x40>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <__NVIC_SetPriorityGrouping+0x40>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00
 8001918:	05fa0000 	.word	0x05fa0000

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	@ (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	@ (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	@ (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	@ 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a40:	d301      	bcc.n	8001a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <SysTick_Config+0x40>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f7ff ff8e 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <SysTick_Config+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5e:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <SysTick_Config+0x40>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000e010 	.word	0xe000e010

08001a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff29 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff3e 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff8e 	bl	80019c8 <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5d 	bl	8001974 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff31 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffa2 	bl	8001a30 <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001afc:	f3bf 8f5f 	dmb	sy
}
 8001b00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <HAL_MPU_Disable+0x28>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <HAL_MPU_Disable+0x28>)
 8001b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b0c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_MPU_Disable+0x2c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	e000ed90 	.word	0xe000ed90

08001b28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b30:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <HAL_MPU_Enable+0x38>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <HAL_MPU_Enable+0x3c>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <HAL_MPU_Enable+0x3c>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b46:	f3bf 8f4f 	dsb	sy
}
 8001b4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b4c:	f3bf 8f6f 	isb	sy
}
 8001b50:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed90 	.word	0xe000ed90
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	785a      	ldrb	r2, [r3, #1]
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	4a19      	ldr	r2, [pc, #100]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b84:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7b1b      	ldrb	r3, [r3, #12]
 8001b90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7adb      	ldrb	r3, [r3, #11]
 8001b96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7a9b      	ldrb	r3, [r3, #10]
 8001b9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ba0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7b5b      	ldrb	r3, [r3, #13]
 8001ba6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ba8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7b9b      	ldrb	r3, [r3, #14]
 8001bae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7bdb      	ldrb	r3, [r3, #15]
 8001bb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7a5b      	ldrb	r3, [r3, #9]
 8001bbe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7a1b      	ldrb	r3, [r3, #8]
 8001bc6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bc8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bd2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bd4:	6113      	str	r3, [r2, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed90 	.word	0xe000ed90

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e175      	b.n	8001ef4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f040 8164 	bne.w	8001eee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d005      	beq.n	8001c3e <HAL_GPIO_Init+0x56>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d130      	bne.n	8001ca0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 0201 	and.w	r2, r3, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d017      	beq.n	8001cdc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d123      	bne.n	8001d30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	69b9      	ldr	r1, [r7, #24]
 8001d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80be 	beq.w	8001eee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	4b66      	ldr	r3, [pc, #408]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a65      	ldr	r2, [pc, #404]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b63      	ldr	r3, [pc, #396]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d8a:	4a61      	ldr	r2, [pc, #388]	@ (8001f10 <HAL_GPIO_Init+0x328>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a58      	ldr	r2, [pc, #352]	@ (8001f14 <HAL_GPIO_Init+0x32c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d037      	beq.n	8001e26 <HAL_GPIO_Init+0x23e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a57      	ldr	r2, [pc, #348]	@ (8001f18 <HAL_GPIO_Init+0x330>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d031      	beq.n	8001e22 <HAL_GPIO_Init+0x23a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a56      	ldr	r2, [pc, #344]	@ (8001f1c <HAL_GPIO_Init+0x334>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d02b      	beq.n	8001e1e <HAL_GPIO_Init+0x236>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a55      	ldr	r2, [pc, #340]	@ (8001f20 <HAL_GPIO_Init+0x338>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d025      	beq.n	8001e1a <HAL_GPIO_Init+0x232>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a54      	ldr	r2, [pc, #336]	@ (8001f24 <HAL_GPIO_Init+0x33c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01f      	beq.n	8001e16 <HAL_GPIO_Init+0x22e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a53      	ldr	r2, [pc, #332]	@ (8001f28 <HAL_GPIO_Init+0x340>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <HAL_GPIO_Init+0x22a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a52      	ldr	r2, [pc, #328]	@ (8001f2c <HAL_GPIO_Init+0x344>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x226>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a51      	ldr	r2, [pc, #324]	@ (8001f30 <HAL_GPIO_Init+0x348>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x222>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a50      	ldr	r2, [pc, #320]	@ (8001f34 <HAL_GPIO_Init+0x34c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x21e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4f      	ldr	r2, [pc, #316]	@ (8001f38 <HAL_GPIO_Init+0x350>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x21a>
 8001dfe:	2309      	movs	r3, #9
 8001e00:	e012      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e02:	230a      	movs	r3, #10
 8001e04:	e010      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e06:	2308      	movs	r3, #8
 8001e08:	e00e      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e00c      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e0e:	2306      	movs	r3, #6
 8001e10:	e00a      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e12:	2305      	movs	r3, #5
 8001e14:	e008      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e16:	2304      	movs	r3, #4
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e004      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e26:	2300      	movs	r3, #0
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f002 0203 	and.w	r2, r2, #3
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	4093      	lsls	r3, r2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e38:	4935      	ldr	r1, [pc, #212]	@ (8001f10 <HAL_GPIO_Init+0x328>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e46:	4b3d      	ldr	r3, [pc, #244]	@ (8001f3c <HAL_GPIO_Init+0x354>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6a:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <HAL_GPIO_Init+0x354>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e70:	4b32      	ldr	r3, [pc, #200]	@ (8001f3c <HAL_GPIO_Init+0x354>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e94:	4a29      	ldr	r2, [pc, #164]	@ (8001f3c <HAL_GPIO_Init+0x354>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e9a:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <HAL_GPIO_Init+0x354>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <HAL_GPIO_Init+0x354>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <HAL_GPIO_Init+0x354>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee8:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <HAL_GPIO_Init+0x354>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f67f ae86 	bls.w	8001c08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3724      	adds	r7, #36	@ 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40021400 	.word	0x40021400
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40021c00 	.word	0x40021c00
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40022400 	.word	0x40022400
 8001f3c:	40013c00 	.word	0x40013c00

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	4b23      	ldr	r3, [pc, #140]	@ (800200c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a22      	ldr	r2, [pc, #136]	@ (800200c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f96:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002010 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa2:	f7fe ffbf 	bl	8000f24 <HAL_GetTick>
 8001fa6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fa8:	e009      	b.n	8001fbe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001faa:	f7fe ffbb 	bl	8000f24 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fb8:	d901      	bls.n	8001fbe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e022      	b.n	8002004 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fbe:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fca:	d1ee      	bne.n	8001faa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fcc:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8002010 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd8:	f7fe ffa4 	bl	8000f24 <HAL_GetTick>
 8001fdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fde:	e009      	b.n	8001ff4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fe0:	f7fe ffa0 	bl	8000f24 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fee:	d901      	bls.n	8001ff4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e007      	b.n	8002004 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002000:	d1ee      	bne.n	8001fe0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	40007000 	.word	0x40007000

08002014 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e29b      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8087 	beq.w	8002146 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002038:	4b96      	ldr	r3, [pc, #600]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00c      	beq.n	800205e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002044:	4b93      	ldr	r3, [pc, #588]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d112      	bne.n	8002076 <HAL_RCC_OscConfig+0x62>
 8002050:	4b90      	ldr	r3, [pc, #576]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002058:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800205c:	d10b      	bne.n	8002076 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205e:	4b8d      	ldr	r3, [pc, #564]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d06c      	beq.n	8002144 <HAL_RCC_OscConfig+0x130>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d168      	bne.n	8002144 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e275      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x7a>
 8002080:	4b84      	ldr	r3, [pc, #528]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a83      	ldr	r2, [pc, #524]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	e02e      	b.n	80020ec <HAL_RCC_OscConfig+0xd8>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x9c>
 8002096:	4b7f      	ldr	r3, [pc, #508]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7e      	ldr	r2, [pc, #504]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 800209c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a7b      	ldr	r2, [pc, #492]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01d      	b.n	80020ec <HAL_RCC_OscConfig+0xd8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0xc0>
 80020ba:	4b76      	ldr	r3, [pc, #472]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a75      	ldr	r2, [pc, #468]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b73      	ldr	r3, [pc, #460]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a72      	ldr	r2, [pc, #456]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xd8>
 80020d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe ff16 	bl	8000f24 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe ff12 	bl	8000f24 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e229      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b61      	ldr	r3, [pc, #388]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xe8>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe ff02 	bl	8000f24 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7fe fefe 	bl	8000f24 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e215      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b57      	ldr	r3, [pc, #348]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x110>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d069      	beq.n	8002226 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002152:	4b50      	ldr	r3, [pc, #320]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215e:	4b4d      	ldr	r3, [pc, #308]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x190>
 800216a:	4b4a      	ldr	r3, [pc, #296]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	4b47      	ldr	r3, [pc, #284]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x17a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1e9      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b41      	ldr	r3, [pc, #260]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	493d      	ldr	r1, [pc, #244]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	e040      	b.n	8002226 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d023      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ac:	4b39      	ldr	r3, [pc, #228]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a38      	ldr	r2, [pc, #224]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe feb4 	bl	8000f24 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c0:	f7fe feb0 	bl	8000f24 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1c7      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4929      	ldr	r1, [pc, #164]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
 80021f2:	e018      	b.n	8002226 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f4:	4b27      	ldr	r3, [pc, #156]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a26      	ldr	r2, [pc, #152]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fe90 	bl	8000f24 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002208:	f7fe fe8c 	bl	8000f24 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e1a3      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d038      	beq.n	80022a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d019      	beq.n	800226e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223a:	4b16      	ldr	r3, [pc, #88]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 800223c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800223e:	4a15      	ldr	r2, [pc, #84]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002246:	f7fe fe6d 	bl	8000f24 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224e:	f7fe fe69 	bl	8000f24 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e180      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x23a>
 800226c:	e01a      	b.n	80022a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226e:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002272:	4a08      	ldr	r2, [pc, #32]	@ (8002294 <HAL_RCC_OscConfig+0x280>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227a:	f7fe fe53 	bl	8000f24 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002282:	f7fe fe4f 	bl	8000f24 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d903      	bls.n	8002298 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e166      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
 8002294:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	4b92      	ldr	r3, [pc, #584]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 800229a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ee      	bne.n	8002282 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80a4 	beq.w	80023fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b8c      	ldr	r3, [pc, #560]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b89      	ldr	r3, [pc, #548]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	4a88      	ldr	r2, [pc, #544]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ca:	4b86      	ldr	r3, [pc, #536]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022da:	4b83      	ldr	r3, [pc, #524]	@ (80024e8 <HAL_RCC_OscConfig+0x4d4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022e6:	4b80      	ldr	r3, [pc, #512]	@ (80024e8 <HAL_RCC_OscConfig+0x4d4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7f      	ldr	r2, [pc, #508]	@ (80024e8 <HAL_RCC_OscConfig+0x4d4>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fe17 	bl	8000f24 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7fe fe13 	bl	8000f24 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b64      	cmp	r3, #100	@ 0x64
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e12a      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	4b76      	ldr	r3, [pc, #472]	@ (80024e8 <HAL_RCC_OscConfig+0x4d4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x31a>
 8002320:	4b70      	ldr	r3, [pc, #448]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	4a6f      	ldr	r2, [pc, #444]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	@ 0x70
 800232c:	e02d      	b.n	800238a <HAL_RCC_OscConfig+0x376>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x33c>
 8002336:	4b6b      	ldr	r3, [pc, #428]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233a:	4a6a      	ldr	r2, [pc, #424]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	6713      	str	r3, [r2, #112]	@ 0x70
 8002342:	4b68      	ldr	r3, [pc, #416]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002346:	4a67      	ldr	r2, [pc, #412]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	6713      	str	r3, [r2, #112]	@ 0x70
 800234e:	e01c      	b.n	800238a <HAL_RCC_OscConfig+0x376>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d10c      	bne.n	8002372 <HAL_RCC_OscConfig+0x35e>
 8002358:	4b62      	ldr	r3, [pc, #392]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235c:	4a61      	ldr	r2, [pc, #388]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6713      	str	r3, [r2, #112]	@ 0x70
 8002364:	4b5f      	ldr	r3, [pc, #380]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002368:	4a5e      	ldr	r2, [pc, #376]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002370:	e00b      	b.n	800238a <HAL_RCC_OscConfig+0x376>
 8002372:	4b5c      	ldr	r3, [pc, #368]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002376:	4a5b      	ldr	r2, [pc, #364]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6713      	str	r3, [r2, #112]	@ 0x70
 800237e:	4b59      	ldr	r3, [pc, #356]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002382:	4a58      	ldr	r2, [pc, #352]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d015      	beq.n	80023be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7fe fdc7 	bl	8000f24 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fdc3 	bl	8000f24 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0d8      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	4b4c      	ldr	r3, [pc, #304]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ee      	beq.n	800239a <HAL_RCC_OscConfig+0x386>
 80023bc:	e014      	b.n	80023e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023be:	f7fe fdb1 	bl	8000f24 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c4:	e00a      	b.n	80023dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7fe fdad 	bl	8000f24 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0c2      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023dc:	4b41      	ldr	r3, [pc, #260]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ee      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d105      	bne.n	80023fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ee:	4b3d      	ldr	r3, [pc, #244]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a3c      	ldr	r2, [pc, #240]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80ae 	beq.w	8002560 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002404:	4b37      	ldr	r3, [pc, #220]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b08      	cmp	r3, #8
 800240e:	d06d      	beq.n	80024ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d14b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002418:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a31      	ldr	r2, [pc, #196]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 800241e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fd7e 	bl	8000f24 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe fd7a 	bl	8000f24 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e091      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	4b29      	ldr	r3, [pc, #164]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	3b01      	subs	r3, #1
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	071b      	lsls	r3, r3, #28
 8002476:	491b      	ldr	r1, [pc, #108]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800247c:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a18      	ldr	r2, [pc, #96]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe fd4c 	bl	8000f24 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fd48 	bl	8000f24 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e05f      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x47c>
 80024ae:	e057      	b.n	8002560 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0b      	ldr	r2, [pc, #44]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fd32 	bl	8000f24 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fd2e 	bl	8000f24 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e045      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4b0>
 80024e2:	e03d      	b.n	8002560 <HAL_RCC_OscConfig+0x54c>
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024ec:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <HAL_RCC_OscConfig+0x558>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d030      	beq.n	800255c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d129      	bne.n	800255c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d122      	bne.n	800255c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002522:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002524:	4293      	cmp	r3, r2
 8002526:	d119      	bne.n	800255c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	3b01      	subs	r3, #1
 8002536:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d10f      	bne.n	800255c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800

08002570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0d0      	b.n	800272a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b6a      	ldr	r3, [pc, #424]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d910      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b67      	ldr	r3, [pc, #412]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 020f 	bic.w	r2, r3, #15
 800259e:	4965      	ldr	r1, [pc, #404]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a58      	ldr	r2, [pc, #352]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a52      	ldr	r2, [pc, #328]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 80025ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d040      	beq.n	8002694 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d115      	bne.n	8002652 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b41      	ldr	r3, [pc, #260]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e073      	b.n	800272a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	4b3d      	ldr	r3, [pc, #244]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e06b      	b.n	800272a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b39      	ldr	r3, [pc, #228]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4936      	ldr	r1, [pc, #216]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe fc5e 	bl	8000f24 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7fe fc5a 	bl	8000f24 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e053      	b.n	800272a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2d      	ldr	r3, [pc, #180]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b27      	ldr	r3, [pc, #156]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d210      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b24      	ldr	r3, [pc, #144]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 020f 	bic.w	r2, r3, #15
 80026aa:	4922      	ldr	r1, [pc, #136]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ee:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f821 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	@ (800273c <HAL_RCC_ClockConfig+0x1cc>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	@ (8002740 <HAL_RCC_ClockConfig+0x1d0>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <HAL_RCC_ClockConfig+0x1d4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fbba 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	080042f8 	.word	0x080042f8
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800274c:	b090      	sub	sp, #64	@ 0x40
 800274e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	637b      	str	r3, [r7, #52]	@ 0x34
 8002754:	2300      	movs	r3, #0
 8002756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002758:	2300      	movs	r3, #0
 800275a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002760:	4b59      	ldr	r3, [pc, #356]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d00d      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x40>
 800276c:	2b08      	cmp	r3, #8
 800276e:	f200 80a1 	bhi.w	80028b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002776:	2b04      	cmp	r3, #4
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x3a>
 800277a:	e09b      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b53      	ldr	r3, [pc, #332]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x184>)
 800277e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002780:	e09b      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002782:	4b53      	ldr	r3, [pc, #332]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002784:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002786:	e098      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002788:	4b4f      	ldr	r3, [pc, #316]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002790:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002792:	4b4d      	ldr	r3, [pc, #308]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d028      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279e:	4b4a      	ldr	r3, [pc, #296]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	2200      	movs	r2, #0
 80027a6:	623b      	str	r3, [r7, #32]
 80027a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027b0:	2100      	movs	r1, #0
 80027b2:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027b4:	fb03 f201 	mul.w	r2, r3, r1
 80027b8:	2300      	movs	r3, #0
 80027ba:	fb00 f303 	mul.w	r3, r0, r3
 80027be:	4413      	add	r3, r2
 80027c0:	4a43      	ldr	r2, [pc, #268]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027c2:	fba0 1202 	umull	r1, r2, r0, r2
 80027c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027c8:	460a      	mov	r2, r1
 80027ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80027cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ce:	4413      	add	r3, r2
 80027d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d4:	2200      	movs	r2, #0
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	61fa      	str	r2, [r7, #28]
 80027da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80027e2:	f7fd fd29 	bl	8000238 <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4613      	mov	r3, r2
 80027ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027ee:	e053      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f0:	4b35      	ldr	r3, [pc, #212]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	2200      	movs	r2, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	617a      	str	r2, [r7, #20]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002802:	f04f 0b00 	mov.w	fp, #0
 8002806:	4652      	mov	r2, sl
 8002808:	465b      	mov	r3, fp
 800280a:	f04f 0000 	mov.w	r0, #0
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	0159      	lsls	r1, r3, #5
 8002814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002818:	0150      	lsls	r0, r2, #5
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	ebb2 080a 	subs.w	r8, r2, sl
 8002822:	eb63 090b 	sbc.w	r9, r3, fp
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002832:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002836:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800283a:	ebb2 0408 	subs.w	r4, r2, r8
 800283e:	eb63 0509 	sbc.w	r5, r3, r9
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	00eb      	lsls	r3, r5, #3
 800284c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002850:	00e2      	lsls	r2, r4, #3
 8002852:	4614      	mov	r4, r2
 8002854:	461d      	mov	r5, r3
 8002856:	eb14 030a 	adds.w	r3, r4, sl
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	eb45 030b 	adc.w	r3, r5, fp
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286e:	4629      	mov	r1, r5
 8002870:	028b      	lsls	r3, r1, #10
 8002872:	4621      	mov	r1, r4
 8002874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002878:	4621      	mov	r1, r4
 800287a:	028a      	lsls	r2, r1, #10
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002882:	2200      	movs	r2, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	60fa      	str	r2, [r7, #12]
 8002888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800288c:	f7fd fcd4 	bl	8000238 <__aeabi_uldivmod>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4613      	mov	r3, r2
 8002896:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	3301      	adds	r3, #1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80028a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028b2:	e002      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x184>)
 80028b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3740      	adds	r7, #64	@ 0x40
 80028c0:	46bd      	mov	sp, r7
 80028c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	00f42400 	.word	0x00f42400
 80028d0:	017d7840 	.word	0x017d7840

080028d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d8:	4b03      	ldr	r3, [pc, #12]	@ (80028e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000

080028ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028f0:	f7ff fff0 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0a9b      	lsrs	r3, r3, #10
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	@ (8002910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	08004308 	.word	0x08004308

08002914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002918:	f7ff ffdc 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0b5b      	lsrs	r3, r3, #13
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	@ (8002938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08004308 	.word	0x08004308

0800293c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d012      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002964:	4b69      	ldr	r3, [pc, #420]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a68      	ldr	r2, [pc, #416]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800296e:	6093      	str	r3, [r2, #8]
 8002970:	4b66      	ldr	r3, [pc, #408]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002978:	4964      	ldr	r1, [pc, #400]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d017      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002996:	4b5d      	ldr	r3, [pc, #372]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a4:	4959      	ldr	r1, [pc, #356]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029b4:	d101      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d017      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	494a      	ldr	r1, [pc, #296]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029f0:	d101      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 808b 	beq.w	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b3a      	ldr	r3, [pc, #232]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	4a39      	ldr	r2, [pc, #228]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2c:	4b37      	ldr	r3, [pc, #220]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a38:	4b35      	ldr	r3, [pc, #212]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a34      	ldr	r2, [pc, #208]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a44:	f7fe fa6e 	bl	8000f24 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fe fa6a 	bl	8000f24 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e38f      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a6a:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d035      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d02e      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a88:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a96:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002aaa:	4a18      	ldr	r2, [pc, #96]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ab0:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d114      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fa32 	bl	8000f24 <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fa2e 	bl	8000f24 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e351      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ada:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0ee      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002af2:	d111      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b02:	400b      	ands	r3, r1
 8002b04:	4901      	ldr	r1, [pc, #4]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000
 8002b14:	0ffffcff 	.word	0x0ffffcff
 8002b18:	4bac      	ldr	r3, [pc, #688]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4aab      	ldr	r2, [pc, #684]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b22:	6093      	str	r3, [r2, #8]
 8002b24:	4ba9      	ldr	r3, [pc, #676]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	49a6      	ldr	r1, [pc, #664]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d010      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b42:	4ba2      	ldr	r3, [pc, #648]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b48:	4aa0      	ldr	r2, [pc, #640]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b52:	4b9e      	ldr	r3, [pc, #632]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b54:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	499b      	ldr	r1, [pc, #620]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b70:	4b96      	ldr	r3, [pc, #600]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b7e:	4993      	ldr	r1, [pc, #588]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b92:	4b8e      	ldr	r3, [pc, #568]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba0:	498a      	ldr	r1, [pc, #552]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bb4:	4b85      	ldr	r3, [pc, #532]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc2:	4982      	ldr	r1, [pc, #520]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be4:	4979      	ldr	r1, [pc, #484]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bf8:	4b74      	ldr	r3, [pc, #464]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	4971      	ldr	r1, [pc, #452]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	f023 020c 	bic.w	r2, r3, #12
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c28:	4968      	ldr	r1, [pc, #416]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c3c:	4b63      	ldr	r3, [pc, #396]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	4960      	ldr	r1, [pc, #384]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c64:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6c:	4957      	ldr	r1, [pc, #348]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c80:	4b52      	ldr	r3, [pc, #328]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	494f      	ldr	r1, [pc, #316]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	4946      	ldr	r1, [pc, #280]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002cc4:	4b41      	ldr	r3, [pc, #260]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd2:	493e      	ldr	r1, [pc, #248]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ce6:	4b39      	ldr	r3, [pc, #228]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf4:	4935      	ldr	r1, [pc, #212]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d08:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d16:	492d      	ldr	r1, [pc, #180]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d011      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d2a:	4b28      	ldr	r3, [pc, #160]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d38:	4924      	ldr	r1, [pc, #144]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d48:	d101      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d6a:	4b18      	ldr	r3, [pc, #96]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d70:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d78:	4914      	ldr	r1, [pc, #80]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d92:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d9c:	490b      	ldr	r1, [pc, #44]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00f      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002db0:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc0:	4902      	ldr	r1, [pc, #8]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002dc8:	e002      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ddc:	4b8a      	ldr	r3, [pc, #552]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dec:	4986      	ldr	r1, [pc, #536]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e00:	4b81      	ldr	r3, [pc, #516]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e06:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e10:	497d      	ldr	r1, [pc, #500]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d006      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80d6 	beq.w	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e2c:	4b76      	ldr	r3, [pc, #472]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a75      	ldr	r2, [pc, #468]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e38:	f7fe f874 	bl	8000f24 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e40:	f7fe f870 	bl	8000f24 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	@ 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e195      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e52:	4b6d      	ldr	r3, [pc, #436]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d021      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11d      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e72:	4b65      	ldr	r3, [pc, #404]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e80:	4b61      	ldr	r3, [pc, #388]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e86:	0e1b      	lsrs	r3, r3, #24
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	019a      	lsls	r2, r3, #6
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	071b      	lsls	r3, r3, #28
 8002ea6:	4958      	ldr	r1, [pc, #352]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d02e      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed8:	d129      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eda:	4b4b      	ldr	r3, [pc, #300]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ee8:	4b47      	ldr	r3, [pc, #284]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eee:	0f1b      	lsrs	r3, r3, #28
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	019a      	lsls	r2, r3, #6
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	061b      	lsls	r3, r3, #24
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	071b      	lsls	r3, r3, #28
 8002f0e:	493e      	ldr	r1, [pc, #248]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f16:	4b3c      	ldr	r3, [pc, #240]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f1c:	f023 021f 	bic.w	r2, r3, #31
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	3b01      	subs	r3, #1
 8002f26:	4938      	ldr	r1, [pc, #224]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01d      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f3a:	4b33      	ldr	r3, [pc, #204]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f40:	0e1b      	lsrs	r3, r3, #24
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f48:	4b2f      	ldr	r3, [pc, #188]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f4e:	0f1b      	lsrs	r3, r3, #28
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	019a      	lsls	r2, r3, #6
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	431a      	orrs	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	061b      	lsls	r3, r3, #24
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	071b      	lsls	r3, r3, #28
 8002f6e:	4926      	ldr	r1, [pc, #152]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d011      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	019a      	lsls	r2, r3, #6
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	071b      	lsls	r3, r3, #28
 8002f9e:	491a      	ldr	r1, [pc, #104]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fa6:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a17      	ldr	r2, [pc, #92]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb2:	f7fd ffb7 	bl	8000f24 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fba:	f7fd ffb3 	bl	8000f24 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	@ 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0d8      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	f040 80ce 	bne.w	800317c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fe0:	4b09      	ldr	r3, [pc, #36]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a08      	ldr	r2, [pc, #32]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fec:	f7fd ff9a 	bl	8000f24 <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ff2:	e00b      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ff4:	f7fd ff96 	bl	8000f24 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	@ 0x64
 8003000:	d904      	bls.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0bb      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800300c:	4b5e      	ldr	r3, [pc, #376]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003018:	d0ec      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003036:	2b00      	cmp	r3, #0
 8003038:	d02e      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d12a      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003042:	4b51      	ldr	r3, [pc, #324]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003050:	4b4d      	ldr	r3, [pc, #308]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003056:	0f1b      	lsrs	r3, r3, #28
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	019a      	lsls	r2, r3, #6
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	041b      	lsls	r3, r3, #16
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	061b      	lsls	r3, r3, #24
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	071b      	lsls	r3, r3, #28
 8003076:	4944      	ldr	r1, [pc, #272]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800307e:	4b42      	ldr	r3, [pc, #264]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003084:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	493d      	ldr	r1, [pc, #244]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d022      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030ac:	d11d      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ae:	4b36      	ldr	r3, [pc, #216]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b4:	0e1b      	lsrs	r3, r3, #24
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030bc:	4b32      	ldr	r3, [pc, #200]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c2:	0f1b      	lsrs	r3, r3, #28
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	019a      	lsls	r2, r3, #6
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	431a      	orrs	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	071b      	lsls	r3, r3, #28
 80030e2:	4929      	ldr	r1, [pc, #164]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d028      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030f6:	4b24      	ldr	r3, [pc, #144]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fc:	0e1b      	lsrs	r3, r3, #24
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003104:	4b20      	ldr	r3, [pc, #128]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310a:	0c1b      	lsrs	r3, r3, #16
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	019a      	lsls	r2, r3, #6
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	431a      	orrs	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	071b      	lsls	r3, r3, #28
 800312a:	4917      	ldr	r1, [pc, #92]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003132:	4b15      	ldr	r3, [pc, #84]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003138:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003140:	4911      	ldr	r1, [pc, #68]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003148:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0e      	ldr	r2, [pc, #56]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003154:	f7fd fee6 	bl	8000f24 <HAL_GetTick>
 8003158:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800315c:	f7fd fee2 	bl	8000f24 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	@ 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e007      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800317a:	d1ef      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e049      	b.n	8003232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fd1e 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 f96e 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01b      	beq.n	800329e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f06f 0202 	mvn.w	r2, #2
 800326e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f8f3 	bl	8003470 <HAL_TIM_IC_CaptureCallback>
 800328a:	e005      	b.n	8003298 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f8e5 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f8f6 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01b      	beq.n	80032ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f06f 0204 	mvn.w	r2, #4
 80032ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8cd 	bl	8003470 <HAL_TIM_IC_CaptureCallback>
 80032d6:	e005      	b.n	80032e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8bf 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8d0 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01b      	beq.n	8003336 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f06f 0208 	mvn.w	r2, #8
 8003306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2204      	movs	r2, #4
 800330c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f8a7 	bl	8003470 <HAL_TIM_IC_CaptureCallback>
 8003322:	e005      	b.n	8003330 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f899 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8aa 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01b      	beq.n	8003382 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0210 	mvn.w	r2, #16
 8003352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2208      	movs	r2, #8
 8003358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f881 	bl	8003470 <HAL_TIM_IC_CaptureCallback>
 800336e:	e005      	b.n	800337c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f873 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f884 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00c      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f06f 0201 	mvn.w	r2, #1
 800339e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f851 	bl	8003448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d104      	bne.n	80033ba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00c      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80033cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f922 	bl	8003618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f91a 	bl	800362c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f83e 	bl	8003498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00c      	beq.n	8003440 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0220 	mvn.w	r2, #32
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f8e2 	bl	8003604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a46      	ldr	r2, [pc, #280]	@ (80035d8 <TIM_Base_SetConfig+0x12c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d013      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ca:	d00f      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a43      	ldr	r2, [pc, #268]	@ (80035dc <TIM_Base_SetConfig+0x130>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00b      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a42      	ldr	r2, [pc, #264]	@ (80035e0 <TIM_Base_SetConfig+0x134>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d007      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a41      	ldr	r2, [pc, #260]	@ (80035e4 <TIM_Base_SetConfig+0x138>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a40      	ldr	r2, [pc, #256]	@ (80035e8 <TIM_Base_SetConfig+0x13c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a35      	ldr	r2, [pc, #212]	@ (80035d8 <TIM_Base_SetConfig+0x12c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d02b      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350c:	d027      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a32      	ldr	r2, [pc, #200]	@ (80035dc <TIM_Base_SetConfig+0x130>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d023      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a31      	ldr	r2, [pc, #196]	@ (80035e0 <TIM_Base_SetConfig+0x134>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a30      	ldr	r2, [pc, #192]	@ (80035e4 <TIM_Base_SetConfig+0x138>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01b      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2f      	ldr	r2, [pc, #188]	@ (80035e8 <TIM_Base_SetConfig+0x13c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d017      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2e      	ldr	r2, [pc, #184]	@ (80035ec <TIM_Base_SetConfig+0x140>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2d      	ldr	r2, [pc, #180]	@ (80035f0 <TIM_Base_SetConfig+0x144>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00f      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2c      	ldr	r2, [pc, #176]	@ (80035f4 <TIM_Base_SetConfig+0x148>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2b      	ldr	r2, [pc, #172]	@ (80035f8 <TIM_Base_SetConfig+0x14c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2a      	ldr	r2, [pc, #168]	@ (80035fc <TIM_Base_SetConfig+0x150>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a29      	ldr	r2, [pc, #164]	@ (8003600 <TIM_Base_SetConfig+0x154>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d108      	bne.n	8003570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a10      	ldr	r2, [pc, #64]	@ (80035d8 <TIM_Base_SetConfig+0x12c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0xf8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a12      	ldr	r2, [pc, #72]	@ (80035e8 <TIM_Base_SetConfig+0x13c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d103      	bne.n	80035ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d105      	bne.n	80035ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f023 0201 	bic.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	611a      	str	r2, [r3, #16]
  }
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40010000 	.word	0x40010000
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	40010400 	.word	0x40010400
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800
 80035f8:	40001800 	.word	0x40001800
 80035fc:	40001c00 	.word	0x40001c00
 8003600:	40002000 	.word	0x40002000

08003604 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e040      	b.n	80036d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd faec 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	@ 0x24
 800366c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fbde 	bl	8003e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f977 	bl	8003980 <UART_SetConfig>
 8003692:	4603      	mov	r3, r0
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e01b      	b.n	80036d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fc5d 	bl	8003f8c <UART_CheckIdleState>
 80036d2:	4603      	mov	r3, r0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	@ 0x28
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d177      	bne.n	80037e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Transmit+0x24>
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e070      	b.n	80037e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2221      	movs	r2, #33	@ 0x21
 8003710:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003712:	f7fd fc07 	bl	8000f24 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003730:	d108      	bne.n	8003744 <HAL_UART_Transmit+0x68>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	e003      	b.n	800374c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800374c:	e02f      	b.n	80037ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2200      	movs	r2, #0
 8003756:	2180      	movs	r1, #128	@ 0x80
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fcbf 	bl	80040dc <UART_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e03b      	b.n	80037e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003782:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	3302      	adds	r3, #2
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	e007      	b.n	800379c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3301      	adds	r3, #1
 800379a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1c9      	bne.n	800374e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2140      	movs	r1, #64	@ 0x40
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fc89 	bl	80040dc <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e005      	b.n	80037e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b08a      	sub	sp, #40	@ 0x28
 80037f2:	af02      	add	r7, sp, #8
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003804:	2b20      	cmp	r3, #32
 8003806:	f040 80b5 	bne.w	8003974 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_UART_Receive+0x28>
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0ad      	b.n	8003976 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2222      	movs	r2, #34	@ 0x22
 8003826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003830:	f7fd fb78 	bl	8000f24 <HAL_GetTick>
 8003834:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800384e:	d10e      	bne.n	800386e <HAL_UART_Receive+0x80>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <HAL_UART_Receive+0x76>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800385e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003862:	e02d      	b.n	80038c0 <HAL_UART_Receive+0xd2>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	22ff      	movs	r2, #255	@ 0xff
 8003868:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800386c:	e028      	b.n	80038c0 <HAL_UART_Receive+0xd2>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <HAL_UART_Receive+0xa4>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d104      	bne.n	8003888 <HAL_UART_Receive+0x9a>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	22ff      	movs	r2, #255	@ 0xff
 8003882:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003886:	e01b      	b.n	80038c0 <HAL_UART_Receive+0xd2>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	227f      	movs	r2, #127	@ 0x7f
 800388c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003890:	e016      	b.n	80038c0 <HAL_UART_Receive+0xd2>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800389a:	d10d      	bne.n	80038b8 <HAL_UART_Receive+0xca>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <HAL_UART_Receive+0xc0>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	227f      	movs	r2, #127	@ 0x7f
 80038a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038ac:	e008      	b.n	80038c0 <HAL_UART_Receive+0xd2>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	223f      	movs	r2, #63	@ 0x3f
 80038b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038b6:	e003      	b.n	80038c0 <HAL_UART_Receive+0xd2>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80038c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d0:	d108      	bne.n	80038e4 <HAL_UART_Receive+0xf6>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e003      	b.n	80038ec <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80038ec:	e036      	b.n	800395c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2120      	movs	r1, #32
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fbef 	bl	80040dc <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e032      	b.n	8003976 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10c      	bne.n	8003930 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	b29a      	uxth	r2, r3
 800391e:	8a7b      	ldrh	r3, [r7, #18]
 8003920:	4013      	ands	r3, r2
 8003922:	b29a      	uxth	r2, r3
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	3302      	adds	r3, #2
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	e00c      	b.n	800394a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	b2da      	uxtb	r2, r3
 8003938:	8a7b      	ldrh	r3, [r7, #18]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4013      	ands	r3, r2
 800393e:	b2da      	uxtb	r2, r3
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	3301      	adds	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1c2      	bne.n	80038ee <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4ba6      	ldr	r3, [pc, #664]	@ (8003c44 <UART_SetConfig+0x2c4>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a94      	ldr	r2, [pc, #592]	@ (8003c48 <UART_SetConfig+0x2c8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d120      	bne.n	8003a3e <UART_SetConfig+0xbe>
 80039fc:	4b93      	ldr	r3, [pc, #588]	@ (8003c4c <UART_SetConfig+0x2cc>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d816      	bhi.n	8003a38 <UART_SetConfig+0xb8>
 8003a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <UART_SetConfig+0x90>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a2d 	.word	0x08003a2d
 8003a18:	08003a27 	.word	0x08003a27
 8003a1c:	08003a33 	.word	0x08003a33
 8003a20:	2301      	movs	r3, #1
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e150      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a26:	2302      	movs	r3, #2
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e14d      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e14a      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a32:	2308      	movs	r3, #8
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e147      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e144      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a83      	ldr	r2, [pc, #524]	@ (8003c50 <UART_SetConfig+0x2d0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d132      	bne.n	8003aae <UART_SetConfig+0x12e>
 8003a48:	4b80      	ldr	r3, [pc, #512]	@ (8003c4c <UART_SetConfig+0x2cc>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d828      	bhi.n	8003aa8 <UART_SetConfig+0x128>
 8003a56:	a201      	add	r2, pc, #4	@ (adr r2, 8003a5c <UART_SetConfig+0xdc>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003aa9 	.word	0x08003aa9
 8003a64:	08003aa9 	.word	0x08003aa9
 8003a68:	08003aa9 	.word	0x08003aa9
 8003a6c:	08003a9d 	.word	0x08003a9d
 8003a70:	08003aa9 	.word	0x08003aa9
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003aa9 	.word	0x08003aa9
 8003a7c:	08003a97 	.word	0x08003a97
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003aa9 	.word	0x08003aa9
 8003a8c:	08003aa3 	.word	0x08003aa3
 8003a90:	2300      	movs	r3, #0
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e118      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a96:	2302      	movs	r3, #2
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e115      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e112      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e10f      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e10c      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a68      	ldr	r2, [pc, #416]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d120      	bne.n	8003afa <UART_SetConfig+0x17a>
 8003ab8:	4b64      	ldr	r3, [pc, #400]	@ (8003c4c <UART_SetConfig+0x2cc>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ac2:	2b30      	cmp	r3, #48	@ 0x30
 8003ac4:	d013      	beq.n	8003aee <UART_SetConfig+0x16e>
 8003ac6:	2b30      	cmp	r3, #48	@ 0x30
 8003ac8:	d814      	bhi.n	8003af4 <UART_SetConfig+0x174>
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d009      	beq.n	8003ae2 <UART_SetConfig+0x162>
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d810      	bhi.n	8003af4 <UART_SetConfig+0x174>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <UART_SetConfig+0x15c>
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d006      	beq.n	8003ae8 <UART_SetConfig+0x168>
 8003ada:	e00b      	b.n	8003af4 <UART_SetConfig+0x174>
 8003adc:	2300      	movs	r3, #0
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e0f2      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e0ef      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e0ec      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aee:	2308      	movs	r3, #8
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e0e9      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003af4:	2310      	movs	r3, #16
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e0e6      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a56      	ldr	r2, [pc, #344]	@ (8003c58 <UART_SetConfig+0x2d8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d120      	bne.n	8003b46 <UART_SetConfig+0x1c6>
 8003b04:	4b51      	ldr	r3, [pc, #324]	@ (8003c4c <UART_SetConfig+0x2cc>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b10:	d013      	beq.n	8003b3a <UART_SetConfig+0x1ba>
 8003b12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b14:	d814      	bhi.n	8003b40 <UART_SetConfig+0x1c0>
 8003b16:	2b80      	cmp	r3, #128	@ 0x80
 8003b18:	d009      	beq.n	8003b2e <UART_SetConfig+0x1ae>
 8003b1a:	2b80      	cmp	r3, #128	@ 0x80
 8003b1c:	d810      	bhi.n	8003b40 <UART_SetConfig+0x1c0>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <UART_SetConfig+0x1a8>
 8003b22:	2b40      	cmp	r3, #64	@ 0x40
 8003b24:	d006      	beq.n	8003b34 <UART_SetConfig+0x1b4>
 8003b26:	e00b      	b.n	8003b40 <UART_SetConfig+0x1c0>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e0cc      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e0c9      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b34:	2304      	movs	r3, #4
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e0c6      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e0c3      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b40:	2310      	movs	r3, #16
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e0c0      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a44      	ldr	r2, [pc, #272]	@ (8003c5c <UART_SetConfig+0x2dc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d125      	bne.n	8003b9c <UART_SetConfig+0x21c>
 8003b50:	4b3e      	ldr	r3, [pc, #248]	@ (8003c4c <UART_SetConfig+0x2cc>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5e:	d017      	beq.n	8003b90 <UART_SetConfig+0x210>
 8003b60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b64:	d817      	bhi.n	8003b96 <UART_SetConfig+0x216>
 8003b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6a:	d00b      	beq.n	8003b84 <UART_SetConfig+0x204>
 8003b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b70:	d811      	bhi.n	8003b96 <UART_SetConfig+0x216>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <UART_SetConfig+0x1fe>
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b7a:	d006      	beq.n	8003b8a <UART_SetConfig+0x20a>
 8003b7c:	e00b      	b.n	8003b96 <UART_SetConfig+0x216>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e0a1      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b84:	2302      	movs	r3, #2
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e09e      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e09b      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b90:	2308      	movs	r3, #8
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e098      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b96:	2310      	movs	r3, #16
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e095      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8003c60 <UART_SetConfig+0x2e0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d125      	bne.n	8003bf2 <UART_SetConfig+0x272>
 8003ba6:	4b29      	ldr	r3, [pc, #164]	@ (8003c4c <UART_SetConfig+0x2cc>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bb4:	d017      	beq.n	8003be6 <UART_SetConfig+0x266>
 8003bb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bba:	d817      	bhi.n	8003bec <UART_SetConfig+0x26c>
 8003bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc0:	d00b      	beq.n	8003bda <UART_SetConfig+0x25a>
 8003bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc6:	d811      	bhi.n	8003bec <UART_SetConfig+0x26c>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <UART_SetConfig+0x254>
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd0:	d006      	beq.n	8003be0 <UART_SetConfig+0x260>
 8003bd2:	e00b      	b.n	8003bec <UART_SetConfig+0x26c>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e076      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e073      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003be0:	2304      	movs	r3, #4
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e070      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003be6:	2308      	movs	r3, #8
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e06d      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003bec:	2310      	movs	r3, #16
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e06a      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c64 <UART_SetConfig+0x2e4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d138      	bne.n	8003c6e <UART_SetConfig+0x2ee>
 8003bfc:	4b13      	ldr	r3, [pc, #76]	@ (8003c4c <UART_SetConfig+0x2cc>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c0a:	d017      	beq.n	8003c3c <UART_SetConfig+0x2bc>
 8003c0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c10:	d82a      	bhi.n	8003c68 <UART_SetConfig+0x2e8>
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c16:	d00b      	beq.n	8003c30 <UART_SetConfig+0x2b0>
 8003c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c1c:	d824      	bhi.n	8003c68 <UART_SetConfig+0x2e8>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <UART_SetConfig+0x2aa>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c26:	d006      	beq.n	8003c36 <UART_SetConfig+0x2b6>
 8003c28:	e01e      	b.n	8003c68 <UART_SetConfig+0x2e8>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e04b      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c30:	2302      	movs	r3, #2
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e048      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c36:	2304      	movs	r3, #4
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e045      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e042      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c42:	bf00      	nop
 8003c44:	efff69f3 	.word	0xefff69f3
 8003c48:	40011000 	.word	0x40011000
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40004400 	.word	0x40004400
 8003c54:	40004800 	.word	0x40004800
 8003c58:	40004c00 	.word	0x40004c00
 8003c5c:	40005000 	.word	0x40005000
 8003c60:	40011400 	.word	0x40011400
 8003c64:	40007800 	.word	0x40007800
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e02c      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a72      	ldr	r2, [pc, #456]	@ (8003e3c <UART_SetConfig+0x4bc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d125      	bne.n	8003cc4 <UART_SetConfig+0x344>
 8003c78:	4b71      	ldr	r3, [pc, #452]	@ (8003e40 <UART_SetConfig+0x4c0>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c82:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c86:	d017      	beq.n	8003cb8 <UART_SetConfig+0x338>
 8003c88:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c8c:	d817      	bhi.n	8003cbe <UART_SetConfig+0x33e>
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c92:	d00b      	beq.n	8003cac <UART_SetConfig+0x32c>
 8003c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c98:	d811      	bhi.n	8003cbe <UART_SetConfig+0x33e>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <UART_SetConfig+0x326>
 8003c9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ca2:	d006      	beq.n	8003cb2 <UART_SetConfig+0x332>
 8003ca4:	e00b      	b.n	8003cbe <UART_SetConfig+0x33e>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e00d      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cac:	2302      	movs	r3, #2
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e00a      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e007      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e004      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cbe:	2310      	movs	r3, #16
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd0:	d15b      	bne.n	8003d8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cd2:	7ffb      	ldrb	r3, [r7, #31]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d828      	bhi.n	8003d2a <UART_SetConfig+0x3aa>
 8003cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <UART_SetConfig+0x360>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	08003d2b 	.word	0x08003d2b
 8003cf0:	08003d1b 	.word	0x08003d1b
 8003cf4:	08003d2b 	.word	0x08003d2b
 8003cf8:	08003d2b 	.word	0x08003d2b
 8003cfc:	08003d2b 	.word	0x08003d2b
 8003d00:	08003d23 	.word	0x08003d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7fe fdf2 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 8003d08:	61b8      	str	r0, [r7, #24]
        break;
 8003d0a:	e013      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d0c:	f7fe fe02 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 8003d10:	61b8      	str	r0, [r7, #24]
        break;
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b4b      	ldr	r3, [pc, #300]	@ (8003e44 <UART_SetConfig+0x4c4>)
 8003d16:	61bb      	str	r3, [r7, #24]
        break;
 8003d18:	e00c      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fd15 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8003d1e:	61b8      	str	r0, [r7, #24]
        break;
 8003d20:	e008      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d26:	61bb      	str	r3, [r7, #24]
        break;
 8003d28:	e004      	b.n	8003d34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	77bb      	strb	r3, [r7, #30]
        break;
 8003d32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d074      	beq.n	8003e24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b0f      	cmp	r3, #15
 8003d54:	d916      	bls.n	8003d84 <UART_SetConfig+0x404>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d5c:	d212      	bcs.n	8003d84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f023 030f 	bic.w	r3, r3, #15
 8003d66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	89fb      	ldrh	r3, [r7, #14]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	89fa      	ldrh	r2, [r7, #14]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	e04f      	b.n	8003e24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	77bb      	strb	r3, [r7, #30]
 8003d88:	e04c      	b.n	8003e24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d8a:	7ffb      	ldrb	r3, [r7, #31]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d828      	bhi.n	8003de2 <UART_SetConfig+0x462>
 8003d90:	a201      	add	r2, pc, #4	@ (adr r2, 8003d98 <UART_SetConfig+0x418>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	08003dcd 	.word	0x08003dcd
 8003da4:	08003de3 	.word	0x08003de3
 8003da8:	08003dd3 	.word	0x08003dd3
 8003dac:	08003de3 	.word	0x08003de3
 8003db0:	08003de3 	.word	0x08003de3
 8003db4:	08003de3 	.word	0x08003de3
 8003db8:	08003ddb 	.word	0x08003ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dbc:	f7fe fd96 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 8003dc0:	61b8      	str	r0, [r7, #24]
        break;
 8003dc2:	e013      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc4:	f7fe fda6 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 8003dc8:	61b8      	str	r0, [r7, #24]
        break;
 8003dca:	e00f      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <UART_SetConfig+0x4c4>)
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e00c      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7fe fcb9 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8003dd6:	61b8      	str	r0, [r7, #24]
        break;
 8003dd8:	e008      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dde:	61bb      	str	r3, [r7, #24]
        break;
 8003de0:	e004      	b.n	8003dec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dea:	bf00      	nop
    }

    if (pclk != 0U)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d018      	beq.n	8003e24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085a      	lsrs	r2, r3, #1
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b0f      	cmp	r3, #15
 8003e0a:	d909      	bls.n	8003e20 <UART_SetConfig+0x4a0>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e12:	d205      	bcs.n	8003e20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	e001      	b.n	8003e24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40007c00 	.word	0x40007c00
 8003e40:	40023800 	.word	0x40023800
 8003e44:	00f42400 	.word	0x00f42400

08003e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f46:	d10a      	bne.n	8003f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b098      	sub	sp, #96	@ 0x60
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f9c:	f7fc ffc2 	bl	8000f24 <HAL_GetTick>
 8003fa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d12e      	bne.n	800400e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f88c 	bl	80040dc <UART_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d021      	beq.n	800400e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e6      	bne.n	8003fca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e062      	b.n	80040d4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b04      	cmp	r3, #4
 800401a:	d149      	bne.n	80040b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800401c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004024:	2200      	movs	r2, #0
 8004026:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f856 	bl	80040dc <UART_WaitOnFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d03c      	beq.n	80040b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	623b      	str	r3, [r7, #32]
   return(result);
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800404a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004054:	633b      	str	r3, [r7, #48]	@ 0x30
 8004056:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800405a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e6      	bne.n	8004036 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	60fb      	str	r3, [r7, #12]
   return(result);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3308      	adds	r3, #8
 8004086:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004088:	61fa      	str	r2, [r7, #28]
 800408a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	617b      	str	r3, [r7, #20]
   return(result);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e011      	b.n	80040d4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3758      	adds	r7, #88	@ 0x58
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ec:	e04f      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d04b      	beq.n	800418e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fc ff15 	bl	8000f24 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <UART_WaitOnFlagUntilTimeout+0x30>
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e04e      	b.n	80041ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d037      	beq.n	800418e <UART_WaitOnFlagUntilTimeout+0xb2>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b80      	cmp	r3, #128	@ 0x80
 8004122:	d034      	beq.n	800418e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b40      	cmp	r3, #64	@ 0x40
 8004128:	d031      	beq.n	800418e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b08      	cmp	r3, #8
 8004136:	d110      	bne.n	800415a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2208      	movs	r2, #8
 800413e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f838 	bl	80041b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2208      	movs	r2, #8
 800414a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e029      	b.n	80041ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004168:	d111      	bne.n	800418e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f81e 	bl	80041b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e00f      	b.n	80041ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	429a      	cmp	r2, r3
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d0a0      	beq.n	80040ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b095      	sub	sp, #84	@ 0x54
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80041de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e6      	bne.n	80041be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004210:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e5      	bne.n	80041f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004228:	2b01      	cmp	r3, #1
 800422a:	d118      	bne.n	800425e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	60bb      	str	r3, [r7, #8]
   return(result);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f023 0310 	bic.w	r3, r3, #16
 8004240:	647b      	str	r3, [r7, #68]	@ 0x44
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6979      	ldr	r1, [r7, #20]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	613b      	str	r3, [r7, #16]
   return(result);
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e6      	bne.n	800422c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004272:	bf00      	nop
 8004274:	3754      	adds	r7, #84	@ 0x54
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <memset>:
 800427e:	4402      	add	r2, r0
 8004280:	4603      	mov	r3, r0
 8004282:	4293      	cmp	r3, r2
 8004284:	d100      	bne.n	8004288 <memset+0xa>
 8004286:	4770      	bx	lr
 8004288:	f803 1b01 	strb.w	r1, [r3], #1
 800428c:	e7f9      	b.n	8004282 <memset+0x4>
	...

08004290 <__libc_init_array>:
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	4d0d      	ldr	r5, [pc, #52]	@ (80042c8 <__libc_init_array+0x38>)
 8004294:	4c0d      	ldr	r4, [pc, #52]	@ (80042cc <__libc_init_array+0x3c>)
 8004296:	1b64      	subs	r4, r4, r5
 8004298:	10a4      	asrs	r4, r4, #2
 800429a:	2600      	movs	r6, #0
 800429c:	42a6      	cmp	r6, r4
 800429e:	d109      	bne.n	80042b4 <__libc_init_array+0x24>
 80042a0:	4d0b      	ldr	r5, [pc, #44]	@ (80042d0 <__libc_init_array+0x40>)
 80042a2:	4c0c      	ldr	r4, [pc, #48]	@ (80042d4 <__libc_init_array+0x44>)
 80042a4:	f000 f818 	bl	80042d8 <_init>
 80042a8:	1b64      	subs	r4, r4, r5
 80042aa:	10a4      	asrs	r4, r4, #2
 80042ac:	2600      	movs	r6, #0
 80042ae:	42a6      	cmp	r6, r4
 80042b0:	d105      	bne.n	80042be <__libc_init_array+0x2e>
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b8:	4798      	blx	r3
 80042ba:	3601      	adds	r6, #1
 80042bc:	e7ee      	b.n	800429c <__libc_init_array+0xc>
 80042be:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c2:	4798      	blx	r3
 80042c4:	3601      	adds	r6, #1
 80042c6:	e7f2      	b.n	80042ae <__libc_init_array+0x1e>
 80042c8:	08004318 	.word	0x08004318
 80042cc:	08004318 	.word	0x08004318
 80042d0:	08004318 	.word	0x08004318
 80042d4:	0800431c 	.word	0x0800431c

080042d8 <_init>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr

080042e4 <_fini>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr
