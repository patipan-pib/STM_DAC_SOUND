
L476RG_modify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cdc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08008edc  08008edc  00009edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800913c  0800913c  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  0800913c  0800913c  0000a13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009144  08009144  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009144  08009144  0000a144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009148  08009148  0000a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800914c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000068  080091b4  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080091b4  0000b3e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178cd  00000000  00000000  0000b096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d1  00000000  00000000  00022963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  00025c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001093  00000000  00000000  00027198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b707  00000000  00000000  0002822b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcc9  00000000  00000000  00053932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001057d3  00000000  00000000  0006f5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174dce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006224  00000000  00000000  00174e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0017b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08008ec4 	.word	0x08008ec4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08008ec4 	.word	0x08008ec4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <readTextFileAndSendToUART>:
  if (res != FR_OK)
    return;
}


void readTextFileAndSendToUART(const char *filename) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	f5ad 7d30 	sub.w	sp, sp, #704	@ 0x2c0
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80005dc:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80005e0:	6018      	str	r0, [r3, #0]
    FRESULT res;
    char buffer[128];  // Buffer to store file data
    UINT bytesRead;

    // Open the file in read mode
    res = f_open(&fil, filename, FA_READ);
 80005e2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80005e6:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80005ea:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80005ee:	2201      	movs	r2, #1
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	f007 f8db 	bl	80077ac <f_open>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf
    if (res != FR_OK) {
 80005fc:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8000600:	2b00      	cmp	r3, #0
 8000602:	d010      	beq.n	8000626 <readTextFileAndSendToUART+0x56>
        printf("Error: Cannot open file %s (res = %d)\n", filename, res);
 8000604:	f897 22bf 	ldrb.w	r2, [r7, #703]	@ 0x2bf
 8000608:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800060c:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8000610:	6819      	ldr	r1, [r3, #0]
 8000612:	482c      	ldr	r0, [pc, #176]	@ (80006c4 <readTextFileAndSendToUART+0xf4>)
 8000614:	f007 fd8a 	bl	800812c <iprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Error opening file!\r\n", 21, 100);
 8000618:	2364      	movs	r3, #100	@ 0x64
 800061a:	2215      	movs	r2, #21
 800061c:	492a      	ldr	r1, [pc, #168]	@ (80006c8 <readTextFileAndSendToUART+0xf8>)
 800061e:	482b      	ldr	r0, [pc, #172]	@ (80006cc <readTextFileAndSendToUART+0xfc>)
 8000620:	f003 ff8a 	bl	8004538 <HAL_UART_Transmit>
 8000624:	e04a      	b.n	80006bc <readTextFileAndSendToUART+0xec>
        return;
    }

    printf("Reading file: %s\n", filename);
 8000626:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800062a:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	4827      	ldr	r0, [pc, #156]	@ (80006d0 <readTextFileAndSendToUART+0x100>)
 8000632:	f007 fd7b 	bl	800812c <iprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)"Reading file...\r\n", 17, 100);
 8000636:	2364      	movs	r3, #100	@ 0x64
 8000638:	2211      	movs	r2, #17
 800063a:	4926      	ldr	r1, [pc, #152]	@ (80006d4 <readTextFileAndSendToUART+0x104>)
 800063c:	4823      	ldr	r0, [pc, #140]	@ (80006cc <readTextFileAndSendToUART+0xfc>)
 800063e:	f003 ff7b 	bl	8004538 <HAL_UART_Transmit>

    // Read and send the file content via UART
    while (1) {
        res = f_read(&fil, buffer, sizeof(buffer) - 1, &bytesRead);
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	f107 010c 	add.w	r1, r7, #12
 800064a:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 800064e:	227f      	movs	r2, #127	@ 0x7f
 8000650:	f007 fa66 	bl	8007b20 <f_read>
 8000654:	4603      	mov	r3, r0
 8000656:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf
        if (res != FR_OK || bytesRead == 0) break; // Exit if read error or EOF
 800065a:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 800065e:	2b00      	cmp	r3, #0
 8000660:	d11e      	bne.n	80006a0 <readTextFileAndSendToUART+0xd0>
 8000662:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000666:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d017      	beq.n	80006a0 <readTextFileAndSendToUART+0xd0>

        buffer[bytesRead] = '\0'; // Null-terminate string
 8000670:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000674:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f507 7230 	add.w	r2, r7, #704	@ 0x2c0
 800067e:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8000682:	2100      	movs	r1, #0
 8000684:	54d1      	strb	r1, [r2, r3]
        HAL_UART_Transmit(&huart3, (uint8_t*)buffer, bytesRead, 100);
 8000686:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800068a:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	b29a      	uxth	r2, r3
 8000692:	f107 010c 	add.w	r1, r7, #12
 8000696:	2364      	movs	r3, #100	@ 0x64
 8000698:	480c      	ldr	r0, [pc, #48]	@ (80006cc <readTextFileAndSendToUART+0xfc>)
 800069a:	f003 ff4d 	bl	8004538 <HAL_UART_Transmit>
        res = f_read(&fil, buffer, sizeof(buffer) - 1, &bytesRead);
 800069e:	e7d0      	b.n	8000642 <readTextFileAndSendToUART+0x72>
    }

    printf("Finished reading file.\n");
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <readTextFileAndSendToUART+0x108>)
 80006a2:	f007 fdab 	bl	80081fc <puts>
    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nFinished reading file.\r\n", 26, 100);
 80006a6:	2364      	movs	r3, #100	@ 0x64
 80006a8:	221a      	movs	r2, #26
 80006aa:	490c      	ldr	r1, [pc, #48]	@ (80006dc <readTextFileAndSendToUART+0x10c>)
 80006ac:	4807      	ldr	r0, [pc, #28]	@ (80006cc <readTextFileAndSendToUART+0xfc>)
 80006ae:	f003 ff43 	bl	8004538 <HAL_UART_Transmit>

    // Close the file
    f_close(&fil);
 80006b2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80006b6:	4618      	mov	r0, r3
 80006b8:	f007 fbef 	bl	8007e9a <f_close>
}
 80006bc:	f507 7730 	add.w	r7, r7, #704	@ 0x2c0
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	08008f60 	.word	0x08008f60
 80006c8:	08008f00 	.word	0x08008f00
 80006cc:	200001c8 	.word	0x200001c8
 80006d0:	08008f88 	.word	0x08008f88
 80006d4:	08008f9c 	.word	0x08008f9c
 80006d8:	08008fb0 	.word	0x08008fb0
 80006dc:	08008fc8 	.word	0x08008fc8

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 fc7a 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f83c 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f000 f988 	bl	8000a04 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f4:	f000 f968 	bl	80009c8 <MX_DMA_Init>
  MX_DAC_Init();
 80006f8:	f000 f89e 	bl	8000838 <MX_DAC_Init>
  MX_SDMMC1_SD_Init();
 80006fc:	f000 f8c6 	bl	800088c <MX_SDMMC1_SD_Init>
  MX_TIM4_Init();
 8000700:	f000 f8e4 	bl	80008cc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000704:	f000 f930 	bl	8000968 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000708:	f005 f952 	bl	80059b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 800070c:	4811      	ldr	r0, [pc, #68]	@ (8000754 <main+0x74>)
 800070e:	f003 fbb7 	bl	8003e80 <HAL_TIM_Base_Start>
   FATFS FatFs;
   FRESULT res;
   DIR dir;
   FILINFO fno;

   res = f_mount(&FatFs, "", 0);
 8000712:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000716:	2200      	movs	r2, #0
 8000718:	490f      	ldr	r1, [pc, #60]	@ (8000758 <main+0x78>)
 800071a:	4618      	mov	r0, r3
 800071c:	f007 f800 	bl	8007720 <f_mount>
 8000720:	4603      	mov	r3, r0
 8000722:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
   if (res != FR_OK){
 8000726:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800072a:	2b00      	cmp	r3, #0
 800072c:	d007      	beq.n	800073e <main+0x5e>
	 HAL_UART_Transmit(&huart3, (uint8_t*)"Error mounting SD card!\r\n", 26, 100);
 800072e:	2364      	movs	r3, #100	@ 0x64
 8000730:	221a      	movs	r2, #26
 8000732:	490a      	ldr	r1, [pc, #40]	@ (800075c <main+0x7c>)
 8000734:	480a      	ldr	r0, [pc, #40]	@ (8000760 <main+0x80>)
 8000736:	f003 feff 	bl	8004538 <HAL_UART_Transmit>
     return EXIT_FAILURE;
 800073a:	2301      	movs	r3, #1
 800073c:	e004      	b.n	8000748 <main+0x68>
//   res = f_closedir(&dir);

//   char filename[] = "A.wav";  // กำหนดชื่อไฟล์เอง
//   playWavFile(filename);\

   readTextFileAndSendToUART("test.txt");
 800073e:	4809      	ldr	r0, [pc, #36]	@ (8000764 <main+0x84>)
 8000740:	f7ff ff46 	bl	80005d0 <readTextFileAndSendToUART>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <main+0x64>
//	    playWavFile(filename);

//	    HAL_Delay(1000);
  }
  /* USER CODE END 3 */
}
 8000748:	4618      	mov	r0, r3
 800074a:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000017c 	.word	0x2000017c
 8000758:	08008fe4 	.word	0x08008fe4
 800075c:	08008fe8 	.word	0x08008fe8
 8000760:	200001c8 	.word	0x200001c8
 8000764:	08009004 	.word	0x08009004

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	@ 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2234      	movs	r2, #52	@ 0x34
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f007 fe20 	bl	80083bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <SystemClock_Config+0xc8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	@ (8000830 <SystemClock_Config+0xc8>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	@ 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <SystemClock_Config+0xc8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a4:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <SystemClock_Config+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <SystemClock_Config+0xcc>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2310      	movs	r3, #16
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 80007d4:	230a      	movs	r3, #10
 80007d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 80007d8:	23c8      	movs	r3, #200	@ 0xc8
 80007da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007e0:	2308      	movs	r3, #8
 80007e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 faa3 	bl	8001d38 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f8:	f000 f934 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000804:	2380      	movs	r3, #128	@ 0x80
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fd3b 	bl	8002294 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000824:	f000 f91e 	bl	8000a64 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	@ 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_DAC_Init+0x4c>)
 8000848:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <MX_DAC_Init+0x50>)
 800084a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800084c:	480d      	ldr	r0, [pc, #52]	@ (8000884 <MX_DAC_Init+0x4c>)
 800084e:	f000 fd62 	bl	8001316 <HAL_DAC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000858:	f000 f904 	bl	8000a64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_DAC_Init+0x4c>)
 800086c:	f000 fd75 	bl	800135a <HAL_DAC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000876:	f000 f8f5 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000084 	.word	0x20000084
 8000888:	40007400 	.word	0x40007400

0800088c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_SDMMC1_SD_Init+0x38>)
 8000892:	4a0d      	ldr	r2, [pc, #52]	@ (80008c8 <MX_SDMMC1_SD_Init+0x3c>)
 8000894:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <MX_SDMMC1_SD_Init+0x38>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_SDMMC1_SD_Init+0x38>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <MX_SDMMC1_SD_Init+0x38>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_SDMMC1_SD_Init+0x38>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80008ae:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <MX_SDMMC1_SD_Init+0x38>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <MX_SDMMC1_SD_Init+0x38>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	200000f8 	.word	0x200000f8
 80008c8:	40012c00 	.word	0x40012c00

080008cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_TIM4_Init+0x94>)
 80008ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000964 <MX_TIM4_Init+0x98>)
 80008ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_TIM4_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_TIM4_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1813;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_TIM4_Init+0x94>)
 80008fe:	f240 7215 	movw	r2, #1813	@ 0x715
 8000902:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_TIM4_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_TIM4_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000910:	4813      	ldr	r0, [pc, #76]	@ (8000960 <MX_TIM4_Init+0x94>)
 8000912:	f003 fa5d 	bl	8003dd0 <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800091c:	f000 f8a2 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000924:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <MX_TIM4_Init+0x94>)
 800092e:	f003 fb17 	bl	8003f60 <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000938:	f000 f894 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_TIM4_Init+0x94>)
 800094a:	f003 fd19 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000954:	f000 f886 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000017c 	.word	0x2000017c
 8000964:	40000800 	.word	0x40000800

08000968 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	@ (80009c4 <MX_USART3_UART_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USART3_UART_Init+0x58>)
 80009ac:	f003 fd76 	bl	800449c <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f855 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001c8 	.word	0x200001c8
 80009c4:	40004800 	.word	0x40004800

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_DMA_Init+0x38>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <MX_DMA_Init+0x38>)
 80009d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_DMA_Init+0x38>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2010      	movs	r0, #16
 80009ec:	f000 fc5d 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009f0:	2010      	movs	r0, #16
 80009f2:	f000 fc76 	bl	80012e2 <HAL_NVIC_EnableIRQ>

}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a14      	ldr	r2, [pc, #80]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <Error_Handler+0x8>

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8000b8c <HAL_DAC_MspInit+0xd4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d153      	bne.n	8000b82 <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ada:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <HAL_DAC_MspInit+0xd8>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <HAL_DAC_MspInit+0xd8>)
 8000ae0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <HAL_DAC_MspInit+0xd8>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <HAL_DAC_MspInit+0xd8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a26      	ldr	r2, [pc, #152]	@ (8000b90 <HAL_DAC_MspInit+0xd8>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <HAL_DAC_MspInit+0xd8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481d      	ldr	r0, [pc, #116]	@ (8000b94 <HAL_DAC_MspInit+0xdc>)
 8000b1e:	f000 ff5f 	bl	80019e0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b24:	4a1d      	ldr	r2, [pc, #116]	@ (8000b9c <HAL_DAC_MspInit+0xe4>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b2a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b32:	2240      	movs	r2, #64	@ 0x40
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b4a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b52:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b60:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000b66:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b68:	f000 fc50 	bl	800140c <HAL_DMA_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_DAC_MspInit+0xbe>
    {
      Error_Handler();
 8000b72:	f7ff ff77 	bl	8000a64 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	@ (8000b98 <HAL_DAC_MspInit+0xe0>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	@ 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40007400 	.word	0x40007400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	20000098 	.word	0x20000098
 8000b9c:	40026088 	.word	0x40026088

08000ba0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2290      	movs	r2, #144	@ 0x90
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f007 fbfb 	bl	80083bc <memset>
  if(hsd->Instance==SDMMC1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a34      	ldr	r2, [pc, #208]	@ (8000c9c <HAL_SD_MspInit+0xfc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d161      	bne.n	8000c94 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000bd0:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8000bd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fd3a 	bl	8002660 <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000bf2:	f7ff ff37 	bl	8000a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca0 <HAL_SD_MspInit+0x100>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a29      	ldr	r2, [pc, #164]	@ (8000ca0 <HAL_SD_MspInit+0x100>)
 8000bfc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c02:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <HAL_SD_MspInit+0x100>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ca0 <HAL_SD_MspInit+0x100>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a23      	ldr	r2, [pc, #140]	@ (8000ca0 <HAL_SD_MspInit+0x100>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <HAL_SD_MspInit+0x100>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <HAL_SD_MspInit+0x100>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <HAL_SD_MspInit+0x100>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <HAL_SD_MspInit+0x100>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000c3e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c58:	230c      	movs	r3, #12
 8000c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c62:	4619      	mov	r1, r3
 8000c64:	480f      	ldr	r0, [pc, #60]	@ (8000ca4 <HAL_SD_MspInit+0x104>)
 8000c66:	f000 febb 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c82:	230c      	movs	r3, #12
 8000c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <HAL_SD_MspInit+0x108>)
 8000c90:	f000 fea6 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8000c94:	bf00      	nop
 8000c96:	37b8      	adds	r7, #184	@ 0xb8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40012c00 	.word	0x40012c00
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020c00 	.word	0x40020c00

08000cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x38>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10b      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a09      	ldr	r2, [pc, #36]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40000800 	.word	0x40000800
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0ae      	sub	sp, #184	@ 0xb8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2290      	movs	r2, #144	@ 0x90
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f007 fb55 	bl	80083bc <memset>
  if(huart->Instance==USART3)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a22      	ldr	r2, [pc, #136]	@ (8000da0 <HAL_UART_MspInit+0xb4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d13c      	bne.n	8000d96 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 fc98 	bl	8002660 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d36:	f7ff fe95 	bl	8000a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <HAL_UART_MspInit+0xb8>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	4a19      	ldr	r2, [pc, #100]	@ (8000da4 <HAL_UART_MspInit+0xb8>)
 8000d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <HAL_UART_MspInit+0xb8>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <HAL_UART_MspInit+0xb8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a13      	ldr	r2, [pc, #76]	@ (8000da4 <HAL_UART_MspInit+0xb8>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <HAL_UART_MspInit+0xb8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d84:	2307      	movs	r3, #7
 8000d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <HAL_UART_MspInit+0xbc>)
 8000d92:	f000 fe25 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d96:	bf00      	nop
 8000d98:	37b8      	adds	r7, #184	@ 0xb8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004800 	.word	0x40004800
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020c00 	.word	0x40020c00

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f933 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <DMA1_Stream5_IRQHandler+0x10>)
 8000e12:	f000 fba9 	bl	8001568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000098 	.word	0x20000098

08000e20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	e00a      	b.n	8000e48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e32:	f3af 8000 	nop.w
 8000e36:	4601      	mov	r1, r0
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	60ba      	str	r2, [r7, #8]
 8000e3e:	b2ca      	uxtb	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbf0      	blt.n	8000e32 <_read+0x12>
  }

  return len;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e009      	b.n	8000e80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf1      	blt.n	8000e6c <_write+0x12>
  }
  return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_close>:

int _close(int file)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eba:	605a      	str	r2, [r3, #4]
  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_isatty>:

int _isatty(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	@ (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	@ (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f007 fa94 	bl	8008458 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20080000 	.word	0x20080000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	20000250 	.word	0x20000250
 8000f64:	200003e0 	.word	0x200003e0

08000f68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f90:	f7ff ffea 	bl	8000f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	@ (8000fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f007 fa53 	bl	8008464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff fb8f 	bl	80006e0 <main>
  bx  lr    
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fd0:	0800914c 	.word	0x0800914c
  ldr r2, =_sbss
 8000fd4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fd8:	200003e0 	.word	0x200003e0

08000fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_Init+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	@ (8001008 <HAL_Init+0x28>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f94f 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fd38 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f967 	bl	80012fe <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f92f 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	@ (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	20000008 	.word	0x20000008
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	20000254 	.word	0x20000254

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000254 	.word	0x20000254

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	4313      	orrs	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	05fa0000 	.word	0x05fa0000

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	@ (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	@ (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	@ (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	@ 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	@ 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff29 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff3e 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff8e 	bl	80011e8 <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5d 	bl	8001194 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff31 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e014      	b.n	8001352 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	791b      	ldrb	r3, [r3, #4]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d105      	bne.n	800133e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fbbd 	bl	8000ab8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2202      	movs	r2, #2
 8001342:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800135a:	b480      	push	{r7}
 800135c:	b089      	sub	sp, #36	@ 0x24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <HAL_DAC_ConfigChannel+0x1c>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e042      	b.n	8001400 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	795b      	ldrb	r3, [r3, #5]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_DAC_ConfigChannel+0x2c>
 8001382:	2302      	movs	r3, #2
 8001384:	e03c      	b.n	8001400 <HAL_DAC_ConfigChannel+0xa6>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2201      	movs	r2, #1
 800138a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2202      	movs	r2, #2
 8001390:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6819      	ldr	r1, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	22c0      	movs	r2, #192	@ 0xc0
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43da      	mvns	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	400a      	ands	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3724      	adds	r7, #36	@ 0x24
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff fe3c 	bl	8001094 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e099      	b.n	800155c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001448:	e00f      	b.n	800146a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144a:	f7ff fe23 	bl	8001094 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b05      	cmp	r3, #5
 8001456:	d908      	bls.n	800146a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2220      	movs	r2, #32
 800145c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e078      	b.n	800155c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e8      	bne.n	800144a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <HAL_DMA_Init+0x158>)
 8001484:	4013      	ands	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d107      	bne.n	80014d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	4313      	orrs	r3, r2
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f023 0307 	bic.w	r3, r3, #7
 80014ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d117      	bne.n	800152e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00e      	beq.n	800152e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f9e9 	bl	80018e8 <DMA_CheckFifoParam>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2240      	movs	r2, #64	@ 0x40
 8001520:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800152a:	2301      	movs	r3, #1
 800152c:	e016      	b.n	800155c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f9a0 	bl	800187c <DMA_CalcBaseAndBitshift>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001544:	223f      	movs	r2, #63	@ 0x3f
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	e010803f 	.word	0xe010803f

08001568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001574:	4b8e      	ldr	r3, [pc, #568]	@ (80017b0 <HAL_DMA_IRQHandler+0x248>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a8e      	ldr	r2, [pc, #568]	@ (80017b4 <HAL_DMA_IRQHandler+0x24c>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0a9b      	lsrs	r3, r3, #10
 8001580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001592:	2208      	movs	r2, #8
 8001594:	409a      	lsls	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01a      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0204 	bic.w	r2, r2, #4
 80015ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c0:	2208      	movs	r2, #8
 80015c2:	409a      	lsls	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d8:	2201      	movs	r2, #1
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d012      	beq.n	800160a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f6:	2201      	movs	r2, #1
 80015f8:	409a      	lsls	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001602:	f043 0202 	orr.w	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160e:	2204      	movs	r2, #4
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d012      	beq.n	8001640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162c:	2204      	movs	r2, #4
 800162e:	409a      	lsls	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001638:	f043 0204 	orr.w	r2, r3, #4
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001644:	2210      	movs	r2, #16
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d043      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03c      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001662:	2210      	movs	r2, #16
 8001664:	409a      	lsls	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d018      	beq.n	80016aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	2b00      	cmp	r3, #0
 800168c:	d024      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4798      	blx	r3
 8001696:	e01f      	b.n	80016d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01b      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
 80016a8:	e016      	b.n	80016d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d107      	bne.n	80016c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0208 	bic.w	r2, r2, #8
 80016c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016dc:	2220      	movs	r2, #32
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 808f 	beq.w	8001808 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8087 	beq.w	8001808 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fe:	2220      	movs	r2, #32
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b05      	cmp	r3, #5
 8001710:	d136      	bne.n	8001780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0216 	bic.w	r2, r2, #22
 8001720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <HAL_DMA_IRQHandler+0x1da>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0208 	bic.w	r2, r2, #8
 8001750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001756:	223f      	movs	r2, #63	@ 0x3f
 8001758:	409a      	lsls	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001772:	2b00      	cmp	r3, #0
 8001774:	d07e      	beq.n	8001874 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3
        }
        return;
 800177e:	e079      	b.n	8001874 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01d      	beq.n	80017ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10d      	bne.n	80017b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d031      	beq.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
 80017ac:	e02c      	b.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
 80017ae:	bf00      	nop
 80017b0:	20000000 	.word	0x20000000
 80017b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d023      	beq.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4798      	blx	r3
 80017c8:	e01e      	b.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10f      	bne.n	80017f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0210 	bic.w	r2, r2, #16
 80017e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180c:	2b00      	cmp	r3, #0
 800180e:	d032      	beq.n	8001876 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d022      	beq.n	8001862 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2205      	movs	r2, #5
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	3301      	adds	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	d307      	bcc.n	8001850 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f2      	bne.n	8001834 <HAL_DMA_IRQHandler+0x2cc>
 800184e:	e000      	b.n	8001852 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001850:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
 8001872:	e000      	b.n	8001876 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001874:	bf00      	nop
    }
  }
}
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3b10      	subs	r3, #16
 800188c:	4a13      	ldr	r2, [pc, #76]	@ (80018dc <DMA_CalcBaseAndBitshift+0x60>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001896:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <DMA_CalcBaseAndBitshift+0x64>)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d908      	bls.n	80018bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <DMA_CalcBaseAndBitshift+0x68>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	1d1a      	adds	r2, r3, #4
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80018ba:	e006      	b.n	80018ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <DMA_CalcBaseAndBitshift+0x68>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	aaaaaaab 	.word	0xaaaaaaab
 80018e0:	0800906c 	.word	0x0800906c
 80018e4:	fffffc00 	.word	0xfffffc00

080018e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11f      	bne.n	8001942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d856      	bhi.n	80019b6 <DMA_CheckFifoParam+0xce>
 8001908:	a201      	add	r2, pc, #4	@ (adr r2, 8001910 <DMA_CheckFifoParam+0x28>)
 800190a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190e:	bf00      	nop
 8001910:	08001921 	.word	0x08001921
 8001914:	08001933 	.word	0x08001933
 8001918:	08001921 	.word	0x08001921
 800191c:	080019b7 	.word	0x080019b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d046      	beq.n	80019ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001930:	e043      	b.n	80019ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001936:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800193a:	d140      	bne.n	80019be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001940:	e03d      	b.n	80019be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800194a:	d121      	bne.n	8001990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d837      	bhi.n	80019c2 <DMA_CheckFifoParam+0xda>
 8001952:	a201      	add	r2, pc, #4	@ (adr r2, 8001958 <DMA_CheckFifoParam+0x70>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	08001969 	.word	0x08001969
 800195c:	0800196f 	.word	0x0800196f
 8001960:	08001969 	.word	0x08001969
 8001964:	08001981 	.word	0x08001981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
      break;
 800196c:	e030      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001972:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d025      	beq.n	80019c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800197e:	e022      	b.n	80019c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001984:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001988:	d11f      	bne.n	80019ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800198e:	e01c      	b.n	80019ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d903      	bls.n	800199e <DMA_CheckFifoParam+0xb6>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d003      	beq.n	80019a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800199c:	e018      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
      break;
 80019a2:	e015      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      break;
 80019b4:	e00b      	b.n	80019ce <DMA_CheckFifoParam+0xe6>
      break;
 80019b6:	bf00      	nop
 80019b8:	e00a      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
 80019bc:	e008      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
 80019c0:	e006      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019c2:	bf00      	nop
 80019c4:	e004      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019c6:	bf00      	nop
 80019c8:	e002      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ce:	bf00      	nop
    }
  } 
  
  return status; 
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	e175      	b.n	8001cec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	f040 8164 	bne.w	8001ce6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d005      	beq.n	8001a36 <HAL_GPIO_Init+0x56>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d130      	bne.n	8001a98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 0201 	and.w	r2, r3, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d017      	beq.n	8001ad4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d123      	bne.n	8001b28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	08da      	lsrs	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3208      	adds	r2, #8
 8001ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	69b9      	ldr	r1, [r7, #24]
 8001b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80be 	beq.w	8001ce6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <HAL_GPIO_Init+0x324>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	4a65      	ldr	r2, [pc, #404]	@ (8001d04 <HAL_GPIO_Init+0x324>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b76:	4b63      	ldr	r3, [pc, #396]	@ (8001d04 <HAL_GPIO_Init+0x324>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b82:	4a61      	ldr	r2, [pc, #388]	@ (8001d08 <HAL_GPIO_Init+0x328>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	@ (8001d0c <HAL_GPIO_Init+0x32c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d037      	beq.n	8001c1e <HAL_GPIO_Init+0x23e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a57      	ldr	r2, [pc, #348]	@ (8001d10 <HAL_GPIO_Init+0x330>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d031      	beq.n	8001c1a <HAL_GPIO_Init+0x23a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a56      	ldr	r2, [pc, #344]	@ (8001d14 <HAL_GPIO_Init+0x334>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02b      	beq.n	8001c16 <HAL_GPIO_Init+0x236>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a55      	ldr	r2, [pc, #340]	@ (8001d18 <HAL_GPIO_Init+0x338>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d025      	beq.n	8001c12 <HAL_GPIO_Init+0x232>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a54      	ldr	r2, [pc, #336]	@ (8001d1c <HAL_GPIO_Init+0x33c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01f      	beq.n	8001c0e <HAL_GPIO_Init+0x22e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a53      	ldr	r2, [pc, #332]	@ (8001d20 <HAL_GPIO_Init+0x340>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d019      	beq.n	8001c0a <HAL_GPIO_Init+0x22a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	@ (8001d24 <HAL_GPIO_Init+0x344>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <HAL_GPIO_Init+0x226>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a51      	ldr	r2, [pc, #324]	@ (8001d28 <HAL_GPIO_Init+0x348>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00d      	beq.n	8001c02 <HAL_GPIO_Init+0x222>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a50      	ldr	r2, [pc, #320]	@ (8001d2c <HAL_GPIO_Init+0x34c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0x21e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4f      	ldr	r2, [pc, #316]	@ (8001d30 <HAL_GPIO_Init+0x350>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_GPIO_Init+0x21a>
 8001bf6:	2309      	movs	r3, #9
 8001bf8:	e012      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	e010      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001bfe:	2308      	movs	r3, #8
 8001c00:	e00e      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c02:	2307      	movs	r3, #7
 8001c04:	e00c      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c06:	2306      	movs	r3, #6
 8001c08:	e00a      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	e008      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c12:	2303      	movs	r3, #3
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	f002 0203 	and.w	r2, r2, #3
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c30:	4935      	ldr	r1, [pc, #212]	@ (8001d08 <HAL_GPIO_Init+0x328>)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d34 <HAL_GPIO_Init+0x354>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c62:	4a34      	ldr	r2, [pc, #208]	@ (8001d34 <HAL_GPIO_Init+0x354>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c68:	4b32      	ldr	r3, [pc, #200]	@ (8001d34 <HAL_GPIO_Init+0x354>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c8c:	4a29      	ldr	r2, [pc, #164]	@ (8001d34 <HAL_GPIO_Init+0x354>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c92:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <HAL_GPIO_Init+0x354>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d34 <HAL_GPIO_Init+0x354>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <HAL_GPIO_Init+0x354>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	@ (8001d34 <HAL_GPIO_Init+0x354>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b0f      	cmp	r3, #15
 8001cf0:	f67f ae86 	bls.w	8001a00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3724      	adds	r7, #36	@ 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40021400 	.word	0x40021400
 8001d24:	40021800 	.word	0x40021800
 8001d28:	40021c00 	.word	0x40021c00
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40022400 	.word	0x40022400
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e29b      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8087 	beq.w	8001e6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5c:	4b96      	ldr	r3, [pc, #600]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d00c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d68:	4b93      	ldr	r3, [pc, #588]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d112      	bne.n	8001d9a <HAL_RCC_OscConfig+0x62>
 8001d74:	4b90      	ldr	r3, [pc, #576]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d80:	d10b      	bne.n	8001d9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d82:	4b8d      	ldr	r3, [pc, #564]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d06c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x130>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d168      	bne.n	8001e68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e275      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x7a>
 8001da4:	4b84      	ldr	r3, [pc, #528]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a83      	ldr	r2, [pc, #524]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e02e      	b.n	8001e10 <HAL_RCC_OscConfig+0xd8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x9c>
 8001dba:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b7c      	ldr	r3, [pc, #496]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7b      	ldr	r2, [pc, #492]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0xd8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0xc0>
 8001dde:	4b76      	ldr	r3, [pc, #472]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a75      	ldr	r2, [pc, #468]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b73      	ldr	r3, [pc, #460]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a72      	ldr	r2, [pc, #456]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0xd8>
 8001df8:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6b      	ldr	r2, [pc, #428]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f93c 	bl	8001094 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff f938 	bl	8001094 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e229      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b61      	ldr	r3, [pc, #388]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe8>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff f928 	bl	8001094 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff f924 	bl	8001094 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	@ 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e215      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	4b57      	ldr	r3, [pc, #348]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x110>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d069      	beq.n	8001f4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e76:	4b50      	ldr	r3, [pc, #320]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e82:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x190>
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d116      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	4b47      	ldr	r3, [pc, #284]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x17a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e1e9      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	4b41      	ldr	r3, [pc, #260]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	493d      	ldr	r1, [pc, #244]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	e040      	b.n	8001f4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d023      	beq.n	8001f18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed0:	4b39      	ldr	r3, [pc, #228]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a38      	ldr	r2, [pc, #224]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f8da 	bl	8001094 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff f8d6 	bl	8001094 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1c7      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	4b30      	ldr	r3, [pc, #192]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4929      	ldr	r1, [pc, #164]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
 8001f16:	e018      	b.n	8001f4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a26      	ldr	r2, [pc, #152]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	f023 0301 	bic.w	r3, r3, #1
 8001f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f8b6 	bl	8001094 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2c:	f7ff f8b2 	bl	8001094 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1a3      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d038      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f62:	4a15      	ldr	r2, [pc, #84]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6a:	f7ff f893 	bl	8001094 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff f88f 	bl	8001094 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e180      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f84:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x23a>
 8001f90:	e01a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f96:	4a08      	ldr	r2, [pc, #32]	@ (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f879 	bl	8001094 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f875 	bl	8001094 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d903      	bls.n	8001fbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e166      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
 8001fb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	4b92      	ldr	r3, [pc, #584]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ee      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80a4 	beq.w	800211e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd6:	4b8c      	ldr	r3, [pc, #560]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10d      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b89      	ldr	r3, [pc, #548]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a88      	ldr	r2, [pc, #544]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b86      	ldr	r3, [pc, #536]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffe:	4b83      	ldr	r3, [pc, #524]	@ (800220c <HAL_RCC_OscConfig+0x4d4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800200a:	4b80      	ldr	r3, [pc, #512]	@ (800220c <HAL_RCC_OscConfig+0x4d4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a7f      	ldr	r2, [pc, #508]	@ (800220c <HAL_RCC_OscConfig+0x4d4>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7ff f83d 	bl	8001094 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7ff f839 	bl	8001094 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	@ 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e12a      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002030:	4b76      	ldr	r3, [pc, #472]	@ (800220c <HAL_RCC_OscConfig+0x4d4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x31a>
 8002044:	4b70      	ldr	r3, [pc, #448]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	4a6f      	ldr	r2, [pc, #444]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002050:	e02d      	b.n	80020ae <HAL_RCC_OscConfig+0x376>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x33c>
 800205a:	4b6b      	ldr	r3, [pc, #428]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	4a6a      	ldr	r2, [pc, #424]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6713      	str	r3, [r2, #112]	@ 0x70
 8002066:	4b68      	ldr	r3, [pc, #416]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206a:	4a67      	ldr	r2, [pc, #412]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6713      	str	r3, [r2, #112]	@ 0x70
 8002072:	e01c      	b.n	80020ae <HAL_RCC_OscConfig+0x376>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d10c      	bne.n	8002096 <HAL_RCC_OscConfig+0x35e>
 800207c:	4b62      	ldr	r3, [pc, #392]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002080:	4a61      	ldr	r2, [pc, #388]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6713      	str	r3, [r2, #112]	@ 0x70
 8002088:	4b5f      	ldr	r3, [pc, #380]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208c:	4a5e      	ldr	r2, [pc, #376]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6713      	str	r3, [r2, #112]	@ 0x70
 8002094:	e00b      	b.n	80020ae <HAL_RCC_OscConfig+0x376>
 8002096:	4b5c      	ldr	r3, [pc, #368]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	4a5b      	ldr	r2, [pc, #364]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a2:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a6:	4a58      	ldr	r2, [pc, #352]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d015      	beq.n	80020e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7fe ffed 	bl	8001094 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7fe ffe9 	bl	8001094 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0d8      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ee      	beq.n	80020be <HAL_RCC_OscConfig+0x386>
 80020e0:	e014      	b.n	800210c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e2:	f7fe ffd7 	bl	8001094 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7fe ffd3 	bl	8001094 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0c2      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	4b41      	ldr	r3, [pc, #260]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ee      	bne.n	80020ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	4a3c      	ldr	r2, [pc, #240]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80ae 	beq.w	8002284 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002128:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d06d      	beq.n	8002210 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d14b      	bne.n	80021d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213c:	4b32      	ldr	r3, [pc, #200]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a31      	ldr	r2, [pc, #196]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe ffa4 	bl	8001094 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe ffa0 	bl	8001094 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e091      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69da      	ldr	r2, [r3, #28]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	3b01      	subs	r3, #1
 8002188:	041b      	lsls	r3, r3, #16
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	071b      	lsls	r3, r3, #28
 800219a:	491b      	ldr	r1, [pc, #108]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a0:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe ff72 	bl	8001094 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe ff6e 	bl	8001094 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e05f      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x47c>
 80021d2:	e057      	b.n	8002284 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff58 	bl	8001094 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe ff54 	bl	8001094 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e045      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4b0>
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x54c>
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002210:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <HAL_RCC_OscConfig+0x558>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d030      	beq.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d129      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d122      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002246:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002248:	4293      	cmp	r3, r2
 800224a:	d119      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	3b01      	subs	r3, #1
 800225a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d10f      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0d0      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b67      	ldr	r3, [pc, #412]	@ (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 020f 	bic.w	r2, r3, #15
 80022c2:	4965      	ldr	r1, [pc, #404]	@ (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b63      	ldr	r3, [pc, #396]	@ (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0b8      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f4:	4b59      	ldr	r3, [pc, #356]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4a58      	ldr	r2, [pc, #352]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800230c:	4b53      	ldr	r3, [pc, #332]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a52      	ldr	r2, [pc, #328]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002316:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002318:	4b50      	ldr	r3, [pc, #320]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	494d      	ldr	r1, [pc, #308]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d040      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d115      	bne.n	8002376 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07f      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b41      	ldr	r3, [pc, #260]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e073      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	4b3d      	ldr	r3, [pc, #244]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06b      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002376:	4b39      	ldr	r3, [pc, #228]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 0203 	bic.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4936      	ldr	r1, [pc, #216]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002388:	f7fe fe84 	bl	8001094 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7fe fe80 	bl	8001094 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e053      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 020c 	and.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1eb      	bne.n	8002390 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d210      	bcs.n	80023e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	4922      	ldr	r1, [pc, #136]	@ (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b20      	ldr	r3, [pc, #128]	@ (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e032      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4916      	ldr	r1, [pc, #88]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	490e      	ldr	r1, [pc, #56]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002426:	f000 f821 	bl	800246c <HAL_RCC_GetSysClockFreq>
 800242a:	4602      	mov	r2, r0
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	490a      	ldr	r1, [pc, #40]	@ (8002460 <HAL_RCC_ClockConfig+0x1cc>)
 8002438:	5ccb      	ldrb	r3, [r1, r3]
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	4a09      	ldr	r2, [pc, #36]	@ (8002464 <HAL_RCC_ClockConfig+0x1d0>)
 8002440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_RCC_ClockConfig+0x1d4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fde0 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023c00 	.word	0x40023c00
 800245c:	40023800 	.word	0x40023800
 8002460:	08009054 	.word	0x08009054
 8002464:	20000000 	.word	0x20000000
 8002468:	20000004 	.word	0x20000004

0800246c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800246c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002470:	b090      	sub	sp, #64	@ 0x40
 8002472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	637b      	str	r3, [r7, #52]	@ 0x34
 8002478:	2300      	movs	r3, #0
 800247a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800247c:	2300      	movs	r3, #0
 800247e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002484:	4b59      	ldr	r3, [pc, #356]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b08      	cmp	r3, #8
 800248e:	d00d      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x40>
 8002490:	2b08      	cmp	r3, #8
 8002492:	f200 80a1 	bhi.w	80025d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x34>
 800249a:	2b04      	cmp	r3, #4
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800249e:	e09b      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80024a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024a4:	e09b      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a6:	4b53      	ldr	r3, [pc, #332]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024aa:	e098      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ac:	4b4f      	ldr	r3, [pc, #316]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024b6:	4b4d      	ldr	r3, [pc, #308]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d028      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c2:	4b4a      	ldr	r3, [pc, #296]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	2200      	movs	r2, #0
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024d4:	2100      	movs	r1, #0
 80024d6:	4b47      	ldr	r3, [pc, #284]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024d8:	fb03 f201 	mul.w	r2, r3, r1
 80024dc:	2300      	movs	r3, #0
 80024de:	fb00 f303 	mul.w	r3, r0, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	4a43      	ldr	r2, [pc, #268]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024e6:	fba0 1202 	umull	r1, r2, r0, r2
 80024ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024ec:	460a      	mov	r2, r1
 80024ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024f2:	4413      	add	r3, r2
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f8:	2200      	movs	r2, #0
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	61fa      	str	r2, [r7, #28]
 80024fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002502:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002506:	f7fd feeb 	bl	80002e0 <__aeabi_uldivmod>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4613      	mov	r3, r2
 8002510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002512:	e053      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002514:	4b35      	ldr	r3, [pc, #212]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	2200      	movs	r2, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	617a      	str	r2, [r7, #20]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002526:	f04f 0b00 	mov.w	fp, #0
 800252a:	4652      	mov	r2, sl
 800252c:	465b      	mov	r3, fp
 800252e:	f04f 0000 	mov.w	r0, #0
 8002532:	f04f 0100 	mov.w	r1, #0
 8002536:	0159      	lsls	r1, r3, #5
 8002538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800253c:	0150      	lsls	r0, r2, #5
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	ebb2 080a 	subs.w	r8, r2, sl
 8002546:	eb63 090b 	sbc.w	r9, r3, fp
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002556:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800255a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800255e:	ebb2 0408 	subs.w	r4, r2, r8
 8002562:	eb63 0509 	sbc.w	r5, r3, r9
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	00eb      	lsls	r3, r5, #3
 8002570:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002574:	00e2      	lsls	r2, r4, #3
 8002576:	4614      	mov	r4, r2
 8002578:	461d      	mov	r5, r3
 800257a:	eb14 030a 	adds.w	r3, r4, sl
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	eb45 030b 	adc.w	r3, r5, fp
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002592:	4629      	mov	r1, r5
 8002594:	028b      	lsls	r3, r1, #10
 8002596:	4621      	mov	r1, r4
 8002598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800259c:	4621      	mov	r1, r4
 800259e:	028a      	lsls	r2, r1, #10
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a6:	2200      	movs	r2, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	60fa      	str	r2, [r7, #12]
 80025ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025b0:	f7fd fe96 	bl	80002e0 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	3301      	adds	r3, #1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80025cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025d6:	e002      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80025da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3740      	adds	r7, #64	@ 0x40
 80025e4:	46bd      	mov	sp, r7
 80025e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	00f42400 	.word	0x00f42400
 80025f4:	017d7840 	.word	0x017d7840

080025f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b03      	ldr	r3, [pc, #12]	@ (800260c <HAL_RCC_GetHCLKFreq+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000000 	.word	0x20000000

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002614:	f7ff fff0 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0a9b      	lsrs	r3, r3, #10
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4903      	ldr	r1, [pc, #12]	@ (8002634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	08009064 	.word	0x08009064

08002638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800263c:	f7ff ffdc 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0b5b      	lsrs	r3, r3, #13
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4903      	ldr	r1, [pc, #12]	@ (800265c <HAL_RCC_GetPCLK2Freq+0x24>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	08009064 	.word	0x08009064

08002660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002688:	4b69      	ldr	r3, [pc, #420]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a68      	ldr	r2, [pc, #416]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002692:	6093      	str	r3, [r2, #8]
 8002694:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269c:	4964      	ldr	r1, [pc, #400]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d017      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	4959      	ldr	r1, [pc, #356]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026d8:	d101      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d017      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	494a      	ldr	r1, [pc, #296]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002714:	d101      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002716:	2301      	movs	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002722:	2301      	movs	r3, #1
 8002724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 808b 	beq.w	800285a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002744:	4b3a      	ldr	r3, [pc, #232]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	4a39      	ldr	r2, [pc, #228]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002750:	4b37      	ldr	r3, [pc, #220]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800275c:	4b35      	ldr	r3, [pc, #212]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a34      	ldr	r2, [pc, #208]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002766:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002768:	f7fe fc94 	bl	8001094 <HAL_GetTick>
 800276c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7fe fc90 	bl	8001094 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	@ 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e38f      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002782:	4b2c      	ldr	r3, [pc, #176]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800278e:	4b28      	ldr	r3, [pc, #160]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002796:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d035      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d02e      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ac:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027ce:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027d4:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d114      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fc58 	bl	8001094 <HAL_GetTick>
 80027e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	e00a      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fe fc54 	bl	8001094 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e351      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ee      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002816:	d111      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002824:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002826:	400b      	ands	r3, r1
 8002828:	4901      	ldr	r1, [pc, #4]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
 800282e:	e00b      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002830:	40023800 	.word	0x40023800
 8002834:	40007000 	.word	0x40007000
 8002838:	0ffffcff 	.word	0x0ffffcff
 800283c:	4bac      	ldr	r3, [pc, #688]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4aab      	ldr	r2, [pc, #684]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002842:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002846:	6093      	str	r3, [r2, #8]
 8002848:	4ba9      	ldr	r3, [pc, #676]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002854:	49a6      	ldr	r1, [pc, #664]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002856:	4313      	orrs	r3, r2
 8002858:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d010      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002866:	4ba2      	ldr	r3, [pc, #648]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800286c:	4aa0      	ldr	r2, [pc, #640]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002872:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002876:	4b9e      	ldr	r3, [pc, #632]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002878:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	499b      	ldr	r1, [pc, #620]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002894:	4b96      	ldr	r3, [pc, #600]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028a2:	4993      	ldr	r1, [pc, #588]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028b6:	4b8e      	ldr	r3, [pc, #568]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028c4:	498a      	ldr	r1, [pc, #552]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d8:	4b85      	ldr	r3, [pc, #532]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028e6:	4982      	ldr	r1, [pc, #520]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028fa:	4b7d      	ldr	r3, [pc, #500]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002900:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4979      	ldr	r1, [pc, #484]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291c:	4b74      	ldr	r3, [pc, #464]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	4971      	ldr	r1, [pc, #452]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800293e:	4b6c      	ldr	r3, [pc, #432]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002944:	f023 020c 	bic.w	r2, r3, #12
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294c:	4968      	ldr	r1, [pc, #416]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002960:	4b63      	ldr	r3, [pc, #396]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002966:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	4960      	ldr	r1, [pc, #384]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002982:	4b5b      	ldr	r3, [pc, #364]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002988:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002990:	4957      	ldr	r1, [pc, #348]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029a4:	4b52      	ldr	r3, [pc, #328]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b2:	494f      	ldr	r1, [pc, #316]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029c6:	4b4a      	ldr	r3, [pc, #296]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	4946      	ldr	r1, [pc, #280]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029e8:	4b41      	ldr	r3, [pc, #260]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	493e      	ldr	r1, [pc, #248]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a0a:	4b39      	ldr	r3, [pc, #228]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a18:	4935      	ldr	r1, [pc, #212]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a2c:	4b30      	ldr	r3, [pc, #192]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a32:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a3a:	492d      	ldr	r1, [pc, #180]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d011      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a4e:	4b28      	ldr	r3, [pc, #160]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a54:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a5c:	4924      	ldr	r1, [pc, #144]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8e:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a94:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9c:	4914      	ldr	r1, [pc, #80]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ac0:	490b      	ldr	r1, [pc, #44]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00f      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ada:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae4:	4902      	ldr	r1, [pc, #8]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002aec:	e002      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00b      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b00:	4b8a      	ldr	r3, [pc, #552]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b10:	4986      	ldr	r1, [pc, #536]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b24:	4b81      	ldr	r3, [pc, #516]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b34:	497d      	ldr	r1, [pc, #500]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d006      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80d6 	beq.w	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b50:	4b76      	ldr	r3, [pc, #472]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a75      	ldr	r2, [pc, #468]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fa9a 	bl	8001094 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b64:	f7fe fa96 	bl	8001094 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	@ 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e195      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b76:	4b6d      	ldr	r3, [pc, #436]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d021      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11d      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b96:	4b65      	ldr	r3, [pc, #404]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ba4:	4b61      	ldr	r3, [pc, #388]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002baa:	0e1b      	lsrs	r3, r3, #24
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	019a      	lsls	r2, r3, #6
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	071b      	lsls	r3, r3, #28
 8002bca:	4958      	ldr	r1, [pc, #352]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d02e      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bfc:	d129      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c0c:	4b47      	ldr	r3, [pc, #284]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c12:	0f1b      	lsrs	r3, r3, #28
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	019a      	lsls	r2, r3, #6
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	061b      	lsls	r3, r3, #24
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	071b      	lsls	r3, r3, #28
 8002c32:	493e      	ldr	r1, [pc, #248]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c40:	f023 021f 	bic.w	r2, r3, #31
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	4938      	ldr	r1, [pc, #224]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01d      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c5e:	4b33      	ldr	r3, [pc, #204]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c64:	0e1b      	lsrs	r3, r3, #24
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c72:	0f1b      	lsrs	r3, r3, #28
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	019a      	lsls	r2, r3, #6
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	4926      	ldr	r1, [pc, #152]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d011      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	019a      	lsls	r2, r3, #6
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	071b      	lsls	r3, r3, #28
 8002cc2:	491a      	ldr	r1, [pc, #104]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cca:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd6:	f7fe f9dd 	bl	8001094 <HAL_GetTick>
 8002cda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cde:	f7fe f9d9 	bl	8001094 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	@ 0x64
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0d8      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	f040 80ce 	bne.w	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7fe f9c0 	bl	8001094 <HAL_GetTick>
 8002d14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d16:	e00b      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d18:	f7fe f9bc 	bl	8001094 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	@ 0x64
 8002d24:	d904      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0bb      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d30:	4b5e      	ldr	r3, [pc, #376]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d3c:	d0ec      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02e      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d12a      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d66:	4b51      	ldr	r3, [pc, #324]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d74:	4b4d      	ldr	r3, [pc, #308]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	0f1b      	lsrs	r3, r3, #28
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	019a      	lsls	r2, r3, #6
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	4944      	ldr	r1, [pc, #272]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002da2:	4b42      	ldr	r3, [pc, #264]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	493d      	ldr	r1, [pc, #244]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d022      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dd0:	d11d      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dd2:	4b36      	ldr	r3, [pc, #216]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd8:	0e1b      	lsrs	r3, r3, #24
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002de0:	4b32      	ldr	r3, [pc, #200]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de6:	0f1b      	lsrs	r3, r3, #28
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	019a      	lsls	r2, r3, #6
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	061b      	lsls	r3, r3, #24
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	071b      	lsls	r3, r3, #28
 8002e06:	4929      	ldr	r1, [pc, #164]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d028      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e1a:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e20:	0e1b      	lsrs	r3, r3, #24
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e28:	4b20      	ldr	r3, [pc, #128]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	019a      	lsls	r2, r3, #6
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	431a      	orrs	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	071b      	lsls	r3, r3, #28
 8002e4e:	4917      	ldr	r1, [pc, #92]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	4911      	ldr	r1, [pc, #68]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0e      	ldr	r2, [pc, #56]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e78:	f7fe f90c 	bl	8001094 <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e80:	f7fe f908 	bl	8001094 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	@ 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e007      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e92:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e9e:	d1ef      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800

08002eb0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e022      	b.n	8002f08 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d105      	bne.n	8002eda <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fd fe63 	bl	8000ba0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2203      	movs	r2, #3
 8002ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f814 	bl	8002f10 <HAL_SD_InitCard>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00a      	b.n	8002f08 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b08e      	sub	sp, #56	@ 0x38
 8002f14:	af04      	add	r7, sp, #16
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002f2c:	2376      	movs	r3, #118	@ 0x76
 8002f2e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681d      	ldr	r5, [r3, #0]
 8002f34:	466c      	mov	r4, sp
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f001 ffff 	bl	8004f4c <SDMMC_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e059      	b.n	8003014 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f6e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 f833 	bl	8004fe0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f88:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	f7fe f88e 	bl	80010ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fe67 	bl	8003c64 <SD_PowerON>
 8002f96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e02e      	b.n	8003014 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fd86 	bl	8003ac8 <SD_InitCard>
 8002fbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e01b      	b.n	8003014 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 f88d 	bl	8005104 <SDMMC_CmdBlockLength>
 8002fea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00f      	beq.n	8003012 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a09      	ldr	r2, [pc, #36]	@ (800301c <HAL_SD_InitCard+0x10c>)
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3728      	adds	r7, #40	@ 0x28
 8003018:	46bd      	mov	sp, r7
 800301a:	bdb0      	pop	{r4, r5, r7, pc}
 800301c:	004005ff 	.word	0x004005ff

08003020 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b092      	sub	sp, #72	@ 0x48
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800302e:	f7fe f831 	bl	8001094 <HAL_GetTick>
 8003032:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d107      	bne.n	8003052 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003046:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e1bd      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	f040 81b0 	bne.w	80033c0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003066:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	441a      	add	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	429a      	cmp	r2, r3
 8003072:	d907      	bls.n	8003084 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003078:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e1a4      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2203      	movs	r2, #3
 8003088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003098:	2b01      	cmp	r3, #1
 800309a:	d002      	beq.n	80030a2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800309c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309e:	025b      	lsls	r3, r3, #9
 80030a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	025b      	lsls	r3, r3, #9
 80030ac:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80030ae:	2390      	movs	r3, #144	@ 0x90
 80030b0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80030b2:	2302      	movs	r3, #2
 80030b4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f107 0214 	add.w	r2, r7, #20
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 ffef 	bl	80050ac <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d90a      	bls.n	80030ea <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2202      	movs	r2, #2
 80030d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 f853 	bl	800518c <SDMMC_CmdReadMultiBlock>
 80030e6:	6478      	str	r0, [r7, #68]	@ 0x44
 80030e8:	e009      	b.n	80030fe <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 f826 	bl	8005148 <SDMMC_CmdReadSingleBlock>
 80030fc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80030fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003100:	2b00      	cmp	r3, #0
 8003102:	d012      	beq.n	800312a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a7a      	ldr	r2, [pc, #488]	@ (80032f4 <HAL_SD_ReadBlocks+0x2d4>)
 800310a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003112:	431a      	orrs	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e151      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800312e:	e061      	b.n	80031f4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003136:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d03c      	beq.n	80031b8 <HAL_SD_ReadBlocks+0x198>
 800313e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003140:	2b00      	cmp	r3, #0
 8003142:	d039      	beq.n	80031b8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003144:	2300      	movs	r3, #0
 8003146:	643b      	str	r3, [r7, #64]	@ 0x40
 8003148:	e033      	b.n	80031b2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f001 ff28 	bl	8004fa4 <SDMMC_ReadFIFO>
 8003154:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003158:	b2da      	uxtb	r2, r3
 800315a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003160:	3301      	adds	r3, #1
 8003162:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003166:	3b01      	subs	r3, #1
 8003168:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800316a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	b2da      	uxtb	r2, r3
 8003170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003172:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	3301      	adds	r3, #1
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800317a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800317c:	3b01      	subs	r3, #1
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	b2da      	uxtb	r2, r3
 8003186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003188:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318c:	3301      	adds	r3, #1
 800318e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003192:	3b01      	subs	r3, #1
 8003194:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003198:	0e1b      	lsrs	r3, r3, #24
 800319a:	b2da      	uxtb	r2, r3
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80031a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a2:	3301      	adds	r3, #1
 80031a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80031a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a8:	3b01      	subs	r3, #1
 80031aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80031ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ae:	3301      	adds	r3, #1
 80031b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b4:	2b07      	cmp	r3, #7
 80031b6:	d9c8      	bls.n	800314a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031b8:	f7fd ff6c 	bl	8001094 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d902      	bls.n	80031ce <HAL_SD_ReadBlocks+0x1ae>
 80031c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d112      	bne.n	80031f4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a48      	ldr	r2, [pc, #288]	@ (80032f4 <HAL_SD_ReadBlocks+0x2d4>)
 80031d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031da:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0ec      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fa:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d096      	beq.n	8003130 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d022      	beq.n	8003256 <HAL_SD_ReadBlocks+0x236>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d91f      	bls.n	8003256 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	2b03      	cmp	r3, #3
 800321c:	d01b      	beq.n	8003256 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f002 f818 	bl	8005258 <SDMMC_CmdStopTransfer>
 8003228:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800322a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2f      	ldr	r2, [pc, #188]	@ (80032f4 <HAL_SD_ReadBlocks+0x2d4>)
 8003236:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800323c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323e:	431a      	orrs	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0bb      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d012      	beq.n	800328a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a22      	ldr	r2, [pc, #136]	@ (80032f4 <HAL_SD_ReadBlocks+0x2d4>)
 800326a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	f043 0208 	orr.w	r2, r3, #8
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0a1      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a15      	ldr	r2, [pc, #84]	@ (80032f4 <HAL_SD_ReadBlocks+0x2d4>)
 800329e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a4:	f043 0202 	orr.w	r2, r3, #2
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e087      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d064      	beq.n	8003396 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a08      	ldr	r2, [pc, #32]	@ (80032f4 <HAL_SD_ReadBlocks+0x2d4>)
 80032d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06d      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
 80032f2:	bf00      	nop
 80032f4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 fe51 	bl	8004fa4 <SDMMC_ReadFIFO>
 8003302:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003306:	b2da      	uxtb	r2, r3
 8003308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800330c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330e:	3301      	adds	r3, #1
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003314:	3b01      	subs	r3, #1
 8003316:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	b2da      	uxtb	r2, r3
 800331e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003320:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003324:	3301      	adds	r3, #1
 8003326:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332a:	3b01      	subs	r3, #1
 800332c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	b2da      	uxtb	r2, r3
 8003334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003336:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333a:	3301      	adds	r3, #1
 800333c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800333e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003340:	3b01      	subs	r3, #1
 8003342:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003346:	0e1b      	lsrs	r3, r3, #24
 8003348:	b2da      	uxtb	r2, r3
 800334a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800334e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003350:	3301      	adds	r3, #1
 8003352:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003356:	3b01      	subs	r3, #1
 8003358:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800335a:	f7fd fe9b 	bl	8001094 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003366:	429a      	cmp	r2, r3
 8003368:	d902      	bls.n	8003370 <HAL_SD_ReadBlocks+0x350>
 800336a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800336c:	2b00      	cmp	r3, #0
 800336e:	d112      	bne.n	8003396 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_SD_ReadBlocks+0x3b8>)
 8003376:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e01b      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_SD_ReadBlocks+0x38a>
 80033a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1a6      	bne.n	80032f8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f240 523a 	movw	r2, #1338	@ 0x53a
 80033b2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e006      	b.n	80033ce <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3748      	adds	r7, #72	@ 0x48
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	004005ff 	.word	0x004005ff

080033dc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b092      	sub	sp, #72	@ 0x48
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80033ea:	f7fd fe53 	bl	8001094 <HAL_GetTick>
 80033ee:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003402:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e165      	b.n	80036da <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	f040 8158 	bne.w	80036cc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	441a      	add	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342c:	429a      	cmp	r2, r3
 800342e:	d907      	bls.n	8003440 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e14c      	b.n	80036da <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2203      	movs	r2, #3
 8003444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2200      	movs	r2, #0
 800344e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003454:	2b01      	cmp	r3, #1
 8003456:	d002      	beq.n	800345e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345a:	025b      	lsls	r3, r3, #9
 800345c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800345e:	f04f 33ff 	mov.w	r3, #4294967295
 8003462:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	025b      	lsls	r3, r3, #9
 8003468:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800346a:	2390      	movs	r3, #144	@ 0x90
 800346c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003472:	2300      	movs	r3, #0
 8003474:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003476:	2301      	movs	r3, #1
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f107 0218 	add.w	r2, r7, #24
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f001 fe11 	bl	80050ac <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d90a      	bls.n	80034a6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800349c:	4618      	mov	r0, r3
 800349e:	f001 feb9 	bl	8005214 <SDMMC_CmdWriteMultiBlock>
 80034a2:	6478      	str	r0, [r7, #68]	@ 0x44
 80034a4:	e009      	b.n	80034ba <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2210      	movs	r2, #16
 80034aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 fe8c 	bl	80051d0 <SDMMC_CmdWriteSingleBlock>
 80034b8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80034ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a87      	ldr	r2, [pc, #540]	@ (80036e4 <HAL_SD_WriteBlocks+0x308>)
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ce:	431a      	orrs	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0f9      	b.n	80036da <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80034ea:	e065      	b.n	80035b8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d040      	beq.n	800357c <HAL_SD_WriteBlocks+0x1a0>
 80034fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d03d      	beq.n	800357c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003500:	2300      	movs	r3, #0
 8003502:	643b      	str	r3, [r7, #64]	@ 0x40
 8003504:	e037      	b.n	8003576 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800350c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350e:	3301      	adds	r3, #1
 8003510:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003514:	3b01      	subs	r3, #1
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	021a      	lsls	r2, r3, #8
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003526:	3301      	adds	r3, #1
 8003528:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800352a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800352c:	3b01      	subs	r3, #1
 800352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	041a      	lsls	r2, r3, #16
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	3301      	adds	r3, #1
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003544:	3b01      	subs	r3, #1
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	061a      	lsls	r2, r3, #24
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	3301      	adds	r3, #1
 8003558:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800355a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355c:	3b01      	subs	r3, #1
 800355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f107 0214 	add.w	r2, r7, #20
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fd27 	bl	8004fbe <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003572:	3301      	adds	r3, #1
 8003574:	643b      	str	r3, [r7, #64]	@ 0x40
 8003576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003578:	2b07      	cmp	r3, #7
 800357a:	d9c4      	bls.n	8003506 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800357c:	f7fd fd8a 	bl	8001094 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003588:	429a      	cmp	r2, r3
 800358a:	d902      	bls.n	8003592 <HAL_SD_WriteBlocks+0x1b6>
 800358c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800358e:	2b00      	cmp	r3, #0
 8003590:	d112      	bne.n	80035b8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a53      	ldr	r2, [pc, #332]	@ (80036e4 <HAL_SD_WriteBlocks+0x308>)
 8003598:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800359e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e090      	b.n	80036da <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035be:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d092      	beq.n	80034ec <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d022      	beq.n	800361a <HAL_SD_WriteBlocks+0x23e>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d91f      	bls.n	800361a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d01b      	beq.n	800361a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 fe36 	bl	8005258 <SDMMC_CmdStopTransfer>
 80035ec:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80035ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d012      	beq.n	800361a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a3a      	ldr	r2, [pc, #232]	@ (80036e4 <HAL_SD_WriteBlocks+0x308>)
 80035fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e05f      	b.n	80036da <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2d      	ldr	r2, [pc, #180]	@ (80036e4 <HAL_SD_WriteBlocks+0x308>)
 800362e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	f043 0208 	orr.w	r2, r3, #8
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e045      	b.n	80036da <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a20      	ldr	r2, [pc, #128]	@ (80036e4 <HAL_SD_WriteBlocks+0x308>)
 8003662:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003668:	f043 0202 	orr.w	r2, r3, #2
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e02b      	b.n	80036da <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d012      	beq.n	80036b6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <HAL_SD_WriteBlocks+0x308>)
 8003696:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	f043 0210 	orr.w	r2, r3, #16
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e011      	b.n	80036da <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f240 523a 	movw	r2, #1338	@ 0x53a
 80036be:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e006      	b.n	80036da <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
  }
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3748      	adds	r7, #72	@ 0x48
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	004005ff 	.word	0x004005ff

080036e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036f6:	0f9b      	lsrs	r3, r3, #30
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003714:	0e1b      	lsrs	r3, r3, #24
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	b2da      	uxtb	r2, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	b2da      	uxtb	r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b2da      	uxtb	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800373e:	b2da      	uxtb	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003748:	0d1b      	lsrs	r3, r3, #20
 800374a:	b29a      	uxth	r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	b2da      	uxtb	r2, r3
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003766:	0bdb      	lsrs	r3, r3, #15
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	b2da      	uxtb	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003778:	0b9b      	lsrs	r3, r3, #14
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	b2da      	uxtb	r2, r3
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800378a:	0b5b      	lsrs	r3, r3, #13
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	b2da      	uxtb	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800379c:	0b1b      	lsrs	r3, r3, #12
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2200      	movs	r2, #0
 80037ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d163      	bne.n	8003880 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037bc:	009a      	lsls	r2, r3, #2
 80037be:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037c2:	4013      	ands	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80037c8:	0f92      	lsrs	r2, r2, #30
 80037ca:	431a      	orrs	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d4:	0edb      	lsrs	r3, r3, #27
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e6:	0e1b      	lsrs	r3, r3, #24
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f8:	0d5b      	lsrs	r3, r3, #21
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	b2da      	uxtb	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800380a:	0c9b      	lsrs	r3, r3, #18
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	b2da      	uxtb	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800381c:	0bdb      	lsrs	r3, r3, #15
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	b2da      	uxtb	r2, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	7e1b      	ldrb	r3, [r3, #24]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	3302      	adds	r3, #2
 8003840:	2201      	movs	r2, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800384a:	fb03 f202 	mul.w	r2, r3, r2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	7a1b      	ldrb	r3, [r3, #8]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800386c:	0a52      	lsrs	r2, r2, #9
 800386e:	fb03 f202 	mul.w	r2, r3, r2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800387c:	661a      	str	r2, [r3, #96]	@ 0x60
 800387e:	e031      	b.n	80038e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003884:	2b01      	cmp	r3, #1
 8003886:	d11d      	bne.n	80038c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003896:	0c1b      	lsrs	r3, r3, #16
 8003898:	431a      	orrs	r2, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	3301      	adds	r3, #1
 80038a4:	029a      	lsls	r2, r3, #10
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038b8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80038c2:	e00f      	b.n	80038e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a58      	ldr	r2, [pc, #352]	@ (8003a2c <HAL_SD_GetCardCSD+0x344>)
 80038ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e09d      	b.n	8003a20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e8:	0b9b      	lsrs	r3, r3, #14
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038fa:	09db      	lsrs	r3, r3, #7
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003902:	b2da      	uxtb	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003912:	b2da      	uxtb	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391c:	0fdb      	lsrs	r3, r3, #31
 800391e:	b2da      	uxtb	r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003928:	0f5b      	lsrs	r3, r3, #29
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	b2da      	uxtb	r2, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	b2da      	uxtb	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394c:	0d9b      	lsrs	r3, r3, #22
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	b2da      	uxtb	r2, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395e:	0d5b      	lsrs	r3, r3, #21
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397a:	0c1b      	lsrs	r3, r3, #16
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	b2da      	uxtb	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	0bdb      	lsrs	r3, r3, #15
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	b2da      	uxtb	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a2:	0b9b      	lsrs	r3, r3, #14
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b6:	0b5b      	lsrs	r3, r3, #13
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	0b1b      	lsrs	r3, r3, #12
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	004005ff 	.word	0x004005ff

08003a30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003a94:	f107 030c 	add.w	r3, r7, #12
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f970 	bl	8003d80 <SD_SendStatus>
 8003aa0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	0a5b      	lsrs	r3, r3, #9
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003abe:	693b      	ldr	r3, [r7, #16]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ac8:	b5b0      	push	{r4, r5, r7, lr}
 8003aca:	b094      	sub	sp, #80	@ 0x50
 8003acc:	af04      	add	r7, sp, #16
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 fa8f 	bl	8004ffc <SDMMC_GetPowerState>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ae4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003ae8:	e0b8      	b.n	8003c5c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d02f      	beq.n	8003b52 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fc76 	bl	80053e8 <SDMMC_CmdSendCID>
 8003afc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <SD_InitCard+0x40>
    {
      return errorstate;
 8003b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b06:	e0a9      	b.n	8003c5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 fab9 	bl	8005086 <SDMMC_GetResponse>
 8003b14:	4602      	mov	r2, r0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2104      	movs	r1, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 fab0 	bl	8005086 <SDMMC_GetResponse>
 8003b26:	4602      	mov	r2, r0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2108      	movs	r1, #8
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 faa7 	bl	8005086 <SDMMC_GetResponse>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	210c      	movs	r1, #12
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 fa9e 	bl	8005086 <SDMMC_GetResponse>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d00d      	beq.n	8003b76 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f107 020e 	add.w	r2, r7, #14
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 fc7c 	bl	8005462 <SDMMC_CmdSetRelAdd>
 8003b6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <SD_InitCard+0xae>
    {
      return errorstate;
 8003b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b74:	e072      	b.n	8003c5c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d036      	beq.n	8003bec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003b7e:	89fb      	ldrh	r3, [r7, #14]
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f001 fc46 	bl	8005424 <SDMMC_CmdSendCSD>
 8003b98:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba2:	e05b      	b.n	8003c5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 fa6b 	bl	8005086 <SDMMC_GetResponse>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2104      	movs	r1, #4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 fa62 	bl	8005086 <SDMMC_GetResponse>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2108      	movs	r1, #8
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 fa59 	bl	8005086 <SDMMC_GetResponse>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	210c      	movs	r1, #12
 8003be0:	4618      	mov	r0, r3
 8003be2:	f001 fa50 	bl	8005086 <SDMMC_GetResponse>
 8003be6:	4602      	mov	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 fa47 	bl	8005086 <SDMMC_GetResponse>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	0d1a      	lsrs	r2, r3, #20
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fd6e 	bl	80036e8 <HAL_SD_GetCardCSD>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c12:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003c16:	e021      	b.n	8003c5c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6819      	ldr	r1, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	2200      	movs	r2, #0
 8003c24:	461c      	mov	r4, r3
 8003c26:	4615      	mov	r5, r2
 8003c28:	4622      	mov	r2, r4
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	f001 fb35 	bl	800529c <SDMMC_CmdSelDesel>
 8003c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <SD_InitCard+0x176>
  {
    return errorstate;
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3c:	e00e      	b.n	8003c5c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681d      	ldr	r5, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	466c      	mov	r4, sp
 8003c46:	f103 0210 	add.w	r2, r3, #16
 8003c4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c50:	3304      	adds	r3, #4
 8003c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c54:	4628      	mov	r0, r5
 8003c56:	f001 f979 	bl	8004f4c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3740      	adds	r7, #64	@ 0x40
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bdb0      	pop	{r4, r5, r7, pc}

08003c64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fb30 	bl	80052e2 <SDMMC_CmdGoIdleState>
 8003c82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <SD_PowerON+0x2a>
  {
    return errorstate;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	e072      	b.n	8003d74 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 fb43 	bl	800531e <SDMMC_CmdOperCond>
 8003c98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fb19 	bl	80052e2 <SDMMC_CmdGoIdleState>
 8003cb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	e05b      	b.n	8003d74 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d137      	bne.n	8003d3a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 fb43 	bl	800535c <SDMMC_CmdAppCommand>
 8003cd6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d02d      	beq.n	8003d3a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003cde:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003ce2:	e047      	b.n	8003d74 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 fb36 	bl	800535c <SDMMC_CmdAppCommand>
 8003cf0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <SD_PowerON+0x98>
    {
      return errorstate;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	e03b      	b.n	8003d74 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	491e      	ldr	r1, [pc, #120]	@ (8003d7c <SD_PowerON+0x118>)
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 fb4c 	bl	80053a0 <SDMMC_CmdAppOperCommand>
 8003d08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d10:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003d14:	e02e      	b.n	8003d74 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 f9b2 	bl	8005086 <SDMMC_GetResponse>
 8003d22:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	0fdb      	lsrs	r3, r3, #31
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <SD_PowerON+0xcc>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <SD_PowerON+0xce>
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]

    count++;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d802      	bhi.n	8003d4a <SD_PowerON+0xe6>
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0cc      	beq.n	8003ce4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d902      	bls.n	8003d5a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003d54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d58:	e00c      	b.n	8003d74 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d6a:	e002      	b.n	8003d72 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	c1100000 	.word	0xc1100000

08003d80 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003d90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d94:	e018      	b.n	8003dc8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f001 fb7e 	bl	80054a4 <SDMMC_CmdSendStatus>
 8003da8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	e009      	b.n	8003dc8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 f963 	bl	8005086 <SDMMC_GetResponse>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e049      	b.n	8003e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fc ff58 	bl	8000cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 f970 	bl	80040f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e04c      	b.n	8003f32 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	@ (8003f40 <HAL_TIM_Base_Start+0xc0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d022      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x70>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb2:	d01d      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x70>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	@ (8003f44 <HAL_TIM_Base_Start+0xc4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d018      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x70>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a21      	ldr	r2, [pc, #132]	@ (8003f48 <HAL_TIM_Base_Start+0xc8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d013      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x70>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f4c <HAL_TIM_Base_Start+0xcc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x70>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f50 <HAL_TIM_Base_Start+0xd0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d009      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x70>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f54 <HAL_TIM_Base_Start+0xd4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x70>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <HAL_TIM_Base_Start+0xd8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d115      	bne.n	8003f1c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	4b19      	ldr	r3, [pc, #100]	@ (8003f5c <HAL_TIM_Base_Start+0xdc>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d015      	beq.n	8003f2e <HAL_TIM_Base_Start+0xae>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f08:	d011      	beq.n	8003f2e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1a:	e008      	b.n	8003f2e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e000      	b.n	8003f30 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800
 8003f5c:	00010007 	.word	0x00010007

08003f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e0b4      	b.n	80040e6 <HAL_TIM_ConfigClockSource+0x186>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	4b56      	ldr	r3, [pc, #344]	@ (80040f0 <HAL_TIM_ConfigClockSource+0x190>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb4:	d03e      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0xd4>
 8003fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fba:	f200 8087 	bhi.w	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc2:	f000 8086 	beq.w	80040d2 <HAL_TIM_ConfigClockSource+0x172>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fca:	d87f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b70      	cmp	r3, #112	@ 0x70
 8003fce:	d01a      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0xa6>
 8003fd0:	2b70      	cmp	r3, #112	@ 0x70
 8003fd2:	d87b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b60      	cmp	r3, #96	@ 0x60
 8003fd6:	d050      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x11a>
 8003fd8:	2b60      	cmp	r3, #96	@ 0x60
 8003fda:	d877      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b50      	cmp	r3, #80	@ 0x50
 8003fde:	d03c      	beq.n	800405a <HAL_TIM_ConfigClockSource+0xfa>
 8003fe0:	2b50      	cmp	r3, #80	@ 0x50
 8003fe2:	d873      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	d058      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x13a>
 8003fe8:	2b40      	cmp	r3, #64	@ 0x40
 8003fea:	d86f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b30      	cmp	r3, #48	@ 0x30
 8003fee:	d064      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff0:	2b30      	cmp	r3, #48	@ 0x30
 8003ff2:	d86b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d060      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d867      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05c      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b10      	cmp	r3, #16
 8004002:	d05a      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	e062      	b.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	f000 f993 	bl	8004340 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	609a      	str	r2, [r3, #8]
      break;
 8004032:	e04f      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004044:	f000 f97c 	bl	8004340 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004056:	609a      	str	r2, [r3, #8]
      break;
 8004058:	e03c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	461a      	mov	r2, r3
 8004068:	f000 f8f0 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2150      	movs	r1, #80	@ 0x50
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f949 	bl	800430a <TIM_ITRx_SetConfig>
      break;
 8004078:	e02c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004086:	461a      	mov	r2, r3
 8004088:	f000 f90f 	bl	80042aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2160      	movs	r1, #96	@ 0x60
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f939 	bl	800430a <TIM_ITRx_SetConfig>
      break;
 8004098:	e01c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 f8d0 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2140      	movs	r1, #64	@ 0x40
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f929 	bl	800430a <TIM_ITRx_SetConfig>
      break;
 80040b8:	e00c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 f920 	bl	800430a <TIM_ITRx_SetConfig>
      break;
 80040ca:	e003      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e000      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	fffeff88 	.word	0xfffeff88

080040f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a46      	ldr	r2, [pc, #280]	@ (8004220 <TIM_Base_SetConfig+0x12c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d013      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004112:	d00f      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a43      	ldr	r2, [pc, #268]	@ (8004224 <TIM_Base_SetConfig+0x130>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00b      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a42      	ldr	r2, [pc, #264]	@ (8004228 <TIM_Base_SetConfig+0x134>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d007      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a41      	ldr	r2, [pc, #260]	@ (800422c <TIM_Base_SetConfig+0x138>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a40      	ldr	r2, [pc, #256]	@ (8004230 <TIM_Base_SetConfig+0x13c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d108      	bne.n	8004146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a35      	ldr	r2, [pc, #212]	@ (8004220 <TIM_Base_SetConfig+0x12c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d02b      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004154:	d027      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a32      	ldr	r2, [pc, #200]	@ (8004224 <TIM_Base_SetConfig+0x130>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d023      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a31      	ldr	r2, [pc, #196]	@ (8004228 <TIM_Base_SetConfig+0x134>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01f      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a30      	ldr	r2, [pc, #192]	@ (800422c <TIM_Base_SetConfig+0x138>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01b      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2f      	ldr	r2, [pc, #188]	@ (8004230 <TIM_Base_SetConfig+0x13c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d017      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2e      	ldr	r2, [pc, #184]	@ (8004234 <TIM_Base_SetConfig+0x140>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2d      	ldr	r2, [pc, #180]	@ (8004238 <TIM_Base_SetConfig+0x144>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00f      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a2c      	ldr	r2, [pc, #176]	@ (800423c <TIM_Base_SetConfig+0x148>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00b      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2b      	ldr	r2, [pc, #172]	@ (8004240 <TIM_Base_SetConfig+0x14c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2a      	ldr	r2, [pc, #168]	@ (8004244 <TIM_Base_SetConfig+0x150>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a29      	ldr	r2, [pc, #164]	@ (8004248 <TIM_Base_SetConfig+0x154>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a10      	ldr	r2, [pc, #64]	@ (8004220 <TIM_Base_SetConfig+0x12c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0xf8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a12      	ldr	r2, [pc, #72]	@ (8004230 <TIM_Base_SetConfig+0x13c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d103      	bne.n	80041f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	611a      	str	r2, [r3, #16]
  }
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40010000 	.word	0x40010000
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40010400 	.word	0x40010400
 8004234:	40014000 	.word	0x40014000
 8004238:	40014400 	.word	0x40014400
 800423c:	40014800 	.word	0x40014800
 8004240:	40001800 	.word	0x40001800
 8004244:	40001c00 	.word	0x40001c00
 8004248:	40002000 	.word	0x40002000

0800424c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 030a 	bic.w	r3, r3, #10
 8004288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b087      	sub	sp, #28
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f023 0210 	bic.w	r2, r3, #16
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	031b      	lsls	r3, r3, #12
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	f043 0307 	orr.w	r3, r3, #7
 800432c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800435a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	021a      	lsls	r2, r3, #8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	431a      	orrs	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4313      	orrs	r3, r2
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	609a      	str	r2, [r3, #8]
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004394:	2302      	movs	r3, #2
 8004396:	e06d      	b.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d108      	bne.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a20      	ldr	r2, [pc, #128]	@ (8004480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440a:	d01d      	beq.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1d      	ldr	r2, [pc, #116]	@ (8004488 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1c      	ldr	r2, [pc, #112]	@ (800448c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1a      	ldr	r2, [pc, #104]	@ (8004490 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a16      	ldr	r2, [pc, #88]	@ (8004494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10c      	bne.n	8004462 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800444e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40010000 	.word	0x40010000
 8004484:	40010400 	.word	0x40010400
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40000c00 	.word	0x40000c00
 8004494:	40014000 	.word	0x40014000
 8004498:	40001800 	.word	0x40001800

0800449c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e040      	b.n	8004530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc fc14 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2224      	movs	r2, #36	@ 0x24
 80044c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fb16 	bl	8004b14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f8af 	bl	800464c <UART_SetConfig>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e01b      	b.n	8004530 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fb95 	bl	8004c58 <UART_CheckIdleState>
 800452e:	4603      	mov	r3, r0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	@ 0x28
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800454c:	2b20      	cmp	r3, #32
 800454e:	d177      	bne.n	8004640 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_UART_Transmit+0x24>
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e070      	b.n	8004642 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2221      	movs	r2, #33	@ 0x21
 800456c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800456e:	f7fc fd91 	bl	8001094 <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458c:	d108      	bne.n	80045a0 <HAL_UART_Transmit+0x68>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e003      	b.n	80045a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045a8:	e02f      	b.n	800460a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2180      	movs	r1, #128	@ 0x80
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fbf7 	bl	8004da8 <UART_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e03b      	b.n	8004642 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	3302      	adds	r3, #2
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e007      	b.n	80045f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	781a      	ldrb	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3301      	adds	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1c9      	bne.n	80045aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	2140      	movs	r1, #64	@ 0x40
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fbc1 	bl	8004da8 <UART_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e005      	b.n	8004642 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4ba6      	ldr	r3, [pc, #664]	@ (8004910 <UART_SetConfig+0x2c4>)
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	6979      	ldr	r1, [r7, #20]
 8004680:	430b      	orrs	r3, r1
 8004682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a94      	ldr	r2, [pc, #592]	@ (8004914 <UART_SetConfig+0x2c8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d120      	bne.n	800470a <UART_SetConfig+0xbe>
 80046c8:	4b93      	ldr	r3, [pc, #588]	@ (8004918 <UART_SetConfig+0x2cc>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d816      	bhi.n	8004704 <UART_SetConfig+0xb8>
 80046d6:	a201      	add	r2, pc, #4	@ (adr r2, 80046dc <UART_SetConfig+0x90>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	080046f9 	.word	0x080046f9
 80046e4:	080046f3 	.word	0x080046f3
 80046e8:	080046ff 	.word	0x080046ff
 80046ec:	2301      	movs	r3, #1
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e150      	b.n	8004994 <UART_SetConfig+0x348>
 80046f2:	2302      	movs	r3, #2
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e14d      	b.n	8004994 <UART_SetConfig+0x348>
 80046f8:	2304      	movs	r3, #4
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e14a      	b.n	8004994 <UART_SetConfig+0x348>
 80046fe:	2308      	movs	r3, #8
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e147      	b.n	8004994 <UART_SetConfig+0x348>
 8004704:	2310      	movs	r3, #16
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e144      	b.n	8004994 <UART_SetConfig+0x348>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a83      	ldr	r2, [pc, #524]	@ (800491c <UART_SetConfig+0x2d0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d132      	bne.n	800477a <UART_SetConfig+0x12e>
 8004714:	4b80      	ldr	r3, [pc, #512]	@ (8004918 <UART_SetConfig+0x2cc>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d828      	bhi.n	8004774 <UART_SetConfig+0x128>
 8004722:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <UART_SetConfig+0xdc>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	0800475d 	.word	0x0800475d
 800472c:	08004775 	.word	0x08004775
 8004730:	08004775 	.word	0x08004775
 8004734:	08004775 	.word	0x08004775
 8004738:	08004769 	.word	0x08004769
 800473c:	08004775 	.word	0x08004775
 8004740:	08004775 	.word	0x08004775
 8004744:	08004775 	.word	0x08004775
 8004748:	08004763 	.word	0x08004763
 800474c:	08004775 	.word	0x08004775
 8004750:	08004775 	.word	0x08004775
 8004754:	08004775 	.word	0x08004775
 8004758:	0800476f 	.word	0x0800476f
 800475c:	2300      	movs	r3, #0
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e118      	b.n	8004994 <UART_SetConfig+0x348>
 8004762:	2302      	movs	r3, #2
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e115      	b.n	8004994 <UART_SetConfig+0x348>
 8004768:	2304      	movs	r3, #4
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e112      	b.n	8004994 <UART_SetConfig+0x348>
 800476e:	2308      	movs	r3, #8
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e10f      	b.n	8004994 <UART_SetConfig+0x348>
 8004774:	2310      	movs	r3, #16
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e10c      	b.n	8004994 <UART_SetConfig+0x348>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a68      	ldr	r2, [pc, #416]	@ (8004920 <UART_SetConfig+0x2d4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d120      	bne.n	80047c6 <UART_SetConfig+0x17a>
 8004784:	4b64      	ldr	r3, [pc, #400]	@ (8004918 <UART_SetConfig+0x2cc>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800478e:	2b30      	cmp	r3, #48	@ 0x30
 8004790:	d013      	beq.n	80047ba <UART_SetConfig+0x16e>
 8004792:	2b30      	cmp	r3, #48	@ 0x30
 8004794:	d814      	bhi.n	80047c0 <UART_SetConfig+0x174>
 8004796:	2b20      	cmp	r3, #32
 8004798:	d009      	beq.n	80047ae <UART_SetConfig+0x162>
 800479a:	2b20      	cmp	r3, #32
 800479c:	d810      	bhi.n	80047c0 <UART_SetConfig+0x174>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <UART_SetConfig+0x15c>
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d006      	beq.n	80047b4 <UART_SetConfig+0x168>
 80047a6:	e00b      	b.n	80047c0 <UART_SetConfig+0x174>
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e0f2      	b.n	8004994 <UART_SetConfig+0x348>
 80047ae:	2302      	movs	r3, #2
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e0ef      	b.n	8004994 <UART_SetConfig+0x348>
 80047b4:	2304      	movs	r3, #4
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e0ec      	b.n	8004994 <UART_SetConfig+0x348>
 80047ba:	2308      	movs	r3, #8
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e0e9      	b.n	8004994 <UART_SetConfig+0x348>
 80047c0:	2310      	movs	r3, #16
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e0e6      	b.n	8004994 <UART_SetConfig+0x348>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a56      	ldr	r2, [pc, #344]	@ (8004924 <UART_SetConfig+0x2d8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d120      	bne.n	8004812 <UART_SetConfig+0x1c6>
 80047d0:	4b51      	ldr	r3, [pc, #324]	@ (8004918 <UART_SetConfig+0x2cc>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047da:	2bc0      	cmp	r3, #192	@ 0xc0
 80047dc:	d013      	beq.n	8004806 <UART_SetConfig+0x1ba>
 80047de:	2bc0      	cmp	r3, #192	@ 0xc0
 80047e0:	d814      	bhi.n	800480c <UART_SetConfig+0x1c0>
 80047e2:	2b80      	cmp	r3, #128	@ 0x80
 80047e4:	d009      	beq.n	80047fa <UART_SetConfig+0x1ae>
 80047e6:	2b80      	cmp	r3, #128	@ 0x80
 80047e8:	d810      	bhi.n	800480c <UART_SetConfig+0x1c0>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <UART_SetConfig+0x1a8>
 80047ee:	2b40      	cmp	r3, #64	@ 0x40
 80047f0:	d006      	beq.n	8004800 <UART_SetConfig+0x1b4>
 80047f2:	e00b      	b.n	800480c <UART_SetConfig+0x1c0>
 80047f4:	2300      	movs	r3, #0
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e0cc      	b.n	8004994 <UART_SetConfig+0x348>
 80047fa:	2302      	movs	r3, #2
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e0c9      	b.n	8004994 <UART_SetConfig+0x348>
 8004800:	2304      	movs	r3, #4
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e0c6      	b.n	8004994 <UART_SetConfig+0x348>
 8004806:	2308      	movs	r3, #8
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e0c3      	b.n	8004994 <UART_SetConfig+0x348>
 800480c:	2310      	movs	r3, #16
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e0c0      	b.n	8004994 <UART_SetConfig+0x348>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a44      	ldr	r2, [pc, #272]	@ (8004928 <UART_SetConfig+0x2dc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d125      	bne.n	8004868 <UART_SetConfig+0x21c>
 800481c:	4b3e      	ldr	r3, [pc, #248]	@ (8004918 <UART_SetConfig+0x2cc>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800482a:	d017      	beq.n	800485c <UART_SetConfig+0x210>
 800482c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004830:	d817      	bhi.n	8004862 <UART_SetConfig+0x216>
 8004832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004836:	d00b      	beq.n	8004850 <UART_SetConfig+0x204>
 8004838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800483c:	d811      	bhi.n	8004862 <UART_SetConfig+0x216>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <UART_SetConfig+0x1fe>
 8004842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004846:	d006      	beq.n	8004856 <UART_SetConfig+0x20a>
 8004848:	e00b      	b.n	8004862 <UART_SetConfig+0x216>
 800484a:	2300      	movs	r3, #0
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e0a1      	b.n	8004994 <UART_SetConfig+0x348>
 8004850:	2302      	movs	r3, #2
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e09e      	b.n	8004994 <UART_SetConfig+0x348>
 8004856:	2304      	movs	r3, #4
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e09b      	b.n	8004994 <UART_SetConfig+0x348>
 800485c:	2308      	movs	r3, #8
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e098      	b.n	8004994 <UART_SetConfig+0x348>
 8004862:	2310      	movs	r3, #16
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e095      	b.n	8004994 <UART_SetConfig+0x348>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2f      	ldr	r2, [pc, #188]	@ (800492c <UART_SetConfig+0x2e0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d125      	bne.n	80048be <UART_SetConfig+0x272>
 8004872:	4b29      	ldr	r3, [pc, #164]	@ (8004918 <UART_SetConfig+0x2cc>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004878:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800487c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004880:	d017      	beq.n	80048b2 <UART_SetConfig+0x266>
 8004882:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004886:	d817      	bhi.n	80048b8 <UART_SetConfig+0x26c>
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800488c:	d00b      	beq.n	80048a6 <UART_SetConfig+0x25a>
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004892:	d811      	bhi.n	80048b8 <UART_SetConfig+0x26c>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <UART_SetConfig+0x254>
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489c:	d006      	beq.n	80048ac <UART_SetConfig+0x260>
 800489e:	e00b      	b.n	80048b8 <UART_SetConfig+0x26c>
 80048a0:	2301      	movs	r3, #1
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e076      	b.n	8004994 <UART_SetConfig+0x348>
 80048a6:	2302      	movs	r3, #2
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e073      	b.n	8004994 <UART_SetConfig+0x348>
 80048ac:	2304      	movs	r3, #4
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e070      	b.n	8004994 <UART_SetConfig+0x348>
 80048b2:	2308      	movs	r3, #8
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e06d      	b.n	8004994 <UART_SetConfig+0x348>
 80048b8:	2310      	movs	r3, #16
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e06a      	b.n	8004994 <UART_SetConfig+0x348>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004930 <UART_SetConfig+0x2e4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d138      	bne.n	800493a <UART_SetConfig+0x2ee>
 80048c8:	4b13      	ldr	r3, [pc, #76]	@ (8004918 <UART_SetConfig+0x2cc>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048d6:	d017      	beq.n	8004908 <UART_SetConfig+0x2bc>
 80048d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048dc:	d82a      	bhi.n	8004934 <UART_SetConfig+0x2e8>
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e2:	d00b      	beq.n	80048fc <UART_SetConfig+0x2b0>
 80048e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e8:	d824      	bhi.n	8004934 <UART_SetConfig+0x2e8>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <UART_SetConfig+0x2aa>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f2:	d006      	beq.n	8004902 <UART_SetConfig+0x2b6>
 80048f4:	e01e      	b.n	8004934 <UART_SetConfig+0x2e8>
 80048f6:	2300      	movs	r3, #0
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e04b      	b.n	8004994 <UART_SetConfig+0x348>
 80048fc:	2302      	movs	r3, #2
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e048      	b.n	8004994 <UART_SetConfig+0x348>
 8004902:	2304      	movs	r3, #4
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e045      	b.n	8004994 <UART_SetConfig+0x348>
 8004908:	2308      	movs	r3, #8
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e042      	b.n	8004994 <UART_SetConfig+0x348>
 800490e:	bf00      	nop
 8004910:	efff69f3 	.word	0xefff69f3
 8004914:	40011000 	.word	0x40011000
 8004918:	40023800 	.word	0x40023800
 800491c:	40004400 	.word	0x40004400
 8004920:	40004800 	.word	0x40004800
 8004924:	40004c00 	.word	0x40004c00
 8004928:	40005000 	.word	0x40005000
 800492c:	40011400 	.word	0x40011400
 8004930:	40007800 	.word	0x40007800
 8004934:	2310      	movs	r3, #16
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e02c      	b.n	8004994 <UART_SetConfig+0x348>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a72      	ldr	r2, [pc, #456]	@ (8004b08 <UART_SetConfig+0x4bc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d125      	bne.n	8004990 <UART_SetConfig+0x344>
 8004944:	4b71      	ldr	r3, [pc, #452]	@ (8004b0c <UART_SetConfig+0x4c0>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800494e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004952:	d017      	beq.n	8004984 <UART_SetConfig+0x338>
 8004954:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004958:	d817      	bhi.n	800498a <UART_SetConfig+0x33e>
 800495a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800495e:	d00b      	beq.n	8004978 <UART_SetConfig+0x32c>
 8004960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004964:	d811      	bhi.n	800498a <UART_SetConfig+0x33e>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <UART_SetConfig+0x326>
 800496a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800496e:	d006      	beq.n	800497e <UART_SetConfig+0x332>
 8004970:	e00b      	b.n	800498a <UART_SetConfig+0x33e>
 8004972:	2300      	movs	r3, #0
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e00d      	b.n	8004994 <UART_SetConfig+0x348>
 8004978:	2302      	movs	r3, #2
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e00a      	b.n	8004994 <UART_SetConfig+0x348>
 800497e:	2304      	movs	r3, #4
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e007      	b.n	8004994 <UART_SetConfig+0x348>
 8004984:	2308      	movs	r3, #8
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e004      	b.n	8004994 <UART_SetConfig+0x348>
 800498a:	2310      	movs	r3, #16
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e001      	b.n	8004994 <UART_SetConfig+0x348>
 8004990:	2310      	movs	r3, #16
 8004992:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800499c:	d15b      	bne.n	8004a56 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800499e:	7ffb      	ldrb	r3, [r7, #31]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d828      	bhi.n	80049f6 <UART_SetConfig+0x3aa>
 80049a4:	a201      	add	r2, pc, #4	@ (adr r2, 80049ac <UART_SetConfig+0x360>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049e1 	.word	0x080049e1
 80049b8:	080049f7 	.word	0x080049f7
 80049bc:	080049e7 	.word	0x080049e7
 80049c0:	080049f7 	.word	0x080049f7
 80049c4:	080049f7 	.word	0x080049f7
 80049c8:	080049f7 	.word	0x080049f7
 80049cc:	080049ef 	.word	0x080049ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7fd fe1e 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80049d4:	61b8      	str	r0, [r7, #24]
        break;
 80049d6:	e013      	b.n	8004a00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7fd fe2e 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 80049dc:	61b8      	str	r0, [r7, #24]
        break;
 80049de:	e00f      	b.n	8004a00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004b10 <UART_SetConfig+0x4c4>)
 80049e2:	61bb      	str	r3, [r7, #24]
        break;
 80049e4:	e00c      	b.n	8004a00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e6:	f7fd fd41 	bl	800246c <HAL_RCC_GetSysClockFreq>
 80049ea:	61b8      	str	r0, [r7, #24]
        break;
 80049ec:	e008      	b.n	8004a00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049f2:	61bb      	str	r3, [r7, #24]
        break;
 80049f4:	e004      	b.n	8004a00 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	77bb      	strb	r3, [r7, #30]
        break;
 80049fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d074      	beq.n	8004af0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	005a      	lsls	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	441a      	add	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	d916      	bls.n	8004a50 <UART_SetConfig+0x404>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a28:	d212      	bcs.n	8004a50 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f023 030f 	bic.w	r3, r3, #15
 8004a32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	89fb      	ldrh	r3, [r7, #14]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	89fa      	ldrh	r2, [r7, #14]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e04f      	b.n	8004af0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	77bb      	strb	r3, [r7, #30]
 8004a54:	e04c      	b.n	8004af0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d828      	bhi.n	8004aae <UART_SetConfig+0x462>
 8004a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a64 <UART_SetConfig+0x418>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	08004aaf 	.word	0x08004aaf
 8004a74:	08004a9f 	.word	0x08004a9f
 8004a78:	08004aaf 	.word	0x08004aaf
 8004a7c:	08004aaf 	.word	0x08004aaf
 8004a80:	08004aaf 	.word	0x08004aaf
 8004a84:	08004aa7 	.word	0x08004aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a88:	f7fd fdc2 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	61b8      	str	r0, [r7, #24]
        break;
 8004a8e:	e013      	b.n	8004ab8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7fd fdd2 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8004a94:	61b8      	str	r0, [r7, #24]
        break;
 8004a96:	e00f      	b.n	8004ab8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a98:	4b1d      	ldr	r3, [pc, #116]	@ (8004b10 <UART_SetConfig+0x4c4>)
 8004a9a:	61bb      	str	r3, [r7, #24]
        break;
 8004a9c:	e00c      	b.n	8004ab8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9e:	f7fd fce5 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8004aa2:	61b8      	str	r0, [r7, #24]
        break;
 8004aa4:	e008      	b.n	8004ab8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aaa:	61bb      	str	r3, [r7, #24]
        break;
 8004aac:	e004      	b.n	8004ab8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d018      	beq.n	8004af0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	085a      	lsrs	r2, r3, #1
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b0f      	cmp	r3, #15
 8004ad6:	d909      	bls.n	8004aec <UART_SetConfig+0x4a0>
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ade:	d205      	bcs.n	8004aec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	e001      	b.n	8004af0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004afc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40007c00 	.word	0x40007c00
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	00f42400 	.word	0x00f42400

08004b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01a      	beq.n	8004c2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c12:	d10a      	bne.n	8004c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b098      	sub	sp, #96	@ 0x60
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c68:	f7fc fa14 	bl	8001094 <HAL_GetTick>
 8004c6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d12e      	bne.n	8004cda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c84:	2200      	movs	r2, #0
 8004c86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f88c 	bl	8004da8 <UART_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d021      	beq.n	8004cda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004caa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cb6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e6      	bne.n	8004c96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e062      	b.n	8004da0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d149      	bne.n	8004d7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f856 	bl	8004da8 <UART_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d03c      	beq.n	8004d7c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e6      	bne.n	8004d02 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d54:	61fa      	str	r2, [r7, #28]
 8004d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	69b9      	ldr	r1, [r7, #24]
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	617b      	str	r3, [r7, #20]
   return(result);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e011      	b.n	8004da0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3758      	adds	r7, #88	@ 0x58
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db8:	e04f      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d04b      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fc f967 	bl	8001094 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e04e      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d037      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b80      	cmp	r3, #128	@ 0x80
 8004dee:	d034      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b40      	cmp	r3, #64	@ 0x40
 8004df4:	d031      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d110      	bne.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2208      	movs	r2, #8
 8004e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f838 	bl	8004e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2208      	movs	r2, #8
 8004e16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e029      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e34:	d111      	bne.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f81e 	bl	8004e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e00f      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	bf0c      	ite	eq
 8004e6a:	2301      	moveq	r3, #1
 8004e6c:	2300      	movne	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d0a0      	beq.n	8004dba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b095      	sub	sp, #84	@ 0x54
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ea8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eaa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e6      	bne.n	8004e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3308      	adds	r3, #8
 8004eda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004edc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ede:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e5      	bne.n	8004ebc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d118      	bne.n	8004f2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f023 0310 	bic.w	r3, r3, #16
 8004f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6979      	ldr	r1, [r7, #20]
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	613b      	str	r3, [r7, #16]
   return(result);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e6      	bne.n	8004ef8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f3e:	bf00      	nop
 8004f40:	3754      	adds	r7, #84	@ 0x54
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	f107 001c 	add.w	r0, r7, #28
 8004f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004f62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004f64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004f66:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004f6a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004f6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004f72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004f76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	4b07      	ldr	r3, [pc, #28]	@ (8004fa0 <SDMMC_Init+0x54>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	b004      	add	sp, #16
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	ffff8100 	.word	0xffff8100

08004fa4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2203      	movs	r2, #3
 8004fec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0303 	and.w	r3, r3, #3
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005036:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800503c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005042:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <SDMMC_SendCommand+0x50>)
 8005050:	4013      	ands	r3, r2
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	fffff000 	.word	0xfffff000

0800506c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	b2db      	uxtb	r3, r3
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3314      	adds	r3, #20
 8005094:	461a      	mov	r2, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	4413      	add	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
}  
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80050d2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80050d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80050de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0

}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005112:	2310      	movs	r3, #16
 8005114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005116:	2340      	movs	r3, #64	@ 0x40
 8005118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800511e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005122:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005124:	f107 0308 	add.w	r3, r7, #8
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ff74 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005134:	2110      	movs	r1, #16
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f9d6 	bl	80054e8 <SDMMC_GetCmdResp1>
 800513c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800513e:	69fb      	ldr	r3, [r7, #28]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005156:	2311      	movs	r3, #17
 8005158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800515a:	2340      	movs	r3, #64	@ 0x40
 800515c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005166:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005168:	f107 0308 	add.w	r3, r7, #8
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff ff52 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005178:	2111      	movs	r1, #17
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9b4 	bl	80054e8 <SDMMC_GetCmdResp1>
 8005180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005182:	69fb      	ldr	r3, [r7, #28]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800519a:	2312      	movs	r3, #18
 800519c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800519e:	2340      	movs	r3, #64	@ 0x40
 80051a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff ff30 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80051b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051bc:	2112      	movs	r1, #18
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f992 	bl	80054e8 <SDMMC_GetCmdResp1>
 80051c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051c6:	69fb      	ldr	r3, [r7, #28]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80051de:	2318      	movs	r3, #24
 80051e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051e2:	2340      	movs	r3, #64	@ 0x40
 80051e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff ff0e 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80051fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005200:	2118      	movs	r1, #24
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f970 	bl	80054e8 <SDMMC_GetCmdResp1>
 8005208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800520a:	69fb      	ldr	r3, [r7, #28]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005222:	2319      	movs	r3, #25
 8005224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005226:	2340      	movs	r3, #64	@ 0x40
 8005228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800522e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005232:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005234:	f107 0308 	add.w	r3, r7, #8
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff feec 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005244:	2119      	movs	r1, #25
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f94e 	bl	80054e8 <SDMMC_GetCmdResp1>
 800524c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800524e:	69fb      	ldr	r3, [r7, #28]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005264:	230c      	movs	r3, #12
 8005266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005268:	2340      	movs	r3, #64	@ 0x40
 800526a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005274:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fecb 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005282:	4a05      	ldr	r2, [pc, #20]	@ (8005298 <SDMMC_CmdStopTransfer+0x40>)
 8005284:	210c      	movs	r1, #12
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f92e 	bl	80054e8 <SDMMC_GetCmdResp1>
 800528c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528e:	69fb      	ldr	r3, [r7, #28]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	05f5e100 	.word	0x05f5e100

0800529c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	@ 0x28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80052ac:	2307      	movs	r3, #7
 80052ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052b0:	2340      	movs	r3, #64	@ 0x40
 80052b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052bc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052be:	f107 0310 	add.w	r3, r7, #16
 80052c2:	4619      	mov	r1, r3
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff fea7 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	2107      	movs	r1, #7
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f909 	bl	80054e8 <SDMMC_GetCmdResp1>
 80052d6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3728      	adds	r7, #40	@ 0x28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b088      	sub	sp, #32
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fe86 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fb23 	bl	8005958 <SDMMC_GetCmdError>
 8005312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005314:	69fb      	ldr	r3, [r7, #28]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005326:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800532a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800532c:	2308      	movs	r3, #8
 800532e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005330:	2340      	movs	r3, #64	@ 0x40
 8005332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800533c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800533e:	f107 0308 	add.w	r3, r7, #8
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fe67 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fab6 	bl	80058bc <SDMMC_GetCmdResp7>
 8005350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005352:	69fb      	ldr	r3, [r7, #28]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800536a:	2337      	movs	r3, #55	@ 0x37
 800536c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800536e:	2340      	movs	r3, #64	@ 0x40
 8005370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800537a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800537c:	f107 0308 	add.w	r3, r7, #8
 8005380:	4619      	mov	r1, r3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff fe48 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538c:	2137      	movs	r1, #55	@ 0x37
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8aa 	bl	80054e8 <SDMMC_GetCmdResp1>
 8005394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005396:	69fb      	ldr	r3, [r7, #28]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	4b0d      	ldr	r3, [pc, #52]	@ (80053e4 <SDMMC_CmdAppOperCommand+0x44>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80053b2:	2329      	movs	r3, #41	@ 0x29
 80053b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053b6:	2340      	movs	r3, #64	@ 0x40
 80053b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053c4:	f107 0308 	add.w	r3, r7, #8
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff fe24 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f9bf 	bl	8005754 <SDMMC_GetCmdResp3>
 80053d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053d8:	69fb      	ldr	r3, [r7, #28]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	80100000 	.word	0x80100000

080053e8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80053f4:	2302      	movs	r3, #2
 80053f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80053f8:	23c0      	movs	r3, #192	@ 0xc0
 80053fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005400:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005404:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005406:	f107 0308 	add.w	r3, r7, #8
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fe03 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f956 	bl	80056c4 <SDMMC_GetCmdResp2>
 8005418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800541a:	69fb      	ldr	r3, [r7, #28]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005432:	2309      	movs	r3, #9
 8005434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005436:	23c0      	movs	r3, #192	@ 0xc0
 8005438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800543e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005444:	f107 0308 	add.w	r3, r7, #8
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff fde4 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f937 	bl	80056c4 <SDMMC_GetCmdResp2>
 8005456:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005458:	69fb      	ldr	r3, [r7, #28]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b088      	sub	sp, #32
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005470:	2303      	movs	r3, #3
 8005472:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005474:	2340      	movs	r3, #64	@ 0x40
 8005476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800547c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005480:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff fdc5 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	2103      	movs	r1, #3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f99c 	bl	80057d0 <SDMMC_GetCmdResp6>
 8005498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800549a:	69fb      	ldr	r3, [r7, #28]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80054b2:	230d      	movs	r3, #13
 80054b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054b6:	2340      	movs	r3, #64	@ 0x40
 80054b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054c4:	f107 0308 	add.w	r3, r7, #8
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fda4 	bl	8005018 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80054d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d4:	210d      	movs	r1, #13
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f806 	bl	80054e8 <SDMMC_GetCmdResp1>
 80054dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054de:	69fb      	ldr	r3, [r7, #28]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	460b      	mov	r3, r1
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80054f6:	4b70      	ldr	r3, [pc, #448]	@ (80056b8 <SDMMC_GetCmdResp1+0x1d0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a70      	ldr	r2, [pc, #448]	@ (80056bc <SDMMC_GetCmdResp1+0x1d4>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	0a5a      	lsrs	r2, r3, #9
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	61fa      	str	r2, [r7, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005514:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005518:	e0c9      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ef      	beq.n	800550a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1ea      	bne.n	800550a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d004      	beq.n	800554a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2204      	movs	r2, #4
 8005544:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005546:	2304      	movs	r3, #4
 8005548:	e0b1      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d004      	beq.n	8005560 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800555c:	2301      	movs	r3, #1
 800555e:	e0a6      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	22c5      	movs	r2, #197	@ 0xc5
 8005564:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7ff fd80 	bl	800506c <SDMMC_GetCommandResponse>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	7afb      	ldrb	r3, [r7, #11]
 8005572:	4293      	cmp	r3, r2
 8005574:	d001      	beq.n	800557a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005576:	2301      	movs	r3, #1
 8005578:	e099      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800557a:	2100      	movs	r1, #0
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f7ff fd82 	bl	8005086 <SDMMC_GetResponse>
 8005582:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4b4e      	ldr	r3, [pc, #312]	@ (80056c0 <SDMMC_GetCmdResp1+0x1d8>)
 8005588:	4013      	ands	r3, r2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800558e:	2300      	movs	r3, #0
 8005590:	e08d      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	da02      	bge.n	800559e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005598:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800559c:	e087      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80055a8:	2340      	movs	r3, #64	@ 0x40
 80055aa:	e080      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	e079      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80055c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055c8:	e071      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80055d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055d8:	e069      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80055e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055e8:	e061      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80055f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80055f8:	e059      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005608:	e051      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005614:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005618:	e049      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005624:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005628:	e041      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005634:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005638:	e039      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005644:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005648:	e031      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005654:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005658:	e029      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005664:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005668:	e021      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005674:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005678:	e019      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005684:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005688:	e011      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005694:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005698:	e009      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80056a4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80056a8:	e001      	b.n	80056ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000000 	.word	0x20000000
 80056bc:	10624dd3 	.word	0x10624dd3
 80056c0:	fdffe008 	.word	0xfdffe008

080056c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056cc:	4b1f      	ldr	r3, [pc, #124]	@ (800574c <SDMMC_GetCmdResp2+0x88>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005750 <SDMMC_GetCmdResp2+0x8c>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	0a5b      	lsrs	r3, r3, #9
 80056d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056dc:	fb02 f303 	mul.w	r3, r2, r3
 80056e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1e5a      	subs	r2, r3, #1
 80056e6:	60fa      	str	r2, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d102      	bne.n	80056f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80056f0:	e026      	b.n	8005740 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0ef      	beq.n	80056e2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ea      	bne.n	80056e2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2204      	movs	r2, #4
 800571c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800571e:	2304      	movs	r3, #4
 8005720:	e00e      	b.n	8005740 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005734:	2301      	movs	r3, #1
 8005736:	e003      	b.n	8005740 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	22c5      	movs	r2, #197	@ 0xc5
 800573c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000000 	.word	0x20000000
 8005750:	10624dd3 	.word	0x10624dd3

08005754 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800575c:	4b1a      	ldr	r3, [pc, #104]	@ (80057c8 <SDMMC_GetCmdResp3+0x74>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1a      	ldr	r2, [pc, #104]	@ (80057cc <SDMMC_GetCmdResp3+0x78>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	0a5b      	lsrs	r3, r3, #9
 8005768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800576c:	fb02 f303 	mul.w	r3, r2, r3
 8005770:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1e5a      	subs	r2, r3, #1
 8005776:	60fa      	str	r2, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800577c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005780:	e01b      	b.n	80057ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005786:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ef      	beq.n	8005772 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1ea      	bne.n	8005772 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2204      	movs	r2, #4
 80057ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057ae:	2304      	movs	r3, #4
 80057b0:	e003      	b.n	80057ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	22c5      	movs	r2, #197	@ 0xc5
 80057b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000000 	.word	0x20000000
 80057cc:	10624dd3 	.word	0x10624dd3

080057d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	460b      	mov	r3, r1
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057de:	4b35      	ldr	r3, [pc, #212]	@ (80058b4 <SDMMC_GetCmdResp6+0xe4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a35      	ldr	r2, [pc, #212]	@ (80058b8 <SDMMC_GetCmdResp6+0xe8>)
 80057e4:	fba2 2303 	umull	r2, r3, r2, r3
 80057e8:	0a5b      	lsrs	r3, r3, #9
 80057ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	1e5a      	subs	r2, r3, #1
 80057f8:	61fa      	str	r2, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005802:	e052      	b.n	80058aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005808:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0ef      	beq.n	80057f4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1ea      	bne.n	80057f4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2204      	movs	r2, #4
 800582e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005830:	2304      	movs	r3, #4
 8005832:	e03a      	b.n	80058aa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005846:	2301      	movs	r3, #1
 8005848:	e02f      	b.n	80058aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff fc0e 	bl	800506c <SDMMC_GetCommandResponse>
 8005850:	4603      	mov	r3, r0
 8005852:	461a      	mov	r2, r3
 8005854:	7afb      	ldrb	r3, [r7, #11]
 8005856:	4293      	cmp	r3, r2
 8005858:	d001      	beq.n	800585e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800585a:	2301      	movs	r3, #1
 800585c:	e025      	b.n	80058aa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	22c5      	movs	r2, #197	@ 0xc5
 8005862:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005864:	2100      	movs	r1, #0
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fc0d 	bl	8005086 <SDMMC_GetResponse>
 800586c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	b29a      	uxth	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005882:	2300      	movs	r3, #0
 8005884:	e011      	b.n	80058aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005890:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005894:	e009      	b.n	80058aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058a4:	e001      	b.n	80058aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000000 	.word	0x20000000
 80058b8:	10624dd3 	.word	0x10624dd3

080058bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058c4:	4b22      	ldr	r3, [pc, #136]	@ (8005950 <SDMMC_GetCmdResp7+0x94>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a22      	ldr	r2, [pc, #136]	@ (8005954 <SDMMC_GetCmdResp7+0x98>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	0a5b      	lsrs	r3, r3, #9
 80058d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1e5a      	subs	r2, r3, #1
 80058de:	60fa      	str	r2, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058e8:	e02c      	b.n	8005944 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0ef      	beq.n	80058da <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1ea      	bne.n	80058da <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2204      	movs	r2, #4
 8005914:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005916:	2304      	movs	r3, #4
 8005918:	e014      	b.n	8005944 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800592c:	2301      	movs	r3, #1
 800592e:	e009      	b.n	8005944 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2240      	movs	r2, #64	@ 0x40
 8005940:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005942:	2300      	movs	r3, #0
  
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	20000000 	.word	0x20000000
 8005954:	10624dd3 	.word	0x10624dd3

08005958 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005960:	4b11      	ldr	r3, [pc, #68]	@ (80059a8 <SDMMC_GetCmdError+0x50>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a11      	ldr	r2, [pc, #68]	@ (80059ac <SDMMC_GetCmdError+0x54>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	0a5b      	lsrs	r3, r3, #9
 800596c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005970:	fb02 f303 	mul.w	r3, r2, r3
 8005974:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1e5a      	subs	r2, r3, #1
 800597a:	60fa      	str	r2, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005980:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005984:	e009      	b.n	800599a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f1      	beq.n	8005976 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	22c5      	movs	r2, #197	@ 0xc5
 8005996:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000000 	.word	0x20000000
 80059ac:	10624dd3 	.word	0x10624dd3

080059b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80059b4:	4904      	ldr	r1, [pc, #16]	@ (80059c8 <MX_FATFS_Init+0x18>)
 80059b6:	4805      	ldr	r0, [pc, #20]	@ (80059cc <MX_FATFS_Init+0x1c>)
 80059b8:	f002 fae6 	bl	8007f88 <FATFS_LinkDriver>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	4b03      	ldr	r3, [pc, #12]	@ (80059d0 <MX_FATFS_Init+0x20>)
 80059c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	2000025c 	.word	0x2000025c
 80059cc:	08009074 	.word	0x08009074
 80059d0:	20000258 	.word	0x20000258

080059d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80059d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80059da:	4618      	mov	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80059ee:	f000 f86b 	bl	8005ac8 <BSP_SD_IsDetected>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d001      	beq.n	80059fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80059f8:	2302      	movs	r3, #2
 80059fa:	e005      	b.n	8005a08 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80059fc:	4804      	ldr	r0, [pc, #16]	@ (8005a10 <BSP_SD_Init+0x2c>)
 80059fe:	f7fd fa57 	bl	8002eb0 <HAL_SD_Init>
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005a06:	79fb      	ldrb	r3, [r7, #7]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	200000f8 	.word	0x200000f8

08005a14 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	4806      	ldr	r0, [pc, #24]	@ (8005a4c <BSP_SD_ReadBlocks+0x38>)
 8005a32:	f7fd faf5 	bl	8003020 <HAL_SD_ReadBlocks>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200000f8 	.word	0x200000f8

08005a50 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	4806      	ldr	r0, [pc, #24]	@ (8005a88 <BSP_SD_WriteBlocks+0x38>)
 8005a6e:	f7fd fcb5 	bl	80033dc <HAL_SD_WriteBlocks>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	200000f8 	.word	0x200000f8

08005a8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005a90:	4805      	ldr	r0, [pc, #20]	@ (8005aa8 <BSP_SD_GetCardState+0x1c>)
 8005a92:	f7fd fff9 	bl	8003a88 <HAL_SD_GetCardState>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	200000f8 	.word	0x200000f8

08005aac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4803      	ldr	r0, [pc, #12]	@ (8005ac4 <BSP_SD_GetCardInfo+0x18>)
 8005ab8:	f7fd ffba 	bl	8003a30 <HAL_SD_GetCardInfo>
}
 8005abc:	bf00      	nop
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	200000f8 	.word	0x200000f8

08005ac8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	b2db      	uxtb	r3, r3
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005aee:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <SD_CheckStatus+0x38>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005af4:	f7ff ffca 	bl	8005a8c <BSP_SD_GetCardState>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005afe:	4b07      	ldr	r3, [pc, #28]	@ (8005b1c <SD_CheckStatus+0x38>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <SD_CheckStatus+0x38>)
 8005b0c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005b0e:	4b03      	ldr	r3, [pc, #12]	@ (8005b1c <SD_CheckStatus+0x38>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	b2db      	uxtb	r3, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000009 	.word	0x20000009

08005b20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <SD_initialize+0x38>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005b30:	f7ff ff58 	bl	80059e4 <BSP_SD_Init>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d107      	bne.n	8005b4a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff ffd1 	bl	8005ae4 <SD_CheckStatus>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	4b04      	ldr	r3, [pc, #16]	@ (8005b58 <SD_initialize+0x38>)
 8005b48:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005b4a:	4b03      	ldr	r3, [pc, #12]	@ (8005b58 <SD_initialize+0x38>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	b2db      	uxtb	r3, r3
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000009 	.word	0x20000009

08005b5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff ffbb 	bl	8005ae4 <SD_CheckStatus>
 8005b6e:	4603      	mov	r3, r0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	68b8      	ldr	r0, [r7, #8]
 8005b96:	f7ff ff3d 	bl	8005a14 <BSP_SD_ReadBlocks>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d107      	bne.n	8005bb0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005ba0:	bf00      	nop
 8005ba2:	f7ff ff73 	bl	8005a8c <BSP_SD_GetCardState>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1fa      	bne.n	8005ba2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b086      	sub	sp, #24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	68b8      	ldr	r0, [r7, #8]
 8005bd8:	f7ff ff3a 	bl	8005a50 <BSP_SD_WriteBlocks>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d107      	bne.n	8005bf2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005be2:	bf00      	nop
 8005be4:	f7ff ff52 	bl	8005a8c <BSP_SD_GetCardState>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1fa      	bne.n	8005be4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08c      	sub	sp, #48	@ 0x30
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	603a      	str	r2, [r7, #0]
 8005c06:	71fb      	strb	r3, [r7, #7]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c12:	4b25      	ldr	r3, [pc, #148]	@ (8005ca8 <SD_ioctl+0xac>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <SD_ioctl+0x28>
 8005c20:	2303      	movs	r3, #3
 8005c22:	e03c      	b.n	8005c9e <SD_ioctl+0xa2>

  switch (cmd)
 8005c24:	79bb      	ldrb	r3, [r7, #6]
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d834      	bhi.n	8005c94 <SD_ioctl+0x98>
 8005c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <SD_ioctl+0x34>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c49 	.word	0x08005c49
 8005c38:	08005c61 	.word	0x08005c61
 8005c3c:	08005c7b 	.word	0x08005c7b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005c46:	e028      	b.n	8005c9a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c48:	f107 030c 	add.w	r3, r7, #12
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff ff2d 	bl	8005aac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005c5e:	e01c      	b.n	8005c9a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ff21 	bl	8005aac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005c78:	e00f      	b.n	8005c9a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c7a:	f107 030c 	add.w	r3, r7, #12
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff ff14 	bl	8005aac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c86:	0a5a      	lsrs	r2, r3, #9
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005c92:	e002      	b.n	8005c9a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3730      	adds	r7, #48	@ 0x30
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000009 	.word	0x20000009

08005cac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	4a08      	ldr	r2, [pc, #32]	@ (8005cdc <disk_status+0x30>)
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	79fa      	ldrb	r2, [r7, #7]
 8005cc4:	4905      	ldr	r1, [pc, #20]	@ (8005cdc <disk_status+0x30>)
 8005cc6:	440a      	add	r2, r1
 8005cc8:	7a12      	ldrb	r2, [r2, #8]
 8005cca:	4610      	mov	r0, r2
 8005ccc:	4798      	blx	r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000288 	.word	0x20000288

08005ce0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8005d28 <disk_initialize+0x48>)
 8005cf2:	5cd3      	ldrb	r3, [r2, r3]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d111      	bne.n	8005d1c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8005d28 <disk_initialize+0x48>)
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	4a09      	ldr	r2, [pc, #36]	@ (8005d28 <disk_initialize+0x48>)
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	79fa      	ldrb	r2, [r7, #7]
 8005d0e:	4906      	ldr	r1, [pc, #24]	@ (8005d28 <disk_initialize+0x48>)
 8005d10:	440a      	add	r2, r1
 8005d12:	7a12      	ldrb	r2, [r2, #8]
 8005d14:	4610      	mov	r0, r2
 8005d16:	4798      	blx	r3
 8005d18:	4603      	mov	r3, r0
 8005d1a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000288 	.word	0x20000288

08005d2c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	4603      	mov	r3, r0
 8005d3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <disk_read+0x3c>)
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	689c      	ldr	r4, [r3, #8]
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	4a07      	ldr	r2, [pc, #28]	@ (8005d68 <disk_read+0x3c>)
 8005d4c:	4413      	add	r3, r2
 8005d4e:	7a18      	ldrb	r0, [r3, #8]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	47a0      	blx	r4
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd90      	pop	{r4, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000288 	.word	0x20000288

08005d6c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005da8 <disk_write+0x3c>)
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	68dc      	ldr	r4, [r3, #12]
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	4a07      	ldr	r2, [pc, #28]	@ (8005da8 <disk_write+0x3c>)
 8005d8c:	4413      	add	r3, r2
 8005d8e:	7a18      	ldrb	r0, [r3, #8]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	47a0      	blx	r4
 8005d98:	4603      	mov	r3, r0
 8005d9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd90      	pop	{r4, r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000288 	.word	0x20000288

08005dac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	603a      	str	r2, [r7, #0]
 8005db6:	71fb      	strb	r3, [r7, #7]
 8005db8:	460b      	mov	r3, r1
 8005dba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	4a09      	ldr	r2, [pc, #36]	@ (8005de4 <disk_ioctl+0x38>)
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	79fa      	ldrb	r2, [r7, #7]
 8005dca:	4906      	ldr	r1, [pc, #24]	@ (8005de4 <disk_ioctl+0x38>)
 8005dcc:	440a      	add	r2, r1
 8005dce:	7a10      	ldrb	r0, [r2, #8]
 8005dd0:	79b9      	ldrb	r1, [r7, #6]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4798      	blx	r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	73fb      	strb	r3, [r7, #15]
  return res;
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000288 	.word	0x20000288

08005de8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3301      	adds	r3, #1
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005df8:	89fb      	ldrh	r3, [r7, #14]
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	b21a      	sxth	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	b21b      	sxth	r3, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b21b      	sxth	r3, r3
 8005e08:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e0a:	89fb      	ldrh	r3, [r7, #14]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3303      	adds	r3, #3
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	3202      	adds	r2, #2
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	3201      	adds	r2, #1
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005e50:	68fb      	ldr	r3, [r7, #12]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	887a      	ldrh	r2, [r7, #2]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	887b      	ldrh	r3, [r7, #2]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	887a      	ldrh	r2, [r7, #2]
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	701a      	strb	r2, [r3, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	0a1b      	lsrs	r3, r3, #8
 8005eae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	0a1b      	lsrs	r3, r3, #8
 8005ec0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	0a1b      	lsrs	r3, r3, #8
 8005ed2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00d      	beq.n	8005f22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	1c53      	adds	r3, r2, #1
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	1c59      	adds	r1, r3, #1
 8005f10:	6179      	str	r1, [r7, #20]
 8005f12:	7812      	ldrb	r2, [r2, #0]
 8005f14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f1      	bne.n	8005f06 <mem_cpy+0x1a>
	}
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005f2e:	b480      	push	{r7}
 8005f30:	b087      	sub	sp, #28
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	617a      	str	r2, [r7, #20]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	607b      	str	r3, [r7, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f3      	bne.n	8005f3e <mem_set+0x10>
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005f64:	b480      	push	{r7}
 8005f66:	b089      	sub	sp, #36	@ 0x24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	61fa      	str	r2, [r7, #28]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	4619      	mov	r1, r3
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	61ba      	str	r2, [r7, #24]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	1acb      	subs	r3, r1, r3
 8005f90:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	607b      	str	r3, [r7, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <mem_cmp+0x40>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0eb      	beq.n	8005f7c <mem_cmp+0x18>

	return r;
 8005fa4:	697b      	ldr	r3, [r7, #20]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3724      	adds	r7, #36	@ 0x24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005fbc:	e002      	b.n	8005fc4 <chk_chr+0x12>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	607b      	str	r3, [r7, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <chk_chr+0x26>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d1f2      	bne.n	8005fbe <chk_chr+0xc>
	return *str;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	781b      	ldrb	r3, [r3, #0]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60bb      	str	r3, [r7, #8]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	e029      	b.n	8006050 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ffc:	4a27      	ldr	r2, [pc, #156]	@ (800609c <chk_lock+0xb4>)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	4413      	add	r3, r2
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01d      	beq.n	8006046 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800600a:	4a24      	ldr	r2, [pc, #144]	@ (800609c <chk_lock+0xb4>)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	4413      	add	r3, r2
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d116      	bne.n	800604a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800601c:	4a1f      	ldr	r2, [pc, #124]	@ (800609c <chk_lock+0xb4>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	4413      	add	r3, r2
 8006024:	3304      	adds	r3, #4
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800602c:	429a      	cmp	r2, r3
 800602e:	d10c      	bne.n	800604a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006030:	4a1a      	ldr	r2, [pc, #104]	@ (800609c <chk_lock+0xb4>)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	4413      	add	r3, r2
 8006038:	3308      	adds	r3, #8
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006040:	429a      	cmp	r2, r3
 8006042:	d102      	bne.n	800604a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006044:	e007      	b.n	8006056 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006046:	2301      	movs	r3, #1
 8006048:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d9d2      	bls.n	8005ffc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b02      	cmp	r3, #2
 800605a:	d109      	bne.n	8006070 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d102      	bne.n	8006068 <chk_lock+0x80>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d101      	bne.n	800606c <chk_lock+0x84>
 8006068:	2300      	movs	r3, #0
 800606a:	e010      	b.n	800608e <chk_lock+0xa6>
 800606c:	2312      	movs	r3, #18
 800606e:	e00e      	b.n	800608e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d108      	bne.n	8006088 <chk_lock+0xa0>
 8006076:	4a09      	ldr	r2, [pc, #36]	@ (800609c <chk_lock+0xb4>)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	4413      	add	r3, r2
 800607e:	330c      	adds	r3, #12
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006086:	d101      	bne.n	800608c <chk_lock+0xa4>
 8006088:	2310      	movs	r3, #16
 800608a:	e000      	b.n	800608e <chk_lock+0xa6>
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000268 	.word	0x20000268

080060a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060a6:	2300      	movs	r3, #0
 80060a8:	607b      	str	r3, [r7, #4]
 80060aa:	e002      	b.n	80060b2 <enq_lock+0x12>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3301      	adds	r3, #1
 80060b0:	607b      	str	r3, [r7, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d806      	bhi.n	80060c6 <enq_lock+0x26>
 80060b8:	4a09      	ldr	r2, [pc, #36]	@ (80060e0 <enq_lock+0x40>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	4413      	add	r3, r2
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f2      	bne.n	80060ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000268 	.word	0x20000268

080060e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e01f      	b.n	8006134 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80060f4:	4a41      	ldr	r2, [pc, #260]	@ (80061fc <inc_lock+0x118>)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	4413      	add	r3, r2
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d113      	bne.n	800612e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006106:	4a3d      	ldr	r2, [pc, #244]	@ (80061fc <inc_lock+0x118>)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	4413      	add	r3, r2
 800610e:	3304      	adds	r3, #4
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006116:	429a      	cmp	r2, r3
 8006118:	d109      	bne.n	800612e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800611a:	4a38      	ldr	r2, [pc, #224]	@ (80061fc <inc_lock+0x118>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	4413      	add	r3, r2
 8006122:	3308      	adds	r3, #8
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800612a:	429a      	cmp	r2, r3
 800612c:	d006      	beq.n	800613c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d9dc      	bls.n	80060f4 <inc_lock+0x10>
 800613a:	e000      	b.n	800613e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800613c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d132      	bne.n	80061aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e002      	b.n	8006150 <inc_lock+0x6c>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3301      	adds	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d806      	bhi.n	8006164 <inc_lock+0x80>
 8006156:	4a29      	ldr	r2, [pc, #164]	@ (80061fc <inc_lock+0x118>)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	4413      	add	r3, r2
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f2      	bne.n	800614a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d101      	bne.n	800616e <inc_lock+0x8a>
 800616a:	2300      	movs	r3, #0
 800616c:	e040      	b.n	80061f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4922      	ldr	r1, [pc, #136]	@ (80061fc <inc_lock+0x118>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	440b      	add	r3, r1
 800617a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	491e      	ldr	r1, [pc, #120]	@ (80061fc <inc_lock+0x118>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	440b      	add	r3, r1
 8006188:	3304      	adds	r3, #4
 800618a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	491a      	ldr	r1, [pc, #104]	@ (80061fc <inc_lock+0x118>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	440b      	add	r3, r1
 8006198:	3308      	adds	r3, #8
 800619a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800619c:	4a17      	ldr	r2, [pc, #92]	@ (80061fc <inc_lock+0x118>)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	4413      	add	r3, r2
 80061a4:	330c      	adds	r3, #12
 80061a6:	2200      	movs	r2, #0
 80061a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <inc_lock+0xe0>
 80061b0:	4a12      	ldr	r2, [pc, #72]	@ (80061fc <inc_lock+0x118>)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	4413      	add	r3, r2
 80061b8:	330c      	adds	r3, #12
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <inc_lock+0xe0>
 80061c0:	2300      	movs	r3, #0
 80061c2:	e015      	b.n	80061f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d108      	bne.n	80061dc <inc_lock+0xf8>
 80061ca:	4a0c      	ldr	r2, [pc, #48]	@ (80061fc <inc_lock+0x118>)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	4413      	add	r3, r2
 80061d2:	330c      	adds	r3, #12
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	3301      	adds	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	e001      	b.n	80061e0 <inc_lock+0xfc>
 80061dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061e0:	4906      	ldr	r1, [pc, #24]	@ (80061fc <inc_lock+0x118>)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	440b      	add	r3, r1
 80061e8:	330c      	adds	r3, #12
 80061ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3301      	adds	r3, #1
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20000268 	.word	0x20000268

08006200 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3b01      	subs	r3, #1
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d825      	bhi.n	8006260 <dec_lock+0x60>
		n = Files[i].ctr;
 8006214:	4a17      	ldr	r2, [pc, #92]	@ (8006274 <dec_lock+0x74>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	4413      	add	r3, r2
 800621c:	330c      	adds	r3, #12
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006222:	89fb      	ldrh	r3, [r7, #14]
 8006224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006228:	d101      	bne.n	800622e <dec_lock+0x2e>
 800622a:	2300      	movs	r3, #0
 800622c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800622e:	89fb      	ldrh	r3, [r7, #14]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <dec_lock+0x3a>
 8006234:	89fb      	ldrh	r3, [r7, #14]
 8006236:	3b01      	subs	r3, #1
 8006238:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800623a:	4a0e      	ldr	r2, [pc, #56]	@ (8006274 <dec_lock+0x74>)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	4413      	add	r3, r2
 8006242:	330c      	adds	r3, #12
 8006244:	89fa      	ldrh	r2, [r7, #14]
 8006246:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006248:	89fb      	ldrh	r3, [r7, #14]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d105      	bne.n	800625a <dec_lock+0x5a>
 800624e:	4a09      	ldr	r2, [pc, #36]	@ (8006274 <dec_lock+0x74>)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	4413      	add	r3, r2
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	737b      	strb	r3, [r7, #13]
 800625e:	e001      	b.n	8006264 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006260:	2302      	movs	r3, #2
 8006262:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006264:	7b7b      	ldrb	r3, [r7, #13]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000268 	.word	0x20000268

08006278 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e010      	b.n	80062a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006286:	4a0d      	ldr	r2, [pc, #52]	@ (80062bc <clear_lock+0x44>)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	4413      	add	r3, r2
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	429a      	cmp	r2, r3
 8006294:	d105      	bne.n	80062a2 <clear_lock+0x2a>
 8006296:	4a09      	ldr	r2, [pc, #36]	@ (80062bc <clear_lock+0x44>)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	4413      	add	r3, r2
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3301      	adds	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d9eb      	bls.n	8006286 <clear_lock+0xe>
	}
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	20000268 	.word	0x20000268

080062c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	78db      	ldrb	r3, [r3, #3]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d034      	beq.n	800633e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	7858      	ldrb	r0, [r3, #1]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80062e4:	2301      	movs	r3, #1
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	f7ff fd40 	bl	8005d6c <disk_write>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
 80062f6:	e022      	b.n	800633e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	1ad2      	subs	r2, r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	429a      	cmp	r2, r3
 800630c:	d217      	bcs.n	800633e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	789b      	ldrb	r3, [r3, #2]
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	e010      	b.n	8006338 <sync_window+0x78>
					wsect += fs->fsize;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4413      	add	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7858      	ldrb	r0, [r3, #1]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800632a:	2301      	movs	r3, #1
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	f7ff fd1d 	bl	8005d6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	3b01      	subs	r3, #1
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d8eb      	bhi.n	8006316 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d01b      	beq.n	8006398 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff ffad 	bl	80062c0 <sync_window>
 8006366:	4603      	mov	r3, r0
 8006368:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d113      	bne.n	8006398 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7858      	ldrb	r0, [r3, #1]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800637a:	2301      	movs	r3, #1
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	f7ff fcd5 	bl	8005d2c <disk_read>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006388:	f04f 33ff 	mov.w	r3, #4294967295
 800638c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ff87 	bl	80062c0 <sync_window>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d158      	bne.n	800646e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d148      	bne.n	8006456 <sync_fs+0xb2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	791b      	ldrb	r3, [r3, #4]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d144      	bne.n	8006456 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3330      	adds	r3, #48	@ 0x30
 80063d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063d4:	2100      	movs	r1, #0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff fda9 	bl	8005f2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3330      	adds	r3, #48	@ 0x30
 80063e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80063e4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fd38 	bl	8005e5e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3330      	adds	r3, #48	@ 0x30
 80063f2:	4921      	ldr	r1, [pc, #132]	@ (8006478 <sync_fs+0xd4>)
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff fd4d 	bl	8005e94 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3330      	adds	r3, #48	@ 0x30
 80063fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006402:	491e      	ldr	r1, [pc, #120]	@ (800647c <sync_fs+0xd8>)
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fd45 	bl	8005e94 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3330      	adds	r3, #48	@ 0x30
 800640e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7ff fd3b 	bl	8005e94 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3330      	adds	r3, #48	@ 0x30
 8006422:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7ff fd31 	bl	8005e94 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	7858      	ldrb	r0, [r3, #1]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800644a:	2301      	movs	r3, #1
 800644c:	f7ff fc8e 	bl	8005d6c <disk_write>
			fs->fsi_flag = 0;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2200      	movs	r2, #0
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fca4 	bl	8005dac <disk_ioctl>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <sync_fs+0xca>
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	41615252 	.word	0x41615252
 800647c:	61417272 	.word	0x61417272

08006480 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	3b02      	subs	r3, #2
 800648e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	3b02      	subs	r3, #2
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d301      	bcc.n	80064a0 <clust2sect+0x20>
 800649c:	2300      	movs	r3, #0
 800649e:	e008      	b.n	80064b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	895b      	ldrh	r3, [r3, #10]
 80064a4:	461a      	mov	r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	fb03 f202 	mul.w	r2, r3, r2
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b0:	4413      	add	r3, r2
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b086      	sub	sp, #24
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d904      	bls.n	80064de <get_fat+0x20>
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d302      	bcc.n	80064e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80064de:	2301      	movs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e08e      	b.n	8006602 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80064e4:	f04f 33ff 	mov.w	r3, #4294967295
 80064e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d061      	beq.n	80065b6 <get_fat+0xf8>
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	dc7b      	bgt.n	80065ee <get_fat+0x130>
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d002      	beq.n	8006500 <get_fat+0x42>
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d041      	beq.n	8006582 <get_fat+0xc4>
 80064fe:	e076      	b.n	80065ee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	0a5b      	lsrs	r3, r3, #9
 8006516:	4413      	add	r3, r2
 8006518:	4619      	mov	r1, r3
 800651a:	6938      	ldr	r0, [r7, #16]
 800651c:	f7ff ff14 	bl	8006348 <move_window>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d166      	bne.n	80065f4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	60fa      	str	r2, [r7, #12]
 800652c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4413      	add	r3, r2
 8006534:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006538:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6a1a      	ldr	r2, [r3, #32]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	0a5b      	lsrs	r3, r3, #9
 8006542:	4413      	add	r3, r2
 8006544:	4619      	mov	r1, r3
 8006546:	6938      	ldr	r0, [r7, #16]
 8006548:	f7ff fefe 	bl	8006348 <move_window>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d152      	bne.n	80065f8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4413      	add	r3, r2
 800655c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	4313      	orrs	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <get_fat+0xba>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	e002      	b.n	800657e <get_fat+0xc0>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800657e:	617b      	str	r3, [r7, #20]
			break;
 8006580:	e03f      	b.n	8006602 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	0a1b      	lsrs	r3, r3, #8
 800658a:	4413      	add	r3, r2
 800658c:	4619      	mov	r1, r3
 800658e:	6938      	ldr	r0, [r7, #16]
 8006590:	f7ff feda 	bl	8006348 <move_window>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d130      	bne.n	80065fc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80065a8:	4413      	add	r3, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff fc1c 	bl	8005de8 <ld_word>
 80065b0:	4603      	mov	r3, r0
 80065b2:	617b      	str	r3, [r7, #20]
			break;
 80065b4:	e025      	b.n	8006602 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	09db      	lsrs	r3, r3, #7
 80065be:	4413      	add	r3, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	6938      	ldr	r0, [r7, #16]
 80065c4:	f7ff fec0 	bl	8006348 <move_window>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d118      	bne.n	8006600 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80065dc:	4413      	add	r3, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fc1a 	bl	8005e18 <ld_dword>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065ea:	617b      	str	r3, [r7, #20]
			break;
 80065ec:	e009      	b.n	8006602 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80065ee:	2301      	movs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	e006      	b.n	8006602 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065f4:	bf00      	nop
 80065f6:	e004      	b.n	8006602 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065f8:	bf00      	nop
 80065fa:	e002      	b.n	8006602 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065fc:	bf00      	nop
 80065fe:	e000      	b.n	8006602 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006600:	bf00      	nop
		}
	}

	return val;
 8006602:	697b      	ldr	r3, [r7, #20]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b089      	sub	sp, #36	@ 0x24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006618:	2302      	movs	r3, #2
 800661a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b01      	cmp	r3, #1
 8006620:	f240 80d9 	bls.w	80067d6 <put_fat+0x1ca>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	429a      	cmp	r2, r3
 800662c:	f080 80d3 	bcs.w	80067d6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b03      	cmp	r3, #3
 8006636:	f000 8096 	beq.w	8006766 <put_fat+0x15a>
 800663a:	2b03      	cmp	r3, #3
 800663c:	f300 80cb 	bgt.w	80067d6 <put_fat+0x1ca>
 8006640:	2b01      	cmp	r3, #1
 8006642:	d002      	beq.n	800664a <put_fat+0x3e>
 8006644:	2b02      	cmp	r3, #2
 8006646:	d06e      	beq.n	8006726 <put_fat+0x11a>
 8006648:	e0c5      	b.n	80067d6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4413      	add	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1a      	ldr	r2, [r3, #32]
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	0a5b      	lsrs	r3, r3, #9
 8006660:	4413      	add	r3, r2
 8006662:	4619      	mov	r1, r3
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff fe6f 	bl	8006348 <move_window>
 800666a:	4603      	mov	r3, r0
 800666c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800666e:	7ffb      	ldrb	r3, [r7, #31]
 8006670:	2b00      	cmp	r3, #0
 8006672:	f040 80a9 	bne.w	80067c8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	61b9      	str	r1, [r7, #24]
 8006682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006686:	4413      	add	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00d      	beq.n	80066b0 <put_fat+0xa4>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b25b      	sxtb	r3, r3
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	b25a      	sxtb	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	4313      	orrs	r3, r2
 80066aa:	b25b      	sxtb	r3, r3
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	e001      	b.n	80066b4 <put_fat+0xa8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	0a5b      	lsrs	r3, r3, #9
 80066c6:	4413      	add	r3, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff fe3c 	bl	8006348 <move_window>
 80066d0:	4603      	mov	r3, r0
 80066d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066d4:	7ffb      	ldrb	r3, [r7, #31]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d178      	bne.n	80067cc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e6:	4413      	add	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <put_fat+0xf0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	e00e      	b.n	800671a <put_fat+0x10e>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b25b      	sxtb	r3, r3
 8006702:	f023 030f 	bic.w	r3, r3, #15
 8006706:	b25a      	sxtb	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	b25b      	sxtb	r3, r3
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	b25b      	sxtb	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	b25b      	sxtb	r3, r3
 8006718:	b2db      	uxtb	r3, r3
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	70da      	strb	r2, [r3, #3]
			break;
 8006724:	e057      	b.n	80067d6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1a      	ldr	r2, [r3, #32]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	4413      	add	r3, r2
 8006730:	4619      	mov	r1, r3
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fe08 	bl	8006348 <move_window>
 8006738:	4603      	mov	r3, r0
 800673a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800673c:	7ffb      	ldrb	r3, [r7, #31]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d146      	bne.n	80067d0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006750:	4413      	add	r3, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	b292      	uxth	r2, r2
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff fb80 	bl	8005e5e <st_word>
			fs->wflag = 1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	70da      	strb	r2, [r3, #3]
			break;
 8006764:	e037      	b.n	80067d6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	09db      	lsrs	r3, r3, #7
 800676e:	4413      	add	r3, r2
 8006770:	4619      	mov	r1, r3
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff fde8 	bl	8006348 <move_window>
 8006778:	4603      	mov	r3, r0
 800677a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800677c:	7ffb      	ldrb	r3, [r7, #31]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d128      	bne.n	80067d4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006796:	4413      	add	r3, r2
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff fb3d 	bl	8005e18 <ld_dword>
 800679e:	4603      	mov	r3, r0
 80067a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80067a4:	4323      	orrs	r3, r4
 80067a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80067b6:	4413      	add	r3, r2
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fb6a 	bl	8005e94 <st_dword>
			fs->wflag = 1;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	70da      	strb	r2, [r3, #3]
			break;
 80067c6:	e006      	b.n	80067d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80067c8:	bf00      	nop
 80067ca:	e004      	b.n	80067d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80067cc:	bf00      	nop
 80067ce:	e002      	b.n	80067d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80067d0:	bf00      	nop
 80067d2:	e000      	b.n	80067d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80067d4:	bf00      	nop
		}
	}
	return res;
 80067d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3724      	adds	r7, #36	@ 0x24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd90      	pop	{r4, r7, pc}

080067e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d904      	bls.n	8006806 <remove_chain+0x26>
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	429a      	cmp	r2, r3
 8006804:	d301      	bcc.n	800680a <remove_chain+0x2a>
 8006806:	2302      	movs	r3, #2
 8006808:	e04b      	b.n	80068a2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006810:	f04f 32ff 	mov.w	r2, #4294967295
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	69b8      	ldr	r0, [r7, #24]
 8006818:	f7ff fef8 	bl	800660c <put_fat>
 800681c:	4603      	mov	r3, r0
 800681e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006820:	7ffb      	ldrb	r3, [r7, #31]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <remove_chain+0x4a>
 8006826:	7ffb      	ldrb	r3, [r7, #31]
 8006828:	e03b      	b.n	80068a2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f7ff fe46 	bl	80064be <get_fat>
 8006832:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d031      	beq.n	800689e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <remove_chain+0x64>
 8006840:	2302      	movs	r3, #2
 8006842:	e02e      	b.n	80068a2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684a:	d101      	bne.n	8006850 <remove_chain+0x70>
 800684c:	2301      	movs	r3, #1
 800684e:	e028      	b.n	80068a2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006850:	2200      	movs	r2, #0
 8006852:	68b9      	ldr	r1, [r7, #8]
 8006854:	69b8      	ldr	r0, [r7, #24]
 8006856:	f7ff fed9 	bl	800660c <put_fat>
 800685a:	4603      	mov	r3, r0
 800685c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800685e:	7ffb      	ldrb	r3, [r7, #31]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <remove_chain+0x88>
 8006864:	7ffb      	ldrb	r3, [r7, #31]
 8006866:	e01c      	b.n	80068a2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	3b02      	subs	r3, #2
 8006872:	429a      	cmp	r2, r3
 8006874:	d20b      	bcs.n	800688e <remove_chain+0xae>
			fs->free_clst++;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	791b      	ldrb	r3, [r3, #4]
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	b2da      	uxtb	r2, r3
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	429a      	cmp	r2, r3
 800689a:	d3c6      	bcc.n	800682a <remove_chain+0x4a>
 800689c:	e000      	b.n	80068a0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800689e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b088      	sub	sp, #32
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10d      	bne.n	80068dc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <create_chain+0x2c>
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d31b      	bcc.n	800690e <create_chain+0x64>
 80068d6:	2301      	movs	r3, #1
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	e018      	b.n	800690e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff fded 	bl	80064be <get_fat>
 80068e4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d801      	bhi.n	80068f0 <create_chain+0x46>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e070      	b.n	80069d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d101      	bne.n	80068fc <create_chain+0x52>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	e06a      	b.n	80069d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	429a      	cmp	r2, r3
 8006904:	d201      	bcs.n	800690a <create_chain+0x60>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	e063      	b.n	80069d2 <create_chain+0x128>
		scl = clst;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	3301      	adds	r3, #1
 8006916:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	429a      	cmp	r2, r3
 8006920:	d307      	bcc.n	8006932 <create_chain+0x88>
				ncl = 2;
 8006922:	2302      	movs	r3, #2
 8006924:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	429a      	cmp	r2, r3
 800692c:	d901      	bls.n	8006932 <create_chain+0x88>
 800692e:	2300      	movs	r3, #0
 8006930:	e04f      	b.n	80069d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006932:	69f9      	ldr	r1, [r7, #28]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fdc2 	bl	80064be <get_fat>
 800693a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00e      	beq.n	8006960 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d003      	beq.n	8006950 <create_chain+0xa6>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d101      	bne.n	8006954 <create_chain+0xaa>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	e03e      	b.n	80069d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	429a      	cmp	r2, r3
 800695a:	d1da      	bne.n	8006912 <create_chain+0x68>
 800695c:	2300      	movs	r3, #0
 800695e:	e038      	b.n	80069d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006960:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006962:	f04f 32ff 	mov.w	r2, #4294967295
 8006966:	69f9      	ldr	r1, [r7, #28]
 8006968:	6938      	ldr	r0, [r7, #16]
 800696a:	f7ff fe4f 	bl	800660c <put_fat>
 800696e:	4603      	mov	r3, r0
 8006970:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d109      	bne.n	800698c <create_chain+0xe2>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d006      	beq.n	800698c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6938      	ldr	r0, [r7, #16]
 8006984:	f7ff fe42 	bl	800660c <put_fat>
 8006988:	4603      	mov	r3, r0
 800698a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d116      	bne.n	80069c0 <create_chain+0x116>
		fs->last_clst = ncl;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	3b02      	subs	r3, #2
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d804      	bhi.n	80069b0 <create_chain+0x106>
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	1e5a      	subs	r2, r3, #1
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	791b      	ldrb	r3, [r3, #4]
 80069b4:	f043 0301 	orr.w	r3, r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	711a      	strb	r2, [r3, #4]
 80069be:	e007      	b.n	80069d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d102      	bne.n	80069cc <create_chain+0x122>
 80069c6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ca:	e000      	b.n	80069ce <create_chain+0x124>
 80069cc:	2301      	movs	r3, #1
 80069ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80069d0:	69fb      	ldr	r3, [r7, #28]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80069da:	b480      	push	{r7}
 80069dc:	b087      	sub	sp, #28
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ee:	3304      	adds	r3, #4
 80069f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	0a5b      	lsrs	r3, r3, #9
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	8952      	ldrh	r2, [r2, #10]
 80069fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1d1a      	adds	r2, r3, #4
 8006a04:	613a      	str	r2, [r7, #16]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <clmt_clust+0x3a>
 8006a10:	2300      	movs	r3, #0
 8006a12:	e010      	b.n	8006a36 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d307      	bcc.n	8006a2c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	3304      	adds	r3, #4
 8006a28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a2a:	e7e9      	b.n	8006a00 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006a2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	4413      	add	r3, r2
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a58:	d204      	bcs.n	8006a64 <dir_sdi+0x22>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006a64:	2302      	movs	r3, #2
 8006a66:	e063      	b.n	8006b30 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <dir_sdi+0x46>
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d902      	bls.n	8006a88 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10c      	bne.n	8006aa8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	8912      	ldrh	r2, [r2, #8]
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d301      	bcc.n	8006a9e <dir_sdi+0x5c>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e048      	b.n	8006b30 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	61da      	str	r2, [r3, #28]
 8006aa6:	e029      	b.n	8006afc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	895b      	ldrh	r3, [r3, #10]
 8006aac:	025b      	lsls	r3, r3, #9
 8006aae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ab0:	e019      	b.n	8006ae6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6979      	ldr	r1, [r7, #20]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff fd01 	bl	80064be <get_fat>
 8006abc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d101      	bne.n	8006aca <dir_sdi+0x88>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e032      	b.n	8006b30 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d904      	bls.n	8006ada <dir_sdi+0x98>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d301      	bcc.n	8006ade <dir_sdi+0x9c>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e028      	b.n	8006b30 <dir_sdi+0xee>
			ofs -= csz;
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d2e1      	bcs.n	8006ab2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006aee:	6979      	ldr	r1, [r7, #20]
 8006af0:	6938      	ldr	r0, [r7, #16]
 8006af2:	f7ff fcc5 	bl	8006480 <clust2sect>
 8006af6:	4602      	mov	r2, r0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <dir_sdi+0xcc>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e010      	b.n	8006b30 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	0a5b      	lsrs	r3, r3, #9
 8006b16:	441a      	add	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b28:	441a      	add	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	3320      	adds	r3, #32
 8006b4e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <dir_next+0x28>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b5e:	d301      	bcc.n	8006b64 <dir_next+0x2c>
 8006b60:	2304      	movs	r3, #4
 8006b62:	e0aa      	b.n	8006cba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 8098 	bne.w	8006ca0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10b      	bne.n	8006b9a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	8912      	ldrh	r2, [r2, #8]
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	f0c0 8088 	bcc.w	8006ca0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	61da      	str	r2, [r3, #28]
 8006b96:	2304      	movs	r3, #4
 8006b98:	e08f      	b.n	8006cba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	0a5b      	lsrs	r3, r3, #9
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	8952      	ldrh	r2, [r2, #10]
 8006ba2:	3a01      	subs	r2, #1
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d17a      	bne.n	8006ca0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f7ff fc83 	bl	80064be <get_fat>
 8006bb8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d801      	bhi.n	8006bc4 <dir_next+0x8c>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e07a      	b.n	8006cba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d101      	bne.n	8006bd0 <dir_next+0x98>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e074      	b.n	8006cba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d358      	bcc.n	8006c8c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	61da      	str	r2, [r3, #28]
 8006be6:	2304      	movs	r3, #4
 8006be8:	e067      	b.n	8006cba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f7ff fe59 	bl	80068aa <create_chain>
 8006bf8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <dir_next+0xcc>
 8006c00:	2307      	movs	r3, #7
 8006c02:	e05a      	b.n	8006cba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <dir_next+0xd6>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e055      	b.n	8006cba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c14:	d101      	bne.n	8006c1a <dir_next+0xe2>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e04f      	b.n	8006cba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff fb50 	bl	80062c0 <sync_window>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <dir_next+0xf2>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e047      	b.n	8006cba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3330      	adds	r3, #48	@ 0x30
 8006c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c32:	2100      	movs	r1, #0
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff f97a 	bl	8005f2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	6979      	ldr	r1, [r7, #20]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff fc1d 	bl	8006480 <clust2sect>
 8006c46:	4602      	mov	r2, r0
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006c4c:	e012      	b.n	8006c74 <dir_next+0x13c>
						fs->wflag = 1;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff fb33 	bl	80062c0 <sync_window>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <dir_next+0x12c>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e02a      	b.n	8006cba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3301      	adds	r3, #1
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	895b      	ldrh	r3, [r3, #10]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d3e6      	bcc.n	8006c4e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad2      	subs	r2, r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006c92:	6979      	ldr	r1, [r7, #20]
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f7ff fbf3 	bl	8006480 <clust2sect>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	441a      	add	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b086      	sub	sp, #24
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff feb4 	bl	8006a42 <dir_sdi>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d12b      	bne.n	8006d3c <dir_alloc+0x7a>
		n = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	4619      	mov	r1, r3
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff fb2a 	bl	8006348 <move_window>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d11d      	bne.n	8006d3a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2be5      	cmp	r3, #229	@ 0xe5
 8006d06:	d004      	beq.n	8006d12 <dir_alloc+0x50>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d107      	bne.n	8006d22 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	3301      	adds	r3, #1
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d102      	bne.n	8006d26 <dir_alloc+0x64>
 8006d20:	e00c      	b.n	8006d3c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006d22:	2300      	movs	r3, #0
 8006d24:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006d26:	2101      	movs	r1, #1
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff ff05 	bl	8006b38 <dir_next>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0d7      	beq.n	8006ce8 <dir_alloc+0x26>
 8006d38:	e000      	b.n	8006d3c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006d3a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d101      	bne.n	8006d46 <dir_alloc+0x84>
 8006d42:	2307      	movs	r3, #7
 8006d44:	75fb      	strb	r3, [r7, #23]
	return res;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	331a      	adds	r3, #26
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff f842 	bl	8005de8 <ld_word>
 8006d64:	4603      	mov	r3, r0
 8006d66:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d109      	bne.n	8006d84 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	3314      	adds	r3, #20
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff f837 	bl	8005de8 <ld_word>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006d84:	68fb      	ldr	r3, [r7, #12]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	331a      	adds	r3, #26
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	b292      	uxth	r2, r2
 8006da2:	4611      	mov	r1, r2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff f85a 	bl	8005e5e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d109      	bne.n	8006dc6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f103 0214 	add.w	r2, r3, #20
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	0c1b      	lsrs	r3, r3, #16
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f7ff f84c 	bl	8005e5e <st_word>
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b086      	sub	sp, #24
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff fe2f 	bl	8006a42 <dir_sdi>
 8006de4:	4603      	mov	r3, r0
 8006de6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <dir_find+0x24>
 8006dee:	7dfb      	ldrb	r3, [r7, #23]
 8006df0:	e03e      	b.n	8006e70 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6938      	ldr	r0, [r7, #16]
 8006dfa:	f7ff faa5 	bl	8006348 <move_window>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d12f      	bne.n	8006e68 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d102      	bne.n	8006e1c <dir_find+0x4e>
 8006e16:	2304      	movs	r3, #4
 8006e18:	75fb      	strb	r3, [r7, #23]
 8006e1a:	e028      	b.n	8006e6e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	330b      	adds	r3, #11
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	330b      	adds	r3, #11
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <dir_find+0x86>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a18      	ldr	r0, [r3, #32]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3324      	adds	r3, #36	@ 0x24
 8006e46:	220b      	movs	r2, #11
 8006e48:	4619      	mov	r1, r3
 8006e4a:	f7ff f88b 	bl	8005f64 <mem_cmp>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00b      	beq.n	8006e6c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006e54:	2100      	movs	r1, #0
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff fe6e 	bl	8006b38 <dir_next>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0c5      	beq.n	8006df2 <dir_find+0x24>
 8006e66:	e002      	b.n	8006e6e <dir_find+0xa0>
		if (res != FR_OK) break;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006e6c:	bf00      	nop

	return res;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006e86:	2101      	movs	r1, #1
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff ff1a 	bl	8006cc2 <dir_alloc>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11c      	bne.n	8006ed2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	f7ff fa52 	bl	8006348 <move_window>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d111      	bne.n	8006ed2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff f839 	bl	8005f2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a18      	ldr	r0, [r3, #32]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3324      	adds	r3, #36	@ 0x24
 8006ec4:	220b      	movs	r2, #11
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f7ff f810 	bl	8005eec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3324      	adds	r3, #36	@ 0x24
 8006ef0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006ef2:	220b      	movs	r2, #11
 8006ef4:	2120      	movs	r1, #32
 8006ef6:	68b8      	ldr	r0, [r7, #8]
 8006ef8:	f7ff f819 	bl	8005f2e <mem_set>
	si = i = 0; ni = 8;
 8006efc:	2300      	movs	r3, #0
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	2308      	movs	r3, #8
 8006f06:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	61fa      	str	r2, [r7, #28]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006f16:	7efb      	ldrb	r3, [r7, #27]
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d94e      	bls.n	8006fba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006f1c:	7efb      	ldrb	r3, [r7, #27]
 8006f1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f20:	d006      	beq.n	8006f30 <create_name+0x54>
 8006f22:	7efb      	ldrb	r3, [r7, #27]
 8006f24:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f26:	d110      	bne.n	8006f4a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f28:	e002      	b.n	8006f30 <create_name+0x54>
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	61fb      	str	r3, [r7, #28]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f3a:	d0f6      	beq.n	8006f2a <create_name+0x4e>
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f46:	d0f0      	beq.n	8006f2a <create_name+0x4e>
			break;
 8006f48:	e038      	b.n	8006fbc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006f4a:	7efb      	ldrb	r3, [r7, #27]
 8006f4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f4e:	d003      	beq.n	8006f58 <create_name+0x7c>
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d30c      	bcc.n	8006f72 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b0b      	cmp	r3, #11
 8006f5c:	d002      	beq.n	8006f64 <create_name+0x88>
 8006f5e:	7efb      	ldrb	r3, [r7, #27]
 8006f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f62:	d001      	beq.n	8006f68 <create_name+0x8c>
 8006f64:	2306      	movs	r3, #6
 8006f66:	e044      	b.n	8006ff2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006f68:	2308      	movs	r3, #8
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	230b      	movs	r3, #11
 8006f6e:	617b      	str	r3, [r7, #20]
			continue;
 8006f70:	e022      	b.n	8006fb8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006f72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	da04      	bge.n	8006f84 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006f7a:	7efb      	ldrb	r3, [r7, #27]
 8006f7c:	3b80      	subs	r3, #128	@ 0x80
 8006f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ffc <create_name+0x120>)
 8006f80:	5cd3      	ldrb	r3, [r2, r3]
 8006f82:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006f84:	7efb      	ldrb	r3, [r7, #27]
 8006f86:	4619      	mov	r1, r3
 8006f88:	481d      	ldr	r0, [pc, #116]	@ (8007000 <create_name+0x124>)
 8006f8a:	f7ff f812 	bl	8005fb2 <chk_chr>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <create_name+0xbc>
 8006f94:	2306      	movs	r3, #6
 8006f96:	e02c      	b.n	8006ff2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006f98:	7efb      	ldrb	r3, [r7, #27]
 8006f9a:	2b60      	cmp	r3, #96	@ 0x60
 8006f9c:	d905      	bls.n	8006faa <create_name+0xce>
 8006f9e:	7efb      	ldrb	r3, [r7, #27]
 8006fa0:	2b7a      	cmp	r3, #122	@ 0x7a
 8006fa2:	d802      	bhi.n	8006faa <create_name+0xce>
 8006fa4:	7efb      	ldrb	r3, [r7, #27]
 8006fa6:	3b20      	subs	r3, #32
 8006fa8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	613a      	str	r2, [r7, #16]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	7efa      	ldrb	r2, [r7, #27]
 8006fb6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006fb8:	e7a6      	b.n	8006f08 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006fba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <create_name+0xf4>
 8006fcc:	2306      	movs	r3, #6
 8006fce:	e010      	b.n	8006ff2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2be5      	cmp	r3, #229	@ 0xe5
 8006fd6:	d102      	bne.n	8006fde <create_name+0x102>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2205      	movs	r2, #5
 8006fdc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006fde:	7efb      	ldrb	r3, [r7, #27]
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d801      	bhi.n	8006fe8 <create_name+0x10c>
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	e000      	b.n	8006fea <create_name+0x10e>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	330b      	adds	r3, #11
 8006fee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006ff0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	08009088 	.word	0x08009088
 8007000:	08009010 	.word	0x08009010

08007004 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007018:	e002      	b.n	8007020 <follow_path+0x1c>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	3301      	adds	r3, #1
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b2f      	cmp	r3, #47	@ 0x2f
 8007026:	d0f8      	beq.n	800701a <follow_path+0x16>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b5c      	cmp	r3, #92	@ 0x5c
 800702e:	d0f4      	beq.n	800701a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2200      	movs	r2, #0
 8007034:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b1f      	cmp	r3, #31
 800703c:	d80a      	bhi.n	8007054 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2280      	movs	r2, #128	@ 0x80
 8007042:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007046:	2100      	movs	r1, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff fcfa 	bl	8006a42 <dir_sdi>
 800704e:	4603      	mov	r3, r0
 8007050:	75fb      	strb	r3, [r7, #23]
 8007052:	e043      	b.n	80070dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007054:	463b      	mov	r3, r7
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff ff3f 	bl	8006edc <create_name>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d134      	bne.n	80070d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff feb0 	bl	8006dce <dir_find>
 800706e:	4603      	mov	r3, r0
 8007070:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007078:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b04      	cmp	r3, #4
 8007084:	d127      	bne.n	80070d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007086:	7afb      	ldrb	r3, [r7, #11]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d122      	bne.n	80070d6 <follow_path+0xd2>
 8007090:	2305      	movs	r3, #5
 8007092:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007094:	e01f      	b.n	80070d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d11c      	bne.n	80070da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	799b      	ldrb	r3, [r3, #6]
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80070ac:	2305      	movs	r3, #5
 80070ae:	75fb      	strb	r3, [r7, #23]
 80070b0:	e014      	b.n	80070dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c0:	4413      	add	r3, r2
 80070c2:	4619      	mov	r1, r3
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff fe43 	bl	8006d50 <ld_clust>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070d0:	e7c0      	b.n	8007054 <follow_path+0x50>
			if (res != FR_OK) break;
 80070d2:	bf00      	nop
 80070d4:	e002      	b.n	80070dc <follow_path+0xd8>
				break;
 80070d6:	bf00      	nop
 80070d8:	e000      	b.n	80070dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80070da:	bf00      	nop
			}
		}
	}

	return res;
 80070dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b087      	sub	sp, #28
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80070ee:	f04f 33ff 	mov.w	r3, #4294967295
 80070f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d031      	beq.n	8007160 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	e002      	b.n	800710a <get_ldnumber+0x24>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	3301      	adds	r3, #1
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b20      	cmp	r3, #32
 8007110:	d903      	bls.n	800711a <get_ldnumber+0x34>
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b3a      	cmp	r3, #58	@ 0x3a
 8007118:	d1f4      	bne.n	8007104 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007120:	d11c      	bne.n	800715c <get_ldnumber+0x76>
			tp = *path;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	60fa      	str	r2, [r7, #12]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	3b30      	subs	r3, #48	@ 0x30
 8007132:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b09      	cmp	r3, #9
 8007138:	d80e      	bhi.n	8007158 <get_ldnumber+0x72>
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	429a      	cmp	r2, r3
 8007140:	d10a      	bne.n	8007158 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d107      	bne.n	8007158 <get_ldnumber+0x72>
					vol = (int)i;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	3301      	adds	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	e002      	b.n	8007162 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007160:	693b      	ldr	r3, [r7, #16]
}
 8007162:	4618      	mov	r0, r3
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	70da      	strb	r2, [r3, #3]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f04f 32ff 	mov.w	r2, #4294967295
 8007186:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff f8dc 	bl	8006348 <move_window>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <check_fs+0x2a>
 8007196:	2304      	movs	r3, #4
 8007198:	e038      	b.n	800720c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3330      	adds	r3, #48	@ 0x30
 800719e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fe20 	bl	8005de8 <ld_word>
 80071a8:	4603      	mov	r3, r0
 80071aa:	461a      	mov	r2, r3
 80071ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d001      	beq.n	80071b8 <check_fs+0x48>
 80071b4:	2303      	movs	r3, #3
 80071b6:	e029      	b.n	800720c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071be:	2be9      	cmp	r3, #233	@ 0xe9
 80071c0:	d009      	beq.n	80071d6 <check_fs+0x66>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071c8:	2beb      	cmp	r3, #235	@ 0xeb
 80071ca:	d11e      	bne.n	800720a <check_fs+0x9a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80071d2:	2b90      	cmp	r3, #144	@ 0x90
 80071d4:	d119      	bne.n	800720a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3330      	adds	r3, #48	@ 0x30
 80071da:	3336      	adds	r3, #54	@ 0x36
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe fe1b 	bl	8005e18 <ld_dword>
 80071e2:	4603      	mov	r3, r0
 80071e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80071e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007214 <check_fs+0xa4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d101      	bne.n	80071f2 <check_fs+0x82>
 80071ee:	2300      	movs	r3, #0
 80071f0:	e00c      	b.n	800720c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3330      	adds	r3, #48	@ 0x30
 80071f6:	3352      	adds	r3, #82	@ 0x52
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe fe0d 	bl	8005e18 <ld_dword>
 80071fe:	4603      	mov	r3, r0
 8007200:	4a05      	ldr	r2, [pc, #20]	@ (8007218 <check_fs+0xa8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d101      	bne.n	800720a <check_fs+0x9a>
 8007206:	2300      	movs	r3, #0
 8007208:	e000      	b.n	800720c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800720a:	2302      	movs	r3, #2
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	00544146 	.word	0x00544146
 8007218:	33544146 	.word	0x33544146

0800721c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b096      	sub	sp, #88	@ 0x58
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4613      	mov	r3, r2
 8007228:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff ff58 	bl	80070e6 <get_ldnumber>
 8007236:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	da01      	bge.n	8007242 <find_volume+0x26>
 800723e:	230b      	movs	r3, #11
 8007240:	e22d      	b.n	800769e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007242:	4aa1      	ldr	r2, [pc, #644]	@ (80074c8 <find_volume+0x2ac>)
 8007244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <find_volume+0x3a>
 8007252:	230c      	movs	r3, #12
 8007254:	e223      	b.n	800769e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800725a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	f023 0301 	bic.w	r3, r3, #1
 8007262:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01a      	beq.n	80072a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe fd1b 	bl	8005cac <disk_status>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800727c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10c      	bne.n	80072a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <find_volume+0x82>
 800728e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800729a:	230a      	movs	r3, #10
 800729c:	e1ff      	b.n	800769e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800729e:	2300      	movs	r3, #0
 80072a0:	e1fd      	b.n	800769e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80072a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80072a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80072b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe fd13 	bl	8005ce0 <disk_initialize>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80072c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80072cc:	2303      	movs	r3, #3
 80072ce:	e1e6      	b.n	800769e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <find_volume+0xca>
 80072d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80072e2:	230a      	movs	r3, #10
 80072e4:	e1db      	b.n	800769e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80072ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80072ee:	f7ff ff3f 	bl	8007170 <check_fs>
 80072f2:	4603      	mov	r3, r0
 80072f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80072f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d149      	bne.n	8007394 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007300:	2300      	movs	r3, #0
 8007302:	643b      	str	r3, [r7, #64]	@ 0x40
 8007304:	e01e      	b.n	8007344 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007308:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800730c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007314:	4413      	add	r3, r2
 8007316:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	3304      	adds	r3, #4
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d006      	beq.n	8007330 <find_volume+0x114>
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	3308      	adds	r3, #8
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fd76 	bl	8005e18 <ld_dword>
 800732c:	4602      	mov	r2, r0
 800732e:	e000      	b.n	8007332 <find_volume+0x116>
 8007330:	2200      	movs	r2, #0
 8007332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	3358      	adds	r3, #88	@ 0x58
 8007338:	443b      	add	r3, r7
 800733a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800733e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007340:	3301      	adds	r3, #1
 8007342:	643b      	str	r3, [r7, #64]	@ 0x40
 8007344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007346:	2b03      	cmp	r3, #3
 8007348:	d9dd      	bls.n	8007306 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800734a:	2300      	movs	r3, #0
 800734c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800734e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <find_volume+0x13e>
 8007354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007356:	3b01      	subs	r3, #1
 8007358:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800735a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	3358      	adds	r3, #88	@ 0x58
 8007360:	443b      	add	r3, r7
 8007362:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007366:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <find_volume+0x15e>
 800736e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007370:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007372:	f7ff fefd 	bl	8007170 <check_fs>
 8007376:	4603      	mov	r3, r0
 8007378:	e000      	b.n	800737c <find_volume+0x160>
 800737a:	2303      	movs	r3, #3
 800737c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007380:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007384:	2b01      	cmp	r3, #1
 8007386:	d905      	bls.n	8007394 <find_volume+0x178>
 8007388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800738a:	3301      	adds	r3, #1
 800738c:	643b      	str	r3, [r7, #64]	@ 0x40
 800738e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007390:	2b03      	cmp	r3, #3
 8007392:	d9e2      	bls.n	800735a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007394:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007398:	2b04      	cmp	r3, #4
 800739a:	d101      	bne.n	80073a0 <find_volume+0x184>
 800739c:	2301      	movs	r3, #1
 800739e:	e17e      	b.n	800769e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80073a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d901      	bls.n	80073ac <find_volume+0x190>
 80073a8:	230d      	movs	r3, #13
 80073aa:	e178      	b.n	800769e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80073ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ae:	3330      	adds	r3, #48	@ 0x30
 80073b0:	330b      	adds	r3, #11
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fd18 	bl	8005de8 <ld_word>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073be:	d001      	beq.n	80073c4 <find_volume+0x1a8>
 80073c0:	230d      	movs	r3, #13
 80073c2:	e16c      	b.n	800769e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80073c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c6:	3330      	adds	r3, #48	@ 0x30
 80073c8:	3316      	adds	r3, #22
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe fd0c 	bl	8005de8 <ld_word>
 80073d0:	4603      	mov	r3, r0
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80073d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <find_volume+0x1cc>
 80073da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073dc:	3330      	adds	r3, #48	@ 0x30
 80073de:	3324      	adds	r3, #36	@ 0x24
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe fd19 	bl	8005e18 <ld_dword>
 80073e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80073e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80073f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fa:	789b      	ldrb	r3, [r3, #2]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d005      	beq.n	800740c <find_volume+0x1f0>
 8007400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007402:	789b      	ldrb	r3, [r3, #2]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d001      	beq.n	800740c <find_volume+0x1f0>
 8007408:	230d      	movs	r3, #13
 800740a:	e148      	b.n	800769e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800740c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740e:	789b      	ldrb	r3, [r3, #2]
 8007410:	461a      	mov	r2, r3
 8007412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007420:	461a      	mov	r2, r3
 8007422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007424:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007428:	895b      	ldrh	r3, [r3, #10]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d008      	beq.n	8007440 <find_volume+0x224>
 800742e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007430:	895b      	ldrh	r3, [r3, #10]
 8007432:	461a      	mov	r2, r3
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	895b      	ldrh	r3, [r3, #10]
 8007438:	3b01      	subs	r3, #1
 800743a:	4013      	ands	r3, r2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <find_volume+0x228>
 8007440:	230d      	movs	r3, #13
 8007442:	e12c      	b.n	800769e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	3330      	adds	r3, #48	@ 0x30
 8007448:	3311      	adds	r3, #17
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fccc 	bl	8005de8 <ld_word>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745a:	891b      	ldrh	r3, [r3, #8]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <find_volume+0x24e>
 8007466:	230d      	movs	r3, #13
 8007468:	e119      	b.n	800769e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800746a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746c:	3330      	adds	r3, #48	@ 0x30
 800746e:	3313      	adds	r3, #19
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe fcb9 	bl	8005de8 <ld_word>
 8007476:	4603      	mov	r3, r0
 8007478:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800747a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <find_volume+0x272>
 8007480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007482:	3330      	adds	r3, #48	@ 0x30
 8007484:	3320      	adds	r3, #32
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe fcc6 	bl	8005e18 <ld_dword>
 800748c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800748e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007490:	3330      	adds	r3, #48	@ 0x30
 8007492:	330e      	adds	r3, #14
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe fca7 	bl	8005de8 <ld_word>
 800749a:	4603      	mov	r3, r0
 800749c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800749e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <find_volume+0x28c>
 80074a4:	230d      	movs	r3, #13
 80074a6:	e0fa      	b.n	800769e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80074a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80074aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ac:	4413      	add	r3, r2
 80074ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074b0:	8912      	ldrh	r2, [r2, #8]
 80074b2:	0912      	lsrs	r2, r2, #4
 80074b4:	b292      	uxth	r2, r2
 80074b6:	4413      	add	r3, r2
 80074b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80074ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074be:	429a      	cmp	r2, r3
 80074c0:	d204      	bcs.n	80074cc <find_volume+0x2b0>
 80074c2:	230d      	movs	r3, #13
 80074c4:	e0eb      	b.n	800769e <find_volume+0x482>
 80074c6:	bf00      	nop
 80074c8:	20000260 	.word	0x20000260
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80074cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074d4:	8952      	ldrh	r2, [r2, #10]
 80074d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80074da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <find_volume+0x2ca>
 80074e2:	230d      	movs	r3, #13
 80074e4:	e0db      	b.n	800769e <find_volume+0x482>
		fmt = FS_FAT32;
 80074e6:	2303      	movs	r3, #3
 80074e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80074ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d802      	bhi.n	80074fc <find_volume+0x2e0>
 80074f6:	2302      	movs	r3, #2
 80074f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80074fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007502:	4293      	cmp	r3, r2
 8007504:	d802      	bhi.n	800750c <find_volume+0x2f0>
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	1c9a      	adds	r2, r3, #2
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007516:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007518:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800751a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800751c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800751e:	441a      	add	r2, r3
 8007520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007522:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007524:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	441a      	add	r2, r3
 800752a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800752e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007532:	2b03      	cmp	r3, #3
 8007534:	d11e      	bne.n	8007574 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007538:	3330      	adds	r3, #48	@ 0x30
 800753a:	332a      	adds	r3, #42	@ 0x2a
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe fc53 	bl	8005de8 <ld_word>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <find_volume+0x330>
 8007548:	230d      	movs	r3, #13
 800754a:	e0a8      	b.n	800769e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800754c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754e:	891b      	ldrh	r3, [r3, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <find_volume+0x33c>
 8007554:	230d      	movs	r3, #13
 8007556:	e0a2      	b.n	800769e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755a:	3330      	adds	r3, #48	@ 0x30
 800755c:	332c      	adds	r3, #44	@ 0x2c
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fc5a 	bl	8005e18 <ld_dword>
 8007564:	4602      	mov	r2, r0
 8007566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007568:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800756a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	647b      	str	r3, [r7, #68]	@ 0x44
 8007572:	e01f      	b.n	80075b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007576:	891b      	ldrh	r3, [r3, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <find_volume+0x364>
 800757c:	230d      	movs	r3, #13
 800757e:	e08e      	b.n	800769e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	6a1a      	ldr	r2, [r3, #32]
 8007584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007586:	441a      	add	r2, r3
 8007588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800758c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007590:	2b02      	cmp	r3, #2
 8007592:	d103      	bne.n	800759c <find_volume+0x380>
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	e00a      	b.n	80075b2 <find_volume+0x396>
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	695a      	ldr	r2, [r3, #20]
 80075a0:	4613      	mov	r3, r2
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	4413      	add	r3, r2
 80075a6:	085a      	lsrs	r2, r3, #1
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80075b2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	699a      	ldr	r2, [r3, #24]
 80075b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80075be:	0a5b      	lsrs	r3, r3, #9
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d201      	bcs.n	80075c8 <find_volume+0x3ac>
 80075c4:	230d      	movs	r3, #13
 80075c6:	e06a      	b.n	800769e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80075c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ca:	f04f 32ff 	mov.w	r2, #4294967295
 80075ce:	611a      	str	r2, [r3, #16]
 80075d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80075d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075da:	2280      	movs	r2, #128	@ 0x80
 80075dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80075de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d149      	bne.n	800767a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e8:	3330      	adds	r3, #48	@ 0x30
 80075ea:	3330      	adds	r3, #48	@ 0x30
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fbfb 	bl	8005de8 <ld_word>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d140      	bne.n	800767a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80075f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075fa:	3301      	adds	r3, #1
 80075fc:	4619      	mov	r1, r3
 80075fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007600:	f7fe fea2 	bl	8006348 <move_window>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d137      	bne.n	800767a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800760a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760c:	2200      	movs	r2, #0
 800760e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007612:	3330      	adds	r3, #48	@ 0x30
 8007614:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe fbe5 	bl	8005de8 <ld_word>
 800761e:	4603      	mov	r3, r0
 8007620:	461a      	mov	r2, r3
 8007622:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007626:	429a      	cmp	r2, r3
 8007628:	d127      	bne.n	800767a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800762a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762c:	3330      	adds	r3, #48	@ 0x30
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fbf2 	bl	8005e18 <ld_dword>
 8007634:	4603      	mov	r3, r0
 8007636:	4a1c      	ldr	r2, [pc, #112]	@ (80076a8 <find_volume+0x48c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d11e      	bne.n	800767a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	3330      	adds	r3, #48	@ 0x30
 8007640:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fbe7 	bl	8005e18 <ld_dword>
 800764a:	4603      	mov	r3, r0
 800764c:	4a17      	ldr	r2, [pc, #92]	@ (80076ac <find_volume+0x490>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d113      	bne.n	800767a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007654:	3330      	adds	r3, #48	@ 0x30
 8007656:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fbdc 	bl	8005e18 <ld_dword>
 8007660:	4602      	mov	r2, r0
 8007662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007664:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007668:	3330      	adds	r3, #48	@ 0x30
 800766a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe fbd2 	bl	8005e18 <ld_dword>
 8007674:	4602      	mov	r2, r0
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800767a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007680:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007682:	4b0b      	ldr	r3, [pc, #44]	@ (80076b0 <find_volume+0x494>)
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <find_volume+0x494>)
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	4b08      	ldr	r3, [pc, #32]	@ (80076b0 <find_volume+0x494>)
 8007690:	881a      	ldrh	r2, [r3, #0]
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007696:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007698:	f7fe fdee 	bl	8006278 <clear_lock>
#endif
	return FR_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3758      	adds	r7, #88	@ 0x58
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	41615252 	.word	0x41615252
 80076ac:	61417272 	.word	0x61417272
 80076b0:	20000264 	.word	0x20000264

080076b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80076be:	2309      	movs	r3, #9
 80076c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01c      	beq.n	8007702 <validate+0x4e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d018      	beq.n	8007702 <validate+0x4e>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d013      	beq.n	8007702 <validate+0x4e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	889a      	ldrh	r2, [r3, #4]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	88db      	ldrh	r3, [r3, #6]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d10c      	bne.n	8007702 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe fadc 	bl	8005cac <disk_status>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <validate+0x4e>
			res = FR_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <validate+0x5a>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	e000      	b.n	8007710 <validate+0x5c>
 800770e:	2300      	movs	r3, #0
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	6013      	str	r3, [r2, #0]
	return res;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4613      	mov	r3, r2
 800772c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007732:	f107 0310 	add.w	r3, r7, #16
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff fcd5 	bl	80070e6 <get_ldnumber>
 800773c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	2b00      	cmp	r3, #0
 8007742:	da01      	bge.n	8007748 <f_mount+0x28>
 8007744:	230b      	movs	r3, #11
 8007746:	e02b      	b.n	80077a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007748:	4a17      	ldr	r2, [pc, #92]	@ (80077a8 <f_mount+0x88>)
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007750:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007758:	69b8      	ldr	r0, [r7, #24]
 800775a:	f7fe fd8d 	bl	8006278 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	490d      	ldr	r1, [pc, #52]	@ (80077a8 <f_mount+0x88>)
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <f_mount+0x66>
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d001      	beq.n	800778a <f_mount+0x6a>
 8007786:	2300      	movs	r3, #0
 8007788:	e00a      	b.n	80077a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800778a:	f107 010c 	add.w	r1, r7, #12
 800778e:	f107 0308 	add.w	r3, r7, #8
 8007792:	2200      	movs	r2, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff fd41 	bl	800721c <find_volume>
 800779a:	4603      	mov	r3, r0
 800779c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800779e:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000260 	.word	0x20000260

080077ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b098      	sub	sp, #96	@ 0x60
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <f_open+0x18>
 80077c0:	2309      	movs	r3, #9
 80077c2:	e1a9      	b.n	8007b18 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80077cc:	79fa      	ldrb	r2, [r7, #7]
 80077ce:	f107 0110 	add.w	r1, r7, #16
 80077d2:	f107 0308 	add.w	r3, r7, #8
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff fd20 	bl	800721c <find_volume>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80077e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f040 818d 	bne.w	8007b06 <f_open+0x35a>
		dj.obj.fs = fs;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	f107 0314 	add.w	r3, r7, #20
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fc03 	bl	8007004 <follow_path>
 80077fe:	4603      	mov	r3, r0
 8007800:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007804:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007808:	2b00      	cmp	r3, #0
 800780a:	d118      	bne.n	800783e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800780c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007810:	b25b      	sxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	da03      	bge.n	800781e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007816:	2306      	movs	r3, #6
 8007818:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800781c:	e00f      	b.n	800783e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	2b01      	cmp	r3, #1
 8007822:	bf8c      	ite	hi
 8007824:	2301      	movhi	r3, #1
 8007826:	2300      	movls	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	f107 0314 	add.w	r3, r7, #20
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fbd8 	bl	8005fe8 <chk_lock>
 8007838:	4603      	mov	r3, r0
 800783a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	f003 031c 	and.w	r3, r3, #28
 8007844:	2b00      	cmp	r3, #0
 8007846:	d07f      	beq.n	8007948 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007848:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800784c:	2b00      	cmp	r3, #0
 800784e:	d017      	beq.n	8007880 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007850:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007854:	2b04      	cmp	r3, #4
 8007856:	d10e      	bne.n	8007876 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007858:	f7fe fc22 	bl	80060a0 <enq_lock>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d006      	beq.n	8007870 <f_open+0xc4>
 8007862:	f107 0314 	add.w	r3, r7, #20
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff fb06 	bl	8006e78 <dir_register>
 800786c:	4603      	mov	r3, r0
 800786e:	e000      	b.n	8007872 <f_open+0xc6>
 8007870:	2312      	movs	r3, #18
 8007872:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	f043 0308 	orr.w	r3, r3, #8
 800787c:	71fb      	strb	r3, [r7, #7]
 800787e:	e010      	b.n	80078a2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007880:	7ebb      	ldrb	r3, [r7, #26]
 8007882:	f003 0311 	and.w	r3, r3, #17
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <f_open+0xe6>
					res = FR_DENIED;
 800788a:	2307      	movs	r3, #7
 800788c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007890:	e007      	b.n	80078a2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <f_open+0xf6>
 800789c:	2308      	movs	r3, #8
 800789e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80078a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d168      	bne.n	800797c <f_open+0x1d0>
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d063      	beq.n	800797c <f_open+0x1d0>
				dw = GET_FATTIME();
 80078b4:	f7fe f88e 	bl	80059d4 <get_fattime>
 80078b8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80078ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078bc:	330e      	adds	r3, #14
 80078be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fae7 	bl	8005e94 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80078c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c8:	3316      	adds	r3, #22
 80078ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe fae1 	bl	8005e94 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80078d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d4:	330b      	adds	r3, #11
 80078d6:	2220      	movs	r2, #32
 80078d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff fa35 	bl	8006d50 <ld_clust>
 80078e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80078ec:	2200      	movs	r2, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff fa4d 	bl	8006d8e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80078f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f6:	331c      	adds	r3, #28
 80078f8:	2100      	movs	r1, #0
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe faca 	bl	8005e94 <st_dword>
					fs->wflag = 1;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2201      	movs	r2, #1
 8007904:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d037      	beq.n	800797c <f_open+0x1d0>
						dw = fs->winsect;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007912:	f107 0314 	add.w	r3, r7, #20
 8007916:	2200      	movs	r2, #0
 8007918:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe ff60 	bl	80067e0 <remove_chain>
 8007920:	4603      	mov	r3, r0
 8007922:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007926:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800792a:	2b00      	cmp	r3, #0
 800792c:	d126      	bne.n	800797c <f_open+0x1d0>
							res = move_window(fs, dw);
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fd08 	bl	8006348 <move_window>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007942:	3a01      	subs	r2, #1
 8007944:	60da      	str	r2, [r3, #12]
 8007946:	e019      	b.n	800797c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007948:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800794c:	2b00      	cmp	r3, #0
 800794e:	d115      	bne.n	800797c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007950:	7ebb      	ldrb	r3, [r7, #26]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <f_open+0x1b6>
					res = FR_NO_FILE;
 800795a:	2304      	movs	r3, #4
 800795c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007960:	e00c      	b.n	800797c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <f_open+0x1d0>
 800796c:	7ebb      	ldrb	r3, [r7, #26]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <f_open+0x1d0>
						res = FR_DENIED;
 8007976:	2307      	movs	r3, #7
 8007978:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800797c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007980:	2b00      	cmp	r3, #0
 8007982:	d126      	bne.n	80079d2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007994:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800799e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80079a4:	79fb      	ldrb	r3, [r7, #7]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	bf8c      	ite	hi
 80079aa:	2301      	movhi	r3, #1
 80079ac:	2300      	movls	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	f107 0314 	add.w	r3, r7, #20
 80079b6:	4611      	mov	r1, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fb93 	bl	80060e4 <inc_lock>
 80079be:	4602      	mov	r2, r0
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <f_open+0x226>
 80079cc:	2302      	movs	r3, #2
 80079ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80079d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 8095 	bne.w	8007b06 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079e0:	4611      	mov	r1, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff f9b4 	bl	8006d50 <ld_clust>
 80079e8:	4602      	mov	r2, r0
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80079ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f0:	331c      	adds	r3, #28
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fa10 	bl	8005e18 <ld_dword>
 80079f8:	4602      	mov	r2, r0
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	88da      	ldrh	r2, [r3, #6]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	79fa      	ldrb	r2, [r7, #7]
 8007a16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3330      	adds	r3, #48	@ 0x30
 8007a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a32:	2100      	movs	r1, #0
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe fa7a 	bl	8005f2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d060      	beq.n	8007b06 <f_open+0x35a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d05c      	beq.n	8007b06 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	895b      	ldrh	r3, [r3, #10]
 8007a58:	025b      	lsls	r3, r3, #9
 8007a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a68:	e016      	b.n	8007a98 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fd25 	bl	80064be <get_fat>
 8007a74:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007a76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d802      	bhi.n	8007a82 <f_open+0x2d6>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d102      	bne.n	8007a90 <f_open+0x2e4>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d103      	bne.n	8007aa8 <f_open+0x2fc>
 8007aa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d8e0      	bhi.n	8007a6a <f_open+0x2be>
				}
				fp->clust = clst;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007aac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007aae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d127      	bne.n	8007b06 <f_open+0x35a>
 8007ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d022      	beq.n	8007b06 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe fcdb 	bl	8006480 <clust2sect>
 8007aca:	6478      	str	r0, [r7, #68]	@ 0x44
 8007acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <f_open+0x32e>
						res = FR_INT_ERR;
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007ad8:	e015      	b.n	8007b06 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007adc:	0a5a      	lsrs	r2, r3, #9
 8007ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ae0:	441a      	add	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	7858      	ldrb	r0, [r3, #1]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	2301      	movs	r3, #1
 8007af6:	f7fe f919 	bl	8005d2c <disk_read>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <f_open+0x35a>
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007b06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <f_open+0x368>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007b14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3760      	adds	r7, #96	@ 0x60
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	@ 0x38
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f107 0214 	add.w	r2, r7, #20
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fdb7 	bl	80076b4 <validate>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d107      	bne.n	8007b64 <f_read+0x44>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	7d5b      	ldrb	r3, [r3, #21]
 8007b58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <f_read+0x4a>
 8007b64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b68:	e115      	b.n	8007d96 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	7d1b      	ldrb	r3, [r3, #20]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <f_read+0x5a>
 8007b76:	2307      	movs	r3, #7
 8007b78:	e10d      	b.n	8007d96 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	f240 80fe 	bls.w	8007d8c <f_read+0x26c>
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007b94:	e0fa      	b.n	8007d8c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f040 80c6 	bne.w	8007d30 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	0a5b      	lsrs	r3, r3, #9
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	8952      	ldrh	r2, [r2, #10]
 8007bae:	3a01      	subs	r2, #1
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d12f      	bne.n	8007c1a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d103      	bne.n	8007bca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bc8:	e013      	b.n	8007bf2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d007      	beq.n	8007be2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7fe fefe 	bl	80069da <clmt_clust>
 8007bde:	6338      	str	r0, [r7, #48]	@ 0x30
 8007be0:	e007      	b.n	8007bf2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe fc67 	bl	80064be <get_fat>
 8007bf0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d804      	bhi.n	8007c02 <f_read+0xe2>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	755a      	strb	r2, [r3, #21]
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e0c9      	b.n	8007d96 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d104      	bne.n	8007c14 <f_read+0xf4>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	755a      	strb	r2, [r3, #21]
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0c0      	b.n	8007d96 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f7fe fc2c 	bl	8006480 <clust2sect>
 8007c28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <f_read+0x11a>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2202      	movs	r2, #2
 8007c34:	755a      	strb	r2, [r3, #21]
 8007c36:	2302      	movs	r3, #2
 8007c38:	e0ad      	b.n	8007d96 <f_read+0x276>
			sect += csect;
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	4413      	add	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	0a5b      	lsrs	r3, r3, #9
 8007c46:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d039      	beq.n	8007cc2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007c4e:	69fa      	ldr	r2, [r7, #28]
 8007c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c52:	4413      	add	r3, r2
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	8952      	ldrh	r2, [r2, #10]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d905      	bls.n	8007c68 <f_read+0x148>
					cc = fs->csize - csect;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	895b      	ldrh	r3, [r3, #10]
 8007c60:	461a      	mov	r2, r3
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	7858      	ldrb	r0, [r3, #1]
 8007c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c72:	f7fe f85b 	bl	8005d2c <disk_read>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d004      	beq.n	8007c86 <f_read+0x166>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	755a      	strb	r2, [r3, #21]
 8007c82:	2301      	movs	r3, #1
 8007c84:	e087      	b.n	8007d96 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	7d1b      	ldrb	r3, [r3, #20]
 8007c8a:	b25b      	sxtb	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	da14      	bge.n	8007cba <f_read+0x19a>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a1a      	ldr	r2, [r3, #32]
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d90d      	bls.n	8007cba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a1a      	ldr	r2, [r3, #32]
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	025b      	lsls	r3, r3, #9
 8007ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007caa:	18d0      	adds	r0, r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3330      	adds	r3, #48	@ 0x30
 8007cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f7fe f919 	bl	8005eec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	025b      	lsls	r3, r3, #9
 8007cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007cc0:	e050      	b.n	8007d64 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d02e      	beq.n	8007d2a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	7d1b      	ldrb	r3, [r3, #20]
 8007cd0:	b25b      	sxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da18      	bge.n	8007d08 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	7858      	ldrb	r0, [r3, #1]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a1a      	ldr	r2, [r3, #32]
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f7fe f841 	bl	8005d6c <disk_write>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <f_read+0x1da>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	755a      	strb	r2, [r3, #21]
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e04d      	b.n	8007d96 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	7d1b      	ldrb	r3, [r3, #20]
 8007cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	7858      	ldrb	r0, [r3, #1]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d12:	2301      	movs	r3, #1
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	f7fe f809 	bl	8005d2c <disk_read>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <f_read+0x20a>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	755a      	strb	r2, [r3, #21]
 8007d26:	2301      	movs	r3, #1
 8007d28:	e035      	b.n	8007d96 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d901      	bls.n	8007d4a <f_read+0x22a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d58:	4413      	add	r3, r2
 8007d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d60:	f7fe f8c4 	bl	8005eec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d68:	4413      	add	r3, r2
 8007d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	699a      	ldr	r2, [r3, #24]
 8007d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d72:	441a      	add	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	619a      	str	r2, [r3, #24]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7e:	441a      	add	r2, r3
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f47f af01 	bne.w	8007b96 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3738      	adds	r7, #56	@ 0x38
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b086      	sub	sp, #24
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f107 0208 	add.w	r2, r7, #8
 8007dac:	4611      	mov	r1, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fc80 	bl	80076b4 <validate>
 8007db4:	4603      	mov	r3, r0
 8007db6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d168      	bne.n	8007e90 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7d1b      	ldrb	r3, [r3, #20]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d062      	beq.n	8007e90 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7d1b      	ldrb	r3, [r3, #20]
 8007dce:	b25b      	sxtb	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	da15      	bge.n	8007e00 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	7858      	ldrb	r0, [r3, #1]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1a      	ldr	r2, [r3, #32]
 8007de2:	2301      	movs	r3, #1
 8007de4:	f7fd ffc2 	bl	8005d6c <disk_write>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <f_sync+0x54>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e04f      	b.n	8007e92 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	7d1b      	ldrb	r3, [r3, #20]
 8007df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007e00:	f7fd fde8 	bl	80059d4 <get_fattime>
 8007e04:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7fe fa9a 	bl	8006348 <move_window>
 8007e14:	4603      	mov	r3, r0
 8007e16:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d138      	bne.n	8007e90 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e22:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	330b      	adds	r3, #11
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	330b      	adds	r3, #11
 8007e2e:	f042 0220 	orr.w	r2, r2, #32
 8007e32:	b2d2      	uxtb	r2, r2
 8007e34:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	68f9      	ldr	r1, [r7, #12]
 8007e42:	f7fe ffa4 	bl	8006d8e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f103 021c 	add.w	r2, r3, #28
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f7fe f81e 	bl	8005e94 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3316      	adds	r3, #22
 8007e5c:	6939      	ldr	r1, [r7, #16]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe f818 	bl	8005e94 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3312      	adds	r3, #18
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fd fff7 	bl	8005e5e <st_word>
					fs->wflag = 1;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2201      	movs	r2, #1
 8007e74:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe fa93 	bl	80063a4 <sync_fs>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7d1b      	ldrb	r3, [r3, #20]
 8007e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff ff7b 	bl	8007d9e <f_sync>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d118      	bne.n	8007ee4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f107 0208 	add.w	r2, r7, #8
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff fbfa 	bl	80076b4 <validate>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10c      	bne.n	8007ee4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe f996 	bl	8006200 <dec_lock>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d102      	bne.n	8007ee4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007efe:	2301      	movs	r3, #1
 8007f00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007f06:	4b1f      	ldr	r3, [pc, #124]	@ (8007f84 <FATFS_LinkDriverEx+0x94>)
 8007f08:	7a5b      	ldrb	r3, [r3, #9]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d131      	bne.n	8007f74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007f10:	4b1c      	ldr	r3, [pc, #112]	@ (8007f84 <FATFS_LinkDriverEx+0x94>)
 8007f12:	7a5b      	ldrb	r3, [r3, #9]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	461a      	mov	r2, r3
 8007f18:	4b1a      	ldr	r3, [pc, #104]	@ (8007f84 <FATFS_LinkDriverEx+0x94>)
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007f1e:	4b19      	ldr	r3, [pc, #100]	@ (8007f84 <FATFS_LinkDriverEx+0x94>)
 8007f20:	7a5b      	ldrb	r3, [r3, #9]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	4a17      	ldr	r2, [pc, #92]	@ (8007f84 <FATFS_LinkDriverEx+0x94>)
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f2e:	4b15      	ldr	r3, [pc, #84]	@ (8007f84 <FATFS_LinkDriverEx+0x94>)
 8007f30:	7a5b      	ldrb	r3, [r3, #9]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	4b13      	ldr	r3, [pc, #76]	@ (8007f84 <FATFS_LinkDriverEx+0x94>)
 8007f38:	4413      	add	r3, r2
 8007f3a:	79fa      	ldrb	r2, [r7, #7]
 8007f3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f3e:	4b11      	ldr	r3, [pc, #68]	@ (8007f84 <FATFS_LinkDriverEx+0x94>)
 8007f40:	7a5b      	ldrb	r3, [r3, #9]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	b2d1      	uxtb	r1, r2
 8007f48:	4a0e      	ldr	r2, [pc, #56]	@ (8007f84 <FATFS_LinkDriverEx+0x94>)
 8007f4a:	7251      	strb	r1, [r2, #9]
 8007f4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f4e:	7dbb      	ldrb	r3, [r7, #22]
 8007f50:	3330      	adds	r3, #48	@ 0x30
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	223a      	movs	r2, #58	@ 0x3a
 8007f5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	3302      	adds	r3, #2
 8007f64:	222f      	movs	r2, #47	@ 0x2f
 8007f66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	3303      	adds	r3, #3
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	20000288 	.word	0x20000288

08007f88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f92:	2200      	movs	r2, #0
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff ffaa 	bl	8007ef0 <FATFS_LinkDriverEx>
 8007f9c:	4603      	mov	r3, r0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <std>:
 8007fa8:	2300      	movs	r3, #0
 8007faa:	b510      	push	{r4, lr}
 8007fac:	4604      	mov	r4, r0
 8007fae:	e9c0 3300 	strd	r3, r3, [r0]
 8007fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fb6:	6083      	str	r3, [r0, #8]
 8007fb8:	8181      	strh	r1, [r0, #12]
 8007fba:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fbc:	81c2      	strh	r2, [r0, #14]
 8007fbe:	6183      	str	r3, [r0, #24]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	2208      	movs	r2, #8
 8007fc4:	305c      	adds	r0, #92	@ 0x5c
 8007fc6:	f000 f9f9 	bl	80083bc <memset>
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <std+0x58>)
 8007fcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <std+0x5c>)
 8007fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008008 <std+0x60>)
 8007fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800800c <std+0x64>)
 8007fd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fda:	4b0d      	ldr	r3, [pc, #52]	@ (8008010 <std+0x68>)
 8007fdc:	6224      	str	r4, [r4, #32]
 8007fde:	429c      	cmp	r4, r3
 8007fe0:	d006      	beq.n	8007ff0 <std+0x48>
 8007fe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fe6:	4294      	cmp	r4, r2
 8007fe8:	d002      	beq.n	8007ff0 <std+0x48>
 8007fea:	33d0      	adds	r3, #208	@ 0xd0
 8007fec:	429c      	cmp	r4, r3
 8007fee:	d105      	bne.n	8007ffc <std+0x54>
 8007ff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff8:	f000 ba58 	b.w	80084ac <__retarget_lock_init_recursive>
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	bf00      	nop
 8008000:	0800820d 	.word	0x0800820d
 8008004:	0800822f 	.word	0x0800822f
 8008008:	08008267 	.word	0x08008267
 800800c:	0800828b 	.word	0x0800828b
 8008010:	20000294 	.word	0x20000294

08008014 <stdio_exit_handler>:
 8008014:	4a02      	ldr	r2, [pc, #8]	@ (8008020 <stdio_exit_handler+0xc>)
 8008016:	4903      	ldr	r1, [pc, #12]	@ (8008024 <stdio_exit_handler+0x10>)
 8008018:	4803      	ldr	r0, [pc, #12]	@ (8008028 <stdio_exit_handler+0x14>)
 800801a:	f000 b869 	b.w	80080f0 <_fwalk_sglue>
 800801e:	bf00      	nop
 8008020:	2000000c 	.word	0x2000000c
 8008024:	08008d4d 	.word	0x08008d4d
 8008028:	2000001c 	.word	0x2000001c

0800802c <cleanup_stdio>:
 800802c:	6841      	ldr	r1, [r0, #4]
 800802e:	4b0c      	ldr	r3, [pc, #48]	@ (8008060 <cleanup_stdio+0x34>)
 8008030:	4299      	cmp	r1, r3
 8008032:	b510      	push	{r4, lr}
 8008034:	4604      	mov	r4, r0
 8008036:	d001      	beq.n	800803c <cleanup_stdio+0x10>
 8008038:	f000 fe88 	bl	8008d4c <_fflush_r>
 800803c:	68a1      	ldr	r1, [r4, #8]
 800803e:	4b09      	ldr	r3, [pc, #36]	@ (8008064 <cleanup_stdio+0x38>)
 8008040:	4299      	cmp	r1, r3
 8008042:	d002      	beq.n	800804a <cleanup_stdio+0x1e>
 8008044:	4620      	mov	r0, r4
 8008046:	f000 fe81 	bl	8008d4c <_fflush_r>
 800804a:	68e1      	ldr	r1, [r4, #12]
 800804c:	4b06      	ldr	r3, [pc, #24]	@ (8008068 <cleanup_stdio+0x3c>)
 800804e:	4299      	cmp	r1, r3
 8008050:	d004      	beq.n	800805c <cleanup_stdio+0x30>
 8008052:	4620      	mov	r0, r4
 8008054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008058:	f000 be78 	b.w	8008d4c <_fflush_r>
 800805c:	bd10      	pop	{r4, pc}
 800805e:	bf00      	nop
 8008060:	20000294 	.word	0x20000294
 8008064:	200002fc 	.word	0x200002fc
 8008068:	20000364 	.word	0x20000364

0800806c <global_stdio_init.part.0>:
 800806c:	b510      	push	{r4, lr}
 800806e:	4b0b      	ldr	r3, [pc, #44]	@ (800809c <global_stdio_init.part.0+0x30>)
 8008070:	4c0b      	ldr	r4, [pc, #44]	@ (80080a0 <global_stdio_init.part.0+0x34>)
 8008072:	4a0c      	ldr	r2, [pc, #48]	@ (80080a4 <global_stdio_init.part.0+0x38>)
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	4620      	mov	r0, r4
 8008078:	2200      	movs	r2, #0
 800807a:	2104      	movs	r1, #4
 800807c:	f7ff ff94 	bl	8007fa8 <std>
 8008080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008084:	2201      	movs	r2, #1
 8008086:	2109      	movs	r1, #9
 8008088:	f7ff ff8e 	bl	8007fa8 <std>
 800808c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008090:	2202      	movs	r2, #2
 8008092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008096:	2112      	movs	r1, #18
 8008098:	f7ff bf86 	b.w	8007fa8 <std>
 800809c:	200003cc 	.word	0x200003cc
 80080a0:	20000294 	.word	0x20000294
 80080a4:	08008015 	.word	0x08008015

080080a8 <__sfp_lock_acquire>:
 80080a8:	4801      	ldr	r0, [pc, #4]	@ (80080b0 <__sfp_lock_acquire+0x8>)
 80080aa:	f000 ba00 	b.w	80084ae <__retarget_lock_acquire_recursive>
 80080ae:	bf00      	nop
 80080b0:	200003d5 	.word	0x200003d5

080080b4 <__sfp_lock_release>:
 80080b4:	4801      	ldr	r0, [pc, #4]	@ (80080bc <__sfp_lock_release+0x8>)
 80080b6:	f000 b9fb 	b.w	80084b0 <__retarget_lock_release_recursive>
 80080ba:	bf00      	nop
 80080bc:	200003d5 	.word	0x200003d5

080080c0 <__sinit>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	4604      	mov	r4, r0
 80080c4:	f7ff fff0 	bl	80080a8 <__sfp_lock_acquire>
 80080c8:	6a23      	ldr	r3, [r4, #32]
 80080ca:	b11b      	cbz	r3, 80080d4 <__sinit+0x14>
 80080cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d0:	f7ff bff0 	b.w	80080b4 <__sfp_lock_release>
 80080d4:	4b04      	ldr	r3, [pc, #16]	@ (80080e8 <__sinit+0x28>)
 80080d6:	6223      	str	r3, [r4, #32]
 80080d8:	4b04      	ldr	r3, [pc, #16]	@ (80080ec <__sinit+0x2c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f5      	bne.n	80080cc <__sinit+0xc>
 80080e0:	f7ff ffc4 	bl	800806c <global_stdio_init.part.0>
 80080e4:	e7f2      	b.n	80080cc <__sinit+0xc>
 80080e6:	bf00      	nop
 80080e8:	0800802d 	.word	0x0800802d
 80080ec:	200003cc 	.word	0x200003cc

080080f0 <_fwalk_sglue>:
 80080f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f4:	4607      	mov	r7, r0
 80080f6:	4688      	mov	r8, r1
 80080f8:	4614      	mov	r4, r2
 80080fa:	2600      	movs	r6, #0
 80080fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008100:	f1b9 0901 	subs.w	r9, r9, #1
 8008104:	d505      	bpl.n	8008112 <_fwalk_sglue+0x22>
 8008106:	6824      	ldr	r4, [r4, #0]
 8008108:	2c00      	cmp	r4, #0
 800810a:	d1f7      	bne.n	80080fc <_fwalk_sglue+0xc>
 800810c:	4630      	mov	r0, r6
 800810e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008112:	89ab      	ldrh	r3, [r5, #12]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d907      	bls.n	8008128 <_fwalk_sglue+0x38>
 8008118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800811c:	3301      	adds	r3, #1
 800811e:	d003      	beq.n	8008128 <_fwalk_sglue+0x38>
 8008120:	4629      	mov	r1, r5
 8008122:	4638      	mov	r0, r7
 8008124:	47c0      	blx	r8
 8008126:	4306      	orrs	r6, r0
 8008128:	3568      	adds	r5, #104	@ 0x68
 800812a:	e7e9      	b.n	8008100 <_fwalk_sglue+0x10>

0800812c <iprintf>:
 800812c:	b40f      	push	{r0, r1, r2, r3}
 800812e:	b507      	push	{r0, r1, r2, lr}
 8008130:	4906      	ldr	r1, [pc, #24]	@ (800814c <iprintf+0x20>)
 8008132:	ab04      	add	r3, sp, #16
 8008134:	6808      	ldr	r0, [r1, #0]
 8008136:	f853 2b04 	ldr.w	r2, [r3], #4
 800813a:	6881      	ldr	r1, [r0, #8]
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	f000 fadb 	bl	80086f8 <_vfiprintf_r>
 8008142:	b003      	add	sp, #12
 8008144:	f85d eb04 	ldr.w	lr, [sp], #4
 8008148:	b004      	add	sp, #16
 800814a:	4770      	bx	lr
 800814c:	20000018 	.word	0x20000018

08008150 <_puts_r>:
 8008150:	6a03      	ldr	r3, [r0, #32]
 8008152:	b570      	push	{r4, r5, r6, lr}
 8008154:	6884      	ldr	r4, [r0, #8]
 8008156:	4605      	mov	r5, r0
 8008158:	460e      	mov	r6, r1
 800815a:	b90b      	cbnz	r3, 8008160 <_puts_r+0x10>
 800815c:	f7ff ffb0 	bl	80080c0 <__sinit>
 8008160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008162:	07db      	lsls	r3, r3, #31
 8008164:	d405      	bmi.n	8008172 <_puts_r+0x22>
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	0598      	lsls	r0, r3, #22
 800816a:	d402      	bmi.n	8008172 <_puts_r+0x22>
 800816c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800816e:	f000 f99e 	bl	80084ae <__retarget_lock_acquire_recursive>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	0719      	lsls	r1, r3, #28
 8008176:	d502      	bpl.n	800817e <_puts_r+0x2e>
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d135      	bne.n	80081ea <_puts_r+0x9a>
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 f8c5 	bl	8008310 <__swsetup_r>
 8008186:	b380      	cbz	r0, 80081ea <_puts_r+0x9a>
 8008188:	f04f 35ff 	mov.w	r5, #4294967295
 800818c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800818e:	07da      	lsls	r2, r3, #31
 8008190:	d405      	bmi.n	800819e <_puts_r+0x4e>
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	059b      	lsls	r3, r3, #22
 8008196:	d402      	bmi.n	800819e <_puts_r+0x4e>
 8008198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800819a:	f000 f989 	bl	80084b0 <__retarget_lock_release_recursive>
 800819e:	4628      	mov	r0, r5
 80081a0:	bd70      	pop	{r4, r5, r6, pc}
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da04      	bge.n	80081b0 <_puts_r+0x60>
 80081a6:	69a2      	ldr	r2, [r4, #24]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	dc17      	bgt.n	80081dc <_puts_r+0x8c>
 80081ac:	290a      	cmp	r1, #10
 80081ae:	d015      	beq.n	80081dc <_puts_r+0x8c>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	6022      	str	r2, [r4, #0]
 80081b6:	7019      	strb	r1, [r3, #0]
 80081b8:	68a3      	ldr	r3, [r4, #8]
 80081ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081be:	3b01      	subs	r3, #1
 80081c0:	60a3      	str	r3, [r4, #8]
 80081c2:	2900      	cmp	r1, #0
 80081c4:	d1ed      	bne.n	80081a2 <_puts_r+0x52>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	da11      	bge.n	80081ee <_puts_r+0x9e>
 80081ca:	4622      	mov	r2, r4
 80081cc:	210a      	movs	r1, #10
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 f85f 	bl	8008292 <__swbuf_r>
 80081d4:	3001      	adds	r0, #1
 80081d6:	d0d7      	beq.n	8008188 <_puts_r+0x38>
 80081d8:	250a      	movs	r5, #10
 80081da:	e7d7      	b.n	800818c <_puts_r+0x3c>
 80081dc:	4622      	mov	r2, r4
 80081de:	4628      	mov	r0, r5
 80081e0:	f000 f857 	bl	8008292 <__swbuf_r>
 80081e4:	3001      	adds	r0, #1
 80081e6:	d1e7      	bne.n	80081b8 <_puts_r+0x68>
 80081e8:	e7ce      	b.n	8008188 <_puts_r+0x38>
 80081ea:	3e01      	subs	r6, #1
 80081ec:	e7e4      	b.n	80081b8 <_puts_r+0x68>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	6022      	str	r2, [r4, #0]
 80081f4:	220a      	movs	r2, #10
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	e7ee      	b.n	80081d8 <_puts_r+0x88>
	...

080081fc <puts>:
 80081fc:	4b02      	ldr	r3, [pc, #8]	@ (8008208 <puts+0xc>)
 80081fe:	4601      	mov	r1, r0
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	f7ff bfa5 	b.w	8008150 <_puts_r>
 8008206:	bf00      	nop
 8008208:	20000018 	.word	0x20000018

0800820c <__sread>:
 800820c:	b510      	push	{r4, lr}
 800820e:	460c      	mov	r4, r1
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	f000 f8fc 	bl	8008410 <_read_r>
 8008218:	2800      	cmp	r0, #0
 800821a:	bfab      	itete	ge
 800821c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800821e:	89a3      	ldrhlt	r3, [r4, #12]
 8008220:	181b      	addge	r3, r3, r0
 8008222:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008226:	bfac      	ite	ge
 8008228:	6563      	strge	r3, [r4, #84]	@ 0x54
 800822a:	81a3      	strhlt	r3, [r4, #12]
 800822c:	bd10      	pop	{r4, pc}

0800822e <__swrite>:
 800822e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	461f      	mov	r7, r3
 8008234:	898b      	ldrh	r3, [r1, #12]
 8008236:	05db      	lsls	r3, r3, #23
 8008238:	4605      	mov	r5, r0
 800823a:	460c      	mov	r4, r1
 800823c:	4616      	mov	r6, r2
 800823e:	d505      	bpl.n	800824c <__swrite+0x1e>
 8008240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008244:	2302      	movs	r3, #2
 8008246:	2200      	movs	r2, #0
 8008248:	f000 f8d0 	bl	80083ec <_lseek_r>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008252:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	4632      	mov	r2, r6
 800825a:	463b      	mov	r3, r7
 800825c:	4628      	mov	r0, r5
 800825e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008262:	f000 b8e7 	b.w	8008434 <_write_r>

08008266 <__sseek>:
 8008266:	b510      	push	{r4, lr}
 8008268:	460c      	mov	r4, r1
 800826a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826e:	f000 f8bd 	bl	80083ec <_lseek_r>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	bf15      	itete	ne
 8008278:	6560      	strne	r0, [r4, #84]	@ 0x54
 800827a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800827e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008282:	81a3      	strheq	r3, [r4, #12]
 8008284:	bf18      	it	ne
 8008286:	81a3      	strhne	r3, [r4, #12]
 8008288:	bd10      	pop	{r4, pc}

0800828a <__sclose>:
 800828a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828e:	f000 b89d 	b.w	80083cc <_close_r>

08008292 <__swbuf_r>:
 8008292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008294:	460e      	mov	r6, r1
 8008296:	4614      	mov	r4, r2
 8008298:	4605      	mov	r5, r0
 800829a:	b118      	cbz	r0, 80082a4 <__swbuf_r+0x12>
 800829c:	6a03      	ldr	r3, [r0, #32]
 800829e:	b90b      	cbnz	r3, 80082a4 <__swbuf_r+0x12>
 80082a0:	f7ff ff0e 	bl	80080c0 <__sinit>
 80082a4:	69a3      	ldr	r3, [r4, #24]
 80082a6:	60a3      	str	r3, [r4, #8]
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	071a      	lsls	r2, r3, #28
 80082ac:	d501      	bpl.n	80082b2 <__swbuf_r+0x20>
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	b943      	cbnz	r3, 80082c4 <__swbuf_r+0x32>
 80082b2:	4621      	mov	r1, r4
 80082b4:	4628      	mov	r0, r5
 80082b6:	f000 f82b 	bl	8008310 <__swsetup_r>
 80082ba:	b118      	cbz	r0, 80082c4 <__swbuf_r+0x32>
 80082bc:	f04f 37ff 	mov.w	r7, #4294967295
 80082c0:	4638      	mov	r0, r7
 80082c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	6922      	ldr	r2, [r4, #16]
 80082c8:	1a98      	subs	r0, r3, r2
 80082ca:	6963      	ldr	r3, [r4, #20]
 80082cc:	b2f6      	uxtb	r6, r6
 80082ce:	4283      	cmp	r3, r0
 80082d0:	4637      	mov	r7, r6
 80082d2:	dc05      	bgt.n	80082e0 <__swbuf_r+0x4e>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4628      	mov	r0, r5
 80082d8:	f000 fd38 	bl	8008d4c <_fflush_r>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d1ed      	bne.n	80082bc <__swbuf_r+0x2a>
 80082e0:	68a3      	ldr	r3, [r4, #8]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	60a3      	str	r3, [r4, #8]
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	6022      	str	r2, [r4, #0]
 80082ec:	701e      	strb	r6, [r3, #0]
 80082ee:	6962      	ldr	r2, [r4, #20]
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d004      	beq.n	8008300 <__swbuf_r+0x6e>
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	07db      	lsls	r3, r3, #31
 80082fa:	d5e1      	bpl.n	80082c0 <__swbuf_r+0x2e>
 80082fc:	2e0a      	cmp	r6, #10
 80082fe:	d1df      	bne.n	80082c0 <__swbuf_r+0x2e>
 8008300:	4621      	mov	r1, r4
 8008302:	4628      	mov	r0, r5
 8008304:	f000 fd22 	bl	8008d4c <_fflush_r>
 8008308:	2800      	cmp	r0, #0
 800830a:	d0d9      	beq.n	80082c0 <__swbuf_r+0x2e>
 800830c:	e7d6      	b.n	80082bc <__swbuf_r+0x2a>
	...

08008310 <__swsetup_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4b29      	ldr	r3, [pc, #164]	@ (80083b8 <__swsetup_r+0xa8>)
 8008314:	4605      	mov	r5, r0
 8008316:	6818      	ldr	r0, [r3, #0]
 8008318:	460c      	mov	r4, r1
 800831a:	b118      	cbz	r0, 8008324 <__swsetup_r+0x14>
 800831c:	6a03      	ldr	r3, [r0, #32]
 800831e:	b90b      	cbnz	r3, 8008324 <__swsetup_r+0x14>
 8008320:	f7ff fece 	bl	80080c0 <__sinit>
 8008324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008328:	0719      	lsls	r1, r3, #28
 800832a:	d422      	bmi.n	8008372 <__swsetup_r+0x62>
 800832c:	06da      	lsls	r2, r3, #27
 800832e:	d407      	bmi.n	8008340 <__swsetup_r+0x30>
 8008330:	2209      	movs	r2, #9
 8008332:	602a      	str	r2, [r5, #0]
 8008334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008338:	81a3      	strh	r3, [r4, #12]
 800833a:	f04f 30ff 	mov.w	r0, #4294967295
 800833e:	e033      	b.n	80083a8 <__swsetup_r+0x98>
 8008340:	0758      	lsls	r0, r3, #29
 8008342:	d512      	bpl.n	800836a <__swsetup_r+0x5a>
 8008344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008346:	b141      	cbz	r1, 800835a <__swsetup_r+0x4a>
 8008348:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800834c:	4299      	cmp	r1, r3
 800834e:	d002      	beq.n	8008356 <__swsetup_r+0x46>
 8008350:	4628      	mov	r0, r5
 8008352:	f000 f8af 	bl	80084b4 <_free_r>
 8008356:	2300      	movs	r3, #0
 8008358:	6363      	str	r3, [r4, #52]	@ 0x34
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008360:	81a3      	strh	r3, [r4, #12]
 8008362:	2300      	movs	r3, #0
 8008364:	6063      	str	r3, [r4, #4]
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f043 0308 	orr.w	r3, r3, #8
 8008370:	81a3      	strh	r3, [r4, #12]
 8008372:	6923      	ldr	r3, [r4, #16]
 8008374:	b94b      	cbnz	r3, 800838a <__swsetup_r+0x7a>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800837c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008380:	d003      	beq.n	800838a <__swsetup_r+0x7a>
 8008382:	4621      	mov	r1, r4
 8008384:	4628      	mov	r0, r5
 8008386:	f000 fd2f 	bl	8008de8 <__smakebuf_r>
 800838a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800838e:	f013 0201 	ands.w	r2, r3, #1
 8008392:	d00a      	beq.n	80083aa <__swsetup_r+0x9a>
 8008394:	2200      	movs	r2, #0
 8008396:	60a2      	str	r2, [r4, #8]
 8008398:	6962      	ldr	r2, [r4, #20]
 800839a:	4252      	negs	r2, r2
 800839c:	61a2      	str	r2, [r4, #24]
 800839e:	6922      	ldr	r2, [r4, #16]
 80083a0:	b942      	cbnz	r2, 80083b4 <__swsetup_r+0xa4>
 80083a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083a6:	d1c5      	bne.n	8008334 <__swsetup_r+0x24>
 80083a8:	bd38      	pop	{r3, r4, r5, pc}
 80083aa:	0799      	lsls	r1, r3, #30
 80083ac:	bf58      	it	pl
 80083ae:	6962      	ldrpl	r2, [r4, #20]
 80083b0:	60a2      	str	r2, [r4, #8]
 80083b2:	e7f4      	b.n	800839e <__swsetup_r+0x8e>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e7f7      	b.n	80083a8 <__swsetup_r+0x98>
 80083b8:	20000018 	.word	0x20000018

080083bc <memset>:
 80083bc:	4402      	add	r2, r0
 80083be:	4603      	mov	r3, r0
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d100      	bne.n	80083c6 <memset+0xa>
 80083c4:	4770      	bx	lr
 80083c6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ca:	e7f9      	b.n	80083c0 <memset+0x4>

080083cc <_close_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d06      	ldr	r5, [pc, #24]	@ (80083e8 <_close_r+0x1c>)
 80083d0:	2300      	movs	r3, #0
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7f8 fd5b 	bl	8000e92 <_close>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_close_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_close_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	200003d0 	.word	0x200003d0

080083ec <_lseek_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d07      	ldr	r5, [pc, #28]	@ (800840c <_lseek_r+0x20>)
 80083f0:	4604      	mov	r4, r0
 80083f2:	4608      	mov	r0, r1
 80083f4:	4611      	mov	r1, r2
 80083f6:	2200      	movs	r2, #0
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f7f8 fd70 	bl	8000ee0 <_lseek>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_lseek_r+0x1e>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_lseek_r+0x1e>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	200003d0 	.word	0x200003d0

08008410 <_read_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d07      	ldr	r5, [pc, #28]	@ (8008430 <_read_r+0x20>)
 8008414:	4604      	mov	r4, r0
 8008416:	4608      	mov	r0, r1
 8008418:	4611      	mov	r1, r2
 800841a:	2200      	movs	r2, #0
 800841c:	602a      	str	r2, [r5, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	f7f8 fcfe 	bl	8000e20 <_read>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_read_r+0x1e>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_read_r+0x1e>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	200003d0 	.word	0x200003d0

08008434 <_write_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d07      	ldr	r5, [pc, #28]	@ (8008454 <_write_r+0x20>)
 8008438:	4604      	mov	r4, r0
 800843a:	4608      	mov	r0, r1
 800843c:	4611      	mov	r1, r2
 800843e:	2200      	movs	r2, #0
 8008440:	602a      	str	r2, [r5, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	f7f8 fd09 	bl	8000e5a <_write>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_write_r+0x1e>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_write_r+0x1e>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	200003d0 	.word	0x200003d0

08008458 <__errno>:
 8008458:	4b01      	ldr	r3, [pc, #4]	@ (8008460 <__errno+0x8>)
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20000018 	.word	0x20000018

08008464 <__libc_init_array>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	4d0d      	ldr	r5, [pc, #52]	@ (800849c <__libc_init_array+0x38>)
 8008468:	4c0d      	ldr	r4, [pc, #52]	@ (80084a0 <__libc_init_array+0x3c>)
 800846a:	1b64      	subs	r4, r4, r5
 800846c:	10a4      	asrs	r4, r4, #2
 800846e:	2600      	movs	r6, #0
 8008470:	42a6      	cmp	r6, r4
 8008472:	d109      	bne.n	8008488 <__libc_init_array+0x24>
 8008474:	4d0b      	ldr	r5, [pc, #44]	@ (80084a4 <__libc_init_array+0x40>)
 8008476:	4c0c      	ldr	r4, [pc, #48]	@ (80084a8 <__libc_init_array+0x44>)
 8008478:	f000 fd24 	bl	8008ec4 <_init>
 800847c:	1b64      	subs	r4, r4, r5
 800847e:	10a4      	asrs	r4, r4, #2
 8008480:	2600      	movs	r6, #0
 8008482:	42a6      	cmp	r6, r4
 8008484:	d105      	bne.n	8008492 <__libc_init_array+0x2e>
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	f855 3b04 	ldr.w	r3, [r5], #4
 800848c:	4798      	blx	r3
 800848e:	3601      	adds	r6, #1
 8008490:	e7ee      	b.n	8008470 <__libc_init_array+0xc>
 8008492:	f855 3b04 	ldr.w	r3, [r5], #4
 8008496:	4798      	blx	r3
 8008498:	3601      	adds	r6, #1
 800849a:	e7f2      	b.n	8008482 <__libc_init_array+0x1e>
 800849c:	08009144 	.word	0x08009144
 80084a0:	08009144 	.word	0x08009144
 80084a4:	08009144 	.word	0x08009144
 80084a8:	08009148 	.word	0x08009148

080084ac <__retarget_lock_init_recursive>:
 80084ac:	4770      	bx	lr

080084ae <__retarget_lock_acquire_recursive>:
 80084ae:	4770      	bx	lr

080084b0 <__retarget_lock_release_recursive>:
 80084b0:	4770      	bx	lr
	...

080084b4 <_free_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4605      	mov	r5, r0
 80084b8:	2900      	cmp	r1, #0
 80084ba:	d041      	beq.n	8008540 <_free_r+0x8c>
 80084bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c0:	1f0c      	subs	r4, r1, #4
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bfb8      	it	lt
 80084c6:	18e4      	addlt	r4, r4, r3
 80084c8:	f000 f8e0 	bl	800868c <__malloc_lock>
 80084cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008544 <_free_r+0x90>)
 80084ce:	6813      	ldr	r3, [r2, #0]
 80084d0:	b933      	cbnz	r3, 80084e0 <_free_r+0x2c>
 80084d2:	6063      	str	r3, [r4, #4]
 80084d4:	6014      	str	r4, [r2, #0]
 80084d6:	4628      	mov	r0, r5
 80084d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084dc:	f000 b8dc 	b.w	8008698 <__malloc_unlock>
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	d908      	bls.n	80084f6 <_free_r+0x42>
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	1821      	adds	r1, r4, r0
 80084e8:	428b      	cmp	r3, r1
 80084ea:	bf01      	itttt	eq
 80084ec:	6819      	ldreq	r1, [r3, #0]
 80084ee:	685b      	ldreq	r3, [r3, #4]
 80084f0:	1809      	addeq	r1, r1, r0
 80084f2:	6021      	streq	r1, [r4, #0]
 80084f4:	e7ed      	b.n	80084d2 <_free_r+0x1e>
 80084f6:	461a      	mov	r2, r3
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	b10b      	cbz	r3, 8008500 <_free_r+0x4c>
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d9fa      	bls.n	80084f6 <_free_r+0x42>
 8008500:	6811      	ldr	r1, [r2, #0]
 8008502:	1850      	adds	r0, r2, r1
 8008504:	42a0      	cmp	r0, r4
 8008506:	d10b      	bne.n	8008520 <_free_r+0x6c>
 8008508:	6820      	ldr	r0, [r4, #0]
 800850a:	4401      	add	r1, r0
 800850c:	1850      	adds	r0, r2, r1
 800850e:	4283      	cmp	r3, r0
 8008510:	6011      	str	r1, [r2, #0]
 8008512:	d1e0      	bne.n	80084d6 <_free_r+0x22>
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	6053      	str	r3, [r2, #4]
 800851a:	4408      	add	r0, r1
 800851c:	6010      	str	r0, [r2, #0]
 800851e:	e7da      	b.n	80084d6 <_free_r+0x22>
 8008520:	d902      	bls.n	8008528 <_free_r+0x74>
 8008522:	230c      	movs	r3, #12
 8008524:	602b      	str	r3, [r5, #0]
 8008526:	e7d6      	b.n	80084d6 <_free_r+0x22>
 8008528:	6820      	ldr	r0, [r4, #0]
 800852a:	1821      	adds	r1, r4, r0
 800852c:	428b      	cmp	r3, r1
 800852e:	bf04      	itt	eq
 8008530:	6819      	ldreq	r1, [r3, #0]
 8008532:	685b      	ldreq	r3, [r3, #4]
 8008534:	6063      	str	r3, [r4, #4]
 8008536:	bf04      	itt	eq
 8008538:	1809      	addeq	r1, r1, r0
 800853a:	6021      	streq	r1, [r4, #0]
 800853c:	6054      	str	r4, [r2, #4]
 800853e:	e7ca      	b.n	80084d6 <_free_r+0x22>
 8008540:	bd38      	pop	{r3, r4, r5, pc}
 8008542:	bf00      	nop
 8008544:	200003dc 	.word	0x200003dc

08008548 <sbrk_aligned>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	4e0f      	ldr	r6, [pc, #60]	@ (8008588 <sbrk_aligned+0x40>)
 800854c:	460c      	mov	r4, r1
 800854e:	6831      	ldr	r1, [r6, #0]
 8008550:	4605      	mov	r5, r0
 8008552:	b911      	cbnz	r1, 800855a <sbrk_aligned+0x12>
 8008554:	f000 fca6 	bl	8008ea4 <_sbrk_r>
 8008558:	6030      	str	r0, [r6, #0]
 800855a:	4621      	mov	r1, r4
 800855c:	4628      	mov	r0, r5
 800855e:	f000 fca1 	bl	8008ea4 <_sbrk_r>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d103      	bne.n	800856e <sbrk_aligned+0x26>
 8008566:	f04f 34ff 	mov.w	r4, #4294967295
 800856a:	4620      	mov	r0, r4
 800856c:	bd70      	pop	{r4, r5, r6, pc}
 800856e:	1cc4      	adds	r4, r0, #3
 8008570:	f024 0403 	bic.w	r4, r4, #3
 8008574:	42a0      	cmp	r0, r4
 8008576:	d0f8      	beq.n	800856a <sbrk_aligned+0x22>
 8008578:	1a21      	subs	r1, r4, r0
 800857a:	4628      	mov	r0, r5
 800857c:	f000 fc92 	bl	8008ea4 <_sbrk_r>
 8008580:	3001      	adds	r0, #1
 8008582:	d1f2      	bne.n	800856a <sbrk_aligned+0x22>
 8008584:	e7ef      	b.n	8008566 <sbrk_aligned+0x1e>
 8008586:	bf00      	nop
 8008588:	200003d8 	.word	0x200003d8

0800858c <_malloc_r>:
 800858c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008590:	1ccd      	adds	r5, r1, #3
 8008592:	f025 0503 	bic.w	r5, r5, #3
 8008596:	3508      	adds	r5, #8
 8008598:	2d0c      	cmp	r5, #12
 800859a:	bf38      	it	cc
 800859c:	250c      	movcc	r5, #12
 800859e:	2d00      	cmp	r5, #0
 80085a0:	4606      	mov	r6, r0
 80085a2:	db01      	blt.n	80085a8 <_malloc_r+0x1c>
 80085a4:	42a9      	cmp	r1, r5
 80085a6:	d904      	bls.n	80085b2 <_malloc_r+0x26>
 80085a8:	230c      	movs	r3, #12
 80085aa:	6033      	str	r3, [r6, #0]
 80085ac:	2000      	movs	r0, #0
 80085ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008688 <_malloc_r+0xfc>
 80085b6:	f000 f869 	bl	800868c <__malloc_lock>
 80085ba:	f8d8 3000 	ldr.w	r3, [r8]
 80085be:	461c      	mov	r4, r3
 80085c0:	bb44      	cbnz	r4, 8008614 <_malloc_r+0x88>
 80085c2:	4629      	mov	r1, r5
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7ff ffbf 	bl	8008548 <sbrk_aligned>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	4604      	mov	r4, r0
 80085ce:	d158      	bne.n	8008682 <_malloc_r+0xf6>
 80085d0:	f8d8 4000 	ldr.w	r4, [r8]
 80085d4:	4627      	mov	r7, r4
 80085d6:	2f00      	cmp	r7, #0
 80085d8:	d143      	bne.n	8008662 <_malloc_r+0xd6>
 80085da:	2c00      	cmp	r4, #0
 80085dc:	d04b      	beq.n	8008676 <_malloc_r+0xea>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	4639      	mov	r1, r7
 80085e2:	4630      	mov	r0, r6
 80085e4:	eb04 0903 	add.w	r9, r4, r3
 80085e8:	f000 fc5c 	bl	8008ea4 <_sbrk_r>
 80085ec:	4581      	cmp	r9, r0
 80085ee:	d142      	bne.n	8008676 <_malloc_r+0xea>
 80085f0:	6821      	ldr	r1, [r4, #0]
 80085f2:	1a6d      	subs	r5, r5, r1
 80085f4:	4629      	mov	r1, r5
 80085f6:	4630      	mov	r0, r6
 80085f8:	f7ff ffa6 	bl	8008548 <sbrk_aligned>
 80085fc:	3001      	adds	r0, #1
 80085fe:	d03a      	beq.n	8008676 <_malloc_r+0xea>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	442b      	add	r3, r5
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	f8d8 3000 	ldr.w	r3, [r8]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	bb62      	cbnz	r2, 8008668 <_malloc_r+0xdc>
 800860e:	f8c8 7000 	str.w	r7, [r8]
 8008612:	e00f      	b.n	8008634 <_malloc_r+0xa8>
 8008614:	6822      	ldr	r2, [r4, #0]
 8008616:	1b52      	subs	r2, r2, r5
 8008618:	d420      	bmi.n	800865c <_malloc_r+0xd0>
 800861a:	2a0b      	cmp	r2, #11
 800861c:	d917      	bls.n	800864e <_malloc_r+0xc2>
 800861e:	1961      	adds	r1, r4, r5
 8008620:	42a3      	cmp	r3, r4
 8008622:	6025      	str	r5, [r4, #0]
 8008624:	bf18      	it	ne
 8008626:	6059      	strne	r1, [r3, #4]
 8008628:	6863      	ldr	r3, [r4, #4]
 800862a:	bf08      	it	eq
 800862c:	f8c8 1000 	streq.w	r1, [r8]
 8008630:	5162      	str	r2, [r4, r5]
 8008632:	604b      	str	r3, [r1, #4]
 8008634:	4630      	mov	r0, r6
 8008636:	f000 f82f 	bl	8008698 <__malloc_unlock>
 800863a:	f104 000b 	add.w	r0, r4, #11
 800863e:	1d23      	adds	r3, r4, #4
 8008640:	f020 0007 	bic.w	r0, r0, #7
 8008644:	1ac2      	subs	r2, r0, r3
 8008646:	bf1c      	itt	ne
 8008648:	1a1b      	subne	r3, r3, r0
 800864a:	50a3      	strne	r3, [r4, r2]
 800864c:	e7af      	b.n	80085ae <_malloc_r+0x22>
 800864e:	6862      	ldr	r2, [r4, #4]
 8008650:	42a3      	cmp	r3, r4
 8008652:	bf0c      	ite	eq
 8008654:	f8c8 2000 	streq.w	r2, [r8]
 8008658:	605a      	strne	r2, [r3, #4]
 800865a:	e7eb      	b.n	8008634 <_malloc_r+0xa8>
 800865c:	4623      	mov	r3, r4
 800865e:	6864      	ldr	r4, [r4, #4]
 8008660:	e7ae      	b.n	80085c0 <_malloc_r+0x34>
 8008662:	463c      	mov	r4, r7
 8008664:	687f      	ldr	r7, [r7, #4]
 8008666:	e7b6      	b.n	80085d6 <_malloc_r+0x4a>
 8008668:	461a      	mov	r2, r3
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	42a3      	cmp	r3, r4
 800866e:	d1fb      	bne.n	8008668 <_malloc_r+0xdc>
 8008670:	2300      	movs	r3, #0
 8008672:	6053      	str	r3, [r2, #4]
 8008674:	e7de      	b.n	8008634 <_malloc_r+0xa8>
 8008676:	230c      	movs	r3, #12
 8008678:	6033      	str	r3, [r6, #0]
 800867a:	4630      	mov	r0, r6
 800867c:	f000 f80c 	bl	8008698 <__malloc_unlock>
 8008680:	e794      	b.n	80085ac <_malloc_r+0x20>
 8008682:	6005      	str	r5, [r0, #0]
 8008684:	e7d6      	b.n	8008634 <_malloc_r+0xa8>
 8008686:	bf00      	nop
 8008688:	200003dc 	.word	0x200003dc

0800868c <__malloc_lock>:
 800868c:	4801      	ldr	r0, [pc, #4]	@ (8008694 <__malloc_lock+0x8>)
 800868e:	f7ff bf0e 	b.w	80084ae <__retarget_lock_acquire_recursive>
 8008692:	bf00      	nop
 8008694:	200003d4 	.word	0x200003d4

08008698 <__malloc_unlock>:
 8008698:	4801      	ldr	r0, [pc, #4]	@ (80086a0 <__malloc_unlock+0x8>)
 800869a:	f7ff bf09 	b.w	80084b0 <__retarget_lock_release_recursive>
 800869e:	bf00      	nop
 80086a0:	200003d4 	.word	0x200003d4

080086a4 <__sfputc_r>:
 80086a4:	6893      	ldr	r3, [r2, #8]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	b410      	push	{r4}
 80086ac:	6093      	str	r3, [r2, #8]
 80086ae:	da08      	bge.n	80086c2 <__sfputc_r+0x1e>
 80086b0:	6994      	ldr	r4, [r2, #24]
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	db01      	blt.n	80086ba <__sfputc_r+0x16>
 80086b6:	290a      	cmp	r1, #10
 80086b8:	d103      	bne.n	80086c2 <__sfputc_r+0x1e>
 80086ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086be:	f7ff bde8 	b.w	8008292 <__swbuf_r>
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	1c58      	adds	r0, r3, #1
 80086c6:	6010      	str	r0, [r2, #0]
 80086c8:	7019      	strb	r1, [r3, #0]
 80086ca:	4608      	mov	r0, r1
 80086cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <__sfputs_r>:
 80086d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d4:	4606      	mov	r6, r0
 80086d6:	460f      	mov	r7, r1
 80086d8:	4614      	mov	r4, r2
 80086da:	18d5      	adds	r5, r2, r3
 80086dc:	42ac      	cmp	r4, r5
 80086de:	d101      	bne.n	80086e4 <__sfputs_r+0x12>
 80086e0:	2000      	movs	r0, #0
 80086e2:	e007      	b.n	80086f4 <__sfputs_r+0x22>
 80086e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e8:	463a      	mov	r2, r7
 80086ea:	4630      	mov	r0, r6
 80086ec:	f7ff ffda 	bl	80086a4 <__sfputc_r>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d1f3      	bne.n	80086dc <__sfputs_r+0xa>
 80086f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086f8 <_vfiprintf_r>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	460d      	mov	r5, r1
 80086fe:	b09d      	sub	sp, #116	@ 0x74
 8008700:	4614      	mov	r4, r2
 8008702:	4698      	mov	r8, r3
 8008704:	4606      	mov	r6, r0
 8008706:	b118      	cbz	r0, 8008710 <_vfiprintf_r+0x18>
 8008708:	6a03      	ldr	r3, [r0, #32]
 800870a:	b90b      	cbnz	r3, 8008710 <_vfiprintf_r+0x18>
 800870c:	f7ff fcd8 	bl	80080c0 <__sinit>
 8008710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d405      	bmi.n	8008722 <_vfiprintf_r+0x2a>
 8008716:	89ab      	ldrh	r3, [r5, #12]
 8008718:	059a      	lsls	r2, r3, #22
 800871a:	d402      	bmi.n	8008722 <_vfiprintf_r+0x2a>
 800871c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800871e:	f7ff fec6 	bl	80084ae <__retarget_lock_acquire_recursive>
 8008722:	89ab      	ldrh	r3, [r5, #12]
 8008724:	071b      	lsls	r3, r3, #28
 8008726:	d501      	bpl.n	800872c <_vfiprintf_r+0x34>
 8008728:	692b      	ldr	r3, [r5, #16]
 800872a:	b99b      	cbnz	r3, 8008754 <_vfiprintf_r+0x5c>
 800872c:	4629      	mov	r1, r5
 800872e:	4630      	mov	r0, r6
 8008730:	f7ff fdee 	bl	8008310 <__swsetup_r>
 8008734:	b170      	cbz	r0, 8008754 <_vfiprintf_r+0x5c>
 8008736:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008738:	07dc      	lsls	r4, r3, #31
 800873a:	d504      	bpl.n	8008746 <_vfiprintf_r+0x4e>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	b01d      	add	sp, #116	@ 0x74
 8008742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	0598      	lsls	r0, r3, #22
 800874a:	d4f7      	bmi.n	800873c <_vfiprintf_r+0x44>
 800874c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800874e:	f7ff feaf 	bl	80084b0 <__retarget_lock_release_recursive>
 8008752:	e7f3      	b.n	800873c <_vfiprintf_r+0x44>
 8008754:	2300      	movs	r3, #0
 8008756:	9309      	str	r3, [sp, #36]	@ 0x24
 8008758:	2320      	movs	r3, #32
 800875a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800875e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008762:	2330      	movs	r3, #48	@ 0x30
 8008764:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008914 <_vfiprintf_r+0x21c>
 8008768:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800876c:	f04f 0901 	mov.w	r9, #1
 8008770:	4623      	mov	r3, r4
 8008772:	469a      	mov	sl, r3
 8008774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008778:	b10a      	cbz	r2, 800877e <_vfiprintf_r+0x86>
 800877a:	2a25      	cmp	r2, #37	@ 0x25
 800877c:	d1f9      	bne.n	8008772 <_vfiprintf_r+0x7a>
 800877e:	ebba 0b04 	subs.w	fp, sl, r4
 8008782:	d00b      	beq.n	800879c <_vfiprintf_r+0xa4>
 8008784:	465b      	mov	r3, fp
 8008786:	4622      	mov	r2, r4
 8008788:	4629      	mov	r1, r5
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff ffa1 	bl	80086d2 <__sfputs_r>
 8008790:	3001      	adds	r0, #1
 8008792:	f000 80a7 	beq.w	80088e4 <_vfiprintf_r+0x1ec>
 8008796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008798:	445a      	add	r2, fp
 800879a:	9209      	str	r2, [sp, #36]	@ 0x24
 800879c:	f89a 3000 	ldrb.w	r3, [sl]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 809f 	beq.w	80088e4 <_vfiprintf_r+0x1ec>
 80087a6:	2300      	movs	r3, #0
 80087a8:	f04f 32ff 	mov.w	r2, #4294967295
 80087ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b0:	f10a 0a01 	add.w	sl, sl, #1
 80087b4:	9304      	str	r3, [sp, #16]
 80087b6:	9307      	str	r3, [sp, #28]
 80087b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80087be:	4654      	mov	r4, sl
 80087c0:	2205      	movs	r2, #5
 80087c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c6:	4853      	ldr	r0, [pc, #332]	@ (8008914 <_vfiprintf_r+0x21c>)
 80087c8:	f7f7 fd3a 	bl	8000240 <memchr>
 80087cc:	9a04      	ldr	r2, [sp, #16]
 80087ce:	b9d8      	cbnz	r0, 8008808 <_vfiprintf_r+0x110>
 80087d0:	06d1      	lsls	r1, r2, #27
 80087d2:	bf44      	itt	mi
 80087d4:	2320      	movmi	r3, #32
 80087d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087da:	0713      	lsls	r3, r2, #28
 80087dc:	bf44      	itt	mi
 80087de:	232b      	movmi	r3, #43	@ 0x2b
 80087e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e4:	f89a 3000 	ldrb.w	r3, [sl]
 80087e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ea:	d015      	beq.n	8008818 <_vfiprintf_r+0x120>
 80087ec:	9a07      	ldr	r2, [sp, #28]
 80087ee:	4654      	mov	r4, sl
 80087f0:	2000      	movs	r0, #0
 80087f2:	f04f 0c0a 	mov.w	ip, #10
 80087f6:	4621      	mov	r1, r4
 80087f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087fc:	3b30      	subs	r3, #48	@ 0x30
 80087fe:	2b09      	cmp	r3, #9
 8008800:	d94b      	bls.n	800889a <_vfiprintf_r+0x1a2>
 8008802:	b1b0      	cbz	r0, 8008832 <_vfiprintf_r+0x13a>
 8008804:	9207      	str	r2, [sp, #28]
 8008806:	e014      	b.n	8008832 <_vfiprintf_r+0x13a>
 8008808:	eba0 0308 	sub.w	r3, r0, r8
 800880c:	fa09 f303 	lsl.w	r3, r9, r3
 8008810:	4313      	orrs	r3, r2
 8008812:	9304      	str	r3, [sp, #16]
 8008814:	46a2      	mov	sl, r4
 8008816:	e7d2      	b.n	80087be <_vfiprintf_r+0xc6>
 8008818:	9b03      	ldr	r3, [sp, #12]
 800881a:	1d19      	adds	r1, r3, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	9103      	str	r1, [sp, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	bfbb      	ittet	lt
 8008824:	425b      	neglt	r3, r3
 8008826:	f042 0202 	orrlt.w	r2, r2, #2
 800882a:	9307      	strge	r3, [sp, #28]
 800882c:	9307      	strlt	r3, [sp, #28]
 800882e:	bfb8      	it	lt
 8008830:	9204      	strlt	r2, [sp, #16]
 8008832:	7823      	ldrb	r3, [r4, #0]
 8008834:	2b2e      	cmp	r3, #46	@ 0x2e
 8008836:	d10a      	bne.n	800884e <_vfiprintf_r+0x156>
 8008838:	7863      	ldrb	r3, [r4, #1]
 800883a:	2b2a      	cmp	r3, #42	@ 0x2a
 800883c:	d132      	bne.n	80088a4 <_vfiprintf_r+0x1ac>
 800883e:	9b03      	ldr	r3, [sp, #12]
 8008840:	1d1a      	adds	r2, r3, #4
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	9203      	str	r2, [sp, #12]
 8008846:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800884a:	3402      	adds	r4, #2
 800884c:	9305      	str	r3, [sp, #20]
 800884e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008924 <_vfiprintf_r+0x22c>
 8008852:	7821      	ldrb	r1, [r4, #0]
 8008854:	2203      	movs	r2, #3
 8008856:	4650      	mov	r0, sl
 8008858:	f7f7 fcf2 	bl	8000240 <memchr>
 800885c:	b138      	cbz	r0, 800886e <_vfiprintf_r+0x176>
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	eba0 000a 	sub.w	r0, r0, sl
 8008864:	2240      	movs	r2, #64	@ 0x40
 8008866:	4082      	lsls	r2, r0
 8008868:	4313      	orrs	r3, r2
 800886a:	3401      	adds	r4, #1
 800886c:	9304      	str	r3, [sp, #16]
 800886e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008872:	4829      	ldr	r0, [pc, #164]	@ (8008918 <_vfiprintf_r+0x220>)
 8008874:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008878:	2206      	movs	r2, #6
 800887a:	f7f7 fce1 	bl	8000240 <memchr>
 800887e:	2800      	cmp	r0, #0
 8008880:	d03f      	beq.n	8008902 <_vfiprintf_r+0x20a>
 8008882:	4b26      	ldr	r3, [pc, #152]	@ (800891c <_vfiprintf_r+0x224>)
 8008884:	bb1b      	cbnz	r3, 80088ce <_vfiprintf_r+0x1d6>
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	3307      	adds	r3, #7
 800888a:	f023 0307 	bic.w	r3, r3, #7
 800888e:	3308      	adds	r3, #8
 8008890:	9303      	str	r3, [sp, #12]
 8008892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008894:	443b      	add	r3, r7
 8008896:	9309      	str	r3, [sp, #36]	@ 0x24
 8008898:	e76a      	b.n	8008770 <_vfiprintf_r+0x78>
 800889a:	fb0c 3202 	mla	r2, ip, r2, r3
 800889e:	460c      	mov	r4, r1
 80088a0:	2001      	movs	r0, #1
 80088a2:	e7a8      	b.n	80087f6 <_vfiprintf_r+0xfe>
 80088a4:	2300      	movs	r3, #0
 80088a6:	3401      	adds	r4, #1
 80088a8:	9305      	str	r3, [sp, #20]
 80088aa:	4619      	mov	r1, r3
 80088ac:	f04f 0c0a 	mov.w	ip, #10
 80088b0:	4620      	mov	r0, r4
 80088b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b6:	3a30      	subs	r2, #48	@ 0x30
 80088b8:	2a09      	cmp	r2, #9
 80088ba:	d903      	bls.n	80088c4 <_vfiprintf_r+0x1cc>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0c6      	beq.n	800884e <_vfiprintf_r+0x156>
 80088c0:	9105      	str	r1, [sp, #20]
 80088c2:	e7c4      	b.n	800884e <_vfiprintf_r+0x156>
 80088c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088c8:	4604      	mov	r4, r0
 80088ca:	2301      	movs	r3, #1
 80088cc:	e7f0      	b.n	80088b0 <_vfiprintf_r+0x1b8>
 80088ce:	ab03      	add	r3, sp, #12
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	462a      	mov	r2, r5
 80088d4:	4b12      	ldr	r3, [pc, #72]	@ (8008920 <_vfiprintf_r+0x228>)
 80088d6:	a904      	add	r1, sp, #16
 80088d8:	4630      	mov	r0, r6
 80088da:	f3af 8000 	nop.w
 80088de:	4607      	mov	r7, r0
 80088e0:	1c78      	adds	r0, r7, #1
 80088e2:	d1d6      	bne.n	8008892 <_vfiprintf_r+0x19a>
 80088e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e6:	07d9      	lsls	r1, r3, #31
 80088e8:	d405      	bmi.n	80088f6 <_vfiprintf_r+0x1fe>
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	059a      	lsls	r2, r3, #22
 80088ee:	d402      	bmi.n	80088f6 <_vfiprintf_r+0x1fe>
 80088f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088f2:	f7ff fddd 	bl	80084b0 <__retarget_lock_release_recursive>
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	065b      	lsls	r3, r3, #25
 80088fa:	f53f af1f 	bmi.w	800873c <_vfiprintf_r+0x44>
 80088fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008900:	e71e      	b.n	8008740 <_vfiprintf_r+0x48>
 8008902:	ab03      	add	r3, sp, #12
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	462a      	mov	r2, r5
 8008908:	4b05      	ldr	r3, [pc, #20]	@ (8008920 <_vfiprintf_r+0x228>)
 800890a:	a904      	add	r1, sp, #16
 800890c:	4630      	mov	r0, r6
 800890e:	f000 f879 	bl	8008a04 <_printf_i>
 8008912:	e7e4      	b.n	80088de <_vfiprintf_r+0x1e6>
 8008914:	08009108 	.word	0x08009108
 8008918:	08009112 	.word	0x08009112
 800891c:	00000000 	.word	0x00000000
 8008920:	080086d3 	.word	0x080086d3
 8008924:	0800910e 	.word	0x0800910e

08008928 <_printf_common>:
 8008928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800892c:	4616      	mov	r6, r2
 800892e:	4698      	mov	r8, r3
 8008930:	688a      	ldr	r2, [r1, #8]
 8008932:	690b      	ldr	r3, [r1, #16]
 8008934:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008938:	4293      	cmp	r3, r2
 800893a:	bfb8      	it	lt
 800893c:	4613      	movlt	r3, r2
 800893e:	6033      	str	r3, [r6, #0]
 8008940:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008944:	4607      	mov	r7, r0
 8008946:	460c      	mov	r4, r1
 8008948:	b10a      	cbz	r2, 800894e <_printf_common+0x26>
 800894a:	3301      	adds	r3, #1
 800894c:	6033      	str	r3, [r6, #0]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	0699      	lsls	r1, r3, #26
 8008952:	bf42      	ittt	mi
 8008954:	6833      	ldrmi	r3, [r6, #0]
 8008956:	3302      	addmi	r3, #2
 8008958:	6033      	strmi	r3, [r6, #0]
 800895a:	6825      	ldr	r5, [r4, #0]
 800895c:	f015 0506 	ands.w	r5, r5, #6
 8008960:	d106      	bne.n	8008970 <_printf_common+0x48>
 8008962:	f104 0a19 	add.w	sl, r4, #25
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	6832      	ldr	r2, [r6, #0]
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	42ab      	cmp	r3, r5
 800896e:	dc26      	bgt.n	80089be <_printf_common+0x96>
 8008970:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	3b00      	subs	r3, #0
 8008978:	bf18      	it	ne
 800897a:	2301      	movne	r3, #1
 800897c:	0692      	lsls	r2, r2, #26
 800897e:	d42b      	bmi.n	80089d8 <_printf_common+0xb0>
 8008980:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008984:	4641      	mov	r1, r8
 8008986:	4638      	mov	r0, r7
 8008988:	47c8      	blx	r9
 800898a:	3001      	adds	r0, #1
 800898c:	d01e      	beq.n	80089cc <_printf_common+0xa4>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	6922      	ldr	r2, [r4, #16]
 8008992:	f003 0306 	and.w	r3, r3, #6
 8008996:	2b04      	cmp	r3, #4
 8008998:	bf02      	ittt	eq
 800899a:	68e5      	ldreq	r5, [r4, #12]
 800899c:	6833      	ldreq	r3, [r6, #0]
 800899e:	1aed      	subeq	r5, r5, r3
 80089a0:	68a3      	ldr	r3, [r4, #8]
 80089a2:	bf0c      	ite	eq
 80089a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a8:	2500      	movne	r5, #0
 80089aa:	4293      	cmp	r3, r2
 80089ac:	bfc4      	itt	gt
 80089ae:	1a9b      	subgt	r3, r3, r2
 80089b0:	18ed      	addgt	r5, r5, r3
 80089b2:	2600      	movs	r6, #0
 80089b4:	341a      	adds	r4, #26
 80089b6:	42b5      	cmp	r5, r6
 80089b8:	d11a      	bne.n	80089f0 <_printf_common+0xc8>
 80089ba:	2000      	movs	r0, #0
 80089bc:	e008      	b.n	80089d0 <_printf_common+0xa8>
 80089be:	2301      	movs	r3, #1
 80089c0:	4652      	mov	r2, sl
 80089c2:	4641      	mov	r1, r8
 80089c4:	4638      	mov	r0, r7
 80089c6:	47c8      	blx	r9
 80089c8:	3001      	adds	r0, #1
 80089ca:	d103      	bne.n	80089d4 <_printf_common+0xac>
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d4:	3501      	adds	r5, #1
 80089d6:	e7c6      	b.n	8008966 <_printf_common+0x3e>
 80089d8:	18e1      	adds	r1, r4, r3
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	2030      	movs	r0, #48	@ 0x30
 80089de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089e2:	4422      	add	r2, r4
 80089e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089ec:	3302      	adds	r3, #2
 80089ee:	e7c7      	b.n	8008980 <_printf_common+0x58>
 80089f0:	2301      	movs	r3, #1
 80089f2:	4622      	mov	r2, r4
 80089f4:	4641      	mov	r1, r8
 80089f6:	4638      	mov	r0, r7
 80089f8:	47c8      	blx	r9
 80089fa:	3001      	adds	r0, #1
 80089fc:	d0e6      	beq.n	80089cc <_printf_common+0xa4>
 80089fe:	3601      	adds	r6, #1
 8008a00:	e7d9      	b.n	80089b6 <_printf_common+0x8e>
	...

08008a04 <_printf_i>:
 8008a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	7e0f      	ldrb	r7, [r1, #24]
 8008a0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a0c:	2f78      	cmp	r7, #120	@ 0x78
 8008a0e:	4691      	mov	r9, r2
 8008a10:	4680      	mov	r8, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	469a      	mov	sl, r3
 8008a16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a1a:	d807      	bhi.n	8008a2c <_printf_i+0x28>
 8008a1c:	2f62      	cmp	r7, #98	@ 0x62
 8008a1e:	d80a      	bhi.n	8008a36 <_printf_i+0x32>
 8008a20:	2f00      	cmp	r7, #0
 8008a22:	f000 80d2 	beq.w	8008bca <_printf_i+0x1c6>
 8008a26:	2f58      	cmp	r7, #88	@ 0x58
 8008a28:	f000 80b9 	beq.w	8008b9e <_printf_i+0x19a>
 8008a2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a34:	e03a      	b.n	8008aac <_printf_i+0xa8>
 8008a36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a3a:	2b15      	cmp	r3, #21
 8008a3c:	d8f6      	bhi.n	8008a2c <_printf_i+0x28>
 8008a3e:	a101      	add	r1, pc, #4	@ (adr r1, 8008a44 <_printf_i+0x40>)
 8008a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a44:	08008a9d 	.word	0x08008a9d
 8008a48:	08008ab1 	.word	0x08008ab1
 8008a4c:	08008a2d 	.word	0x08008a2d
 8008a50:	08008a2d 	.word	0x08008a2d
 8008a54:	08008a2d 	.word	0x08008a2d
 8008a58:	08008a2d 	.word	0x08008a2d
 8008a5c:	08008ab1 	.word	0x08008ab1
 8008a60:	08008a2d 	.word	0x08008a2d
 8008a64:	08008a2d 	.word	0x08008a2d
 8008a68:	08008a2d 	.word	0x08008a2d
 8008a6c:	08008a2d 	.word	0x08008a2d
 8008a70:	08008bb1 	.word	0x08008bb1
 8008a74:	08008adb 	.word	0x08008adb
 8008a78:	08008b6b 	.word	0x08008b6b
 8008a7c:	08008a2d 	.word	0x08008a2d
 8008a80:	08008a2d 	.word	0x08008a2d
 8008a84:	08008bd3 	.word	0x08008bd3
 8008a88:	08008a2d 	.word	0x08008a2d
 8008a8c:	08008adb 	.word	0x08008adb
 8008a90:	08008a2d 	.word	0x08008a2d
 8008a94:	08008a2d 	.word	0x08008a2d
 8008a98:	08008b73 	.word	0x08008b73
 8008a9c:	6833      	ldr	r3, [r6, #0]
 8008a9e:	1d1a      	adds	r2, r3, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6032      	str	r2, [r6, #0]
 8008aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008aac:	2301      	movs	r3, #1
 8008aae:	e09d      	b.n	8008bec <_printf_i+0x1e8>
 8008ab0:	6833      	ldr	r3, [r6, #0]
 8008ab2:	6820      	ldr	r0, [r4, #0]
 8008ab4:	1d19      	adds	r1, r3, #4
 8008ab6:	6031      	str	r1, [r6, #0]
 8008ab8:	0606      	lsls	r6, r0, #24
 8008aba:	d501      	bpl.n	8008ac0 <_printf_i+0xbc>
 8008abc:	681d      	ldr	r5, [r3, #0]
 8008abe:	e003      	b.n	8008ac8 <_printf_i+0xc4>
 8008ac0:	0645      	lsls	r5, r0, #25
 8008ac2:	d5fb      	bpl.n	8008abc <_printf_i+0xb8>
 8008ac4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	da03      	bge.n	8008ad4 <_printf_i+0xd0>
 8008acc:	232d      	movs	r3, #45	@ 0x2d
 8008ace:	426d      	negs	r5, r5
 8008ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ad4:	4859      	ldr	r0, [pc, #356]	@ (8008c3c <_printf_i+0x238>)
 8008ad6:	230a      	movs	r3, #10
 8008ad8:	e011      	b.n	8008afe <_printf_i+0xfa>
 8008ada:	6821      	ldr	r1, [r4, #0]
 8008adc:	6833      	ldr	r3, [r6, #0]
 8008ade:	0608      	lsls	r0, r1, #24
 8008ae0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ae4:	d402      	bmi.n	8008aec <_printf_i+0xe8>
 8008ae6:	0649      	lsls	r1, r1, #25
 8008ae8:	bf48      	it	mi
 8008aea:	b2ad      	uxthmi	r5, r5
 8008aec:	2f6f      	cmp	r7, #111	@ 0x6f
 8008aee:	4853      	ldr	r0, [pc, #332]	@ (8008c3c <_printf_i+0x238>)
 8008af0:	6033      	str	r3, [r6, #0]
 8008af2:	bf14      	ite	ne
 8008af4:	230a      	movne	r3, #10
 8008af6:	2308      	moveq	r3, #8
 8008af8:	2100      	movs	r1, #0
 8008afa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008afe:	6866      	ldr	r6, [r4, #4]
 8008b00:	60a6      	str	r6, [r4, #8]
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	bfa2      	ittt	ge
 8008b06:	6821      	ldrge	r1, [r4, #0]
 8008b08:	f021 0104 	bicge.w	r1, r1, #4
 8008b0c:	6021      	strge	r1, [r4, #0]
 8008b0e:	b90d      	cbnz	r5, 8008b14 <_printf_i+0x110>
 8008b10:	2e00      	cmp	r6, #0
 8008b12:	d04b      	beq.n	8008bac <_printf_i+0x1a8>
 8008b14:	4616      	mov	r6, r2
 8008b16:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b1a:	fb03 5711 	mls	r7, r3, r1, r5
 8008b1e:	5dc7      	ldrb	r7, [r0, r7]
 8008b20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b24:	462f      	mov	r7, r5
 8008b26:	42bb      	cmp	r3, r7
 8008b28:	460d      	mov	r5, r1
 8008b2a:	d9f4      	bls.n	8008b16 <_printf_i+0x112>
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d10b      	bne.n	8008b48 <_printf_i+0x144>
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	07df      	lsls	r7, r3, #31
 8008b34:	d508      	bpl.n	8008b48 <_printf_i+0x144>
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	6861      	ldr	r1, [r4, #4]
 8008b3a:	4299      	cmp	r1, r3
 8008b3c:	bfde      	ittt	le
 8008b3e:	2330      	movle	r3, #48	@ 0x30
 8008b40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b48:	1b92      	subs	r2, r2, r6
 8008b4a:	6122      	str	r2, [r4, #16]
 8008b4c:	f8cd a000 	str.w	sl, [sp]
 8008b50:	464b      	mov	r3, r9
 8008b52:	aa03      	add	r2, sp, #12
 8008b54:	4621      	mov	r1, r4
 8008b56:	4640      	mov	r0, r8
 8008b58:	f7ff fee6 	bl	8008928 <_printf_common>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d14a      	bne.n	8008bf6 <_printf_i+0x1f2>
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	b004      	add	sp, #16
 8008b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	f043 0320 	orr.w	r3, r3, #32
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	4833      	ldr	r0, [pc, #204]	@ (8008c40 <_printf_i+0x23c>)
 8008b74:	2778      	movs	r7, #120	@ 0x78
 8008b76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	6831      	ldr	r1, [r6, #0]
 8008b7e:	061f      	lsls	r7, r3, #24
 8008b80:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b84:	d402      	bmi.n	8008b8c <_printf_i+0x188>
 8008b86:	065f      	lsls	r7, r3, #25
 8008b88:	bf48      	it	mi
 8008b8a:	b2ad      	uxthmi	r5, r5
 8008b8c:	6031      	str	r1, [r6, #0]
 8008b8e:	07d9      	lsls	r1, r3, #31
 8008b90:	bf44      	itt	mi
 8008b92:	f043 0320 	orrmi.w	r3, r3, #32
 8008b96:	6023      	strmi	r3, [r4, #0]
 8008b98:	b11d      	cbz	r5, 8008ba2 <_printf_i+0x19e>
 8008b9a:	2310      	movs	r3, #16
 8008b9c:	e7ac      	b.n	8008af8 <_printf_i+0xf4>
 8008b9e:	4827      	ldr	r0, [pc, #156]	@ (8008c3c <_printf_i+0x238>)
 8008ba0:	e7e9      	b.n	8008b76 <_printf_i+0x172>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	f023 0320 	bic.w	r3, r3, #32
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	e7f6      	b.n	8008b9a <_printf_i+0x196>
 8008bac:	4616      	mov	r6, r2
 8008bae:	e7bd      	b.n	8008b2c <_printf_i+0x128>
 8008bb0:	6833      	ldr	r3, [r6, #0]
 8008bb2:	6825      	ldr	r5, [r4, #0]
 8008bb4:	6961      	ldr	r1, [r4, #20]
 8008bb6:	1d18      	adds	r0, r3, #4
 8008bb8:	6030      	str	r0, [r6, #0]
 8008bba:	062e      	lsls	r6, r5, #24
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	d501      	bpl.n	8008bc4 <_printf_i+0x1c0>
 8008bc0:	6019      	str	r1, [r3, #0]
 8008bc2:	e002      	b.n	8008bca <_printf_i+0x1c6>
 8008bc4:	0668      	lsls	r0, r5, #25
 8008bc6:	d5fb      	bpl.n	8008bc0 <_printf_i+0x1bc>
 8008bc8:	8019      	strh	r1, [r3, #0]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	6123      	str	r3, [r4, #16]
 8008bce:	4616      	mov	r6, r2
 8008bd0:	e7bc      	b.n	8008b4c <_printf_i+0x148>
 8008bd2:	6833      	ldr	r3, [r6, #0]
 8008bd4:	1d1a      	adds	r2, r3, #4
 8008bd6:	6032      	str	r2, [r6, #0]
 8008bd8:	681e      	ldr	r6, [r3, #0]
 8008bda:	6862      	ldr	r2, [r4, #4]
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7f7 fb2e 	bl	8000240 <memchr>
 8008be4:	b108      	cbz	r0, 8008bea <_printf_i+0x1e6>
 8008be6:	1b80      	subs	r0, r0, r6
 8008be8:	6060      	str	r0, [r4, #4]
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	6123      	str	r3, [r4, #16]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bf4:	e7aa      	b.n	8008b4c <_printf_i+0x148>
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	4632      	mov	r2, r6
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	47d0      	blx	sl
 8008c00:	3001      	adds	r0, #1
 8008c02:	d0ad      	beq.n	8008b60 <_printf_i+0x15c>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	079b      	lsls	r3, r3, #30
 8008c08:	d413      	bmi.n	8008c32 <_printf_i+0x22e>
 8008c0a:	68e0      	ldr	r0, [r4, #12]
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	4298      	cmp	r0, r3
 8008c10:	bfb8      	it	lt
 8008c12:	4618      	movlt	r0, r3
 8008c14:	e7a6      	b.n	8008b64 <_printf_i+0x160>
 8008c16:	2301      	movs	r3, #1
 8008c18:	4632      	mov	r2, r6
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	4640      	mov	r0, r8
 8008c1e:	47d0      	blx	sl
 8008c20:	3001      	adds	r0, #1
 8008c22:	d09d      	beq.n	8008b60 <_printf_i+0x15c>
 8008c24:	3501      	adds	r5, #1
 8008c26:	68e3      	ldr	r3, [r4, #12]
 8008c28:	9903      	ldr	r1, [sp, #12]
 8008c2a:	1a5b      	subs	r3, r3, r1
 8008c2c:	42ab      	cmp	r3, r5
 8008c2e:	dcf2      	bgt.n	8008c16 <_printf_i+0x212>
 8008c30:	e7eb      	b.n	8008c0a <_printf_i+0x206>
 8008c32:	2500      	movs	r5, #0
 8008c34:	f104 0619 	add.w	r6, r4, #25
 8008c38:	e7f5      	b.n	8008c26 <_printf_i+0x222>
 8008c3a:	bf00      	nop
 8008c3c:	08009119 	.word	0x08009119
 8008c40:	0800912a 	.word	0x0800912a

08008c44 <__sflush_r>:
 8008c44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4c:	0716      	lsls	r6, r2, #28
 8008c4e:	4605      	mov	r5, r0
 8008c50:	460c      	mov	r4, r1
 8008c52:	d454      	bmi.n	8008cfe <__sflush_r+0xba>
 8008c54:	684b      	ldr	r3, [r1, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	dc02      	bgt.n	8008c60 <__sflush_r+0x1c>
 8008c5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd48      	ble.n	8008cf2 <__sflush_r+0xae>
 8008c60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c62:	2e00      	cmp	r6, #0
 8008c64:	d045      	beq.n	8008cf2 <__sflush_r+0xae>
 8008c66:	2300      	movs	r3, #0
 8008c68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c6c:	682f      	ldr	r7, [r5, #0]
 8008c6e:	6a21      	ldr	r1, [r4, #32]
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	d030      	beq.n	8008cd6 <__sflush_r+0x92>
 8008c74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	0759      	lsls	r1, r3, #29
 8008c7a:	d505      	bpl.n	8008c88 <__sflush_r+0x44>
 8008c7c:	6863      	ldr	r3, [r4, #4]
 8008c7e:	1ad2      	subs	r2, r2, r3
 8008c80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c82:	b10b      	cbz	r3, 8008c88 <__sflush_r+0x44>
 8008c84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c86:	1ad2      	subs	r2, r2, r3
 8008c88:	2300      	movs	r3, #0
 8008c8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c8c:	6a21      	ldr	r1, [r4, #32]
 8008c8e:	4628      	mov	r0, r5
 8008c90:	47b0      	blx	r6
 8008c92:	1c43      	adds	r3, r0, #1
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	d106      	bne.n	8008ca6 <__sflush_r+0x62>
 8008c98:	6829      	ldr	r1, [r5, #0]
 8008c9a:	291d      	cmp	r1, #29
 8008c9c:	d82b      	bhi.n	8008cf6 <__sflush_r+0xb2>
 8008c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d48 <__sflush_r+0x104>)
 8008ca0:	410a      	asrs	r2, r1
 8008ca2:	07d6      	lsls	r6, r2, #31
 8008ca4:	d427      	bmi.n	8008cf6 <__sflush_r+0xb2>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	6062      	str	r2, [r4, #4]
 8008caa:	04d9      	lsls	r1, r3, #19
 8008cac:	6922      	ldr	r2, [r4, #16]
 8008cae:	6022      	str	r2, [r4, #0]
 8008cb0:	d504      	bpl.n	8008cbc <__sflush_r+0x78>
 8008cb2:	1c42      	adds	r2, r0, #1
 8008cb4:	d101      	bne.n	8008cba <__sflush_r+0x76>
 8008cb6:	682b      	ldr	r3, [r5, #0]
 8008cb8:	b903      	cbnz	r3, 8008cbc <__sflush_r+0x78>
 8008cba:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cbe:	602f      	str	r7, [r5, #0]
 8008cc0:	b1b9      	cbz	r1, 8008cf2 <__sflush_r+0xae>
 8008cc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cc6:	4299      	cmp	r1, r3
 8008cc8:	d002      	beq.n	8008cd0 <__sflush_r+0x8c>
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f7ff fbf2 	bl	80084b4 <_free_r>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cd4:	e00d      	b.n	8008cf2 <__sflush_r+0xae>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b0      	blx	r6
 8008cdc:	4602      	mov	r2, r0
 8008cde:	1c50      	adds	r0, r2, #1
 8008ce0:	d1c9      	bne.n	8008c76 <__sflush_r+0x32>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0c6      	beq.n	8008c76 <__sflush_r+0x32>
 8008ce8:	2b1d      	cmp	r3, #29
 8008cea:	d001      	beq.n	8008cf0 <__sflush_r+0xac>
 8008cec:	2b16      	cmp	r3, #22
 8008cee:	d11e      	bne.n	8008d2e <__sflush_r+0xea>
 8008cf0:	602f      	str	r7, [r5, #0]
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	e022      	b.n	8008d3c <__sflush_r+0xf8>
 8008cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cfa:	b21b      	sxth	r3, r3
 8008cfc:	e01b      	b.n	8008d36 <__sflush_r+0xf2>
 8008cfe:	690f      	ldr	r7, [r1, #16]
 8008d00:	2f00      	cmp	r7, #0
 8008d02:	d0f6      	beq.n	8008cf2 <__sflush_r+0xae>
 8008d04:	0793      	lsls	r3, r2, #30
 8008d06:	680e      	ldr	r6, [r1, #0]
 8008d08:	bf08      	it	eq
 8008d0a:	694b      	ldreq	r3, [r1, #20]
 8008d0c:	600f      	str	r7, [r1, #0]
 8008d0e:	bf18      	it	ne
 8008d10:	2300      	movne	r3, #0
 8008d12:	eba6 0807 	sub.w	r8, r6, r7
 8008d16:	608b      	str	r3, [r1, #8]
 8008d18:	f1b8 0f00 	cmp.w	r8, #0
 8008d1c:	dde9      	ble.n	8008cf2 <__sflush_r+0xae>
 8008d1e:	6a21      	ldr	r1, [r4, #32]
 8008d20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d22:	4643      	mov	r3, r8
 8008d24:	463a      	mov	r2, r7
 8008d26:	4628      	mov	r0, r5
 8008d28:	47b0      	blx	r6
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	dc08      	bgt.n	8008d40 <__sflush_r+0xfc>
 8008d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d40:	4407      	add	r7, r0
 8008d42:	eba8 0800 	sub.w	r8, r8, r0
 8008d46:	e7e7      	b.n	8008d18 <__sflush_r+0xd4>
 8008d48:	dfbffffe 	.word	0xdfbffffe

08008d4c <_fflush_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	690b      	ldr	r3, [r1, #16]
 8008d50:	4605      	mov	r5, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	b913      	cbnz	r3, 8008d5c <_fflush_r+0x10>
 8008d56:	2500      	movs	r5, #0
 8008d58:	4628      	mov	r0, r5
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	b118      	cbz	r0, 8008d66 <_fflush_r+0x1a>
 8008d5e:	6a03      	ldr	r3, [r0, #32]
 8008d60:	b90b      	cbnz	r3, 8008d66 <_fflush_r+0x1a>
 8008d62:	f7ff f9ad 	bl	80080c0 <__sinit>
 8008d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f3      	beq.n	8008d56 <_fflush_r+0xa>
 8008d6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d70:	07d0      	lsls	r0, r2, #31
 8008d72:	d404      	bmi.n	8008d7e <_fflush_r+0x32>
 8008d74:	0599      	lsls	r1, r3, #22
 8008d76:	d402      	bmi.n	8008d7e <_fflush_r+0x32>
 8008d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d7a:	f7ff fb98 	bl	80084ae <__retarget_lock_acquire_recursive>
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4621      	mov	r1, r4
 8008d82:	f7ff ff5f 	bl	8008c44 <__sflush_r>
 8008d86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d88:	07da      	lsls	r2, r3, #31
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	d4e4      	bmi.n	8008d58 <_fflush_r+0xc>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	059b      	lsls	r3, r3, #22
 8008d92:	d4e1      	bmi.n	8008d58 <_fflush_r+0xc>
 8008d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d96:	f7ff fb8b 	bl	80084b0 <__retarget_lock_release_recursive>
 8008d9a:	e7dd      	b.n	8008d58 <_fflush_r+0xc>

08008d9c <__swhatbuf_r>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	460c      	mov	r4, r1
 8008da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da4:	2900      	cmp	r1, #0
 8008da6:	b096      	sub	sp, #88	@ 0x58
 8008da8:	4615      	mov	r5, r2
 8008daa:	461e      	mov	r6, r3
 8008dac:	da0d      	bge.n	8008dca <__swhatbuf_r+0x2e>
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008db4:	f04f 0100 	mov.w	r1, #0
 8008db8:	bf14      	ite	ne
 8008dba:	2340      	movne	r3, #64	@ 0x40
 8008dbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	6031      	str	r1, [r6, #0]
 8008dc4:	602b      	str	r3, [r5, #0]
 8008dc6:	b016      	add	sp, #88	@ 0x58
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	466a      	mov	r2, sp
 8008dcc:	f000 f848 	bl	8008e60 <_fstat_r>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	dbec      	blt.n	8008dae <__swhatbuf_r+0x12>
 8008dd4:	9901      	ldr	r1, [sp, #4]
 8008dd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008dda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dde:	4259      	negs	r1, r3
 8008de0:	4159      	adcs	r1, r3
 8008de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008de6:	e7eb      	b.n	8008dc0 <__swhatbuf_r+0x24>

08008de8 <__smakebuf_r>:
 8008de8:	898b      	ldrh	r3, [r1, #12]
 8008dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dec:	079d      	lsls	r5, r3, #30
 8008dee:	4606      	mov	r6, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	d507      	bpl.n	8008e04 <__smakebuf_r+0x1c>
 8008df4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	6163      	str	r3, [r4, #20]
 8008e00:	b003      	add	sp, #12
 8008e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e04:	ab01      	add	r3, sp, #4
 8008e06:	466a      	mov	r2, sp
 8008e08:	f7ff ffc8 	bl	8008d9c <__swhatbuf_r>
 8008e0c:	9f00      	ldr	r7, [sp, #0]
 8008e0e:	4605      	mov	r5, r0
 8008e10:	4639      	mov	r1, r7
 8008e12:	4630      	mov	r0, r6
 8008e14:	f7ff fbba 	bl	800858c <_malloc_r>
 8008e18:	b948      	cbnz	r0, 8008e2e <__smakebuf_r+0x46>
 8008e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e1e:	059a      	lsls	r2, r3, #22
 8008e20:	d4ee      	bmi.n	8008e00 <__smakebuf_r+0x18>
 8008e22:	f023 0303 	bic.w	r3, r3, #3
 8008e26:	f043 0302 	orr.w	r3, r3, #2
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	e7e2      	b.n	8008df4 <__smakebuf_r+0xc>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	6020      	str	r0, [r4, #0]
 8008e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e36:	81a3      	strh	r3, [r4, #12]
 8008e38:	9b01      	ldr	r3, [sp, #4]
 8008e3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e3e:	b15b      	cbz	r3, 8008e58 <__smakebuf_r+0x70>
 8008e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e44:	4630      	mov	r0, r6
 8008e46:	f000 f81d 	bl	8008e84 <_isatty_r>
 8008e4a:	b128      	cbz	r0, 8008e58 <__smakebuf_r+0x70>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	431d      	orrs	r5, r3
 8008e5c:	81a5      	strh	r5, [r4, #12]
 8008e5e:	e7cf      	b.n	8008e00 <__smakebuf_r+0x18>

08008e60 <_fstat_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	@ (8008e80 <_fstat_r+0x20>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	f7f8 f81c 	bl	8000eaa <_fstat>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d102      	bne.n	8008e7c <_fstat_r+0x1c>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	b103      	cbz	r3, 8008e7c <_fstat_r+0x1c>
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	bf00      	nop
 8008e80:	200003d0 	.word	0x200003d0

08008e84 <_isatty_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	@ (8008ea0 <_isatty_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f8 f81b 	bl	8000eca <_isatty>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_isatty_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_isatty_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	200003d0 	.word	0x200003d0

08008ea4 <_sbrk_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d06      	ldr	r5, [pc, #24]	@ (8008ec0 <_sbrk_r+0x1c>)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	602b      	str	r3, [r5, #0]
 8008eb0:	f7f8 f824 	bl	8000efc <_sbrk>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_sbrk_r+0x1a>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_sbrk_r+0x1a>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	200003d0 	.word	0x200003d0

08008ec4 <_init>:
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	bf00      	nop
 8008ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eca:	bc08      	pop	{r3}
 8008ecc:	469e      	mov	lr, r3
 8008ece:	4770      	bx	lr

08008ed0 <_fini>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	bf00      	nop
 8008ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed6:	bc08      	pop	{r3}
 8008ed8:	469e      	mov	lr, r3
 8008eda:	4770      	bx	lr
