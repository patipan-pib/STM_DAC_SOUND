
sound_dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009088  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  08009288  08009288  0000a288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cb0  08009cb0  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  08009cb0  08009cb0  0000acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cb8  08009cb8  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb8  08009cb8  0000acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cbc  08009cbc  0000acbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009cc0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fc8  20000070  08009d30  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004038  08009d30  0000c038  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4e7  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b0  00000000  00000000  00025585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00028e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115c  00000000  00000000  0002a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b5b  00000000  00000000  0002b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f47b  00000000  00000000  0003112f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106be4  00000000  00000000  000505aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015718e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062d4  00000000  00000000  001571d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0015d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08009270 	.word	0x08009270

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08009270 	.word	0x08009270

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005f0:	d124      	bne.n	800063c <HAL_GPIO_EXTI_Callback+0x5c>
		playFlag = 1;
 80005f2:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <HAL_GPIO_EXTI_Callback+0x64>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
//			WAV_Resume(&currentAudio);
//		if(playFlag == 3)
//			WAV_Stop(&currentAudio);
//		if(playFlag == 4)
//			playFlag = 0;
		for (int i = 0; i < 50000; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e002      	b.n	8000604 <HAL_GPIO_EXTI_Callback+0x24>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3301      	adds	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800060a:	4293      	cmp	r3, r2
 800060c:	ddf7      	ble.n	80005fe <HAL_GPIO_EXTI_Callback+0x1e>
			;
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 800060e:	bf00      	nop
 8000610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000614:	480c      	ldr	r0, [pc, #48]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x68>)
 8000616:	f002 fc17 	bl	8002e48 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f7      	beq.n	8000610 <HAL_GPIO_EXTI_Callback+0x30>
			;
		for (int i = 0; i < 50000; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	e002      	b.n	800062c <HAL_GPIO_EXTI_Callback+0x4c>
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	3301      	adds	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000632:	4293      	cmp	r3, r2
 8000634:	ddf7      	ble.n	8000626 <HAL_GPIO_EXTI_Callback+0x46>
			;
		EXTI->PR = GPIO_Pin;
 8000636:	4a05      	ldr	r2, [pc, #20]	@ (800064c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	6153      	str	r3, [r2, #20]
	}
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200002fe 	.word	0x200002fe
 8000648:	40020800 	.word	0x40020800
 800064c:	40013c00 	.word	0x40013c00

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000654:	f000 fa6e 	bl	8000b34 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 ff3f 	bl	80014da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f832 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 f9ee 	bl	8000a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000664:	f000 f9ba 	bl	80009dc <MX_DMA_Init>
  MX_DAC_Init();
 8000668:	f000 f8ea 	bl	8000840 <MX_DAC_Init>
  MX_ADC1_Init();
 800066c:	f000 f896 	bl	800079c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000670:	f000 f910 	bl	8000894 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000674:	f000 f94c 	bl	8000910 <MX_TIM6_Init>
  MX_FATFS_Init();
 8000678:	f004 fe7e 	bl	8005378 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 800067c:	f000 f97e 	bl	800097c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  SD_Mount("/");
 8000680:	480b      	ldr	r0, [pc, #44]	@ (80006b0 <main+0x60>)
 8000682:	f000 fa9f 	bl	8000bc4 <SD_Mount>
  SD_GetFileSize(name);
 8000686:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <main+0x64>)
 8000688:	f000 fac2 	bl	8000c10 <SD_GetFileSize>
  WAV_Init(&currentAudio);
 800068c:	480a      	ldr	r0, [pc, #40]	@ (80006b8 <main+0x68>)
 800068e:	f000 fdf7 	bl	8001280 <WAV_Init>
  WAV_GetState(&currentAudio);
 8000692:	4809      	ldr	r0, [pc, #36]	@ (80006b8 <main+0x68>)
 8000694:	f000 fe1e 	bl	80012d4 <WAV_GetState>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (playFlag == 1) {
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <main+0x6c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d1fb      	bne.n	8000698 <main+0x48>
		WAV_Play("A.wav", &currentAudio);
 80006a0:	4905      	ldr	r1, [pc, #20]	@ (80006b8 <main+0x68>)
 80006a2:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <main+0x70>)
 80006a4:	f000 fe24 	bl	80012f0 <WAV_Play>
		playFlag = 0;
 80006a8:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <main+0x6c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	  if (playFlag == 1) {
 80006ae:	e7f3      	b.n	8000698 <main+0x48>
 80006b0:	08009288 	.word	0x08009288
 80006b4:	200002e0 	.word	0x200002e0
 80006b8:	20000300 	.word	0x20000300
 80006bc:	200002fe 	.word	0x200002fe
 80006c0:	0800928c 	.word	0x0800928c

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2234      	movs	r2, #52	@ 0x34
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 f9e8 	bl	8008aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e8:	f002 fbf8 	bl	8002edc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a28      	ldr	r2, [pc, #160]	@ (8000794 <SystemClock_Config+0xd0>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <SystemClock_Config+0xd4>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000738:	2390      	movs	r3, #144	@ 0x90
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fbd5 	bl	8002efc <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000758:	f000 fa18 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fe6c 	bl	8003458 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000786:	f000 fa01 	bl	8000b8c <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007b0:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <MX_ADC1_Init+0x9c>)
 80007b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007dc:	4a17      	ldr	r2, [pc, #92]	@ (800083c <MX_ADC1_Init+0xa0>)
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007fc:	f000 feca 	bl	8001594 <HAL_ADC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 f9c1 	bl	8000b8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800080a:	230a      	movs	r3, #10
 800080c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080e:	2301      	movs	r3, #1
 8000810:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	@ (8000834 <MX_ADC1_Init+0x98>)
 800081c:	f000 fefe 	bl	800161c <HAL_ADC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000826:	f000 f9b1 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000008c 	.word	0x2000008c
 8000838:	40012000 	.word	0x40012000
 800083c:	0f000001 	.word	0x0f000001

08000840 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DAC_Init 0 */
//	 __HAL_RCC_DAC1_CLK_ENABLE();

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_DAC_Init+0x4c>)
 8000850:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <MX_DAC_Init+0x50>)
 8000852:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000854:	480d      	ldr	r0, [pc, #52]	@ (800088c <MX_DAC_Init+0x4c>)
 8000856:	f001 fabb 	bl	8001dd0 <HAL_DAC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000860:	f000 f994 	bl	8000b8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000864:	2304      	movs	r3, #4
 8000866:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	@ (800088c <MX_DAC_Init+0x4c>)
 8000874:	f001 fc59 	bl	800212a <HAL_DAC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800087e:	f000 f985 	bl	8000b8c <Error_Handler>
  /* USER CODE BEGIN DAC_Init 2 */
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  /* USER CODE END DAC_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000134 	.word	0x20000134
 8000890:	40007400 	.word	0x40007400

08000894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_SPI1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	@ (800090c <MX_SPI1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008ae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008ca:	2210      	movs	r2, #16
 80008cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008e2:	2207      	movs	r2, #7
 80008e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008ee:	2208      	movs	r2, #8
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_SPI1_Init+0x74>)
 80008f4:	f003 fbbe 	bl	8004074 <HAL_SPI_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 f945 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001a8 	.word	0x200001a8
 800090c:	40013000 	.word	0x40013000

08000910 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_TIM6_Init+0x64>)
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <MX_TIM6_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36-1;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_TIM6_Init+0x64>)
 8000928:	2223      	movs	r2, #35	@ 0x23
 800092a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_TIM6_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 125-1;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <MX_TIM6_Init+0x64>)
 8000934:	227c      	movs	r2, #124	@ 0x7c
 8000936:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_TIM6_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_TIM6_Init+0x64>)
 8000940:	f003 fc43 	bl	80041ca <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800094a:	f000 f91f 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800094e:	2320      	movs	r3, #32
 8000950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	@ (8000974 <MX_TIM6_Init+0x64>)
 800095c:	f003 ff08 	bl	8004770 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000966:	f000 f911 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000020c 	.word	0x2000020c
 8000978:	40001000 	.word	0x40001000

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 8000982:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <MX_USART3_UART_Init+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_USART3_UART_Init+0x58>)
 80009c0:	f003 ff82 	bl	80048c8 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f8df 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000258 	.word	0x20000258
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009e2:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_DMA_Init+0x60>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <MX_DMA_Init+0x60>)
 80009e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <MX_DMA_Init+0x60>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <MX_DMA_Init+0x60>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <MX_DMA_Init+0x60>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <MX_DMA_Init+0x60>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2010      	movs	r0, #16
 8000a18:	f001 f92b 	bl	8001c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a1c:	2010      	movs	r0, #16
 8000a1e:	f001 f944 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2038      	movs	r0, #56	@ 0x38
 8000a28:	f001 f923 	bl	8001c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a2c:	2038      	movs	r0, #56	@ 0x38
 8000a2e:	f001 f93c 	bl	8001caa <HAL_NVIC_EnableIRQ>

}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b34      	ldr	r3, [pc, #208]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a33      	ldr	r2, [pc, #204]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b31      	ldr	r3, [pc, #196]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a2d      	ldr	r2, [pc, #180]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b28      	ldr	r3, [pc, #160]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a27      	ldr	r2, [pc, #156]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_GPIO_Init+0xe8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4816      	ldr	r0, [pc, #88]	@ (8000b2c <MX_GPIO_Init+0xec>)
 8000ad4:	f002 f9d0 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4810      	ldr	r0, [pc, #64]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000af0:	f001 fffe 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <MX_GPIO_Init+0xec>)
 8000b0c:	f001 fff0 	bl	8002af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2028      	movs	r0, #40	@ 0x28
 8000b16:	f001 f8ac 	bl	8001c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b1a:	2028      	movs	r0, #40	@ 0x28
 8000b1c:	f001 f8c5 	bl	8001caa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	@ 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020800 	.word	0x40020800

08000b34 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b46:	f001 f8cb 	bl	8001ce0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b56:	231f      	movs	r3, #31
 8000b58:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b5a:	2387      	movs	r3, #135	@ 0x87
 8000b5c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b62:	2300      	movs	r3, #0
 8000b64:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b66:	2301      	movs	r3, #1
 8000b68:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b76:	463b      	mov	r3, r7
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 f8e9 	bl	8001d50 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b7e:	2004      	movs	r0, #4
 8000b80:	f001 f8c6 	bl	8001d10 <HAL_MPU_Enable>

}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <print>:

/**
 * @brief  Print data using UART.
 * @param  string: data want to print
 */
void print(char *string) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_INFO
	uint16_t len = strlen(string);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fb4d 	bl	8000240 <strlen>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&DEBUG_INFO, (uint8_t *) string, len, HAL_MAX_DELAY);
 8000baa:	89fa      	ldrh	r2, [r7, #14]
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <print+0x28>)
 8000bb4:	f003 fed6 	bl	8004964 <HAL_UART_Transmit>
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000258 	.word	0x20000258

08000bc4 <SD_Mount>:
/**
 * @brief  Mount SD Card.
 * @param  path: directory
 */
FRESULT SD_Mount(const TCHAR* path)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	static FATFS fatfs; //file system
	static FRESULT res;

	res = f_mount(&fatfs, path, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	480b      	ldr	r0, [pc, #44]	@ (8000c00 <SD_Mount+0x3c>)
 8000bd2:	f006 fef7 	bl	80079c4 <f_mount>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <SD_Mount+0x40>)
 8000bdc:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <SD_Mount+0x40>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <SD_Mount+0x2a>
		print("Mount SD Card is successful!\r\n\r\n");
 8000be6:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <SD_Mount+0x44>)
 8000be8:	f7ff ffd6 	bl	8000b98 <print>
 8000bec:	e002      	b.n	8000bf4 <SD_Mount+0x30>
	else
		print("Mount SD Card is error!\r\n\r\n");
 8000bee:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <SD_Mount+0x48>)
 8000bf0:	f7ff ffd2 	bl	8000b98 <print>
	return res;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <SD_Mount+0x40>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000ae4 	.word	0x20000ae4
 8000c04:	20001b1c 	.word	0x20001b1c
 8000c08:	08009304 	.word	0x08009304
 8000c0c:	08009328 	.word	0x08009328

08000c10 <SD_GetFileSize>:
 * @brief  Rename directory or file.
 * @param  name: name of file
 * @retval size: size of file
 */
uint32_t SD_GetFileSize(char *name)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	static FIL 	fil; //file
	static FRESULT res; //
	static FILINFO fno; //file information variable
	uint32_t size = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]

	res = f_stat(name, &fno);
 8000c1c:	493c      	ldr	r1, [pc, #240]	@ (8000d10 <SD_GetFileSize+0x100>)
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f007 fd09 	bl	8008636 <f_stat>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b3a      	ldr	r3, [pc, #232]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000c2a:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8000c2c:	4b39      	ldr	r3, [pc, #228]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d012      	beq.n	8000c5a <SD_GetFileSize+0x4a>
	{	//File not existed
		char *buf = malloc(80*sizeof(char));
 8000c34:	2050      	movs	r0, #80	@ 0x50
 8000c36:	f007 fe59 	bl	80088ec <malloc>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60fb      	str	r3, [r7, #12]
		sprintf(buf, "Error! File -%s- is not existing to read!\r\n\r\n", name);
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4935      	ldr	r1, [pc, #212]	@ (8000d18 <SD_GetFileSize+0x108>)
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f007 ff10 	bl	8008a68 <siprintf>
		print(buf);
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f7ff ffa5 	bl	8000b98 <print>
		free(buf);
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f007 fe54 	bl	80088fc <free>
		return res;
 8000c54:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	e055      	b.n	8000d06 <SD_GetFileSize+0xf6>
	}
	else
	{	//File is existing
		//Open file to read data
		res = f_open(&fil, name, FA_READ);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	6879      	ldr	r1, [r7, #4]
 8000c5e:	482f      	ldr	r0, [pc, #188]	@ (8000d1c <SD_GetFileSize+0x10c>)
 8000c60:	f006 fef6 	bl	8007a50 <f_open>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000c6a:	701a      	strb	r2, [r3, #0]
		if(res != FR_OK)
 8000c6c:	4b29      	ldr	r3, [pc, #164]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d015      	beq.n	8000ca0 <SD_GetFileSize+0x90>
		{	//Error
			char *buf = malloc(80*sizeof(char));
 8000c74:	2050      	movs	r0, #80	@ 0x50
 8000c76:	f007 fe39 	bl	80088ec <malloc>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	613b      	str	r3, [r7, #16]
			sprintf(buf, "Error %d while opening file -%s-!\r\n\r\n", res, name);
 8000c7e:	4b25      	ldr	r3, [pc, #148]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4926      	ldr	r1, [pc, #152]	@ (8000d20 <SD_GetFileSize+0x110>)
 8000c88:	6938      	ldr	r0, [r7, #16]
 8000c8a:	f007 feed 	bl	8008a68 <siprintf>
			print(buf);
 8000c8e:	6938      	ldr	r0, [r7, #16]
 8000c90:	f7ff ff82 	bl	8000b98 <print>
			free(buf);
 8000c94:	6938      	ldr	r0, [r7, #16]
 8000c96:	f007 fe31 	bl	80088fc <free>
			return res;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	e032      	b.n	8000d06 <SD_GetFileSize+0xf6>
		}
		else
		{	//Successful
			size = fil.fptr;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <SD_GetFileSize+0x10c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	61fb      	str	r3, [r7, #28]
			char *buf = malloc(80*sizeof(char));
 8000ca6:	2050      	movs	r0, #80	@ 0x50
 8000ca8:	f007 fe20 	bl	80088ec <malloc>
 8000cac:	4603      	mov	r3, r0
 8000cae:	61bb      	str	r3, [r7, #24]
			sprintf(buf, "Size of file -%s- is %lu bytes.\r\n\r\n", name, size);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	491b      	ldr	r1, [pc, #108]	@ (8000d24 <SD_GetFileSize+0x114>)
 8000cb6:	69b8      	ldr	r0, [r7, #24]
 8000cb8:	f007 fed6 	bl	8008a68 <siprintf>
			print(buf);
 8000cbc:	69b8      	ldr	r0, [r7, #24]
 8000cbe:	f7ff ff6b 	bl	8000b98 <print>
			free(buf);
 8000cc2:	69b8      	ldr	r0, [r7, #24]
 8000cc4:	f007 fe1a 	bl	80088fc <free>
			//Close file
			res = f_close(&fil);
 8000cc8:	4814      	ldr	r0, [pc, #80]	@ (8000d1c <SD_GetFileSize+0x10c>)
 8000cca:	f007 fa66 	bl	800819a <f_close>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000cd4:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d012      	beq.n	8000d04 <SD_GetFileSize+0xf4>
			{	//Error
				char *buf = malloc(80*sizeof(char));
 8000cde:	2050      	movs	r0, #80	@ 0x50
 8000ce0:	f007 fe04 	bl	80088ec <malloc>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	617b      	str	r3, [r7, #20]
				sprintf(buf, "Error %d while closing file -%s-!\r\n\r\n", res, name);
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <SD_GetFileSize+0x104>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	490d      	ldr	r1, [pc, #52]	@ (8000d28 <SD_GetFileSize+0x118>)
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f007 feb8 	bl	8008a68 <siprintf>
				print(buf);
 8000cf8:	6978      	ldr	r0, [r7, #20]
 8000cfa:	f7ff ff4d 	bl	8000b98 <print>
				free(buf);
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f007 fdfc 	bl	80088fc <free>
			}
		}
	}
	return size;
 8000d04:	69fb      	ldr	r3, [r7, #28]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20001b20 	.word	0x20001b20
 8000d14:	20001c38 	.word	0x20001c38
 8000d18:	08009524 	.word	0x08009524
 8000d1c:	20001c3c 	.word	0x20001c3c
 8000d20:	080094a4 	.word	0x080094a4
 8000d24:	0800972c 	.word	0x0800972c
 8000d28:	0800944c 	.word	0x0800944c

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a08      	ldr	r2, [pc, #32]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2d      	ldr	r2, [pc, #180]	@ (8000e48 <HAL_ADC_MspInit+0xd4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d153      	bne.n	8000e3e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d96:	4b2d      	ldr	r3, [pc, #180]	@ (8000e4c <HAL_ADC_MspInit+0xd8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8000e4c <HAL_ADC_MspInit+0xd8>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <HAL_ADC_MspInit+0xd8>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <HAL_ADC_MspInit+0xd8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a26      	ldr	r2, [pc, #152]	@ (8000e4c <HAL_ADC_MspInit+0xd8>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <HAL_ADC_MspInit+0xd8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	481d      	ldr	r0, [pc, #116]	@ (8000e50 <HAL_ADC_MspInit+0xdc>)
 8000dda:	f001 fe89 	bl	8002af0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000de0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <HAL_ADC_MspInit+0xe4>)
 8000de2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000e00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e22:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000e24:	f001 fa7c 	bl	8002320 <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000e2e:	f7ff fead 	bl	8000b8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a07      	ldr	r2, [pc, #28]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000e36:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800
 8000e54:	200000d4 	.word	0x200000d4
 8000e58:	40026410 	.word	0x40026410

08000e5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a30      	ldr	r2, [pc, #192]	@ (8000f3c <HAL_DAC_MspInit+0xe0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d15a      	bne.n	8000f34 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e7e:	4b30      	ldr	r3, [pc, #192]	@ (8000f40 <HAL_DAC_MspInit+0xe4>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <HAL_DAC_MspInit+0xe4>)
 8000e84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <HAL_DAC_MspInit+0xe4>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <HAL_DAC_MspInit+0xe4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a29      	ldr	r2, [pc, #164]	@ (8000f40 <HAL_DAC_MspInit+0xe4>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <HAL_DAC_MspInit+0xe4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4820      	ldr	r0, [pc, #128]	@ (8000f44 <HAL_DAC_MspInit+0xe8>)
 8000ec2:	f001 fe15 	bl	8002af0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000ec8:	4a20      	ldr	r2, [pc, #128]	@ (8000f4c <HAL_DAC_MspInit+0xf0>)
 8000eca:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000ece:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000ed2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000ed6:	2240      	movs	r2, #64	@ 0x40
 8000ed8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000ee2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000ef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000efa:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000f08:	480f      	ldr	r0, [pc, #60]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000f0a:	f001 fa09 	bl	8002320 <HAL_DMA_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_DAC_MspInit+0xbc>
    {
      Error_Handler();
 8000f14:	f7ff fe3a 	bl	8000b8c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_DAC_MspInit+0xec>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2036      	movs	r0, #54	@ 0x36
 8000f2a:	f000 fea2 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f2e:	2036      	movs	r0, #54	@ 0x36
 8000f30:	f000 febb 	bl	8001caa <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	@ 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40007400 	.word	0x40007400
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	20000148 	.word	0x20000148
 8000f4c:	40026088 	.word	0x40026088

08000f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a17      	ldr	r2, [pc, #92]	@ (8000fcc <HAL_SPI_MspInit+0x7c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d127      	bne.n	8000fc2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f72:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	4a16      	ldr	r2, [pc, #88]	@ (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fa2:	23e0      	movs	r3, #224	@ 0xe0
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000fbe:	f001 fd97 	bl	8002af0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	@ 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40013000 	.word	0x40013000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <HAL_TIM_Base_MspInit+0x44>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d113      	bne.n	8001012 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <HAL_TIM_Base_MspInit+0x48>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a0c      	ldr	r2, [pc, #48]	@ (8001020 <HAL_TIM_Base_MspInit+0x48>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_TIM_Base_MspInit+0x48>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2036      	movs	r0, #54	@ 0x36
 8001008:	f000 fe33 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800100c:	2036      	movs	r0, #54	@ 0x36
 800100e:	f000 fe4c 	bl	8001caa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40001000 	.word	0x40001000
 8001020:	40023800 	.word	0x40023800

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ae      	sub	sp, #184	@ 0xb8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2290      	movs	r2, #144	@ 0x90
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f007 fd2f 	bl	8008aa8 <memset>
  if(huart->Instance==USART3)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a22      	ldr	r2, [pc, #136]	@ (80010d8 <HAL_UART_MspInit+0xb4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d13c      	bne.n	80010ce <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001058:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800105a:	2300      	movs	r3, #0
 800105c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fbde 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800106e:	f7ff fd8d 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4a19      	ldr	r2, [pc, #100]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a13      	ldr	r2, [pc, #76]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010bc:	2307      	movs	r3, #7
 80010be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HAL_UART_MspInit+0xbc>)
 80010ca:	f001 fd11 	bl	8002af0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010ce:	bf00      	nop
 80010d0:	37b8      	adds	r7, #184	@ 0xb8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004800 	.word	0x40004800
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <NMI_Handler+0x4>

080010ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <MemManage_Handler+0x4>

080010fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <UsageFault_Handler+0x4>

0800110c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113a:	f000 fa0b 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <DMA1_Stream5_IRQHandler+0x10>)
 800114a:	f001 fa67 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000148 	.word	0x20000148

08001158 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800115c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001160:	f001 fea4 	bl	8002eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <TIM6_DAC_IRQHandler+0x14>)
 800116e:	f000 ff5e 	bl	800202e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001172:	4803      	ldr	r0, [pc, #12]	@ (8001180 <TIM6_DAC_IRQHandler+0x18>)
 8001174:	f003 f917 	bl	80043a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000134 	.word	0x20000134
 8001180:	2000020c 	.word	0x2000020c

08001184 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <DMA2_Stream0_IRQHandler+0x10>)
 800118a:	f001 fa47 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000d4 	.word	0x200000d4

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f007 fc98 	bl	8008afc <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20080000 	.word	0x20080000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20002c6c 	.word	0x20002c6c
 8001200:	20004038 	.word	0x20004038

08001204 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	@ (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__WAV_SetSampleFreq>:
 * 			+ 16000Hz
 * 			+ 48000Hz
 * @retval None
 */
static void __WAV_SetSampleFreq(uint32_t frequency)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	htim6.Instance = TIM6;
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <__WAV_SetSampleFreq+0x4c>)
 8001232:	4a11      	ldr	r2, [pc, #68]	@ (8001278 <__WAV_SetSampleFreq+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <__WAV_SetSampleFreq+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <__WAV_SetSampleFreq+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = (uint16_t) ((F_HCLK / frequency) - 1);
 8001242:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <__WAV_SetSampleFreq+0x54>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <__WAV_SetSampleFreq+0x4c>)
 8001254:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <__WAV_SetSampleFreq+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <__WAV_SetSampleFreq+0x4c>)
 800125e:	f002 ffb4 	bl	80041ca <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <__WAV_SetSampleFreq+0x44>
	{
		Error_Handler();
 8001268:	f7ff fc90 	bl	8000b8c <Error_Handler>
	}
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000020c 	.word	0x2000020c
 8001278:	40001000 	.word	0x40001000
 800127c:	044aa200 	.word	0x044aa200

08001280 <WAV_Init>:
 * @brief  Initialize the audio state
 * @param  wavInfo: Wave audio current info structure
 * @retval None
 */
void WAV_Init(WAV_InfoTypeDef* wavInfo)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	wavInfo->state = WAV_STATE_PLAY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 27e0 	strb.w	r2, [r3, #2016]	@ 0x7e0
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <__WAV_IsWavFile>:
 * @brief  Check the file is wav audio file?
 * @param  header: header of wav audio file
 * @retval '0' if the file is not wav format, '1' if it's correct
 */
static uint8_t __WAV_IsWavFile(WAV_FormatTypeDef *header)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	//compare chunkID == RIFF ?
	if(strncmp((char*) header->chunkID, "RIFF", 4) != 0)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2204      	movs	r2, #4
 80012a8:	4909      	ldr	r1, [pc, #36]	@ (80012d0 <__WAV_IsWavFile+0x34>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f007 fc04 	bl	8008ab8 <strncmp>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <__WAV_IsWavFile+0x1e>
		return 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e006      	b.n	80012c8 <__WAV_IsWavFile+0x2c>
	if(header->audioFormat != WAVE_FORMAT_PCM)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	8a9b      	ldrh	r3, [r3, #20]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d001      	beq.n	80012c6 <__WAV_IsWavFile+0x2a>
		return 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <__WAV_IsWavFile+0x2c>
	return 1;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	080097ac 	.word	0x080097ac

080012d4 <WAV_GetState>:
 * @brief  Get audio statement
 * @param  wavInfo: Wave audio current info structure
 * @retval WAV state
 */
WAV_StateTypeDef WAV_GetState(WAV_InfoTypeDef* wavInfo)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	return wavInfo->state;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 37e0 	ldrb.w	r3, [r3, #2016]	@ 0x7e0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <WAV_Play>:
 * @param  fileList: FILELIST structure
 * @param  wavInfo: Wave audio current info structure
 * @retval WAV state
 */
WAV_StateTypeDef WAV_Play(char* nameFile, WAV_InfoTypeDef* wavInfo)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b090      	sub	sp, #64	@ 0x40
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	static UINT br;
	static FIL fil;
	static uint32_t f_size = 0;
	static uint16_t bufSize = 0;
	WAV_FormatTypeDef header;
	wavInfo->file = nameFile;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	f8c3 27d0 	str.w	r2, [r3, #2000]	@ 0x7d0

	if(WAV_GetState(wavInfo) != WAV_STATE_PLAY)
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff ffe6 	bl	80012d4 <WAV_GetState>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	f040 8099 	bne.w	8001442 <WAV_Play+0x152>
		goto end;
	res = f_open(&fil, wavInfo->file, FA_READ);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 8001316:	2201      	movs	r2, #1
 8001318:	4619      	mov	r1, r3
 800131a:	4854      	ldr	r0, [pc, #336]	@ (800146c <WAV_Play+0x17c>)
 800131c:	f006 fb98 	bl	8007a50 <f_open>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b52      	ldr	r3, [pc, #328]	@ (8001470 <WAV_Play+0x180>)
 8001326:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8001328:	4b51      	ldr	r3, [pc, #324]	@ (8001470 <WAV_Play+0x180>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <WAV_Play+0x4a>
	{
		wavInfo->state = WAV_STATE_ERROR;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2207      	movs	r2, #7
 8001334:	f883 27e0 	strb.w	r2, [r3, #2016]	@ 0x7e0
 8001338:	e07a      	b.n	8001430 <WAV_Play+0x140>

	}
	else
	{
		res = f_read(&fil, &header, 44, &br);
 800133a:	f107 010c 	add.w	r1, r7, #12
 800133e:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <WAV_Play+0x184>)
 8001340:	222c      	movs	r2, #44	@ 0x2c
 8001342:	484a      	ldr	r0, [pc, #296]	@ (800146c <WAV_Play+0x17c>)
 8001344:	f006 fd4c 	bl	8007de0 <f_read>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b48      	ldr	r3, [pc, #288]	@ (8001470 <WAV_Play+0x180>)
 800134e:	701a      	strb	r2, [r3, #0]
		if(res != FR_OK)
 8001350:	4b47      	ldr	r3, [pc, #284]	@ (8001470 <WAV_Play+0x180>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <WAV_Play+0x72>
		{
			wavInfo->state = WAV_STATE_ERROR;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2207      	movs	r2, #7
 800135c:	f883 27e0 	strb.w	r2, [r3, #2016]	@ 0x7e0
 8001360:	e066      	b.n	8001430 <WAV_Play+0x140>
		}
		else
		{
			if(__WAV_IsWavFile(&header))
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff98 	bl	800129c <__WAV_IsWavFile>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d05d      	beq.n	800142e <WAV_Play+0x13e>
			{
				f_size = header.fileSize - 36;
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	3b24      	subs	r3, #36	@ 0x24
 8001376:	4a40      	ldr	r2, [pc, #256]	@ (8001478 <WAV_Play+0x188>)
 8001378:	6013      	str	r3, [r2, #0]
				__WAV_SetSampleFreq(header.sampleRate);
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff53 	bl	8001228 <__WAV_SetSampleFreq>
				HAL_TIM_Base_Start(&htim6);
 8001382:	483e      	ldr	r0, [pc, #248]	@ (800147c <WAV_Play+0x18c>)
 8001384:	f002 ff78 	bl	8004278 <HAL_TIM_Base_Start>
				memset(wavInfo->buff, 0, WAV_BUFFER_SIZE);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f007 fb89 	bl	8008aa8 <memset>

				while(f_size > 0)
 8001396:	e045      	b.n	8001424 <WAV_Play+0x134>
				{
					if(f_size < WAV_BUFFER_SIZE) bufSize = f_size;
 8001398:	4b37      	ldr	r3, [pc, #220]	@ (8001478 <WAV_Play+0x188>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013a0:	d205      	bcs.n	80013ae <WAV_Play+0xbe>
 80013a2:	4b35      	ldr	r3, [pc, #212]	@ (8001478 <WAV_Play+0x188>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b35      	ldr	r3, [pc, #212]	@ (8001480 <WAV_Play+0x190>)
 80013aa:	801a      	strh	r2, [r3, #0]
 80013ac:	e003      	b.n	80013b6 <WAV_Play+0xc6>
					else bufSize = WAV_BUFFER_SIZE;
 80013ae:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <WAV_Play+0x190>)
 80013b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013b4:	801a      	strh	r2, [r3, #0]

					f_lseek(&fil, wavInfo->filePtr);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	@ 0x7d8
 80013bc:	4619      	mov	r1, r3
 80013be:	482b      	ldr	r0, [pc, #172]	@ (800146c <WAV_Play+0x17c>)
 80013c0:	f006 ff15 	bl	80081ee <f_lseek>
					f_read(&fil, wavInfo->buff, bufSize, &br);
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001480 <WAV_Play+0x190>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b29      	ldr	r3, [pc, #164]	@ (8001474 <WAV_Play+0x184>)
 80013ce:	4827      	ldr	r0, [pc, #156]	@ (800146c <WAV_Play+0x17c>)
 80013d0:	f006 fd06 	bl	8007de0 <f_read>

					HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)wavInfo->buff, bufSize, DAC_ALIGN_8B_R);
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <WAV_Play+0x190>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	4619      	mov	r1, r3
 80013dc:	2308      	movs	r3, #8
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	460b      	mov	r3, r1
 80013e2:	2100      	movs	r1, #0
 80013e4:	4827      	ldr	r0, [pc, #156]	@ (8001484 <WAV_Play+0x194>)
 80013e6:	f000 fd15 	bl	8001e14 <HAL_DAC_Start_DMA>

					while(HAL_DAC_GetState(&hdac) != HAL_DAC_STATE_READY)
 80013ea:	e005      	b.n	80013f8 <WAV_Play+0x108>
					{
						if(WAV_GetState(wavInfo) != WAV_STATE_PLAY)
 80013ec:	6838      	ldr	r0, [r7, #0]
 80013ee:	f7ff ff71 	bl	80012d4 <WAV_GetState>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d126      	bne.n	8001446 <WAV_Play+0x156>
					while(HAL_DAC_GetState(&hdac) != HAL_DAC_STATE_READY)
 80013f8:	4822      	ldr	r0, [pc, #136]	@ (8001484 <WAV_Play+0x194>)
 80013fa:	f000 feef 	bl	80021dc <HAL_DAC_GetState>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d1f3      	bne.n	80013ec <WAV_Play+0xfc>
							goto end;
					}
					f_size -= bufSize;
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <WAV_Play+0x188>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <WAV_Play+0x190>)
 800140a:	8812      	ldrh	r2, [r2, #0]
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	4a1a      	ldr	r2, [pc, #104]	@ (8001478 <WAV_Play+0x188>)
 8001410:	6013      	str	r3, [r2, #0]
					wavInfo->filePtr += bufSize;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	@ 0x7d8
 8001418:	4a19      	ldr	r2, [pc, #100]	@ (8001480 <WAV_Play+0x190>)
 800141a:	8812      	ldrh	r2, [r2, #0]
 800141c:	441a      	add	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f8c3 27d8 	str.w	r2, [r3, #2008]	@ 0x7d8
				while(f_size > 0)
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <WAV_Play+0x188>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1b5      	bne.n	8001398 <WAV_Play+0xa8>
 800142c:	e000      	b.n	8001430 <WAV_Play+0x140>
				}
			}
			else __NOP();
 800142e:	bf00      	nop
		}
	}
	wavInfo->filePtr = 0;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	f8c3 27d8 	str.w	r2, [r3, #2008]	@ 0x7d8
	f_lseek(&fil, 0);
 8001438:	2100      	movs	r1, #0
 800143a:	480c      	ldr	r0, [pc, #48]	@ (800146c <WAV_Play+0x17c>)
 800143c:	f006 fed7 	bl	80081ee <f_lseek>
 8001440:	e002      	b.n	8001448 <WAV_Play+0x158>
		goto end;
 8001442:	bf00      	nop
 8001444:	e000      	b.n	8001448 <WAV_Play+0x158>
							goto end;
 8001446:	bf00      	nop

	end:
	f_close(&fil);
 8001448:	4808      	ldr	r0, [pc, #32]	@ (800146c <WAV_Play+0x17c>)
 800144a:	f006 fea6 	bl	800819a <f_close>
	HAL_TIM_Base_Stop(&htim6);
 800144e:	480b      	ldr	r0, [pc, #44]	@ (800147c <WAV_Play+0x18c>)
 8001450:	f002 ff82 	bl	8004358 <HAL_TIM_Base_Stop>
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001454:	2100      	movs	r1, #0
 8001456:	480b      	ldr	r0, [pc, #44]	@ (8001484 <WAV_Play+0x194>)
 8001458:	f000 fd9c 	bl	8001f94 <HAL_DAC_Stop_DMA>
	return wavInfo->state;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f893 37e0 	ldrb.w	r3, [r3, #2016]	@ 0x7e0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3738      	adds	r7, #56	@ 0x38
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20002c70 	.word	0x20002c70
 8001470:	20003ca0 	.word	0x20003ca0
 8001474:	20003ca4 	.word	0x20003ca4
 8001478:	20003ca8 	.word	0x20003ca8
 800147c:	2000020c 	.word	0x2000020c
 8001480:	20003cac 	.word	0x20003cac
 8001484:	20000134 	.word	0x20000134

08001488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800148c:	f7ff feba 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001492:	490d      	ldr	r1, [pc, #52]	@ (80014c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001494:	4a0d      	ldr	r2, [pc, #52]	@ (80014cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a8:	4c0a      	ldr	r4, [pc, #40]	@ (80014d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014b6:	f007 fb27 	bl	8008b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ba:	f7ff f8c9 	bl	8000650 <main>
  bx  lr    
 80014be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014cc:	08009cc0 	.word	0x08009cc0
  ldr r2, =_sbss
 80014d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014d4:	20004038 	.word	0x20004038

080014d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC_IRQHandler>

080014da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 fbbc 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e4:	200f      	movs	r0, #15
 80014e6:	f000 f805 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ea:	f7ff fc1f 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fbd7 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 fb9f 	bl	8001c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	20003cb0 	.word	0x20003cb0

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20003cb0 	.word	0x20003cb0

08001594 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e031      	b.n	800160e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fbde 	bl	8000d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d116      	bne.n	8001600 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_ADC_Init+0x84>)
 80015d8:	4013      	ands	r3, r2
 80015da:	f043 0202 	orr.w	r2, r3, #2
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f970 	bl	80018c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	f043 0201 	orr.w	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80015fe:	e001      	b.n	8001604 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	ffffeefd 	.word	0xffffeefd

0800161c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x1c>
 8001634:	2302      	movs	r3, #2
 8001636:	e136      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x28a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d93a      	bls.n	80016be <HAL_ADC_ConfigChannel+0xa2>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001650:	d035      	beq.n	80016be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68d9      	ldr	r1, [r3, #12]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	3b1e      	subs	r3, #30
 8001668:	2207      	movs	r2, #7
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	400a      	ands	r2, r1
 8001676:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a8d      	ldr	r2, [pc, #564]	@ (80018b4 <HAL_ADC_ConfigChannel+0x298>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10a      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68d9      	ldr	r1, [r3, #12]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	061a      	lsls	r2, r3, #24
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001696:	e035      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68d9      	ldr	r1, [r3, #12]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4403      	add	r3, r0
 80016b0:	3b1e      	subs	r3, #30
 80016b2:	409a      	lsls	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016bc:	e022      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6919      	ldr	r1, [r3, #16]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	2207      	movs	r2, #7
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43da      	mvns	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	400a      	ands	r2, r1
 80016e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6919      	ldr	r1, [r3, #16]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4403      	add	r3, r0
 80016fa:	409a      	lsls	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b06      	cmp	r3, #6
 800170a:	d824      	bhi.n	8001756 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	3b05      	subs	r3, #5
 800171e:	221f      	movs	r2, #31
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43da      	mvns	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	400a      	ands	r2, r1
 800172c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	3b05      	subs	r3, #5
 8001748:	fa00 f203 	lsl.w	r2, r0, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	635a      	str	r2, [r3, #52]	@ 0x34
 8001754:	e04c      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b0c      	cmp	r3, #12
 800175c:	d824      	bhi.n	80017a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3b23      	subs	r3, #35	@ 0x23
 8001770:	221f      	movs	r2, #31
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	400a      	ands	r2, r1
 800177e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b23      	subs	r3, #35	@ 0x23
 800179a:	fa00 f203 	lsl.w	r2, r0, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80017a6:	e023      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	3b41      	subs	r3, #65	@ 0x41
 80017ba:	221f      	movs	r2, #31
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43da      	mvns	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	400a      	ands	r2, r1
 80017c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3b41      	subs	r3, #65	@ 0x41
 80017e4:	fa00 f203 	lsl.w	r2, r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a30      	ldr	r2, [pc, #192]	@ (80018b8 <HAL_ADC_ConfigChannel+0x29c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10a      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1f4>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001802:	d105      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001804:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a2c      	ldr	r2, [pc, #176]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 800180a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800180e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a28      	ldr	r2, [pc, #160]	@ (80018b8 <HAL_ADC_ConfigChannel+0x29c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10f      	bne.n	800183a <HAL_ADC_ConfigChannel+0x21e>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b12      	cmp	r3, #18
 8001820:	d10b      	bne.n	800183a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001822:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a25      	ldr	r2, [pc, #148]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001828:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800182c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800182e:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001838:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1e      	ldr	r2, [pc, #120]	@ (80018b8 <HAL_ADC_ConfigChannel+0x29c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d12b      	bne.n	800189c <HAL_ADC_ConfigChannel+0x280>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1a      	ldr	r2, [pc, #104]	@ (80018b4 <HAL_ADC_ConfigChannel+0x298>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d003      	beq.n	8001856 <HAL_ADC_ConfigChannel+0x23a>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b11      	cmp	r3, #17
 8001854:	d122      	bne.n	800189c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 800185c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001860:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001862:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a15      	ldr	r2, [pc, #84]	@ (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001868:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800186c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <HAL_ADC_ConfigChannel+0x298>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d111      	bne.n	800189c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_ADC_ConfigChannel+0x2a4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a11      	ldr	r2, [pc, #68]	@ (80018c4 <HAL_ADC_ConfigChannel+0x2a8>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9a      	lsrs	r2, r3, #18
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800188e:	e002      	b.n	8001896 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3b01      	subs	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f9      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	10000012 	.word	0x10000012
 80018b8:	40012000 	.word	0x40012000
 80018bc:	40012300 	.word	0x40012300
 80018c0:	20000000 	.word	0x20000000
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80018d0:	4b78      	ldr	r3, [pc, #480]	@ (8001ab4 <ADC_Init+0x1ec>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a77      	ldr	r2, [pc, #476]	@ (8001ab4 <ADC_Init+0x1ec>)
 80018d6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80018da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80018dc:	4b75      	ldr	r3, [pc, #468]	@ (8001ab4 <ADC_Init+0x1ec>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4973      	ldr	r1, [pc, #460]	@ (8001ab4 <ADC_Init+0x1ec>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	021a      	lsls	r2, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800191c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800193e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6899      	ldr	r1, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	4a58      	ldr	r2, [pc, #352]	@ (8001ab8 <ADC_Init+0x1f0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d022      	beq.n	80019a2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800196a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800198c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	e00f      	b.n	80019c2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0202 	bic.w	r2, r2, #2
 80019d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	005a      	lsls	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01b      	beq.n	8001a28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	035a      	lsls	r2, r3, #13
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	e007      	b.n	8001a38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	051a      	lsls	r2, r3, #20
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a7a:	025a      	lsls	r2, r3, #9
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6899      	ldr	r1, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	029a      	lsls	r2, r3, #10
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40012300 	.word	0x40012300
 8001ab8:	0f000001 	.word	0x0f000001

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00
 8001b00:	05fa0000 	.word	0x05fa0000

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	@ (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	@ (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	@ (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	@ 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	@ 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f7ff ff8e 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff29 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff3e 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff8e 	bl	8001bb0 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5d 	bl	8001b5c <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff31 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa2 	bl	8001c18 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ce4:	f3bf 8f5f 	dmb	sy
}
 8001ce8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <HAL_MPU_Disable+0x28>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	4a06      	ldr	r2, [pc, #24]	@ (8001d08 <HAL_MPU_Disable+0x28>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_MPU_Disable+0x2c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00
 8001d0c:	e000ed90 	.word	0xe000ed90

08001d10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d18:	4a0b      	ldr	r2, [pc, #44]	@ (8001d48 <HAL_MPU_Enable+0x38>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_MPU_Enable+0x3c>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <HAL_MPU_Enable+0x3c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2e:	f3bf 8f4f 	dsb	sy
}
 8001d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d34:	f3bf 8f6f 	isb	sy
}
 8001d38:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed90 	.word	0xe000ed90
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	785a      	ldrb	r2, [r3, #1]
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
 8001d5e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d60:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4a19      	ldr	r2, [pc, #100]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d6c:	4a17      	ldr	r2, [pc, #92]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
 8001d78:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7adb      	ldrb	r3, [r3, #11]
 8001d7e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7a9b      	ldrb	r3, [r3, #10]
 8001d86:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7b5b      	ldrb	r3, [r3, #13]
 8001d8e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7b9b      	ldrb	r3, [r3, #14]
 8001d96:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7bdb      	ldrb	r3, [r3, #15]
 8001d9e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001da0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7a5b      	ldrb	r3, [r3, #9]
 8001da6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001da8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7a1b      	ldrb	r3, [r3, #8]
 8001dae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001db0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	7812      	ldrb	r2, [r2, #0]
 8001db6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dbc:	6113      	str	r3, [r2, #16]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed90 	.word	0xe000ed90

08001dd0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e014      	b.n	8001e0c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f832 	bl	8000e5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0a2      	b.n	8001f72 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	795b      	ldrb	r3, [r3, #5]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_DAC_Start_DMA+0x24>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e09c      	b.n	8001f72 <HAL_DAC_Start_DMA+0x15e>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2202      	movs	r2, #2
 8001e42:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d129      	bne.n	8001e9e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f7c <HAL_DAC_Start_DMA+0x168>)
 8001e50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4a4a      	ldr	r2, [pc, #296]	@ (8001f80 <HAL_DAC_Start_DMA+0x16c>)
 8001e58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4a49      	ldr	r2, [pc, #292]	@ (8001f84 <HAL_DAC_Start_DMA+0x170>)
 8001e60:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e70:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_DAC_Start_DMA+0x6c>
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d005      	beq.n	8001e8a <HAL_DAC_Start_DMA+0x76>
 8001e7e:	e009      	b.n	8001e94 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3308      	adds	r3, #8
 8001e86:	613b      	str	r3, [r7, #16]
        break;
 8001e88:	e033      	b.n	8001ef2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	330c      	adds	r3, #12
 8001e90:	613b      	str	r3, [r7, #16]
        break;
 8001e92:	e02e      	b.n	8001ef2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3310      	adds	r3, #16
 8001e9a:	613b      	str	r3, [r7, #16]
        break;
 8001e9c:	e029      	b.n	8001ef2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	4a39      	ldr	r2, [pc, #228]	@ (8001f88 <HAL_DAC_Start_DMA+0x174>)
 8001ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	4a38      	ldr	r2, [pc, #224]	@ (8001f8c <HAL_DAC_Start_DMA+0x178>)
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	4a37      	ldr	r2, [pc, #220]	@ (8001f90 <HAL_DAC_Start_DMA+0x17c>)
 8001eb4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ec4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DAC_Start_DMA+0xc0>
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d005      	beq.n	8001ede <HAL_DAC_Start_DMA+0xca>
 8001ed2:	e009      	b.n	8001ee8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3314      	adds	r3, #20
 8001eda:	613b      	str	r3, [r7, #16]
        break;
 8001edc:	e009      	b.n	8001ef2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3318      	adds	r3, #24
 8001ee4:	613b      	str	r3, [r7, #16]
        break;
 8001ee6:	e004      	b.n	8001ef2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	331c      	adds	r3, #28
 8001eee:	613b      	str	r3, [r7, #16]
        break;
 8001ef0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f06:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6898      	ldr	r0, [r3, #8]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	f000 fab3 	bl	800247c <HAL_DMA_Start_IT>
 8001f16:	4603      	mov	r3, r0
 8001f18:	75fb      	strb	r3, [r7, #23]
 8001f1a:	e010      	b.n	8001f3e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68d8      	ldr	r0, [r3, #12]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	f000 faa1 	bl	800247c <HAL_DMA_Start_IT>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6819      	ldr	r1, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2201      	movs	r2, #1
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e005      	b.n	8001f70 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f043 0204 	orr.w	r2, r3, #4
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	080021f7 	.word	0x080021f7
 8001f80:	08002219 	.word	0x08002219
 8001f84:	08002235 	.word	0x08002235
 8001f88:	080022b3 	.word	0x080022b3
 8001f8c:	080022d5 	.word	0x080022d5
 8001f90:	080022f1 	.word	0x080022f1

08001f94 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e03e      	b.n	8002026 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	400a      	ands	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10d      	bne.n	8002004 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 faa5 	bl	800253c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e00c      	b.n	800201e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fa97 	bl	800253c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800201c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002044:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01d      	beq.n	800208c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d018      	beq.n	800208c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2204      	movs	r2, #4
 800205e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002074:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002084:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f845 	bl	8002116 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01d      	beq.n	80020d2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d018      	beq.n	80020d2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2204      	movs	r2, #4
 80020a4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80020ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80020ca:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f8e6 	bl	800229e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800212a:	b480      	push	{r7}
 800212c:	b089      	sub	sp, #36	@ 0x24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_DAC_ConfigChannel+0x1c>
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e042      	b.n	80021d0 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	795b      	ldrb	r3, [r3, #5]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_DAC_ConfigChannel+0x2c>
 8002152:	2302      	movs	r3, #2
 8002154:	e03c      	b.n	80021d0 <HAL_DAC_ConfigChannel+0xa6>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2202      	movs	r2, #2
 8002160:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	22c0      	movs	r2, #192	@ 0xc0
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43da      	mvns	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80021ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3724      	adds	r7, #36	@ 0x24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(const DAC_HandleTypeDef *hdac)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	b2db      	uxtb	r3, r3
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002202:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff ff68 	bl	80020da <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	711a      	strb	r2, [r3, #4]
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002224:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7ff ff61 	bl	80020ee <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002240:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f043 0204 	orr.w	r2, r3, #4
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff ff57 	bl	8002102 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	711a      	strb	r2, [r3, #4]
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff ffce 	bl	8002262 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	711a      	strb	r2, [r3, #4]
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff ffc7 	bl	8002276 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f043 0204 	orr.w	r2, r3, #4
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7ff ffbd 	bl	800228a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	711a      	strb	r2, [r3, #4]
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff f926 	bl	800157c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e099      	b.n	8002470 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235c:	e00f      	b.n	800237e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800235e:	f7ff f90d 	bl	800157c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b05      	cmp	r3, #5
 800236a:	d908      	bls.n	800237e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2203      	movs	r2, #3
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e078      	b.n	8002470 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e8      	bne.n	800235e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4b38      	ldr	r3, [pc, #224]	@ (8002478 <HAL_DMA_Init+0x158>)
 8002398:	4013      	ands	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d107      	bne.n	80023e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	4313      	orrs	r3, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f023 0307 	bic.w	r3, r3, #7
 80023fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	2b04      	cmp	r3, #4
 8002410:	d117      	bne.n	8002442 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fae7 	bl	80029f8 <DMA_CheckFifoParam>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2240      	movs	r2, #64	@ 0x40
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800243e:	2301      	movs	r3, #1
 8002440:	e016      	b.n	8002470 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fa9e 	bl	800298c <DMA_CalcBaseAndBitshift>
 8002450:	4603      	mov	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	223f      	movs	r2, #63	@ 0x3f
 800245a:	409a      	lsls	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	e010803f 	.word	0xe010803f

0800247c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_DMA_Start_IT+0x26>
 800249e:	2302      	movs	r3, #2
 80024a0:	e048      	b.n	8002534 <HAL_DMA_Start_IT+0xb8>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d137      	bne.n	8002526 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fa30 	bl	8002930 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d4:	223f      	movs	r2, #63	@ 0x3f
 80024d6:	409a      	lsls	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0216 	orr.w	r2, r2, #22
 80024ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024fa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0208 	orr.w	r2, r2, #8
 8002512:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e005      	b.n	8002532 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002532:	7dfb      	ldrb	r3, [r7, #23]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800254a:	f7ff f817 	bl	800157c <HAL_GetTick>
 800254e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d008      	beq.n	800256e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2280      	movs	r2, #128	@ 0x80
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e052      	b.n	8002614 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0216 	bic.w	r2, r2, #22
 800257c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800258c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_DMA_Abort+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0208 	bic.w	r2, r2, #8
 80025ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025be:	e013      	b.n	80025e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c0:	f7fe ffdc 	bl	800157c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d90c      	bls.n	80025e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2203      	movs	r2, #3
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e015      	b.n	8002614 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1e4      	bne.n	80025c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	223f      	movs	r2, #63	@ 0x3f
 80025fc:	409a      	lsls	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002628:	4b8e      	ldr	r3, [pc, #568]	@ (8002864 <HAL_DMA_IRQHandler+0x248>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a8e      	ldr	r2, [pc, #568]	@ (8002868 <HAL_DMA_IRQHandler+0x24c>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0a9b      	lsrs	r3, r3, #10
 8002634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2208      	movs	r2, #8
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01a      	beq.n	8002688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	2208      	movs	r2, #8
 8002676:	409a      	lsls	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	2201      	movs	r2, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d012      	beq.n	80026be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	2201      	movs	r2, #1
 80026ac:	409a      	lsls	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c2:	2204      	movs	r2, #4
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e0:	2204      	movs	r2, #4
 80026e2:	409a      	lsls	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f8:	2210      	movs	r2, #16
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d043      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d03c      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002716:	2210      	movs	r2, #16
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d018      	beq.n	800275e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d108      	bne.n	800274c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d024      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
 800274a:	e01f      	b.n	800278c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
 800275c:	e016      	b.n	800278c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0208 	bic.w	r2, r2, #8
 800277a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002790:	2220      	movs	r2, #32
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 808f 	beq.w	80028bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8087 	beq.w	80028bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	2220      	movs	r2, #32
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d136      	bne.n	8002834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0216 	bic.w	r2, r2, #22
 80027d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <HAL_DMA_IRQHandler+0x1da>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0208 	bic.w	r2, r2, #8
 8002804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	223f      	movs	r2, #63	@ 0x3f
 800280c:	409a      	lsls	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002826:	2b00      	cmp	r3, #0
 8002828:	d07e      	beq.n	8002928 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
        }
        return;
 8002832:	e079      	b.n	8002928 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01d      	beq.n	800287e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10d      	bne.n	800286c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	2b00      	cmp	r3, #0
 8002856:	d031      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
 8002860:	e02c      	b.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
 8002862:	bf00      	nop
 8002864:	20000000 	.word	0x20000000
 8002868:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
 800287c:	e01e      	b.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10f      	bne.n	80028ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0210 	bic.w	r2, r2, #16
 800289a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d032      	beq.n	800292a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d022      	beq.n	8002916 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2205      	movs	r2, #5
 80028d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	3301      	adds	r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d307      	bcc.n	8002904 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f2      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x2cc>
 8002902:	e000      	b.n	8002906 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002904:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
 8002926:	e000      	b.n	800292a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002928:	bf00      	nop
    }
  }
}
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800294c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b40      	cmp	r3, #64	@ 0x40
 800295c:	d108      	bne.n	8002970 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800296e:	e007      	b.n	8002980 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	3b10      	subs	r3, #16
 800299c:	4a13      	ldr	r2, [pc, #76]	@ (80029ec <DMA_CalcBaseAndBitshift+0x60>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029a6:	4a12      	ldr	r2, [pc, #72]	@ (80029f0 <DMA_CalcBaseAndBitshift+0x64>)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d908      	bls.n	80029cc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <DMA_CalcBaseAndBitshift+0x68>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	1d1a      	adds	r2, r3, #4
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80029ca:	e006      	b.n	80029da <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <DMA_CalcBaseAndBitshift+0x68>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	aaaaaaab 	.word	0xaaaaaaab
 80029f0:	08009834 	.word	0x08009834
 80029f4:	fffffc00 	.word	0xfffffc00

080029f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d11f      	bne.n	8002a52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d856      	bhi.n	8002ac6 <DMA_CheckFifoParam+0xce>
 8002a18:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <DMA_CheckFifoParam+0x28>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a43 	.word	0x08002a43
 8002a28:	08002a31 	.word	0x08002a31
 8002a2c:	08002ac7 	.word	0x08002ac7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d046      	beq.n	8002aca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a40:	e043      	b.n	8002aca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a4a:	d140      	bne.n	8002ace <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a50:	e03d      	b.n	8002ace <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5a:	d121      	bne.n	8002aa0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d837      	bhi.n	8002ad2 <DMA_CheckFifoParam+0xda>
 8002a62:	a201      	add	r2, pc, #4	@ (adr r2, 8002a68 <DMA_CheckFifoParam+0x70>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002a79 	.word	0x08002a79
 8002a6c:	08002a7f 	.word	0x08002a7f
 8002a70:	08002a79 	.word	0x08002a79
 8002a74:	08002a91 	.word	0x08002a91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e030      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d025      	beq.n	8002ad6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8e:	e022      	b.n	8002ad6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a98:	d11f      	bne.n	8002ada <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a9e:	e01c      	b.n	8002ada <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d903      	bls.n	8002aae <DMA_CheckFifoParam+0xb6>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d003      	beq.n	8002ab4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aac:	e018      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab2:	e015      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00e      	beq.n	8002ade <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac4:	e00b      	b.n	8002ade <DMA_CheckFifoParam+0xe6>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e00a      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
 8002acc:	e008      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e006      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e004      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e002      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	@ 0x24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e175      	b.n	8002dfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f040 8164 	bne.w	8002df6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d005      	beq.n	8002b46 <HAL_GPIO_Init+0x56>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d130      	bne.n	8002ba8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 0201 	and.w	r2, r3, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d017      	beq.n	8002be4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d123      	bne.n	8002c38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80be 	beq.w	8002df6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	4b66      	ldr	r3, [pc, #408]	@ (8002e14 <HAL_GPIO_Init+0x324>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	4a65      	ldr	r2, [pc, #404]	@ (8002e14 <HAL_GPIO_Init+0x324>)
 8002c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c86:	4b63      	ldr	r3, [pc, #396]	@ (8002e14 <HAL_GPIO_Init+0x324>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c92:	4a61      	ldr	r2, [pc, #388]	@ (8002e18 <HAL_GPIO_Init+0x328>)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a58      	ldr	r2, [pc, #352]	@ (8002e1c <HAL_GPIO_Init+0x32c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d037      	beq.n	8002d2e <HAL_GPIO_Init+0x23e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a57      	ldr	r2, [pc, #348]	@ (8002e20 <HAL_GPIO_Init+0x330>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d031      	beq.n	8002d2a <HAL_GPIO_Init+0x23a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a56      	ldr	r2, [pc, #344]	@ (8002e24 <HAL_GPIO_Init+0x334>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d02b      	beq.n	8002d26 <HAL_GPIO_Init+0x236>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a55      	ldr	r2, [pc, #340]	@ (8002e28 <HAL_GPIO_Init+0x338>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d025      	beq.n	8002d22 <HAL_GPIO_Init+0x232>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a54      	ldr	r2, [pc, #336]	@ (8002e2c <HAL_GPIO_Init+0x33c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01f      	beq.n	8002d1e <HAL_GPIO_Init+0x22e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a53      	ldr	r2, [pc, #332]	@ (8002e30 <HAL_GPIO_Init+0x340>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d019      	beq.n	8002d1a <HAL_GPIO_Init+0x22a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a52      	ldr	r2, [pc, #328]	@ (8002e34 <HAL_GPIO_Init+0x344>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_GPIO_Init+0x226>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a51      	ldr	r2, [pc, #324]	@ (8002e38 <HAL_GPIO_Init+0x348>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00d      	beq.n	8002d12 <HAL_GPIO_Init+0x222>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a50      	ldr	r2, [pc, #320]	@ (8002e3c <HAL_GPIO_Init+0x34c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <HAL_GPIO_Init+0x21e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4f      	ldr	r2, [pc, #316]	@ (8002e40 <HAL_GPIO_Init+0x350>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_GPIO_Init+0x21a>
 8002d06:	2309      	movs	r3, #9
 8002d08:	e012      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d0a:	230a      	movs	r3, #10
 8002d0c:	e010      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d0e:	2308      	movs	r3, #8
 8002d10:	e00e      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d12:	2307      	movs	r3, #7
 8002d14:	e00c      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d16:	2306      	movs	r3, #6
 8002d18:	e00a      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d1a:	2305      	movs	r3, #5
 8002d1c:	e008      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d1e:	2304      	movs	r3, #4
 8002d20:	e006      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d22:	2303      	movs	r3, #3
 8002d24:	e004      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e002      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_GPIO_Init+0x240>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	f002 0203 	and.w	r2, r2, #3
 8002d36:	0092      	lsls	r2, r2, #2
 8002d38:	4093      	lsls	r3, r2
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d40:	4935      	ldr	r1, [pc, #212]	@ (8002e18 <HAL_GPIO_Init+0x328>)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3302      	adds	r3, #2
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e44 <HAL_GPIO_Init+0x354>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d72:	4a34      	ldr	r2, [pc, #208]	@ (8002e44 <HAL_GPIO_Init+0x354>)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d78:	4b32      	ldr	r3, [pc, #200]	@ (8002e44 <HAL_GPIO_Init+0x354>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d9c:	4a29      	ldr	r2, [pc, #164]	@ (8002e44 <HAL_GPIO_Init+0x354>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002da2:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <HAL_GPIO_Init+0x354>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e44 <HAL_GPIO_Init+0x354>)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <HAL_GPIO_Init+0x354>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df0:	4a14      	ldr	r2, [pc, #80]	@ (8002e44 <HAL_GPIO_Init+0x354>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b0f      	cmp	r3, #15
 8002e00:	f67f ae86 	bls.w	8002b10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3724      	adds	r7, #36	@ 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40013800 	.word	0x40013800
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	40020400 	.word	0x40020400
 8002e24:	40020800 	.word	0x40020800
 8002e28:	40020c00 	.word	0x40020c00
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40021400 	.word	0x40021400
 8002e34:	40021800 	.word	0x40021800
 8002e38:	40021c00 	.word	0x40021c00
 8002e3c:	40022000 	.word	0x40022000
 8002e40:	40022400 	.word	0x40022400
 8002e44:	40013c00 	.word	0x40013c00

08002e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e001      	b.n	8002e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eb6:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ec2:	4a05      	ldr	r2, [pc, #20]	@ (8002ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fb88 	bl	80005e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40013c00 	.word	0x40013c00

08002edc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	@ (8002ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40007000 	.word	0x40007000

08002efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f04:	2300      	movs	r3, #0
 8002f06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e29b      	b.n	800344a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8087 	beq.w	800302e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f20:	4b96      	ldr	r3, [pc, #600]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d00c      	beq.n	8002f46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2c:	4b93      	ldr	r3, [pc, #588]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d112      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62>
 8002f38:	4b90      	ldr	r3, [pc, #576]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f44:	d10b      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f46:	4b8d      	ldr	r3, [pc, #564]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d06c      	beq.n	800302c <HAL_RCC_OscConfig+0x130>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d168      	bne.n	800302c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e275      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x7a>
 8002f68:	4b84      	ldr	r3, [pc, #528]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a83      	ldr	r2, [pc, #524]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e02e      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x9c>
 8002f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7e      	ldr	r2, [pc, #504]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b7c      	ldr	r3, [pc, #496]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7b      	ldr	r2, [pc, #492]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0xc0>
 8002fa2:	4b76      	ldr	r3, [pc, #472]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a75      	ldr	r2, [pc, #468]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b73      	ldr	r3, [pc, #460]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a72      	ldr	r2, [pc, #456]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd8>
 8002fbc:	4b6f      	ldr	r3, [pc, #444]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6b      	ldr	r2, [pc, #428]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe face 	bl	800157c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe faca 	bl	800157c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e229      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b61      	ldr	r3, [pc, #388]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe8>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe faba 	bl	800157c <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe fab6 	bl	800157c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	@ 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e215      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b57      	ldr	r3, [pc, #348]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x110>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d069      	beq.n	800310e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303a:	4b50      	ldr	r3, [pc, #320]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b4d      	ldr	r3, [pc, #308]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11c      	bne.n	800308c <HAL_RCC_OscConfig+0x190>
 8003052:	4b4a      	ldr	r3, [pc, #296]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	4b47      	ldr	r3, [pc, #284]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x17a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1e9      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b41      	ldr	r3, [pc, #260]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	493d      	ldr	r1, [pc, #244]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	e040      	b.n	800310e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d023      	beq.n	80030dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003094:	4b39      	ldr	r3, [pc, #228]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a38      	ldr	r2, [pc, #224]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe fa6c 	bl	800157c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a8:	f7fe fa68 	bl	800157c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1c7      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	4b30      	ldr	r3, [pc, #192]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c6:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4929      	ldr	r1, [pc, #164]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
 80030da:	e018      	b.n	800310e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030dc:	4b27      	ldr	r3, [pc, #156]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a26      	ldr	r2, [pc, #152]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fa48 	bl	800157c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f0:	f7fe fa44 	bl	800157c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1a3      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	4b1e      	ldr	r3, [pc, #120]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d038      	beq.n	800318c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d019      	beq.n	8003156 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003122:	4b16      	ldr	r3, [pc, #88]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003126:	4a15      	ldr	r2, [pc, #84]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fe fa25 	bl	800157c <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003136:	f7fe fa21 	bl	800157c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e180      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003148:	4b0c      	ldr	r3, [pc, #48]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 800314a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x23a>
 8003154:	e01a      	b.n	800318c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 8003158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315a:	4a08      	ldr	r2, [pc, #32]	@ (800317c <HAL_RCC_OscConfig+0x280>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003162:	f7fe fa0b 	bl	800157c <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316a:	f7fe fa07 	bl	800157c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d903      	bls.n	8003180 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e166      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
 800317c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003180:	4b92      	ldr	r3, [pc, #584]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ee      	bne.n	800316a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80a4 	beq.w	80032e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319a:	4b8c      	ldr	r3, [pc, #560]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b89      	ldr	r3, [pc, #548]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	4a88      	ldr	r2, [pc, #544]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b2:	4b86      	ldr	r3, [pc, #536]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c2:	4b83      	ldr	r3, [pc, #524]	@ (80033d0 <HAL_RCC_OscConfig+0x4d4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031ce:	4b80      	ldr	r3, [pc, #512]	@ (80033d0 <HAL_RCC_OscConfig+0x4d4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7f      	ldr	r2, [pc, #508]	@ (80033d0 <HAL_RCC_OscConfig+0x4d4>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe f9cf 	bl	800157c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe f9cb 	bl	800157c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b64      	cmp	r3, #100	@ 0x64
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e12a      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f4:	4b76      	ldr	r3, [pc, #472]	@ (80033d0 <HAL_RCC_OscConfig+0x4d4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x31a>
 8003208:	4b70      	ldr	r3, [pc, #448]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320c:	4a6f      	ldr	r2, [pc, #444]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	@ 0x70
 8003214:	e02d      	b.n	8003272 <HAL_RCC_OscConfig+0x376>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x33c>
 800321e:	4b6b      	ldr	r3, [pc, #428]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003222:	4a6a      	ldr	r2, [pc, #424]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	6713      	str	r3, [r2, #112]	@ 0x70
 800322a:	4b68      	ldr	r3, [pc, #416]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322e:	4a67      	ldr	r2, [pc, #412]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	6713      	str	r3, [r2, #112]	@ 0x70
 8003236:	e01c      	b.n	8003272 <HAL_RCC_OscConfig+0x376>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d10c      	bne.n	800325a <HAL_RCC_OscConfig+0x35e>
 8003240:	4b62      	ldr	r3, [pc, #392]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003244:	4a61      	ldr	r2, [pc, #388]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6713      	str	r3, [r2, #112]	@ 0x70
 800324c:	4b5f      	ldr	r3, [pc, #380]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003250:	4a5e      	ldr	r2, [pc, #376]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6713      	str	r3, [r2, #112]	@ 0x70
 8003258:	e00b      	b.n	8003272 <HAL_RCC_OscConfig+0x376>
 800325a:	4b5c      	ldr	r3, [pc, #368]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	4a5b      	ldr	r2, [pc, #364]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6713      	str	r3, [r2, #112]	@ 0x70
 8003266:	4b59      	ldr	r3, [pc, #356]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	4a58      	ldr	r2, [pc, #352]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d015      	beq.n	80032a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fe f97f 	bl	800157c <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe f97b 	bl	800157c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0d8      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	4b4c      	ldr	r3, [pc, #304]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ee      	beq.n	8003282 <HAL_RCC_OscConfig+0x386>
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fe f969 	bl	800157c <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe f965 	bl	800157c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0c2      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c4:	4b41      	ldr	r3, [pc, #260]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ee      	bne.n	80032ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b3d      	ldr	r3, [pc, #244]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	4a3c      	ldr	r2, [pc, #240]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80ae 	beq.w	8003448 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ec:	4b37      	ldr	r3, [pc, #220]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d06d      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d14b      	bne.n	8003398 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b32      	ldr	r3, [pc, #200]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a31      	ldr	r2, [pc, #196]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe f936 	bl	800157c <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe f932 	bl	800157c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e091      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	019b      	lsls	r3, r3, #6
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	3b01      	subs	r3, #1
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	061b      	lsls	r3, r3, #24
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	071b      	lsls	r3, r3, #28
 800335e:	491b      	ldr	r1, [pc, #108]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003364:	4b19      	ldr	r3, [pc, #100]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a18      	ldr	r2, [pc, #96]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800336a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800336e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe f904 	bl	800157c <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003378:	f7fe f900 	bl	800157c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e05f      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338a:	4b10      	ldr	r3, [pc, #64]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x47c>
 8003396:	e057      	b.n	8003448 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0b      	ldr	r2, [pc, #44]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 800339e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe f8ea 	bl	800157c <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe f8e6 	bl	800157c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e045      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x4b0>
 80033ca:	e03d      	b.n	8003448 <HAL_RCC_OscConfig+0x54c>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003454 <HAL_RCC_OscConfig+0x558>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d030      	beq.n	8003444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d129      	bne.n	8003444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d122      	bne.n	8003444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800340a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800340c:	4293      	cmp	r3, r2
 800340e:	d119      	bne.n	8003444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	3b01      	subs	r3, #1
 800341e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d10f      	bne.n	8003444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d0      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b6a      	ldr	r3, [pc, #424]	@ (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d910      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b67      	ldr	r3, [pc, #412]	@ (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 020f 	bic.w	r2, r3, #15
 8003486:	4965      	ldr	r1, [pc, #404]	@ (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b63      	ldr	r3, [pc, #396]	@ (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b8:	4b59      	ldr	r3, [pc, #356]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a58      	ldr	r2, [pc, #352]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d0:	4b53      	ldr	r3, [pc, #332]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a52      	ldr	r2, [pc, #328]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b50      	ldr	r3, [pc, #320]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	494d      	ldr	r1, [pc, #308]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d040      	beq.n	800357c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b47      	ldr	r3, [pc, #284]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d115      	bne.n	800353a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b41      	ldr	r3, [pc, #260]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e073      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3d      	ldr	r3, [pc, #244]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06b      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b39      	ldr	r3, [pc, #228]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4936      	ldr	r1, [pc, #216]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354c:	f7fe f816 	bl	800157c <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fe f812 	bl	800157c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e053      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2d      	ldr	r3, [pc, #180]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b27      	ldr	r3, [pc, #156]	@ (800361c <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d210      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b24      	ldr	r3, [pc, #144]	@ (800361c <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 020f 	bic.w	r2, r3, #15
 8003592:	4922      	ldr	r1, [pc, #136]	@ (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b20      	ldr	r3, [pc, #128]	@ (800361c <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4916      	ldr	r1, [pc, #88]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d6:	4b12      	ldr	r3, [pc, #72]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	490e      	ldr	r1, [pc, #56]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ea:	f000 f821 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	490a      	ldr	r1, [pc, #40]	@ (8003624 <HAL_RCC_ClockConfig+0x1cc>)
 80035fc:	5ccb      	ldrb	r3, [r1, r3]
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	4a09      	ldr	r2, [pc, #36]	@ (8003628 <HAL_RCC_ClockConfig+0x1d0>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003606:	4b09      	ldr	r3, [pc, #36]	@ (800362c <HAL_RCC_ClockConfig+0x1d4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd ff72 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023c00 	.word	0x40023c00
 8003620:	40023800 	.word	0x40023800
 8003624:	0800981c 	.word	0x0800981c
 8003628:	20000000 	.word	0x20000000
 800362c:	20000004 	.word	0x20000004

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b090      	sub	sp, #64	@ 0x40
 8003636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
 800363c:	2300      	movs	r3, #0
 800363e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003640:	2300      	movs	r3, #0
 8003642:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003648:	4b59      	ldr	r3, [pc, #356]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	d00d      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x40>
 8003654:	2b08      	cmp	r3, #8
 8003656:	f200 80a1 	bhi.w	800379c <HAL_RCC_GetSysClockFreq+0x16c>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x34>
 800365e:	2b04      	cmp	r3, #4
 8003660:	d003      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x3a>
 8003662:	e09b      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b53      	ldr	r3, [pc, #332]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003666:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003668:	e09b      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800366a:	4b53      	ldr	r3, [pc, #332]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800366c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800366e:	e098      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003670:	4b4f      	ldr	r3, [pc, #316]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800367a:	4b4d      	ldr	r3, [pc, #308]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d028      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	2200      	movs	r2, #0
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	627a      	str	r2, [r7, #36]	@ 0x24
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003698:	2100      	movs	r1, #0
 800369a:	4b47      	ldr	r3, [pc, #284]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800369c:	fb03 f201 	mul.w	r2, r3, r1
 80036a0:	2300      	movs	r3, #0
 80036a2:	fb00 f303 	mul.w	r3, r0, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	4a43      	ldr	r2, [pc, #268]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036aa:	fba0 1202 	umull	r1, r2, r0, r2
 80036ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036b0:	460a      	mov	r2, r1
 80036b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80036b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b6:	4413      	add	r3, r2
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	2200      	movs	r2, #0
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	61fa      	str	r2, [r7, #28]
 80036c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80036ca:	f7fc fe11 	bl	80002f0 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4613      	mov	r3, r2
 80036d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036d6:	e053      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d8:	4b35      	ldr	r3, [pc, #212]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	2200      	movs	r2, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	617a      	str	r2, [r7, #20]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036ea:	f04f 0b00 	mov.w	fp, #0
 80036ee:	4652      	mov	r2, sl
 80036f0:	465b      	mov	r3, fp
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	0159      	lsls	r1, r3, #5
 80036fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003700:	0150      	lsls	r0, r2, #5
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	ebb2 080a 	subs.w	r8, r2, sl
 800370a:	eb63 090b 	sbc.w	r9, r3, fp
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800371a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800371e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003722:	ebb2 0408 	subs.w	r4, r2, r8
 8003726:	eb63 0509 	sbc.w	r5, r3, r9
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	00eb      	lsls	r3, r5, #3
 8003734:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003738:	00e2      	lsls	r2, r4, #3
 800373a:	4614      	mov	r4, r2
 800373c:	461d      	mov	r5, r3
 800373e:	eb14 030a 	adds.w	r3, r4, sl
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	eb45 030b 	adc.w	r3, r5, fp
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003756:	4629      	mov	r1, r5
 8003758:	028b      	lsls	r3, r1, #10
 800375a:	4621      	mov	r1, r4
 800375c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003760:	4621      	mov	r1, r4
 8003762:	028a      	lsls	r2, r1, #10
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376a:	2200      	movs	r2, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	60fa      	str	r2, [r7, #12]
 8003770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003774:	f7fc fdbc 	bl	80002f0 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4613      	mov	r3, r2
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003780:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	3301      	adds	r3, #1
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003790:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800379a:	e002      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800379e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3740      	adds	r7, #64	@ 0x40
 80037a8:	46bd      	mov	sp, r7
 80037aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	017d7840 	.word	0x017d7840

080037bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000000 	.word	0x20000000

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037d8:	f7ff fff0 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	0a9b      	lsrs	r3, r3, #10
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4903      	ldr	r1, [pc, #12]	@ (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	0800982c 	.word	0x0800982c

080037fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003800:	f7ff ffdc 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	0b5b      	lsrs	r3, r3, #13
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4903      	ldr	r1, [pc, #12]	@ (8003820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40023800 	.word	0x40023800
 8003820:	0800982c 	.word	0x0800982c

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d012      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800384c:	4b69      	ldr	r3, [pc, #420]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a68      	ldr	r2, [pc, #416]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003852:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003856:	6093      	str	r3, [r2, #8]
 8003858:	4b66      	ldr	r3, [pc, #408]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003860:	4964      	ldr	r1, [pc, #400]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800387e:	4b5d      	ldr	r3, [pc, #372]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003884:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	4959      	ldr	r1, [pc, #356]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800389c:	d101      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038aa:	2301      	movs	r3, #1
 80038ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d017      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038ba:	4b4e      	ldr	r3, [pc, #312]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	494a      	ldr	r1, [pc, #296]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d8:	d101      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038da:	2301      	movs	r3, #1
 80038dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 808b 	beq.w	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003908:	4b3a      	ldr	r3, [pc, #232]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	4a39      	ldr	r2, [pc, #228]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003912:	6413      	str	r3, [r2, #64]	@ 0x40
 8003914:	4b37      	ldr	r3, [pc, #220]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003920:	4b35      	ldr	r3, [pc, #212]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a34      	ldr	r2, [pc, #208]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800392a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fd fe26 	bl	800157c <HAL_GetTick>
 8003930:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003934:	f7fd fe22 	bl	800157c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	@ 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e38f      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003946:	4b2c      	ldr	r3, [pc, #176]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003952:	4b28      	ldr	r3, [pc, #160]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d035      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	429a      	cmp	r2, r3
 800396e:	d02e      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003970:	4b20      	ldr	r3, [pc, #128]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003978:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800397a:	4b1e      	ldr	r3, [pc, #120]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	4a1d      	ldr	r2, [pc, #116]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003984:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003986:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398a:	4a1a      	ldr	r2, [pc, #104]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003990:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003992:	4a18      	ldr	r2, [pc, #96]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003998:	4b16      	ldr	r3, [pc, #88]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d114      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fd fdea 	bl	800157c <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fd fde6 	bl	800157c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e351      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c2:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ee      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039da:	d111      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039ea:	400b      	ands	r3, r1
 80039ec:	4901      	ldr	r1, [pc, #4]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
 80039f2:	e00b      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40007000 	.word	0x40007000
 80039fc:	0ffffcff 	.word	0x0ffffcff
 8003a00:	4bac      	ldr	r3, [pc, #688]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4aab      	ldr	r2, [pc, #684]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a06:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a0a:	6093      	str	r3, [r2, #8]
 8003a0c:	4ba9      	ldr	r3, [pc, #676]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	49a6      	ldr	r1, [pc, #664]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d010      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a2a:	4ba2      	ldr	r3, [pc, #648]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a30:	4aa0      	ldr	r2, [pc, #640]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a3a:	4b9e      	ldr	r3, [pc, #632]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	499b      	ldr	r1, [pc, #620]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a58:	4b96      	ldr	r3, [pc, #600]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a66:	4993      	ldr	r1, [pc, #588]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a7a:	4b8e      	ldr	r3, [pc, #568]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a88:	498a      	ldr	r1, [pc, #552]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a9c:	4b85      	ldr	r3, [pc, #532]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aaa:	4982      	ldr	r1, [pc, #520]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003abe:	4b7d      	ldr	r3, [pc, #500]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003acc:	4979      	ldr	r1, [pc, #484]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ae0:	4b74      	ldr	r3, [pc, #464]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	f023 0203 	bic.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	4971      	ldr	r1, [pc, #452]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b02:	4b6c      	ldr	r3, [pc, #432]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	f023 020c 	bic.w	r2, r3, #12
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b10:	4968      	ldr	r1, [pc, #416]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b24:	4b63      	ldr	r3, [pc, #396]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b32:	4960      	ldr	r1, [pc, #384]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b46:	4b5b      	ldr	r3, [pc, #364]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b54:	4957      	ldr	r1, [pc, #348]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b68:	4b52      	ldr	r3, [pc, #328]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b76:	494f      	ldr	r1, [pc, #316]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b98:	4946      	ldr	r1, [pc, #280]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bac:	4b41      	ldr	r3, [pc, #260]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bba:	493e      	ldr	r1, [pc, #248]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bce:	4b39      	ldr	r3, [pc, #228]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bdc:	4935      	ldr	r1, [pc, #212]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bf0:	4b30      	ldr	r3, [pc, #192]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bfe:	492d      	ldr	r1, [pc, #180]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d011      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c12:	4b28      	ldr	r3, [pc, #160]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c18:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c20:	4924      	ldr	r1, [pc, #144]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c30:	d101      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c52:	4b18      	ldr	r3, [pc, #96]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c58:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c60:	4914      	ldr	r1, [pc, #80]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c74:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c84:	490b      	ldr	r1, [pc, #44]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00f      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c98:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca8:	4902      	ldr	r1, [pc, #8]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cb0:	e002      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cc4:	4b8a      	ldr	r3, [pc, #552]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd4:	4986      	ldr	r1, [pc, #536]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ce8:	4b81      	ldr	r3, [pc, #516]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cf8:	497d      	ldr	r1, [pc, #500]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d006      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80d6 	beq.w	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d14:	4b76      	ldr	r3, [pc, #472]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a75      	ldr	r2, [pc, #468]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d20:	f7fd fc2c 	bl	800157c <HAL_GetTick>
 8003d24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d28:	f7fd fc28 	bl	800157c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e195      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d021      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11d      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d5a:	4b65      	ldr	r3, [pc, #404]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d68:	4b61      	ldr	r3, [pc, #388]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d6e:	0e1b      	lsrs	r3, r3, #24
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	019a      	lsls	r2, r3, #6
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	071b      	lsls	r3, r3, #28
 8003d8e:	4958      	ldr	r1, [pc, #352]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02e      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc0:	d129      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc8:	0c1b      	lsrs	r3, r3, #16
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd0:	4b47      	ldr	r3, [pc, #284]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd6:	0f1b      	lsrs	r3, r3, #28
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	019a      	lsls	r2, r3, #6
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	061b      	lsls	r3, r3, #24
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	071b      	lsls	r3, r3, #28
 8003df6:	493e      	ldr	r1, [pc, #248]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e04:	f023 021f 	bic.w	r2, r3, #31
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	4938      	ldr	r1, [pc, #224]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01d      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e22:	4b33      	ldr	r3, [pc, #204]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e28:	0e1b      	lsrs	r3, r3, #24
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e30:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e36:	0f1b      	lsrs	r3, r3, #28
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	019a      	lsls	r2, r3, #6
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	061b      	lsls	r3, r3, #24
 8003e50:	431a      	orrs	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	071b      	lsls	r3, r3, #28
 8003e56:	4926      	ldr	r1, [pc, #152]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d011      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	019a      	lsls	r2, r3, #6
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	071b      	lsls	r3, r3, #28
 8003e86:	491a      	ldr	r1, [pc, #104]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e8e:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9a:	f7fd fb6f 	bl	800157c <HAL_GetTick>
 8003e9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ea2:	f7fd fb6b 	bl	800157c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b64      	cmp	r3, #100	@ 0x64
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e0d8      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	f040 80ce 	bne.w	8004064 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ec8:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a08      	ldr	r2, [pc, #32]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fd fb52 	bl	800157c <HAL_GetTick>
 8003ed8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003edc:	f7fd fb4e 	bl	800157c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	@ 0x64
 8003ee8:	d904      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0bb      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f00:	d0ec      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12a      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f2a:	4b51      	ldr	r3, [pc, #324]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f38:	4b4d      	ldr	r3, [pc, #308]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3e:	0f1b      	lsrs	r3, r3, #28
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	019a      	lsls	r2, r3, #6
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4944      	ldr	r1, [pc, #272]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f66:	4b42      	ldr	r3, [pc, #264]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	493d      	ldr	r1, [pc, #244]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d022      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f94:	d11d      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f96:	4b36      	ldr	r3, [pc, #216]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	0e1b      	lsrs	r3, r3, #24
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fa4:	4b32      	ldr	r3, [pc, #200]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	0f1b      	lsrs	r3, r3, #28
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	019a      	lsls	r2, r3, #6
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	4929      	ldr	r1, [pc, #164]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d028      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fde:	4b24      	ldr	r3, [pc, #144]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fec:	4b20      	ldr	r3, [pc, #128]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	019a      	lsls	r2, r3, #6
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	431a      	orrs	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	4917      	ldr	r1, [pc, #92]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800401a:	4b15      	ldr	r3, [pc, #84]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004020:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	4911      	ldr	r1, [pc, #68]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004030:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0e      	ldr	r2, [pc, #56]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403c:	f7fd fa9e 	bl	800157c <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004044:	f7fd fa9a 	bl	800157c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	@ 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e007      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004056:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800405e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004062:	d1ef      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800

08004074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e09d      	b.n	80041c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004096:	d009      	beq.n	80040ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	61da      	str	r2, [r3, #28]
 800409e:	e005      	b.n	80040ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc ff42 	bl	8000f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040ec:	d902      	bls.n	80040f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e002      	b.n	80040fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004102:	d007      	beq.n	8004114 <HAL_SPI_Init+0xa0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800410c:	d002      	beq.n	8004114 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004156:	ea42 0103 	orr.w	r1, r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	f003 0204 	and.w	r2, r3, #4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004190:	ea42 0103 	orr.w	r1, r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e049      	b.n	8004270 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fc fef1 	bl	8000fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f000 fa05 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d001      	beq.n	8004290 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e04c      	b.n	800432a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a26      	ldr	r2, [pc, #152]	@ (8004338 <HAL_TIM_Base_Start+0xc0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d022      	beq.n	80042e8 <HAL_TIM_Base_Start+0x70>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042aa:	d01d      	beq.n	80042e8 <HAL_TIM_Base_Start+0x70>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a22      	ldr	r2, [pc, #136]	@ (800433c <HAL_TIM_Base_Start+0xc4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <HAL_TIM_Base_Start+0x70>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a21      	ldr	r2, [pc, #132]	@ (8004340 <HAL_TIM_Base_Start+0xc8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_TIM_Base_Start+0x70>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004344 <HAL_TIM_Base_Start+0xcc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_TIM_Base_Start+0x70>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004348 <HAL_TIM_Base_Start+0xd0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIM_Base_Start+0x70>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <HAL_TIM_Base_Start+0xd4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIM_Base_Start+0x70>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HAL_TIM_Base_Start+0xd8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d115      	bne.n	8004314 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <HAL_TIM_Base_Start+0xdc>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d015      	beq.n	8004326 <HAL_TIM_Base_Start+0xae>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004300:	d011      	beq.n	8004326 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e008      	b.n	8004326 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e000      	b.n	8004328 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40010000 	.word	0x40010000
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	40000c00 	.word	0x40000c00
 8004348:	40010400 	.word	0x40010400
 800434c:	40014000 	.word	0x40014000
 8004350:	40001800 	.word	0x40001800
 8004354:	00010007 	.word	0x00010007

08004358 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	f241 1311 	movw	r3, #4369	@ 0x1111
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10f      	bne.n	8004390 <HAL_TIM_Base_Stop+0x38>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	f240 4344 	movw	r3, #1092	@ 0x444
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <HAL_TIM_Base_Stop+0x38>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d020      	beq.n	800440a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01b      	beq.n	800440a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f06f 0202 	mvn.w	r2, #2
 80043da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f8f3 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 80043f6:	e005      	b.n	8004404 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8e5 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8f6 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01b      	beq.n	8004456 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f06f 0204 	mvn.w	r2, #4
 8004426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8cd 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 8004442:	e005      	b.n	8004450 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f8bf 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8d0 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d020      	beq.n	80044a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01b      	beq.n	80044a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f06f 0208 	mvn.w	r2, #8
 8004472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2204      	movs	r2, #4
 8004478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8a7 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 800448e:	e005      	b.n	800449c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f899 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8aa 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01b      	beq.n	80044ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f06f 0210 	mvn.w	r2, #16
 80044be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2208      	movs	r2, #8
 80044c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f881 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 80044da:	e005      	b.n	80044e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f873 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f884 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00c      	beq.n	8004512 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f06f 0201 	mvn.w	r2, #1
 800450a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f851 	bl	80045b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00c      	beq.n	8004540 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9b0 	bl	80048a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00c      	beq.n	8004564 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800455c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9a8 	bl	80048b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00c      	beq.n	8004588 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f83e 	bl	8004604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0220 	mvn.w	r2, #32
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f970 	bl	800488c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a46      	ldr	r2, [pc, #280]	@ (8004744 <TIM_Base_SetConfig+0x12c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004636:	d00f      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a43      	ldr	r2, [pc, #268]	@ (8004748 <TIM_Base_SetConfig+0x130>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00b      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a42      	ldr	r2, [pc, #264]	@ (800474c <TIM_Base_SetConfig+0x134>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d007      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a41      	ldr	r2, [pc, #260]	@ (8004750 <TIM_Base_SetConfig+0x138>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a40      	ldr	r2, [pc, #256]	@ (8004754 <TIM_Base_SetConfig+0x13c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d108      	bne.n	800466a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a35      	ldr	r2, [pc, #212]	@ (8004744 <TIM_Base_SetConfig+0x12c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004678:	d027      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a32      	ldr	r2, [pc, #200]	@ (8004748 <TIM_Base_SetConfig+0x130>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d023      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a31      	ldr	r2, [pc, #196]	@ (800474c <TIM_Base_SetConfig+0x134>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a30      	ldr	r2, [pc, #192]	@ (8004750 <TIM_Base_SetConfig+0x138>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2f      	ldr	r2, [pc, #188]	@ (8004754 <TIM_Base_SetConfig+0x13c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d017      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2e      	ldr	r2, [pc, #184]	@ (8004758 <TIM_Base_SetConfig+0x140>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2d      	ldr	r2, [pc, #180]	@ (800475c <TIM_Base_SetConfig+0x144>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004760 <TIM_Base_SetConfig+0x148>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004764 <TIM_Base_SetConfig+0x14c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d007      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004768 <TIM_Base_SetConfig+0x150>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a29      	ldr	r2, [pc, #164]	@ (800476c <TIM_Base_SetConfig+0x154>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d108      	bne.n	80046dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <TIM_Base_SetConfig+0x12c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0xf8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a12      	ldr	r2, [pc, #72]	@ (8004754 <TIM_Base_SetConfig+0x13c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d103      	bne.n	8004718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d105      	bne.n	8004736 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	611a      	str	r2, [r3, #16]
  }
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40010400 	.word	0x40010400
 8004758:	40014000 	.word	0x40014000
 800475c:	40014400 	.word	0x40014400
 8004760:	40014800 	.word	0x40014800
 8004764:	40001800 	.word	0x40001800
 8004768:	40001c00 	.word	0x40001c00
 800476c:	40002000 	.word	0x40002000

08004770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004784:	2302      	movs	r3, #2
 8004786:	e06d      	b.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a30      	ldr	r2, [pc, #192]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d108      	bne.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a20      	ldr	r2, [pc, #128]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fa:	d01d      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1d      	ldr	r2, [pc, #116]	@ (8004878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1c      	ldr	r2, [pc, #112]	@ (800487c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1a      	ldr	r2, [pc, #104]	@ (8004880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a15      	ldr	r2, [pc, #84]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a16      	ldr	r2, [pc, #88]	@ (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a15      	ldr	r2, [pc, #84]	@ (8004888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d10c      	bne.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800483e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	4313      	orrs	r3, r2
 8004848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	40010000 	.word	0x40010000
 8004874:	40010400 	.word	0x40010400
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40014000 	.word	0x40014000
 8004888:	40001800 	.word	0x40001800

0800488c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e040      	b.n	800495c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc fb9a 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	@ 0x24
 80048f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fb16 	bl	8004f40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f8af 	bl	8004a78 <UART_SetConfig>
 800491a:	4603      	mov	r3, r0
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e01b      	b.n	800495c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fb95 	bl	8005084 <UART_CheckIdleState>
 800495a:	4603      	mov	r3, r0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	@ 0x28
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004978:	2b20      	cmp	r3, #32
 800497a:	d177      	bne.n	8004a6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_UART_Transmit+0x24>
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e070      	b.n	8004a6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2221      	movs	r2, #33	@ 0x21
 8004998:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800499a:	f7fc fdef 	bl	800157c <HAL_GetTick>
 800499e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	88fa      	ldrh	r2, [r7, #6]
 80049a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b8:	d108      	bne.n	80049cc <HAL_UART_Transmit+0x68>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e003      	b.n	80049d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049d4:	e02f      	b.n	8004a36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	2180      	movs	r1, #128	@ 0x80
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fbf7 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e03b      	b.n	8004a6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	3302      	adds	r3, #2
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	e007      	b.n	8004a24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3301      	adds	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1c9      	bne.n	80049d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2140      	movs	r1, #64	@ 0x40
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fbc1 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e005      	b.n	8004a6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e000      	b.n	8004a6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4ba6      	ldr	r3, [pc, #664]	@ (8004d3c <UART_SetConfig+0x2c4>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	6979      	ldr	r1, [r7, #20]
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a94      	ldr	r2, [pc, #592]	@ (8004d40 <UART_SetConfig+0x2c8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d120      	bne.n	8004b36 <UART_SetConfig+0xbe>
 8004af4:	4b93      	ldr	r3, [pc, #588]	@ (8004d44 <UART_SetConfig+0x2cc>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d816      	bhi.n	8004b30 <UART_SetConfig+0xb8>
 8004b02:	a201      	add	r2, pc, #4	@ (adr r2, 8004b08 <UART_SetConfig+0x90>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b19 	.word	0x08004b19
 8004b0c:	08004b25 	.word	0x08004b25
 8004b10:	08004b1f 	.word	0x08004b1f
 8004b14:	08004b2b 	.word	0x08004b2b
 8004b18:	2301      	movs	r3, #1
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e150      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	77fb      	strb	r3, [r7, #31]
 8004b22:	e14d      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004b24:	2304      	movs	r3, #4
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e14a      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e147      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004b30:	2310      	movs	r3, #16
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e144      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a83      	ldr	r2, [pc, #524]	@ (8004d48 <UART_SetConfig+0x2d0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d132      	bne.n	8004ba6 <UART_SetConfig+0x12e>
 8004b40:	4b80      	ldr	r3, [pc, #512]	@ (8004d44 <UART_SetConfig+0x2cc>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d828      	bhi.n	8004ba0 <UART_SetConfig+0x128>
 8004b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <UART_SetConfig+0xdc>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004ba1 	.word	0x08004ba1
 8004b5c:	08004ba1 	.word	0x08004ba1
 8004b60:	08004ba1 	.word	0x08004ba1
 8004b64:	08004b95 	.word	0x08004b95
 8004b68:	08004ba1 	.word	0x08004ba1
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004ba1 	.word	0x08004ba1
 8004b74:	08004b8f 	.word	0x08004b8f
 8004b78:	08004ba1 	.word	0x08004ba1
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba1 	.word	0x08004ba1
 8004b84:	08004b9b 	.word	0x08004b9b
 8004b88:	2300      	movs	r3, #0
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e118      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e115      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004b94:	2304      	movs	r3, #4
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e112      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e10f      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e10c      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a68      	ldr	r2, [pc, #416]	@ (8004d4c <UART_SetConfig+0x2d4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d120      	bne.n	8004bf2 <UART_SetConfig+0x17a>
 8004bb0:	4b64      	ldr	r3, [pc, #400]	@ (8004d44 <UART_SetConfig+0x2cc>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bba:	2b30      	cmp	r3, #48	@ 0x30
 8004bbc:	d013      	beq.n	8004be6 <UART_SetConfig+0x16e>
 8004bbe:	2b30      	cmp	r3, #48	@ 0x30
 8004bc0:	d814      	bhi.n	8004bec <UART_SetConfig+0x174>
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d009      	beq.n	8004bda <UART_SetConfig+0x162>
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d810      	bhi.n	8004bec <UART_SetConfig+0x174>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <UART_SetConfig+0x15c>
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	d006      	beq.n	8004be0 <UART_SetConfig+0x168>
 8004bd2:	e00b      	b.n	8004bec <UART_SetConfig+0x174>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e0f2      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e0ef      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004be0:	2304      	movs	r3, #4
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e0ec      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004be6:	2308      	movs	r3, #8
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e0e9      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004bec:	2310      	movs	r3, #16
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e0e6      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a56      	ldr	r2, [pc, #344]	@ (8004d50 <UART_SetConfig+0x2d8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d120      	bne.n	8004c3e <UART_SetConfig+0x1c6>
 8004bfc:	4b51      	ldr	r3, [pc, #324]	@ (8004d44 <UART_SetConfig+0x2cc>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c08:	d013      	beq.n	8004c32 <UART_SetConfig+0x1ba>
 8004c0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c0c:	d814      	bhi.n	8004c38 <UART_SetConfig+0x1c0>
 8004c0e:	2b80      	cmp	r3, #128	@ 0x80
 8004c10:	d009      	beq.n	8004c26 <UART_SetConfig+0x1ae>
 8004c12:	2b80      	cmp	r3, #128	@ 0x80
 8004c14:	d810      	bhi.n	8004c38 <UART_SetConfig+0x1c0>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <UART_SetConfig+0x1a8>
 8004c1a:	2b40      	cmp	r3, #64	@ 0x40
 8004c1c:	d006      	beq.n	8004c2c <UART_SetConfig+0x1b4>
 8004c1e:	e00b      	b.n	8004c38 <UART_SetConfig+0x1c0>
 8004c20:	2300      	movs	r3, #0
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e0cc      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c26:	2302      	movs	r3, #2
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e0c9      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e0c6      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c32:	2308      	movs	r3, #8
 8004c34:	77fb      	strb	r3, [r7, #31]
 8004c36:	e0c3      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e0c0      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a44      	ldr	r2, [pc, #272]	@ (8004d54 <UART_SetConfig+0x2dc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d125      	bne.n	8004c94 <UART_SetConfig+0x21c>
 8004c48:	4b3e      	ldr	r3, [pc, #248]	@ (8004d44 <UART_SetConfig+0x2cc>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c56:	d017      	beq.n	8004c88 <UART_SetConfig+0x210>
 8004c58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c5c:	d817      	bhi.n	8004c8e <UART_SetConfig+0x216>
 8004c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c62:	d00b      	beq.n	8004c7c <UART_SetConfig+0x204>
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c68:	d811      	bhi.n	8004c8e <UART_SetConfig+0x216>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <UART_SetConfig+0x1fe>
 8004c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c72:	d006      	beq.n	8004c82 <UART_SetConfig+0x20a>
 8004c74:	e00b      	b.n	8004c8e <UART_SetConfig+0x216>
 8004c76:	2300      	movs	r3, #0
 8004c78:	77fb      	strb	r3, [r7, #31]
 8004c7a:	e0a1      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e09e      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c82:	2304      	movs	r3, #4
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e09b      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c88:	2308      	movs	r3, #8
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e098      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c8e:	2310      	movs	r3, #16
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e095      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2f      	ldr	r2, [pc, #188]	@ (8004d58 <UART_SetConfig+0x2e0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d125      	bne.n	8004cea <UART_SetConfig+0x272>
 8004c9e:	4b29      	ldr	r3, [pc, #164]	@ (8004d44 <UART_SetConfig+0x2cc>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ca8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cac:	d017      	beq.n	8004cde <UART_SetConfig+0x266>
 8004cae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cb2:	d817      	bhi.n	8004ce4 <UART_SetConfig+0x26c>
 8004cb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb8:	d00b      	beq.n	8004cd2 <UART_SetConfig+0x25a>
 8004cba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cbe:	d811      	bhi.n	8004ce4 <UART_SetConfig+0x26c>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <UART_SetConfig+0x254>
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc8:	d006      	beq.n	8004cd8 <UART_SetConfig+0x260>
 8004cca:	e00b      	b.n	8004ce4 <UART_SetConfig+0x26c>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e076      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e073      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e070      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004cde:	2308      	movs	r3, #8
 8004ce0:	77fb      	strb	r3, [r7, #31]
 8004ce2:	e06d      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e06a      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1b      	ldr	r2, [pc, #108]	@ (8004d5c <UART_SetConfig+0x2e4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d138      	bne.n	8004d66 <UART_SetConfig+0x2ee>
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <UART_SetConfig+0x2cc>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004cfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d02:	d017      	beq.n	8004d34 <UART_SetConfig+0x2bc>
 8004d04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d08:	d82a      	bhi.n	8004d60 <UART_SetConfig+0x2e8>
 8004d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d0e:	d00b      	beq.n	8004d28 <UART_SetConfig+0x2b0>
 8004d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d14:	d824      	bhi.n	8004d60 <UART_SetConfig+0x2e8>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <UART_SetConfig+0x2aa>
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1e:	d006      	beq.n	8004d2e <UART_SetConfig+0x2b6>
 8004d20:	e01e      	b.n	8004d60 <UART_SetConfig+0x2e8>
 8004d22:	2300      	movs	r3, #0
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e04b      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e048      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004d2e:	2304      	movs	r3, #4
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e045      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004d34:	2308      	movs	r3, #8
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e042      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004d3a:	bf00      	nop
 8004d3c:	efff69f3 	.word	0xefff69f3
 8004d40:	40011000 	.word	0x40011000
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40004400 	.word	0x40004400
 8004d4c:	40004800 	.word	0x40004800
 8004d50:	40004c00 	.word	0x40004c00
 8004d54:	40005000 	.word	0x40005000
 8004d58:	40011400 	.word	0x40011400
 8004d5c:	40007800 	.word	0x40007800
 8004d60:	2310      	movs	r3, #16
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e02c      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a72      	ldr	r2, [pc, #456]	@ (8004f34 <UART_SetConfig+0x4bc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d125      	bne.n	8004dbc <UART_SetConfig+0x344>
 8004d70:	4b71      	ldr	r3, [pc, #452]	@ (8004f38 <UART_SetConfig+0x4c0>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004d7a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d7e:	d017      	beq.n	8004db0 <UART_SetConfig+0x338>
 8004d80:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d84:	d817      	bhi.n	8004db6 <UART_SetConfig+0x33e>
 8004d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d8a:	d00b      	beq.n	8004da4 <UART_SetConfig+0x32c>
 8004d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d90:	d811      	bhi.n	8004db6 <UART_SetConfig+0x33e>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <UART_SetConfig+0x326>
 8004d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d9a:	d006      	beq.n	8004daa <UART_SetConfig+0x332>
 8004d9c:	e00b      	b.n	8004db6 <UART_SetConfig+0x33e>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e00d      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004da4:	2302      	movs	r3, #2
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e00a      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004daa:	2304      	movs	r3, #4
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e007      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004db0:	2308      	movs	r3, #8
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e004      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004db6:	2310      	movs	r3, #16
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e001      	b.n	8004dc0 <UART_SetConfig+0x348>
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc8:	d15b      	bne.n	8004e82 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004dca:	7ffb      	ldrb	r3, [r7, #31]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d828      	bhi.n	8004e22 <UART_SetConfig+0x3aa>
 8004dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <UART_SetConfig+0x360>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e23 	.word	0x08004e23
 8004de8:	08004e13 	.word	0x08004e13
 8004dec:	08004e23 	.word	0x08004e23
 8004df0:	08004e23 	.word	0x08004e23
 8004df4:	08004e23 	.word	0x08004e23
 8004df8:	08004e1b 	.word	0x08004e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7fe fcea 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004e00:	61b8      	str	r0, [r7, #24]
        break;
 8004e02:	e013      	b.n	8004e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7fe fcfa 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8004e08:	61b8      	str	r0, [r7, #24]
        break;
 8004e0a:	e00f      	b.n	8004e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004f3c <UART_SetConfig+0x4c4>)
 8004e0e:	61bb      	str	r3, [r7, #24]
        break;
 8004e10:	e00c      	b.n	8004e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e12:	f7fe fc0d 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8004e16:	61b8      	str	r0, [r7, #24]
        break;
 8004e18:	e008      	b.n	8004e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1e:	61bb      	str	r3, [r7, #24]
        break;
 8004e20:	e004      	b.n	8004e2c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	77bb      	strb	r3, [r7, #30]
        break;
 8004e2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d074      	beq.n	8004f1c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	005a      	lsls	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	2b0f      	cmp	r3, #15
 8004e4c:	d916      	bls.n	8004e7c <UART_SetConfig+0x404>
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e54:	d212      	bcs.n	8004e7c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f023 030f 	bic.w	r3, r3, #15
 8004e5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	89fa      	ldrh	r2, [r7, #14]
 8004e78:	60da      	str	r2, [r3, #12]
 8004e7a:	e04f      	b.n	8004f1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	77bb      	strb	r3, [r7, #30]
 8004e80:	e04c      	b.n	8004f1c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e82:	7ffb      	ldrb	r3, [r7, #31]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d828      	bhi.n	8004eda <UART_SetConfig+0x462>
 8004e88:	a201      	add	r2, pc, #4	@ (adr r2, 8004e90 <UART_SetConfig+0x418>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ebd 	.word	0x08004ebd
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	08004edb 	.word	0x08004edb
 8004ea0:	08004ecb 	.word	0x08004ecb
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004edb 	.word	0x08004edb
 8004eac:	08004edb 	.word	0x08004edb
 8004eb0:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb4:	f7fe fc8e 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004eb8:	61b8      	str	r0, [r7, #24]
        break;
 8004eba:	e013      	b.n	8004ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fe fc9e 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8004ec0:	61b8      	str	r0, [r7, #24]
        break;
 8004ec2:	e00f      	b.n	8004ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f3c <UART_SetConfig+0x4c4>)
 8004ec6:	61bb      	str	r3, [r7, #24]
        break;
 8004ec8:	e00c      	b.n	8004ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fe fbb1 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8004ece:	61b8      	str	r0, [r7, #24]
        break;
 8004ed0:	e008      	b.n	8004ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ed6:	61bb      	str	r3, [r7, #24]
        break;
 8004ed8:	e004      	b.n	8004ee4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ee2:	bf00      	nop
    }

    if (pclk != 0U)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d018      	beq.n	8004f1c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	085a      	lsrs	r2, r3, #1
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	441a      	add	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b0f      	cmp	r3, #15
 8004f02:	d909      	bls.n	8004f18 <UART_SetConfig+0x4a0>
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f0a:	d205      	bcs.n	8004f18 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	e001      	b.n	8004f1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f28:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40007c00 	.word	0x40007c00
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	00f42400 	.word	0x00f42400

08004f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01a      	beq.n	8005056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800503e:	d10a      	bne.n	8005056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b098      	sub	sp, #96	@ 0x60
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005094:	f7fc fa72 	bl	800157c <HAL_GetTick>
 8005098:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d12e      	bne.n	8005106 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b0:	2200      	movs	r2, #0
 80050b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f88c 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d021      	beq.n	8005106 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e6      	bne.n	80050c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e062      	b.n	80051cc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b04      	cmp	r3, #4
 8005112:	d149      	bne.n	80051a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005114:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800511c:	2200      	movs	r2, #0
 800511e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f856 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d03c      	beq.n	80051a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	623b      	str	r3, [r7, #32]
   return(result);
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800514c:	633b      	str	r3, [r7, #48]	@ 0x30
 800514e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e6      	bne.n	800512e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005180:	61fa      	str	r2, [r7, #28]
 8005182:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	69b9      	ldr	r1, [r7, #24]
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	617b      	str	r3, [r7, #20]
   return(result);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e5      	bne.n	8005160 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e011      	b.n	80051cc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3758      	adds	r7, #88	@ 0x58
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	e04f      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d04b      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fc f9c5 	bl	800157c <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <UART_WaitOnFlagUntilTimeout+0x30>
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e04e      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d037      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b80      	cmp	r3, #128	@ 0x80
 800521a:	d034      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b40      	cmp	r3, #64	@ 0x40
 8005220:	d031      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d110      	bne.n	8005252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2208      	movs	r2, #8
 8005236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f838 	bl	80052ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2208      	movs	r2, #8
 8005242:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e029      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800525c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005260:	d111      	bne.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800526a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f81e 	bl	80052ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e00f      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	bf0c      	ite	eq
 8005296:	2301      	moveq	r3, #1
 8005298:	2300      	movne	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d0a0      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b095      	sub	sp, #84	@ 0x54
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e6      	bne.n	80052b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3308      	adds	r3, #8
 80052ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005308:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800530a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800530e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e5      	bne.n	80052e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005320:	2b01      	cmp	r3, #1
 8005322:	d118      	bne.n	8005356 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	60bb      	str	r3, [r7, #8]
   return(result);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f023 0310 	bic.w	r3, r3, #16
 8005338:	647b      	str	r3, [r7, #68]	@ 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6979      	ldr	r1, [r7, #20]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	613b      	str	r3, [r7, #16]
   return(result);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e6      	bne.n	8005324 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800536a:	bf00      	nop
 800536c:	3754      	adds	r7, #84	@ 0x54
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800537c:	4904      	ldr	r1, [pc, #16]	@ (8005390 <MX_FATFS_Init+0x18>)
 800537e:	4805      	ldr	r0, [pc, #20]	@ (8005394 <MX_FATFS_Init+0x1c>)
 8005380:	f003 f9de 	bl	8008740 <FATFS_LinkDriver>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	4b03      	ldr	r3, [pc, #12]	@ (8005398 <MX_FATFS_Init+0x20>)
 800538a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800538c:	bf00      	nop
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20003cb8 	.word	0x20003cb8
 8005394:	2000000c 	.word	0x2000000c
 8005398:	20003cb4 	.word	0x20003cb4

0800539c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80053a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <USER_initialize+0x24>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
    return Stat;
 80053bc:	4b04      	ldr	r3, [pc, #16]	@ (80053d0 <USER_initialize+0x24>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000009 	.word	0x20000009

080053d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80053de:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <USER_status+0x24>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80053e4:	4b04      	ldr	r3, [pc, #16]	@ (80053f8 <USER_status+0x24>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000009 	.word	0x20000009

080053fc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800540c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	4603      	mov	r3, r0
 8005428:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800542a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	603a      	str	r2, [r7, #0]
 8005442:	71fb      	strb	r3, [r7, #7]
 8005444:	460b      	mov	r3, r1
 8005446:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
    return res;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	4a08      	ldr	r2, [pc, #32]	@ (800548c <disk_status+0x30>)
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	79fa      	ldrb	r2, [r7, #7]
 8005474:	4905      	ldr	r1, [pc, #20]	@ (800548c <disk_status+0x30>)
 8005476:	440a      	add	r2, r1
 8005478:	7a12      	ldrb	r2, [r2, #8]
 800547a:	4610      	mov	r0, r2
 800547c:	4798      	blx	r3
 800547e:	4603      	mov	r3, r0
 8005480:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20003ee4 	.word	0x20003ee4

08005490 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	4a0d      	ldr	r2, [pc, #52]	@ (80054d8 <disk_initialize+0x48>)
 80054a2:	5cd3      	ldrb	r3, [r2, r3]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d111      	bne.n	80054cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	4a0b      	ldr	r2, [pc, #44]	@ (80054d8 <disk_initialize+0x48>)
 80054ac:	2101      	movs	r1, #1
 80054ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	4a09      	ldr	r2, [pc, #36]	@ (80054d8 <disk_initialize+0x48>)
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	79fa      	ldrb	r2, [r7, #7]
 80054be:	4906      	ldr	r1, [pc, #24]	@ (80054d8 <disk_initialize+0x48>)
 80054c0:	440a      	add	r2, r1
 80054c2:	7a12      	ldrb	r2, [r2, #8]
 80054c4:	4610      	mov	r0, r2
 80054c6:	4798      	blx	r3
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20003ee4 	.word	0x20003ee4

080054dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	4603      	mov	r3, r0
 80054ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005518 <disk_read+0x3c>)
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	689c      	ldr	r4, [r3, #8]
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	4a07      	ldr	r2, [pc, #28]	@ (8005518 <disk_read+0x3c>)
 80054fc:	4413      	add	r3, r2
 80054fe:	7a18      	ldrb	r0, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	47a0      	blx	r4
 8005508:	4603      	mov	r3, r0
 800550a:	75fb      	strb	r3, [r7, #23]
  return res;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	bd90      	pop	{r4, r7, pc}
 8005516:	bf00      	nop
 8005518:	20003ee4 	.word	0x20003ee4

0800551c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	4a0a      	ldr	r2, [pc, #40]	@ (8005558 <disk_write+0x3c>)
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	68dc      	ldr	r4, [r3, #12]
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	4a07      	ldr	r2, [pc, #28]	@ (8005558 <disk_write+0x3c>)
 800553c:	4413      	add	r3, r2
 800553e:	7a18      	ldrb	r0, [r3, #8]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	47a0      	blx	r4
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]
  return res;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd90      	pop	{r4, r7, pc}
 8005556:	bf00      	nop
 8005558:	20003ee4 	.word	0x20003ee4

0800555c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	603a      	str	r2, [r7, #0]
 8005566:	71fb      	strb	r3, [r7, #7]
 8005568:	460b      	mov	r3, r1
 800556a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	4a09      	ldr	r2, [pc, #36]	@ (8005594 <disk_ioctl+0x38>)
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	79fa      	ldrb	r2, [r7, #7]
 800557a:	4906      	ldr	r1, [pc, #24]	@ (8005594 <disk_ioctl+0x38>)
 800557c:	440a      	add	r2, r1
 800557e:	7a10      	ldrb	r0, [r2, #8]
 8005580:	79b9      	ldrb	r1, [r7, #6]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	4798      	blx	r3
 8005586:	4603      	mov	r3, r0
 8005588:	73fb      	strb	r3, [r7, #15]
  return res;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20003ee4 	.word	0x20003ee4

08005598 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3301      	adds	r3, #1
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80055a8:	89fb      	ldrh	r3, [r7, #14]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	b21a      	sxth	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	b21b      	sxth	r3, r3
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b21b      	sxth	r3, r3
 80055b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80055ba:	89fb      	ldrh	r3, [r7, #14]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3303      	adds	r3, #3
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	3202      	adds	r2, #2
 80055e0:	7812      	ldrb	r2, [r2, #0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	3201      	adds	r2, #1
 80055ee:	7812      	ldrb	r2, [r2, #0]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	7812      	ldrb	r2, [r2, #0]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8005600:	68fb      	ldr	r3, [r7, #12]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	887a      	ldrh	r2, [r7, #2]
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	887b      	ldrh	r3, [r7, #2]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	887a      	ldrh	r2, [r7, #2]
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	0a1b      	lsrs	r3, r3, #8
 800565e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00d      	beq.n	80056d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	1c53      	adds	r3, r2, #1
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	6179      	str	r1, [r7, #20]
 80056c2:	7812      	ldrb	r2, [r2, #0]
 80056c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	607b      	str	r3, [r7, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f1      	bne.n	80056b6 <mem_cpy+0x1a>
	}
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80056de:	b480      	push	{r7}
 80056e0:	b087      	sub	sp, #28
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	617a      	str	r2, [r7, #20]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f3      	bne.n	80056ee <mem_set+0x10>
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005714:	b480      	push	{r7}
 8005716:	b089      	sub	sp, #36	@ 0x24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	61fa      	str	r2, [r7, #28]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4619      	mov	r1, r3
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	61ba      	str	r2, [r7, #24]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	1acb      	subs	r3, r1, r3
 8005740:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3b01      	subs	r3, #1
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <mem_cmp+0x40>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0eb      	beq.n	800572c <mem_cmp+0x18>

	return r;
 8005754:	697b      	ldr	r3, [r7, #20]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3724      	adds	r7, #36	@ 0x24
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800576c:	e002      	b.n	8005774 <chk_chr+0x12>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3301      	adds	r3, #1
 8005772:	607b      	str	r3, [r7, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <chk_chr+0x26>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	4293      	cmp	r3, r2
 8005786:	d1f2      	bne.n	800576e <chk_chr+0xc>
	return *str;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	781b      	ldrb	r3, [r3, #0]
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057a2:	2300      	movs	r3, #0
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e029      	b.n	8005800 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80057ac:	4a27      	ldr	r2, [pc, #156]	@ (800584c <chk_lock+0xb4>)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	4413      	add	r3, r2
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01d      	beq.n	80057f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80057ba:	4a24      	ldr	r2, [pc, #144]	@ (800584c <chk_lock+0xb4>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	4413      	add	r3, r2
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d116      	bne.n	80057fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80057cc:	4a1f      	ldr	r2, [pc, #124]	@ (800584c <chk_lock+0xb4>)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	4413      	add	r3, r2
 80057d4:	3304      	adds	r3, #4
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80057dc:	429a      	cmp	r2, r3
 80057de:	d10c      	bne.n	80057fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80057e0:	4a1a      	ldr	r2, [pc, #104]	@ (800584c <chk_lock+0xb4>)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	3308      	adds	r3, #8
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d102      	bne.n	80057fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80057f4:	e007      	b.n	8005806 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3301      	adds	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d9d2      	bls.n	80057ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d109      	bne.n	8005820 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <chk_lock+0x80>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d101      	bne.n	800581c <chk_lock+0x84>
 8005818:	2300      	movs	r3, #0
 800581a:	e010      	b.n	800583e <chk_lock+0xa6>
 800581c:	2312      	movs	r3, #18
 800581e:	e00e      	b.n	800583e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d108      	bne.n	8005838 <chk_lock+0xa0>
 8005826:	4a09      	ldr	r2, [pc, #36]	@ (800584c <chk_lock+0xb4>)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	4413      	add	r3, r2
 800582e:	330c      	adds	r3, #12
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005836:	d101      	bne.n	800583c <chk_lock+0xa4>
 8005838:	2310      	movs	r3, #16
 800583a:	e000      	b.n	800583e <chk_lock+0xa6>
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20003cc4 	.word	0x20003cc4

08005850 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	e002      	b.n	8005862 <enq_lock+0x12>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3301      	adds	r3, #1
 8005860:	607b      	str	r3, [r7, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d806      	bhi.n	8005876 <enq_lock+0x26>
 8005868:	4a09      	ldr	r2, [pc, #36]	@ (8005890 <enq_lock+0x40>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4413      	add	r3, r2
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f2      	bne.n	800585c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b02      	cmp	r3, #2
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20003cc4 	.word	0x20003cc4

08005894 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e01f      	b.n	80058e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80058a4:	4a41      	ldr	r2, [pc, #260]	@ (80059ac <inc_lock+0x118>)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	4413      	add	r3, r2
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d113      	bne.n	80058de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80058b6:	4a3d      	ldr	r2, [pc, #244]	@ (80059ac <inc_lock+0x118>)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	4413      	add	r3, r2
 80058be:	3304      	adds	r3, #4
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d109      	bne.n	80058de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80058ca:	4a38      	ldr	r2, [pc, #224]	@ (80059ac <inc_lock+0x118>)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	4413      	add	r3, r2
 80058d2:	3308      	adds	r3, #8
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80058da:	429a      	cmp	r2, r3
 80058dc:	d006      	beq.n	80058ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3301      	adds	r3, #1
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d9dc      	bls.n	80058a4 <inc_lock+0x10>
 80058ea:	e000      	b.n	80058ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80058ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d132      	bne.n	800595a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e002      	b.n	8005900 <inc_lock+0x6c>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3301      	adds	r3, #1
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d806      	bhi.n	8005914 <inc_lock+0x80>
 8005906:	4a29      	ldr	r2, [pc, #164]	@ (80059ac <inc_lock+0x118>)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	4413      	add	r3, r2
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f2      	bne.n	80058fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d101      	bne.n	800591e <inc_lock+0x8a>
 800591a:	2300      	movs	r3, #0
 800591c:	e040      	b.n	80059a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4922      	ldr	r1, [pc, #136]	@ (80059ac <inc_lock+0x118>)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	440b      	add	r3, r1
 800592a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	491e      	ldr	r1, [pc, #120]	@ (80059ac <inc_lock+0x118>)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	440b      	add	r3, r1
 8005938:	3304      	adds	r3, #4
 800593a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695a      	ldr	r2, [r3, #20]
 8005940:	491a      	ldr	r1, [pc, #104]	@ (80059ac <inc_lock+0x118>)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	440b      	add	r3, r1
 8005948:	3308      	adds	r3, #8
 800594a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800594c:	4a17      	ldr	r2, [pc, #92]	@ (80059ac <inc_lock+0x118>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	4413      	add	r3, r2
 8005954:	330c      	adds	r3, #12
 8005956:	2200      	movs	r2, #0
 8005958:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <inc_lock+0xe0>
 8005960:	4a12      	ldr	r2, [pc, #72]	@ (80059ac <inc_lock+0x118>)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	4413      	add	r3, r2
 8005968:	330c      	adds	r3, #12
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <inc_lock+0xe0>
 8005970:	2300      	movs	r3, #0
 8005972:	e015      	b.n	80059a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d108      	bne.n	800598c <inc_lock+0xf8>
 800597a:	4a0c      	ldr	r2, [pc, #48]	@ (80059ac <inc_lock+0x118>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	4413      	add	r3, r2
 8005982:	330c      	adds	r3, #12
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	e001      	b.n	8005990 <inc_lock+0xfc>
 800598c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005990:	4906      	ldr	r1, [pc, #24]	@ (80059ac <inc_lock+0x118>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	440b      	add	r3, r1
 8005998:	330c      	adds	r3, #12
 800599a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3301      	adds	r3, #1
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	20003cc4 	.word	0x20003cc4

080059b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d825      	bhi.n	8005a10 <dec_lock+0x60>
		n = Files[i].ctr;
 80059c4:	4a17      	ldr	r2, [pc, #92]	@ (8005a24 <dec_lock+0x74>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	4413      	add	r3, r2
 80059cc:	330c      	adds	r3, #12
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80059d2:	89fb      	ldrh	r3, [r7, #14]
 80059d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d8:	d101      	bne.n	80059de <dec_lock+0x2e>
 80059da:	2300      	movs	r3, #0
 80059dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80059de:	89fb      	ldrh	r3, [r7, #14]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <dec_lock+0x3a>
 80059e4:	89fb      	ldrh	r3, [r7, #14]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80059ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005a24 <dec_lock+0x74>)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	4413      	add	r3, r2
 80059f2:	330c      	adds	r3, #12
 80059f4:	89fa      	ldrh	r2, [r7, #14]
 80059f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80059f8:	89fb      	ldrh	r3, [r7, #14]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d105      	bne.n	8005a0a <dec_lock+0x5a>
 80059fe:	4a09      	ldr	r2, [pc, #36]	@ (8005a24 <dec_lock+0x74>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	4413      	add	r3, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	737b      	strb	r3, [r7, #13]
 8005a0e:	e001      	b.n	8005a14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a10:	2302      	movs	r3, #2
 8005a12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a14:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20003cc4 	.word	0x20003cc4

08005a28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e010      	b.n	8005a58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a36:	4a0d      	ldr	r2, [pc, #52]	@ (8005a6c <clear_lock+0x44>)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	4413      	add	r3, r2
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d105      	bne.n	8005a52 <clear_lock+0x2a>
 8005a46:	4a09      	ldr	r2, [pc, #36]	@ (8005a6c <clear_lock+0x44>)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	4413      	add	r3, r2
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d9eb      	bls.n	8005a36 <clear_lock+0xe>
	}
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20003cc4 	.word	0x20003cc4

08005a70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	78db      	ldrb	r3, [r3, #3]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d034      	beq.n	8005aee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7858      	ldrb	r0, [r3, #1]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a94:	2301      	movs	r3, #1
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	f7ff fd40 	bl	800551c <disk_write>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
 8005aa6:	e022      	b.n	8005aee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	1ad2      	subs	r2, r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d217      	bcs.n	8005aee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	789b      	ldrb	r3, [r3, #2]
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	e010      	b.n	8005ae8 <sync_window+0x78>
					wsect += fs->fsize;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4413      	add	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	7858      	ldrb	r0, [r3, #1]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005ada:	2301      	movs	r3, #1
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	f7ff fd1d 	bl	800551c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d8eb      	bhi.n	8005ac6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d01b      	beq.n	8005b48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ffad 	bl	8005a70 <sync_window>
 8005b16:	4603      	mov	r3, r0
 8005b18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d113      	bne.n	8005b48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	7858      	ldrb	r0, [r3, #1]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	f7ff fcd5 	bl	80054dc <disk_read>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ff87 	bl	8005a70 <sync_window>
 8005b62:	4603      	mov	r3, r0
 8005b64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d159      	bne.n	8005c20 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d149      	bne.n	8005c08 <sync_fs+0xb4>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	791b      	ldrb	r3, [r3, #4]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d145      	bne.n	8005c08 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	899b      	ldrh	r3, [r3, #12]
 8005b86:	461a      	mov	r2, r3
 8005b88:	2100      	movs	r1, #0
 8005b8a:	f7ff fda8 	bl	80056de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3338      	adds	r3, #56	@ 0x38
 8005b92:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005b96:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fd37 	bl	800560e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3338      	adds	r3, #56	@ 0x38
 8005ba4:	4921      	ldr	r1, [pc, #132]	@ (8005c2c <sync_fs+0xd8>)
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fd4c 	bl	8005644 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3338      	adds	r3, #56	@ 0x38
 8005bb0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005bb4:	491e      	ldr	r1, [pc, #120]	@ (8005c30 <sync_fs+0xdc>)
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff fd44 	bl	8005644 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3338      	adds	r3, #56	@ 0x38
 8005bc0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f7ff fd3a 	bl	8005644 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3338      	adds	r3, #56	@ 0x38
 8005bd4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7ff fd30 	bl	8005644 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	7858      	ldrb	r0, [r3, #1]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f7ff fc8d 	bl	800551c <disk_write>
			fs->fsi_flag = 0;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	785b      	ldrb	r3, [r3, #1]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2100      	movs	r1, #0
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fca3 	bl	800555c <disk_ioctl>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <sync_fs+0xcc>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	41615252 	.word	0x41615252
 8005c30:	61417272 	.word	0x61417272

08005c34 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	3b02      	subs	r3, #2
 8005c42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	3b02      	subs	r3, #2
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d301      	bcc.n	8005c54 <clust2sect+0x20>
 8005c50:	2300      	movs	r3, #0
 8005c52:	e008      	b.n	8005c66 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	895b      	ldrh	r3, [r3, #10]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	fb03 f202 	mul.w	r2, r3, r2
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c64:	4413      	add	r3, r2
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b086      	sub	sp, #24
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d904      	bls.n	8005c92 <get_fat+0x20>
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d302      	bcc.n	8005c98 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005c92:	2301      	movs	r3, #1
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e0ba      	b.n	8005e0e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005c98:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	f000 8082 	beq.w	8005dac <get_fat+0x13a>
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	f300 80a6 	bgt.w	8005dfa <get_fat+0x188>
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d002      	beq.n	8005cb8 <get_fat+0x46>
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d055      	beq.n	8005d62 <get_fat+0xf0>
 8005cb6:	e0a0      	b.n	8005dfa <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	085b      	lsrs	r3, r3, #1
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	899b      	ldrh	r3, [r3, #12]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6938      	ldr	r0, [r7, #16]
 8005cdc:	f7ff ff0c 	bl	8005af8 <move_window>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f040 808c 	bne.w	8005e00 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	60fa      	str	r2, [r7, #12]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	8992      	ldrh	r2, [r2, #12]
 8005cf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cf6:	fb01 f202 	mul.w	r2, r1, r2
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	899b      	ldrh	r3, [r3, #12]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d16:	4413      	add	r3, r2
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6938      	ldr	r0, [r7, #16]
 8005d1c:	f7ff feec 	bl	8005af8 <move_window>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d16e      	bne.n	8005e04 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	899b      	ldrh	r3, [r3, #12]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d32:	fb01 f202 	mul.w	r2, r1, r2
 8005d36:	1a9b      	subs	r3, r3, r2
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <get_fat+0xe6>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	e002      	b.n	8005d5e <get_fat+0xec>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5e:	617b      	str	r3, [r7, #20]
			break;
 8005d60:	e055      	b.n	8005e0e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	899b      	ldrh	r3, [r3, #12]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	4619      	mov	r1, r3
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d76:	4413      	add	r3, r2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6938      	ldr	r0, [r7, #16]
 8005d7c:	f7ff febc 	bl	8005af8 <move_window>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d140      	bne.n	8005e08 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	8992      	ldrh	r2, [r2, #12]
 8005d94:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d98:	fb00 f202 	mul.w	r2, r0, r2
 8005d9c:	1a9b      	subs	r3, r3, r2
 8005d9e:	440b      	add	r3, r1
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fbf9 	bl	8005598 <ld_word>
 8005da6:	4603      	mov	r3, r0
 8005da8:	617b      	str	r3, [r7, #20]
			break;
 8005daa:	e030      	b.n	8005e0e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	899b      	ldrh	r3, [r3, #12]
 8005db4:	089b      	lsrs	r3, r3, #2
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	4619      	mov	r1, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dc0:	4413      	add	r3, r2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6938      	ldr	r0, [r7, #16]
 8005dc6:	f7ff fe97 	bl	8005af8 <move_window>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d11d      	bne.n	8005e0c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	8992      	ldrh	r2, [r2, #12]
 8005dde:	fbb3 f0f2 	udiv	r0, r3, r2
 8005de2:	fb00 f202 	mul.w	r2, r0, r2
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	440b      	add	r3, r1
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fbec 	bl	80055c8 <ld_dword>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005df6:	617b      	str	r3, [r7, #20]
			break;
 8005df8:	e009      	b.n	8005e0e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	e006      	b.n	8005e0e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e00:	bf00      	nop
 8005e02:	e004      	b.n	8005e0e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e04:	bf00      	nop
 8005e06:	e002      	b.n	8005e0e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e08:	bf00      	nop
 8005e0a:	e000      	b.n	8005e0e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e0c:	bf00      	nop
		}
	}

	return val;
 8005e0e:	697b      	ldr	r3, [r7, #20]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b089      	sub	sp, #36	@ 0x24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005e24:	2302      	movs	r3, #2
 8005e26:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	f240 8109 	bls.w	8006042 <put_fat+0x22a>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	f080 8103 	bcs.w	8006042 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	f000 80b6 	beq.w	8005fb2 <put_fat+0x19a>
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	f300 80fb 	bgt.w	8006042 <put_fat+0x22a>
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d003      	beq.n	8005e58 <put_fat+0x40>
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	f000 8083 	beq.w	8005f5c <put_fat+0x144>
 8005e56:	e0f4      	b.n	8006042 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	61bb      	str	r3, [r7, #24]
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4413      	add	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	899b      	ldrh	r3, [r3, #12]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e76:	4413      	add	r3, r2
 8005e78:	4619      	mov	r1, r3
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff fe3c 	bl	8005af8 <move_window>
 8005e80:	4603      	mov	r3, r0
 8005e82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e84:	7ffb      	ldrb	r3, [r7, #31]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 80d4 	bne.w	8006034 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	61ba      	str	r2, [r7, #24]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	8992      	ldrh	r2, [r2, #12]
 8005e9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ea0:	fb00 f202 	mul.w	r2, r0, r2
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00d      	beq.n	8005ed0 <put_fat+0xb8>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	b25a      	sxtb	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	b25b      	sxtb	r3, r3
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	b25b      	sxtb	r3, r3
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e001      	b.n	8005ed4 <put_fat+0xbc>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	899b      	ldrh	r3, [r3, #12]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eee:	4413      	add	r3, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f7ff fe00 	bl	8005af8 <move_window>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005efc:	7ffb      	ldrb	r3, [r7, #31]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 809a 	bne.w	8006038 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	899b      	ldrh	r3, [r3, #12]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f16:	fb00 f202 	mul.w	r2, r0, r2
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <put_fat+0x11a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	e00e      	b.n	8005f50 <put_fat+0x138>
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	b25b      	sxtb	r3, r3
 8005f38:	f023 030f 	bic.w	r3, r3, #15
 8005f3c:	b25a      	sxtb	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	b25b      	sxtb	r3, r3
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	b25b      	sxtb	r3, r3
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	b25b      	sxtb	r3, r3
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	70da      	strb	r2, [r3, #3]
			break;
 8005f5a:	e072      	b.n	8006042 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	899b      	ldrh	r3, [r3, #12]
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4619      	mov	r1, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f70:	4413      	add	r3, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fdbf 	bl	8005af8 <move_window>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f7e:	7ffb      	ldrb	r3, [r7, #31]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d15b      	bne.n	800603c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	8992      	ldrh	r2, [r2, #12]
 8005f92:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f96:	fb00 f202 	mul.w	r2, r0, r2
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	b292      	uxth	r2, r2
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fb32 	bl	800560e <st_word>
			fs->wflag = 1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	70da      	strb	r2, [r3, #3]
			break;
 8005fb0:	e047      	b.n	8006042 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	899b      	ldrh	r3, [r3, #12]
 8005fba:	089b      	lsrs	r3, r3, #2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	4619      	mov	r1, r3
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff fd94 	bl	8005af8 <move_window>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005fd4:	7ffb      	ldrb	r3, [r7, #31]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d132      	bne.n	8006040 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	8992      	ldrh	r2, [r2, #12]
 8005fee:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ff2:	fb00 f202 	mul.w	r2, r0, r2
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff fae4 	bl	80055c8 <ld_dword>
 8006000:	4603      	mov	r3, r0
 8006002:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006006:	4323      	orrs	r3, r4
 8006008:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	8992      	ldrh	r2, [r2, #12]
 8006018:	fbb3 f0f2 	udiv	r0, r3, r2
 800601c:	fb00 f202 	mul.w	r2, r0, r2
 8006020:	1a9b      	subs	r3, r3, r2
 8006022:	440b      	add	r3, r1
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fb0c 	bl	8005644 <st_dword>
			fs->wflag = 1;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	70da      	strb	r2, [r3, #3]
			break;
 8006032:	e006      	b.n	8006042 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006034:	bf00      	nop
 8006036:	e004      	b.n	8006042 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006038:	bf00      	nop
 800603a:	e002      	b.n	8006042 <put_fat+0x22a>
			if (res != FR_OK) break;
 800603c:	bf00      	nop
 800603e:	e000      	b.n	8006042 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006040:	bf00      	nop
		}
	}
	return res;
 8006042:	7ffb      	ldrb	r3, [r7, #31]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3724      	adds	r7, #36	@ 0x24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd90      	pop	{r4, r7, pc}

0800604c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d904      	bls.n	8006072 <remove_chain+0x26>
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d301      	bcc.n	8006076 <remove_chain+0x2a>
 8006072:	2302      	movs	r3, #2
 8006074:	e04b      	b.n	800610e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800607c:	f04f 32ff 	mov.w	r2, #4294967295
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	69b8      	ldr	r0, [r7, #24]
 8006084:	f7ff fec8 	bl	8005e18 <put_fat>
 8006088:	4603      	mov	r3, r0
 800608a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800608c:	7ffb      	ldrb	r3, [r7, #31]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <remove_chain+0x4a>
 8006092:	7ffb      	ldrb	r3, [r7, #31]
 8006094:	e03b      	b.n	800610e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff fdea 	bl	8005c72 <get_fat>
 800609e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d031      	beq.n	800610a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <remove_chain+0x64>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e02e      	b.n	800610e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b6:	d101      	bne.n	80060bc <remove_chain+0x70>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e028      	b.n	800610e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80060bc:	2200      	movs	r2, #0
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	69b8      	ldr	r0, [r7, #24]
 80060c2:	f7ff fea9 	bl	8005e18 <put_fat>
 80060c6:	4603      	mov	r3, r0
 80060c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80060ca:	7ffb      	ldrb	r3, [r7, #31]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <remove_chain+0x88>
 80060d0:	7ffb      	ldrb	r3, [r7, #31]
 80060d2:	e01c      	b.n	800610e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	699a      	ldr	r2, [r3, #24]
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	3b02      	subs	r3, #2
 80060de:	429a      	cmp	r2, r3
 80060e0:	d20b      	bcs.n	80060fa <remove_chain+0xae>
			fs->free_clst++;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	791b      	ldrb	r3, [r3, #4]
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d3c6      	bcc.n	8006096 <remove_chain+0x4a>
 8006108:	e000      	b.n	800610c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800610a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b088      	sub	sp, #32
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10d      	bne.n	8006148 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <create_chain+0x2c>
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	429a      	cmp	r2, r3
 8006140:	d31b      	bcc.n	800617a <create_chain+0x64>
 8006142:	2301      	movs	r3, #1
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	e018      	b.n	800617a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fd91 	bl	8005c72 <get_fat>
 8006150:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d801      	bhi.n	800615c <create_chain+0x46>
 8006158:	2301      	movs	r3, #1
 800615a:	e070      	b.n	800623e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d101      	bne.n	8006168 <create_chain+0x52>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	e06a      	b.n	800623e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	429a      	cmp	r2, r3
 8006170:	d201      	bcs.n	8006176 <create_chain+0x60>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	e063      	b.n	800623e <create_chain+0x128>
		scl = clst;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3301      	adds	r3, #1
 8006182:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	429a      	cmp	r2, r3
 800618c:	d307      	bcc.n	800619e <create_chain+0x88>
				ncl = 2;
 800618e:	2302      	movs	r3, #2
 8006190:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	429a      	cmp	r2, r3
 8006198:	d901      	bls.n	800619e <create_chain+0x88>
 800619a:	2300      	movs	r3, #0
 800619c:	e04f      	b.n	800623e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800619e:	69f9      	ldr	r1, [r7, #28]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff fd66 	bl	8005c72 <get_fat>
 80061a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00e      	beq.n	80061cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d003      	beq.n	80061bc <create_chain+0xa6>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ba:	d101      	bne.n	80061c0 <create_chain+0xaa>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	e03e      	b.n	800623e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d1da      	bne.n	800617e <create_chain+0x68>
 80061c8:	2300      	movs	r3, #0
 80061ca:	e038      	b.n	800623e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80061cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	6938      	ldr	r0, [r7, #16]
 80061d6:	f7ff fe1f 	bl	8005e18 <put_fat>
 80061da:	4603      	mov	r3, r0
 80061dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d109      	bne.n	80061f8 <create_chain+0xe2>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d006      	beq.n	80061f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6938      	ldr	r0, [r7, #16]
 80061f0:	f7ff fe12 	bl	8005e18 <put_fat>
 80061f4:	4603      	mov	r3, r0
 80061f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d116      	bne.n	800622c <create_chain+0x116>
		fs->last_clst = ncl;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	3b02      	subs	r3, #2
 800620e:	429a      	cmp	r2, r3
 8006210:	d804      	bhi.n	800621c <create_chain+0x106>
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	1e5a      	subs	r2, r3, #1
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	791b      	ldrb	r3, [r3, #4]
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	711a      	strb	r2, [r3, #4]
 800622a:	e007      	b.n	800623c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d102      	bne.n	8006238 <create_chain+0x122>
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	e000      	b.n	800623a <create_chain+0x124>
 8006238:	2301      	movs	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800623c:	69fb      	ldr	r3, [r7, #28]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3720      	adds	r7, #32
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006246:	b480      	push	{r7}
 8006248:	b087      	sub	sp, #28
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	3304      	adds	r3, #4
 800625c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	899b      	ldrh	r3, [r3, #12]
 8006262:	461a      	mov	r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	fbb3 f3f2 	udiv	r3, r3, r2
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	8952      	ldrh	r2, [r2, #10]
 800626e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006272:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1d1a      	adds	r2, r3, #4
 8006278:	613a      	str	r2, [r7, #16]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <clmt_clust+0x42>
 8006284:	2300      	movs	r3, #0
 8006286:	e010      	b.n	80062aa <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	429a      	cmp	r2, r3
 800628e:	d307      	bcc.n	80062a0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	3304      	adds	r3, #4
 800629c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800629e:	e7e9      	b.n	8006274 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80062a0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	4413      	add	r3, r2
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b086      	sub	sp, #24
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062cc:	d204      	bcs.n	80062d8 <dir_sdi+0x22>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <dir_sdi+0x26>
		return FR_INT_ERR;
 80062d8:	2302      	movs	r3, #2
 80062da:	e071      	b.n	80063c0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <dir_sdi+0x46>
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d902      	bls.n	80062fc <dir_sdi+0x46>
		clst = fs->dirbase;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10c      	bne.n	800631c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	8912      	ldrh	r2, [r2, #8]
 800630a:	4293      	cmp	r3, r2
 800630c:	d301      	bcc.n	8006312 <dir_sdi+0x5c>
 800630e:	2302      	movs	r3, #2
 8006310:	e056      	b.n	80063c0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	61da      	str	r2, [r3, #28]
 800631a:	e02d      	b.n	8006378 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	895b      	ldrh	r3, [r3, #10]
 8006320:	461a      	mov	r2, r3
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	899b      	ldrh	r3, [r3, #12]
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800632c:	e019      	b.n	8006362 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6979      	ldr	r1, [r7, #20]
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fc9d 	bl	8005c72 <get_fat>
 8006338:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d101      	bne.n	8006346 <dir_sdi+0x90>
 8006342:	2301      	movs	r3, #1
 8006344:	e03c      	b.n	80063c0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d904      	bls.n	8006356 <dir_sdi+0xa0>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	429a      	cmp	r2, r3
 8006354:	d301      	bcc.n	800635a <dir_sdi+0xa4>
 8006356:	2302      	movs	r3, #2
 8006358:	e032      	b.n	80063c0 <dir_sdi+0x10a>
			ofs -= csz;
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	429a      	cmp	r2, r3
 8006368:	d2e1      	bcs.n	800632e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	6938      	ldr	r0, [r7, #16]
 800636e:	f7ff fc61 	bl	8005c34 <clust2sect>
 8006372:	4602      	mov	r2, r0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <dir_sdi+0xd4>
 8006386:	2302      	movs	r3, #2
 8006388:	e01a      	b.n	80063c0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	899b      	ldrh	r3, [r3, #12]
 8006392:	4619      	mov	r1, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	fbb3 f3f1 	udiv	r3, r3, r1
 800639a:	441a      	add	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	899b      	ldrh	r3, [r3, #12]
 80063aa:	461a      	mov	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80063b2:	fb00 f202 	mul.w	r2, r0, r2
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	18ca      	adds	r2, r1, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	3320      	adds	r3, #32
 80063de:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <dir_next+0x28>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063ee:	d301      	bcc.n	80063f4 <dir_next+0x2c>
 80063f0:	2304      	movs	r3, #4
 80063f2:	e0bb      	b.n	800656c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	899b      	ldrh	r3, [r3, #12]
 80063f8:	461a      	mov	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006400:	fb01 f202 	mul.w	r2, r1, r2
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	f040 809d 	bne.w	8006546 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	8912      	ldrh	r2, [r2, #8]
 8006426:	4293      	cmp	r3, r2
 8006428:	f0c0 808d 	bcc.w	8006546 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	61da      	str	r2, [r3, #28]
 8006432:	2304      	movs	r3, #4
 8006434:	e09a      	b.n	800656c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	899b      	ldrh	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	8952      	ldrh	r2, [r2, #10]
 8006446:	3a01      	subs	r2, #1
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d17b      	bne.n	8006546 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f7ff fc0b 	bl	8005c72 <get_fat>
 800645c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d801      	bhi.n	8006468 <dir_next+0xa0>
 8006464:	2302      	movs	r3, #2
 8006466:	e081      	b.n	800656c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646e:	d101      	bne.n	8006474 <dir_next+0xac>
 8006470:	2301      	movs	r3, #1
 8006472:	e07b      	b.n	800656c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	429a      	cmp	r2, r3
 800647c:	d359      	bcc.n	8006532 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	61da      	str	r2, [r3, #28]
 800648a:	2304      	movs	r3, #4
 800648c:	e06e      	b.n	800656c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	4619      	mov	r1, r3
 8006496:	4610      	mov	r0, r2
 8006498:	f7ff fe3d 	bl	8006116 <create_chain>
 800649c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <dir_next+0xe0>
 80064a4:	2307      	movs	r3, #7
 80064a6:	e061      	b.n	800656c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <dir_next+0xea>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e05c      	b.n	800656c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d101      	bne.n	80064be <dir_next+0xf6>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e056      	b.n	800656c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff fad6 	bl	8005a70 <sync_window>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <dir_next+0x106>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e04e      	b.n	800656c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	899b      	ldrh	r3, [r3, #12]
 80064d8:	461a      	mov	r2, r3
 80064da:	2100      	movs	r1, #0
 80064dc:	f7ff f8ff 	bl	80056de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff fba4 	bl	8005c34 <clust2sect>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80064f2:	e012      	b.n	800651a <dir_next+0x152>
						fs->wflag = 1;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff fab8 	bl	8005a70 <sync_window>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <dir_next+0x142>
 8006506:	2301      	movs	r3, #1
 8006508:	e030      	b.n	800656c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3301      	adds	r3, #1
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	635a      	str	r2, [r3, #52]	@ 0x34
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	895b      	ldrh	r3, [r3, #10]
 800651e:	461a      	mov	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	4293      	cmp	r3, r2
 8006524:	d3e6      	bcc.n	80064f4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad2      	subs	r2, r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006538:	6979      	ldr	r1, [r7, #20]
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff fb7a 	bl	8005c34 <clust2sect>
 8006540:	4602      	mov	r2, r0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	899b      	ldrh	r3, [r3, #12]
 8006556:	461a      	mov	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	fbb3 f0f2 	udiv	r0, r3, r2
 800655e:	fb00 f202 	mul.w	r2, r0, r2
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	18ca      	adds	r2, r1, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006584:	2100      	movs	r1, #0
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fe95 	bl	80062b6 <dir_sdi>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d12b      	bne.n	80065ee <dir_alloc+0x7a>
		n = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	4619      	mov	r1, r3
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7ff faa9 	bl	8005af8 <move_window>
 80065a6:	4603      	mov	r3, r0
 80065a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d11d      	bne.n	80065ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2be5      	cmp	r3, #229	@ 0xe5
 80065b8:	d004      	beq.n	80065c4 <dir_alloc+0x50>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d107      	bne.n	80065d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	3301      	adds	r3, #1
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d102      	bne.n	80065d8 <dir_alloc+0x64>
 80065d2:	e00c      	b.n	80065ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80065d8:	2101      	movs	r1, #1
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff fef4 	bl	80063c8 <dir_next>
 80065e0:	4603      	mov	r3, r0
 80065e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0d7      	beq.n	800659a <dir_alloc+0x26>
 80065ea:	e000      	b.n	80065ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80065ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d101      	bne.n	80065f8 <dir_alloc+0x84>
 80065f4:	2307      	movs	r3, #7
 80065f6:	75fb      	strb	r3, [r7, #23]
	return res;
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	331a      	adds	r3, #26
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe ffc1 	bl	8005598 <ld_word>
 8006616:	4603      	mov	r3, r0
 8006618:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b03      	cmp	r3, #3
 8006620:	d109      	bne.n	8006636 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	3314      	adds	r3, #20
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe ffb6 	bl	8005598 <ld_word>
 800662c:	4603      	mov	r3, r0
 800662e:	041b      	lsls	r3, r3, #16
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006636:	68fb      	ldr	r3, [r7, #12]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	331a      	adds	r3, #26
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	b292      	uxth	r2, r2
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe ffd9 	bl	800560e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d109      	bne.n	8006678 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f103 0214 	add.w	r2, r3, #20
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	b29b      	uxth	r3, r3
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f7fe ffcb 	bl	800560e <st_word>
	}
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	331a      	adds	r3, #26
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe ff82 	bl	8005598 <ld_word>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <cmp_lfn+0x1e>
 800669a:	2300      	movs	r3, #0
 800669c:	e059      	b.n	8006752 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066a6:	1e5a      	subs	r2, r3, #1
 80066a8:	4613      	mov	r3, r2
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80066b4:	2301      	movs	r3, #1
 80066b6:	81fb      	strh	r3, [r7, #14]
 80066b8:	2300      	movs	r3, #0
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	e033      	b.n	8006726 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80066be:	4a27      	ldr	r2, [pc, #156]	@ (800675c <cmp_lfn+0xdc>)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	4413      	add	r3, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe ff63 	bl	8005598 <ld_word>
 80066d2:	4603      	mov	r3, r0
 80066d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80066d6:	89fb      	ldrh	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01a      	beq.n	8006712 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2bfe      	cmp	r3, #254	@ 0xfe
 80066e0:	d812      	bhi.n	8006708 <cmp_lfn+0x88>
 80066e2:	89bb      	ldrh	r3, [r7, #12]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f002 f877 	bl	80087d8 <ff_wtoupper>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461c      	mov	r4, r3
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	617a      	str	r2, [r7, #20]
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f002 f86b 	bl	80087d8 <ff_wtoupper>
 8006702:	4603      	mov	r3, r0
 8006704:	429c      	cmp	r4, r3
 8006706:	d001      	beq.n	800670c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006708:	2300      	movs	r3, #0
 800670a:	e022      	b.n	8006752 <cmp_lfn+0xd2>
			}
			wc = uc;
 800670c:	89bb      	ldrh	r3, [r7, #12]
 800670e:	81fb      	strh	r3, [r7, #14]
 8006710:	e006      	b.n	8006720 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006712:	89bb      	ldrh	r3, [r7, #12]
 8006714:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006718:	4293      	cmp	r3, r2
 800671a:	d001      	beq.n	8006720 <cmp_lfn+0xa0>
 800671c:	2300      	movs	r3, #0
 800671e:	e018      	b.n	8006752 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	3301      	adds	r3, #1
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b0c      	cmp	r3, #12
 800672a:	d9c8      	bls.n	80066be <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <cmp_lfn+0xd0>
 8006738:	89fb      	ldrh	r3, [r7, #14]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d008      	beq.n	8006750 <cmp_lfn+0xd0>
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <cmp_lfn+0xd0>
 800674c:	2300      	movs	r3, #0
 800674e:	e000      	b.n	8006752 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006750:	2301      	movs	r3, #1
}
 8006752:	4618      	mov	r0, r3
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}
 800675a:	bf00      	nop
 800675c:	080098bc 	.word	0x080098bc

08006760 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4611      	mov	r1, r2
 800676c:	461a      	mov	r2, r3
 800676e:	460b      	mov	r3, r1
 8006770:	71fb      	strb	r3, [r7, #7]
 8006772:	4613      	mov	r3, r2
 8006774:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	330d      	adds	r3, #13
 800677a:	79ba      	ldrb	r2, [r7, #6]
 800677c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	330b      	adds	r3, #11
 8006782:	220f      	movs	r2, #15
 8006784:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	330c      	adds	r3, #12
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	331a      	adds	r3, #26
 8006792:	2100      	movs	r1, #0
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe ff3a 	bl	800560e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	1e5a      	subs	r2, r3, #1
 800679e:	4613      	mov	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	82fb      	strh	r3, [r7, #22]
 80067ae:	2300      	movs	r3, #0
 80067b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80067b2:	8afb      	ldrh	r3, [r7, #22]
 80067b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <put_lfn+0x6c>
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	61fa      	str	r2, [r7, #28]
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80067cc:	4a17      	ldr	r2, [pc, #92]	@ (800682c <put_lfn+0xcc>)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	4413      	add	r3, r2
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4413      	add	r3, r2
 80067da:	8afa      	ldrh	r2, [r7, #22]
 80067dc:	4611      	mov	r1, r2
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe ff15 	bl	800560e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80067e4:	8afb      	ldrh	r3, [r7, #22]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d102      	bne.n	80067f0 <put_lfn+0x90>
 80067ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067ee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	3301      	adds	r3, #1
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b0c      	cmp	r3, #12
 80067fa:	d9da      	bls.n	80067b2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80067fc:	8afb      	ldrh	r3, [r7, #22]
 80067fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006802:	4293      	cmp	r3, r2
 8006804:	d006      	beq.n	8006814 <put_lfn+0xb4>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4413      	add	r3, r2
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d103      	bne.n	800681c <put_lfn+0xbc>
 8006814:	79fb      	ldrb	r3, [r7, #7]
 8006816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800681a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	79fa      	ldrb	r2, [r7, #7]
 8006820:	701a      	strb	r2, [r3, #0]
}
 8006822:	bf00      	nop
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	080098bc 	.word	0x080098bc

08006830 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	@ 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800683e:	220b      	movs	r2, #11
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7fe ff2a 	bl	800569c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b05      	cmp	r3, #5
 800684c:	d929      	bls.n	80068a2 <gen_numname+0x72>
		sr = seq;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006852:	e020      	b.n	8006896 <gen_numname+0x66>
			wc = *lfn++;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	1c9a      	adds	r2, r3, #2
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800685e:	2300      	movs	r3, #0
 8006860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006862:	e015      	b.n	8006890 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	005a      	lsls	r2, r3, #1
 8006868:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	4413      	add	r3, r2
 8006870:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006872:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <gen_numname+0x5a>
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	4b30      	ldr	r3, [pc, #192]	@ (8006948 <gen_numname+0x118>)
 8006886:	4053      	eors	r3, r2
 8006888:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	3301      	adds	r3, #1
 800688e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	2b0f      	cmp	r3, #15
 8006894:	d9e6      	bls.n	8006864 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1da      	bne.n	8006854 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80068a2:	2307      	movs	r3, #7
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	3330      	adds	r3, #48	@ 0x30
 80068b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80068b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068ba:	2b39      	cmp	r3, #57	@ 0x39
 80068bc:	d904      	bls.n	80068c8 <gen_numname+0x98>
 80068be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068c2:	3307      	adds	r3, #7
 80068c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	1e5a      	subs	r2, r3, #1
 80068cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80068ce:	3330      	adds	r3, #48	@ 0x30
 80068d0:	443b      	add	r3, r7
 80068d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80068d6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	091b      	lsrs	r3, r3, #4
 80068de:	603b      	str	r3, [r7, #0]
	} while (seq);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1df      	bne.n	80068a6 <gen_numname+0x76>
	ns[i] = '~';
 80068e6:	f107 0214 	add.w	r2, r7, #20
 80068ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ec:	4413      	add	r3, r2
 80068ee:	227e      	movs	r2, #126	@ 0x7e
 80068f0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80068f2:	2300      	movs	r3, #0
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068f6:	e002      	b.n	80068fe <gen_numname+0xce>
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	3301      	adds	r3, #1
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006902:	429a      	cmp	r2, r3
 8006904:	d205      	bcs.n	8006912 <gen_numname+0xe2>
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	4413      	add	r3, r2
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b20      	cmp	r3, #32
 8006910:	d1f2      	bne.n	80068f8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	2b07      	cmp	r3, #7
 8006916:	d807      	bhi.n	8006928 <gen_numname+0xf8>
 8006918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800691e:	3330      	adds	r3, #48	@ 0x30
 8006920:	443b      	add	r3, r7
 8006922:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006926:	e000      	b.n	800692a <gen_numname+0xfa>
 8006928:	2120      	movs	r1, #32
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	460a      	mov	r2, r1
 8006936:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	2b07      	cmp	r3, #7
 800693c:	d9e9      	bls.n	8006912 <gen_numname+0xe2>
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	3730      	adds	r7, #48	@ 0x30
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	00011021 	.word	0x00011021

0800694c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006958:	230b      	movs	r3, #11
 800695a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	b2da      	uxtb	r2, r3
 8006960:	0852      	lsrs	r2, r2, #1
 8006962:	01db      	lsls	r3, r3, #7
 8006964:	4313      	orrs	r3, r2
 8006966:	b2da      	uxtb	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	1c59      	adds	r1, r3, #1
 800696c:	6079      	str	r1, [r7, #4]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	4413      	add	r3, r2
 8006972:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3b01      	subs	r3, #1
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ed      	bne.n	800695c <sum_sfn+0x10>
	return sum;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800699c:	2100      	movs	r1, #0
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff fc89 	bl	80062b6 <dir_sdi>
 80069a4:	4603      	mov	r3, r0
 80069a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <dir_find+0x24>
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	e0a9      	b.n	8006b06 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80069b2:	23ff      	movs	r3, #255	@ 0xff
 80069b4:	753b      	strb	r3, [r7, #20]
 80069b6:	7d3b      	ldrb	r3, [r7, #20]
 80069b8:	757b      	strb	r3, [r7, #21]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f04f 32ff 	mov.w	r2, #4294967295
 80069c0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	4619      	mov	r1, r3
 80069c8:	6938      	ldr	r0, [r7, #16]
 80069ca:	f7ff f895 	bl	8005af8 <move_window>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 8090 	bne.w	8006afa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80069e2:	7dbb      	ldrb	r3, [r7, #22]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <dir_find+0x60>
 80069e8:	2304      	movs	r3, #4
 80069ea:	75fb      	strb	r3, [r7, #23]
 80069ec:	e08a      	b.n	8006b04 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	330b      	adds	r3, #11
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069fa:	73fb      	strb	r3, [r7, #15]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	7bfa      	ldrb	r2, [r7, #15]
 8006a00:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006a02:	7dbb      	ldrb	r3, [r7, #22]
 8006a04:	2be5      	cmp	r3, #229	@ 0xe5
 8006a06:	d007      	beq.n	8006a18 <dir_find+0x8a>
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <dir_find+0x98>
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	2b0f      	cmp	r3, #15
 8006a16:	d006      	beq.n	8006a26 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a18:	23ff      	movs	r3, #255	@ 0xff
 8006a1a:	757b      	strb	r3, [r7, #21]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a22:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a24:	e05e      	b.n	8006ae4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b0f      	cmp	r3, #15
 8006a2a:	d136      	bne.n	8006a9a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d154      	bne.n	8006ae4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006a3a:	7dbb      	ldrb	r3, [r7, #22]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00d      	beq.n	8006a60 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	7b5b      	ldrb	r3, [r3, #13]
 8006a4a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006a4c:	7dbb      	ldrb	r3, [r7, #22]
 8006a4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a52:	75bb      	strb	r3, [r7, #22]
 8006a54:	7dbb      	ldrb	r3, [r7, #22]
 8006a56:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695a      	ldr	r2, [r3, #20]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006a60:	7dba      	ldrb	r2, [r7, #22]
 8006a62:	7d7b      	ldrb	r3, [r7, #21]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d115      	bne.n	8006a94 <dir_find+0x106>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	330d      	adds	r3, #13
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	7d3a      	ldrb	r2, [r7, #20]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d10e      	bne.n	8006a94 <dir_find+0x106>
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f7ff fdfd 	bl	8006680 <cmp_lfn>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <dir_find+0x106>
 8006a8c:	7d7b      	ldrb	r3, [r7, #21]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	e000      	b.n	8006a96 <dir_find+0x108>
 8006a94:	23ff      	movs	r3, #255	@ 0xff
 8006a96:	757b      	strb	r3, [r7, #21]
 8006a98:	e024      	b.n	8006ae4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006a9a:	7d7b      	ldrb	r3, [r7, #21]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <dir_find+0x126>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff ff51 	bl	800694c <sum_sfn>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	461a      	mov	r2, r3
 8006aae:	7d3b      	ldrb	r3, [r7, #20]
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d024      	beq.n	8006afe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <dir_find+0x14a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a18      	ldr	r0, [r3, #32]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3324      	adds	r3, #36	@ 0x24
 8006aca:	220b      	movs	r2, #11
 8006acc:	4619      	mov	r1, r3
 8006ace:	f7fe fe21 	bl	8005714 <mem_cmp>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d014      	beq.n	8006b02 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ad8:	23ff      	movs	r3, #255	@ 0xff
 8006ada:	757b      	strb	r3, [r7, #21]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff fc6e 	bl	80063c8 <dir_next>
 8006aec:	4603      	mov	r3, r0
 8006aee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f43f af65 	beq.w	80069c2 <dir_find+0x34>
 8006af8:	e004      	b.n	8006b04 <dir_find+0x176>
		if (res != FR_OK) break;
 8006afa:	bf00      	nop
 8006afc:	e002      	b.n	8006b04 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006b02:	bf00      	nop

	return res;
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08c      	sub	sp, #48	@ 0x30
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006b24:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <dir_register+0x20>
 8006b2c:	2306      	movs	r3, #6
 8006b2e:	e0e0      	b.n	8006cf2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006b30:	2300      	movs	r3, #0
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b34:	e002      	b.n	8006b3c <dir_register+0x2c>
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	3301      	adds	r3, #1
 8006b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	4413      	add	r3, r2
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f4      	bne.n	8006b36 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006b52:	f107 030c 	add.w	r3, r7, #12
 8006b56:	220c      	movs	r2, #12
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe fd9f 	bl	800569c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d032      	beq.n	8006bce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2240      	movs	r2, #64	@ 0x40
 8006b6c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006b70:	2301      	movs	r3, #1
 8006b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b74:	e016      	b.n	8006ba4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	f107 010c 	add.w	r1, r7, #12
 8006b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b86:	f7ff fe53 	bl	8006830 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff feff 	bl	800698e <dir_find>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006b96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba6:	2b63      	cmp	r3, #99	@ 0x63
 8006ba8:	d9e5      	bls.n	8006b76 <dir_register+0x66>
 8006baa:	e000      	b.n	8006bae <dir_register+0x9e>
			if (res != FR_OK) break;
 8006bac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	2b64      	cmp	r3, #100	@ 0x64
 8006bb2:	d101      	bne.n	8006bb8 <dir_register+0xa8>
 8006bb4:	2307      	movs	r3, #7
 8006bb6:	e09c      	b.n	8006cf2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d002      	beq.n	8006bc6 <dir_register+0xb6>
 8006bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bc4:	e095      	b.n	8006cf2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006bc6:	7dfa      	ldrb	r2, [r7, #23]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <dir_register+0xd8>
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	330c      	adds	r3, #12
 8006bdc:	4a47      	ldr	r2, [pc, #284]	@ (8006cfc <dir_register+0x1ec>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	089b      	lsrs	r3, r3, #2
 8006be4:	3301      	adds	r3, #1
 8006be6:	e000      	b.n	8006bea <dir_register+0xda>
 8006be8:	2301      	movs	r3, #1
 8006bea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006bec:	6a39      	ldr	r1, [r7, #32]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff fcc0 	bl	8006574 <dir_alloc>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d148      	bne.n	8006c94 <dir_register+0x184>
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	623b      	str	r3, [r7, #32]
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d042      	beq.n	8006c94 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	015b      	lsls	r3, r3, #5
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff fb4b 	bl	80062b6 <dir_sdi>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006c26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d132      	bne.n	8006c94 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3324      	adds	r3, #36	@ 0x24
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff fe8a 	bl	800694c <sum_sfn>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	4619      	mov	r1, r3
 8006c42:	69f8      	ldr	r0, [r7, #28]
 8006c44:	f7fe ff58 	bl	8005af8 <move_window>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d11d      	bne.n	8006c92 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	6918      	ldr	r0, [r3, #16]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a19      	ldr	r1, [r3, #32]
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	7efb      	ldrb	r3, [r7, #27]
 8006c64:	f7ff fd7c 	bl	8006760 <put_lfn>
				fs->wflag = 1;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006c6e:	2100      	movs	r1, #0
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fba9 	bl	80063c8 <dir_next>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d107      	bne.n	8006c94 <dir_register+0x184>
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	623b      	str	r3, [r7, #32]
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1d5      	bne.n	8006c3c <dir_register+0x12c>
 8006c90:	e000      	b.n	8006c94 <dir_register+0x184>
				if (res != FR_OK) break;
 8006c92:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006c94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d128      	bne.n	8006cee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	69f8      	ldr	r0, [r7, #28]
 8006ca4:	f7fe ff28 	bl	8005af8 <move_window>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006cae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d11b      	bne.n	8006cee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe fd0d 	bl	80056de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a18      	ldr	r0, [r3, #32]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3324      	adds	r3, #36	@ 0x24
 8006ccc:	220b      	movs	r2, #11
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f7fe fce4 	bl	800569c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	f002 0218 	and.w	r2, r2, #24
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2201      	movs	r2, #1
 8006cec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3730      	adds	r7, #48	@ 0x30
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	4ec4ec4f 	.word	0x4ec4ec4f

08006d00 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2200      	movs	r2, #0
 8006d14:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80ca 	beq.w	8006eb4 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d032      	beq.n	8006d90 <get_fileinfo+0x90>
			i = j = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61bb      	str	r3, [r7, #24]
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006d32:	e01b      	b.n	8006d6c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006d34:	89fb      	ldrh	r3, [r7, #14]
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 fd11 	bl	8008760 <ff_convert>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006d42:	89fb      	ldrh	r3, [r7, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d102      	bne.n	8006d4e <get_fileinfo+0x4e>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	e01a      	b.n	8006d84 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	2bfe      	cmp	r3, #254	@ 0xfe
 8006d52:	d902      	bls.n	8006d5a <get_fileinfo+0x5a>
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	e014      	b.n	8006d84 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	61fa      	str	r2, [r7, #28]
 8006d60:	89fa      	ldrh	r2, [r7, #14]
 8006d62:	b2d1      	uxtb	r1, r2
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	4413      	add	r3, r2
 8006d68:	460a      	mov	r2, r1
 8006d6a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	1c59      	adds	r1, r3, #1
 8006d74:	61b9      	str	r1, [r7, #24]
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	81fb      	strh	r3, [r7, #14]
 8006d7e:	89fb      	ldrh	r3, [r7, #14]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1d7      	bne.n	8006d34 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	3316      	adds	r3, #22
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3316      	adds	r3, #22
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006da4:	e04d      	b.n	8006e42 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1a      	ldr	r2, [r3, #32]
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	1c59      	adds	r1, r3, #1
 8006dae:	61f9      	str	r1, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b20      	cmp	r3, #32
 8006dba:	d041      	beq.n	8006e40 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d101      	bne.n	8006dc6 <get_fileinfo+0xc6>
 8006dc2:	23e5      	movs	r3, #229	@ 0xe5
 8006dc4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	2b09      	cmp	r3, #9
 8006dca:	d10f      	bne.n	8006dec <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8006dcc:	89bb      	ldrh	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d105      	bne.n	8006dde <get_fileinfo+0xde>
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3316      	adds	r3, #22
 8006dda:	222e      	movs	r2, #46	@ 0x2e
 8006ddc:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	61ba      	str	r2, [r7, #24]
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	4413      	add	r3, r2
 8006de8:	222e      	movs	r2, #46	@ 0x2e
 8006dea:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	4413      	add	r3, r2
 8006df2:	3309      	adds	r3, #9
 8006df4:	7dfa      	ldrb	r2, [r7, #23]
 8006df6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8006df8:	89bb      	ldrh	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d11c      	bne.n	8006e38 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	2b40      	cmp	r3, #64	@ 0x40
 8006e02:	d913      	bls.n	8006e2c <get_fileinfo+0x12c>
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	2b5a      	cmp	r3, #90	@ 0x5a
 8006e08:	d810      	bhi.n	8006e2c <get_fileinfo+0x12c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d901      	bls.n	8006e1e <get_fileinfo+0x11e>
 8006e1a:	2310      	movs	r3, #16
 8006e1c:	e000      	b.n	8006e20 <get_fileinfo+0x120>
 8006e1e:	2308      	movs	r3, #8
 8006e20:	4013      	ands	r3, r2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	3320      	adds	r3, #32
 8006e2a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	4413      	add	r3, r2
 8006e32:	3316      	adds	r3, #22
 8006e34:	7dfa      	ldrb	r2, [r7, #23]
 8006e36:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	e000      	b.n	8006e42 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006e40:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	2b0a      	cmp	r3, #10
 8006e46:	d9ae      	bls.n	8006da6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006e48:	89bb      	ldrh	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10d      	bne.n	8006e6a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	4413      	add	r3, r2
 8006e54:	3316      	adds	r3, #22
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <get_fileinfo+0x16a>
 8006e66:	2300      	movs	r3, #0
 8006e68:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	4413      	add	r3, r2
 8006e70:	3309      	adds	r3, #9
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	7ada      	ldrb	r2, [r3, #11]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	331c      	adds	r3, #28
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe fb9e 	bl	80055c8 <ld_dword>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	3316      	adds	r3, #22
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fb95 	bl	80055c8 <ld_dword>
 8006e9e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	80da      	strh	r2, [r3, #6]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	0c1b      	lsrs	r3, r3, #16
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	809a      	strh	r2, [r3, #4]
 8006eb2:	e000      	b.n	8006eb6 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006eb4:	bf00      	nop
}
 8006eb6:	3720      	adds	r7, #32
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	@ 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	61ba      	str	r2, [r7, #24]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006eea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006eec:	2b1f      	cmp	r3, #31
 8006eee:	d940      	bls.n	8006f72 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006ef0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ef2:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ef4:	d006      	beq.n	8006f04 <create_name+0x48>
 8006ef6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ef8:	2b5c      	cmp	r3, #92	@ 0x5c
 8006efa:	d110      	bne.n	8006f1e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006efc:	e002      	b.n	8006f04 <create_name+0x48>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	3301      	adds	r3, #1
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	4413      	add	r3, r2
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f0e:	d0f6      	beq.n	8006efe <create_name+0x42>
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	4413      	add	r3, r2
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f1a:	d0f0      	beq.n	8006efe <create_name+0x42>
			break;
 8006f1c:	e02a      	b.n	8006f74 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2bfe      	cmp	r3, #254	@ 0xfe
 8006f22:	d901      	bls.n	8006f28 <create_name+0x6c>
 8006f24:	2306      	movs	r3, #6
 8006f26:	e17d      	b.n	8007224 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006f28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006f2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f30:	2101      	movs	r1, #1
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 fc14 	bl	8008760 <ff_convert>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006f3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <create_name+0x8a>
 8006f42:	2306      	movs	r3, #6
 8006f44:	e16e      	b.n	8007224 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f48:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f4a:	d809      	bhi.n	8006f60 <create_name+0xa4>
 8006f4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f4e:	4619      	mov	r1, r3
 8006f50:	488d      	ldr	r0, [pc, #564]	@ (8007188 <create_name+0x2cc>)
 8006f52:	f7fe fc06 	bl	8005762 <chk_chr>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <create_name+0xa4>
 8006f5c:	2306      	movs	r3, #6
 8006f5e:	e161      	b.n	8007224 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	617a      	str	r2, [r7, #20]
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006f6e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006f70:	e7b4      	b.n	8006edc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006f72:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	441a      	add	r2, r3
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006f7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f80:	2b1f      	cmp	r3, #31
 8006f82:	d801      	bhi.n	8006f88 <create_name+0xcc>
 8006f84:	2304      	movs	r3, #4
 8006f86:	e000      	b.n	8006f8a <create_name+0xce>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f8e:	e011      	b.n	8006fb4 <create_name+0xf8>
		w = lfn[di - 1];
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006f96:	4413      	add	r3, r2
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006fa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d002      	beq.n	8006fae <create_name+0xf2>
 8006fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006faa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fac:	d106      	bne.n	8006fbc <create_name+0x100>
		di--;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ea      	bne.n	8006f90 <create_name+0xd4>
 8006fba:	e000      	b.n	8006fbe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006fbc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <create_name+0x118>
 8006fd0:	2306      	movs	r3, #6
 8006fd2:	e127      	b.n	8007224 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3324      	adds	r3, #36	@ 0x24
 8006fd8:	220b      	movs	r2, #11
 8006fda:	2120      	movs	r1, #32
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fe fb7e 	bl	80056de <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	e002      	b.n	8006fee <create_name+0x132>
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	3301      	adds	r3, #1
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d0f5      	beq.n	8006fe8 <create_name+0x12c>
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	2b2e      	cmp	r3, #46	@ 0x2e
 8007008:	d0ee      	beq.n	8006fe8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <create_name+0x168>
 8007010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007014:	f043 0303 	orr.w	r3, r3, #3
 8007018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800701c:	e002      	b.n	8007024 <create_name+0x168>
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	3b01      	subs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <create_name+0x182>
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007030:	4413      	add	r3, r2
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	2b2e      	cmp	r3, #46	@ 0x2e
 800703c:	d1ef      	bne.n	800701e <create_name+0x162>

	i = b = 0; ni = 8;
 800703e:	2300      	movs	r3, #0
 8007040:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007044:	2300      	movs	r3, #0
 8007046:	623b      	str	r3, [r7, #32]
 8007048:	2308      	movs	r3, #8
 800704a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	61ba      	str	r2, [r7, #24]
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800705c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 8090 	beq.w	8007184 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007064:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007066:	2b20      	cmp	r3, #32
 8007068:	d006      	beq.n	8007078 <create_name+0x1bc>
 800706a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800706c:	2b2e      	cmp	r3, #46	@ 0x2e
 800706e:	d10a      	bne.n	8007086 <create_name+0x1ca>
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	429a      	cmp	r2, r3
 8007076:	d006      	beq.n	8007086 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800707c:	f043 0303 	orr.w	r3, r3, #3
 8007080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007084:	e07d      	b.n	8007182 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007086:	6a3a      	ldr	r2, [r7, #32]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	429a      	cmp	r2, r3
 800708c:	d203      	bcs.n	8007096 <create_name+0x1da>
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	429a      	cmp	r2, r3
 8007094:	d123      	bne.n	80070de <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	2b0b      	cmp	r3, #11
 800709a:	d106      	bne.n	80070aa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800709c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070a0:	f043 0303 	orr.w	r3, r3, #3
 80070a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80070a8:	e075      	b.n	8007196 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d005      	beq.n	80070be <create_name+0x202>
 80070b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070b6:	f043 0303 	orr.w	r3, r3, #3
 80070ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d866      	bhi.n	8007194 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	2308      	movs	r3, #8
 80070cc:	623b      	str	r3, [r7, #32]
 80070ce:	230b      	movs	r3, #11
 80070d0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80070d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80070dc:	e051      	b.n	8007182 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80070de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80070e2:	d914      	bls.n	800710e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80070e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fb39 	bl	8008760 <ff_convert>
 80070ee:	4603      	mov	r3, r0
 80070f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80070f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <create_name+0x246>
 80070f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070fa:	3b80      	subs	r3, #128	@ 0x80
 80070fc:	4a23      	ldr	r2, [pc, #140]	@ (800718c <create_name+0x2d0>)
 80070fe:	5cd3      	ldrb	r3, [r2, r3]
 8007100:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007106:	f043 0302 	orr.w	r3, r3, #2
 800710a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800710e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <create_name+0x268>
 8007114:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007116:	4619      	mov	r1, r3
 8007118:	481d      	ldr	r0, [pc, #116]	@ (8007190 <create_name+0x2d4>)
 800711a:	f7fe fb22 	bl	8005762 <chk_chr>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007124:	235f      	movs	r3, #95	@ 0x5f
 8007126:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800712c:	f043 0303 	orr.w	r3, r3, #3
 8007130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007134:	e01b      	b.n	800716e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007138:	2b40      	cmp	r3, #64	@ 0x40
 800713a:	d909      	bls.n	8007150 <create_name+0x294>
 800713c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800713e:	2b5a      	cmp	r3, #90	@ 0x5a
 8007140:	d806      	bhi.n	8007150 <create_name+0x294>
					b |= 2;
 8007142:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007146:	f043 0302 	orr.w	r3, r3, #2
 800714a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800714e:	e00e      	b.n	800716e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007150:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007152:	2b60      	cmp	r3, #96	@ 0x60
 8007154:	d90b      	bls.n	800716e <create_name+0x2b2>
 8007156:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007158:	2b7a      	cmp	r3, #122	@ 0x7a
 800715a:	d808      	bhi.n	800716e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800715c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007168:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800716a:	3b20      	subs	r3, #32
 800716c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	623a      	str	r2, [r7, #32]
 8007174:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007176:	b2d1      	uxtb	r1, r2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	4413      	add	r3, r2
 800717c:	460a      	mov	r2, r1
 800717e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007182:	e763      	b.n	800704c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007184:	bf00      	nop
 8007186:	e006      	b.n	8007196 <create_name+0x2da>
 8007188:	080097d4 	.word	0x080097d4
 800718c:	0800983c 	.word	0x0800983c
 8007190:	080097e0 	.word	0x080097e0
			if (si > di) break;			/* No extension */
 8007194:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800719c:	2be5      	cmp	r3, #229	@ 0xe5
 800719e:	d103      	bne.n	80071a8 <create_name+0x2ec>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2205      	movs	r2, #5
 80071a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d104      	bne.n	80071b8 <create_name+0x2fc>
 80071ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80071b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071bc:	f003 030c 	and.w	r3, r3, #12
 80071c0:	2b0c      	cmp	r3, #12
 80071c2:	d005      	beq.n	80071d0 <create_name+0x314>
 80071c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d105      	bne.n	80071dc <create_name+0x320>
 80071d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80071dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d117      	bne.n	8007218 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80071e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d105      	bne.n	8007200 <create_name+0x344>
 80071f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071f8:	f043 0310 	orr.w	r3, r3, #16
 80071fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007200:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007204:	f003 030c 	and.w	r3, r3, #12
 8007208:	2b04      	cmp	r3, #4
 800720a:	d105      	bne.n	8007218 <create_name+0x35c>
 800720c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007210:	f043 0308 	orr.w	r3, r3, #8
 8007214:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800721e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007222:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007224:	4618      	mov	r0, r3
 8007226:	3728      	adds	r7, #40	@ 0x28
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007240:	e002      	b.n	8007248 <follow_path+0x1c>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b2f      	cmp	r3, #47	@ 0x2f
 800724e:	d0f8      	beq.n	8007242 <follow_path+0x16>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b5c      	cmp	r3, #92	@ 0x5c
 8007256:	d0f4      	beq.n	8007242 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b1f      	cmp	r3, #31
 8007264:	d80a      	bhi.n	800727c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2280      	movs	r2, #128	@ 0x80
 800726a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800726e:	2100      	movs	r1, #0
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f820 	bl	80062b6 <dir_sdi>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]
 800727a:	e048      	b.n	800730e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800727c:	463b      	mov	r3, r7
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fe1b 	bl	8006ebc <create_name>
 8007286:	4603      	mov	r3, r0
 8007288:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d139      	bne.n	8007304 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff fb7c 	bl	800698e <dir_find>
 8007296:	4603      	mov	r3, r0
 8007298:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80072a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d12c      	bne.n	8007308 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d127      	bne.n	8007308 <follow_path+0xdc>
 80072b8:	2305      	movs	r3, #5
 80072ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80072bc:	e024      	b.n	8007308 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d121      	bne.n	800730c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	799b      	ldrb	r3, [r3, #6]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <follow_path+0xae>
				res = FR_NO_PATH; break;
 80072d4:	2305      	movs	r3, #5
 80072d6:	75fb      	strb	r3, [r7, #23]
 80072d8:	e019      	b.n	800730e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	8992      	ldrh	r2, [r2, #12]
 80072e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80072ec:	fb00 f202 	mul.w	r2, r0, r2
 80072f0:	1a9b      	subs	r3, r3, r2
 80072f2:	440b      	add	r3, r1
 80072f4:	4619      	mov	r1, r3
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff f983 	bl	8006602 <ld_clust>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007302:	e7bb      	b.n	800727c <follow_path+0x50>
			if (res != FR_OK) break;
 8007304:	bf00      	nop
 8007306:	e002      	b.n	800730e <follow_path+0xe2>
				break;
 8007308:	bf00      	nop
 800730a:	e000      	b.n	800730e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800730c:	bf00      	nop
			}
		}
	}

	return res;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007320:	f04f 33ff 	mov.w	r3, #4294967295
 8007324:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d031      	beq.n	8007392 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	e002      	b.n	800733c <get_ldnumber+0x24>
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	3301      	adds	r3, #1
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b1f      	cmp	r3, #31
 8007342:	d903      	bls.n	800734c <get_ldnumber+0x34>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b3a      	cmp	r3, #58	@ 0x3a
 800734a:	d1f4      	bne.n	8007336 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b3a      	cmp	r3, #58	@ 0x3a
 8007352:	d11c      	bne.n	800738e <get_ldnumber+0x76>
			tp = *path;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	60fa      	str	r2, [r7, #12]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	3b30      	subs	r3, #48	@ 0x30
 8007364:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b09      	cmp	r3, #9
 800736a:	d80e      	bhi.n	800738a <get_ldnumber+0x72>
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	429a      	cmp	r2, r3
 8007372:	d10a      	bne.n	800738a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <get_ldnumber+0x72>
					vol = (int)i;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	3301      	adds	r3, #1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	e002      	b.n	8007394 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007392:	693b      	ldr	r3, [r7, #16]
}
 8007394:	4618      	mov	r0, r3
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	70da      	strb	r2, [r3, #3]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fe fb9c 	bl	8005af8 <move_window>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <check_fs+0x2a>
 80073c6:	2304      	movs	r3, #4
 80073c8:	e038      	b.n	800743c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3338      	adds	r3, #56	@ 0x38
 80073ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe f8e0 	bl	8005598 <ld_word>
 80073d8:	4603      	mov	r3, r0
 80073da:	461a      	mov	r2, r3
 80073dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d001      	beq.n	80073e8 <check_fs+0x48>
 80073e4:	2303      	movs	r3, #3
 80073e6:	e029      	b.n	800743c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073ee:	2be9      	cmp	r3, #233	@ 0xe9
 80073f0:	d009      	beq.n	8007406 <check_fs+0x66>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073f8:	2beb      	cmp	r3, #235	@ 0xeb
 80073fa:	d11e      	bne.n	800743a <check_fs+0x9a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007402:	2b90      	cmp	r3, #144	@ 0x90
 8007404:	d119      	bne.n	800743a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3338      	adds	r3, #56	@ 0x38
 800740a:	3336      	adds	r3, #54	@ 0x36
 800740c:	4618      	mov	r0, r3
 800740e:	f7fe f8db 	bl	80055c8 <ld_dword>
 8007412:	4603      	mov	r3, r0
 8007414:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007418:	4a0a      	ldr	r2, [pc, #40]	@ (8007444 <check_fs+0xa4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d101      	bne.n	8007422 <check_fs+0x82>
 800741e:	2300      	movs	r3, #0
 8007420:	e00c      	b.n	800743c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3338      	adds	r3, #56	@ 0x38
 8007426:	3352      	adds	r3, #82	@ 0x52
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe f8cd 	bl	80055c8 <ld_dword>
 800742e:	4603      	mov	r3, r0
 8007430:	4a05      	ldr	r2, [pc, #20]	@ (8007448 <check_fs+0xa8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d101      	bne.n	800743a <check_fs+0x9a>
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800743a:	2302      	movs	r3, #2
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	00544146 	.word	0x00544146
 8007448:	33544146 	.word	0x33544146

0800744c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b096      	sub	sp, #88	@ 0x58
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	4613      	mov	r3, r2
 8007458:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7ff ff59 	bl	8007318 <get_ldnumber>
 8007466:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800746a:	2b00      	cmp	r3, #0
 800746c:	da01      	bge.n	8007472 <find_volume+0x26>
 800746e:	230b      	movs	r3, #11
 8007470:	e265      	b.n	800793e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007472:	4a9f      	ldr	r2, [pc, #636]	@ (80076f0 <find_volume+0x2a4>)
 8007474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <find_volume+0x3a>
 8007482:	230c      	movs	r3, #12
 8007484:	e25b      	b.n	800793e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800748a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	f023 0301 	bic.w	r3, r3, #1
 8007492:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01a      	beq.n	80074d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fd ffdb 	bl	800545c <disk_status>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80074ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10c      	bne.n	80074d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <find_volume+0x82>
 80074be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80074ca:	230a      	movs	r3, #10
 80074cc:	e237      	b.n	800793e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80074ce:	2300      	movs	r3, #0
 80074d0:	e235      	b.n	800793e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80074d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80074d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80074e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fd ffd3 	bl	8005490 <disk_initialize>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80074f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80074fc:	2303      	movs	r3, #3
 80074fe:	e21e      	b.n	800793e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007500:	79fb      	ldrb	r3, [r7, #7]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d007      	beq.n	8007516 <find_volume+0xca>
 8007506:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007512:	230a      	movs	r3, #10
 8007514:	e213      	b.n	800793e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007518:	7858      	ldrb	r0, [r3, #1]
 800751a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751c:	330c      	adds	r3, #12
 800751e:	461a      	mov	r2, r3
 8007520:	2102      	movs	r1, #2
 8007522:	f7fe f81b 	bl	800555c <disk_ioctl>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <find_volume+0xe4>
 800752c:	2301      	movs	r3, #1
 800752e:	e206      	b.n	800793e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007532:	899b      	ldrh	r3, [r3, #12]
 8007534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007538:	d80d      	bhi.n	8007556 <find_volume+0x10a>
 800753a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753c:	899b      	ldrh	r3, [r3, #12]
 800753e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007542:	d308      	bcc.n	8007556 <find_volume+0x10a>
 8007544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007546:	899b      	ldrh	r3, [r3, #12]
 8007548:	461a      	mov	r2, r3
 800754a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754c:	899b      	ldrh	r3, [r3, #12]
 800754e:	3b01      	subs	r3, #1
 8007550:	4013      	ands	r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <find_volume+0x10e>
 8007556:	2301      	movs	r3, #1
 8007558:	e1f1      	b.n	800793e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800755e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007560:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007562:	f7ff ff1d 	bl	80073a0 <check_fs>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800756c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007570:	2b02      	cmp	r3, #2
 8007572:	d149      	bne.n	8007608 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007574:	2300      	movs	r3, #0
 8007576:	643b      	str	r3, [r7, #64]	@ 0x40
 8007578:	e01e      	b.n	80075b8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800757a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007588:	4413      	add	r3, r2
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	3304      	adds	r3, #4
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d006      	beq.n	80075a4 <find_volume+0x158>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	3308      	adds	r3, #8
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe f814 	bl	80055c8 <ld_dword>
 80075a0:	4602      	mov	r2, r0
 80075a2:	e000      	b.n	80075a6 <find_volume+0x15a>
 80075a4:	2200      	movs	r2, #0
 80075a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	3358      	adds	r3, #88	@ 0x58
 80075ac:	443b      	add	r3, r7
 80075ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80075b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075b4:	3301      	adds	r3, #1
 80075b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80075b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d9dd      	bls.n	800757a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80075be:	2300      	movs	r3, #0
 80075c0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80075c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <find_volume+0x182>
 80075c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ca:	3b01      	subs	r3, #1
 80075cc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80075ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	3358      	adds	r3, #88	@ 0x58
 80075d4:	443b      	add	r3, r7
 80075d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075da:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <find_volume+0x1a2>
 80075e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80075e6:	f7ff fedb 	bl	80073a0 <check_fs>
 80075ea:	4603      	mov	r3, r0
 80075ec:	e000      	b.n	80075f0 <find_volume+0x1a4>
 80075ee:	2303      	movs	r3, #3
 80075f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80075f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d905      	bls.n	8007608 <find_volume+0x1bc>
 80075fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075fe:	3301      	adds	r3, #1
 8007600:	643b      	str	r3, [r7, #64]	@ 0x40
 8007602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007604:	2b03      	cmp	r3, #3
 8007606:	d9e2      	bls.n	80075ce <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007608:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800760c:	2b04      	cmp	r3, #4
 800760e:	d101      	bne.n	8007614 <find_volume+0x1c8>
 8007610:	2301      	movs	r3, #1
 8007612:	e194      	b.n	800793e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007614:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007618:	2b01      	cmp	r3, #1
 800761a:	d901      	bls.n	8007620 <find_volume+0x1d4>
 800761c:	230d      	movs	r3, #13
 800761e:	e18e      	b.n	800793e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	3338      	adds	r3, #56	@ 0x38
 8007624:	330b      	adds	r3, #11
 8007626:	4618      	mov	r0, r3
 8007628:	f7fd ffb6 	bl	8005598 <ld_word>
 800762c:	4603      	mov	r3, r0
 800762e:	461a      	mov	r2, r3
 8007630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007632:	899b      	ldrh	r3, [r3, #12]
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <find_volume+0x1f0>
 8007638:	230d      	movs	r3, #13
 800763a:	e180      	b.n	800793e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	3338      	adds	r3, #56	@ 0x38
 8007640:	3316      	adds	r3, #22
 8007642:	4618      	mov	r0, r3
 8007644:	f7fd ffa8 	bl	8005598 <ld_word>
 8007648:	4603      	mov	r3, r0
 800764a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800764c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <find_volume+0x214>
 8007652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007654:	3338      	adds	r3, #56	@ 0x38
 8007656:	3324      	adds	r3, #36	@ 0x24
 8007658:	4618      	mov	r0, r3
 800765a:	f7fd ffb5 	bl	80055c8 <ld_dword>
 800765e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007662:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007664:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007668:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800766c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007672:	789b      	ldrb	r3, [r3, #2]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d005      	beq.n	8007684 <find_volume+0x238>
 8007678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767a:	789b      	ldrb	r3, [r3, #2]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d001      	beq.n	8007684 <find_volume+0x238>
 8007680:	230d      	movs	r3, #13
 8007682:	e15c      	b.n	800793e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007686:	789b      	ldrb	r3, [r3, #2]
 8007688:	461a      	mov	r2, r3
 800768a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800768c:	fb02 f303 	mul.w	r3, r2, r3
 8007690:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007698:	461a      	mov	r2, r3
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	895b      	ldrh	r3, [r3, #10]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d008      	beq.n	80076b8 <find_volume+0x26c>
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	895b      	ldrh	r3, [r3, #10]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	895b      	ldrh	r3, [r3, #10]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	4013      	ands	r3, r2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <find_volume+0x270>
 80076b8:	230d      	movs	r3, #13
 80076ba:	e140      	b.n	800793e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	3338      	adds	r3, #56	@ 0x38
 80076c0:	3311      	adds	r3, #17
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fd ff68 	bl	8005598 <ld_word>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	891b      	ldrh	r3, [r3, #8]
 80076d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076d6:	8992      	ldrh	r2, [r2, #12]
 80076d8:	0952      	lsrs	r2, r2, #5
 80076da:	b292      	uxth	r2, r2
 80076dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80076e0:	fb01 f202 	mul.w	r2, r1, r2
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <find_volume+0x2a8>
 80076ec:	230d      	movs	r3, #13
 80076ee:	e126      	b.n	800793e <find_volume+0x4f2>
 80076f0:	20003cbc 	.word	0x20003cbc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80076f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f6:	3338      	adds	r3, #56	@ 0x38
 80076f8:	3313      	adds	r3, #19
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fd ff4c 	bl	8005598 <ld_word>
 8007700:	4603      	mov	r3, r0
 8007702:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <find_volume+0x2cc>
 800770a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770c:	3338      	adds	r3, #56	@ 0x38
 800770e:	3320      	adds	r3, #32
 8007710:	4618      	mov	r0, r3
 8007712:	f7fd ff59 	bl	80055c8 <ld_dword>
 8007716:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	3338      	adds	r3, #56	@ 0x38
 800771c:	330e      	adds	r3, #14
 800771e:	4618      	mov	r0, r3
 8007720:	f7fd ff3a 	bl	8005598 <ld_word>
 8007724:	4603      	mov	r3, r0
 8007726:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007728:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <find_volume+0x2e6>
 800772e:	230d      	movs	r3, #13
 8007730:	e105      	b.n	800793e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007732:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007736:	4413      	add	r3, r2
 8007738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800773a:	8911      	ldrh	r1, [r2, #8]
 800773c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800773e:	8992      	ldrh	r2, [r2, #12]
 8007740:	0952      	lsrs	r2, r2, #5
 8007742:	b292      	uxth	r2, r2
 8007744:	fbb1 f2f2 	udiv	r2, r1, r2
 8007748:	b292      	uxth	r2, r2
 800774a:	4413      	add	r3, r2
 800774c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800774e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	429a      	cmp	r2, r3
 8007754:	d201      	bcs.n	800775a <find_volume+0x30e>
 8007756:	230d      	movs	r3, #13
 8007758:	e0f1      	b.n	800793e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800775a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800775c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007762:	8952      	ldrh	r2, [r2, #10]
 8007764:	fbb3 f3f2 	udiv	r3, r3, r2
 8007768:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <find_volume+0x328>
 8007770:	230d      	movs	r3, #13
 8007772:	e0e4      	b.n	800793e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007774:	2303      	movs	r3, #3
 8007776:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007780:	4293      	cmp	r3, r2
 8007782:	d802      	bhi.n	800778a <find_volume+0x33e>
 8007784:	2302      	movs	r3, #2
 8007786:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007790:	4293      	cmp	r3, r2
 8007792:	d802      	bhi.n	800779a <find_volume+0x34e>
 8007794:	2301      	movs	r3, #1
 8007796:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	1c9a      	adds	r2, r3, #2
 800779e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077a6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80077a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80077aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ac:	441a      	add	r2, r3
 80077ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80077b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b6:	441a      	add	r2, r3
 80077b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ba:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80077bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d11e      	bne.n	8007802 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	3338      	adds	r3, #56	@ 0x38
 80077c8:	332a      	adds	r3, #42	@ 0x2a
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd fee4 	bl	8005598 <ld_word>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <find_volume+0x38e>
 80077d6:	230d      	movs	r3, #13
 80077d8:	e0b1      	b.n	800793e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80077da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077dc:	891b      	ldrh	r3, [r3, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <find_volume+0x39a>
 80077e2:	230d      	movs	r3, #13
 80077e4:	e0ab      	b.n	800793e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80077e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e8:	3338      	adds	r3, #56	@ 0x38
 80077ea:	332c      	adds	r3, #44	@ 0x2c
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fd feeb 	bl	80055c8 <ld_dword>
 80077f2:	4602      	mov	r2, r0
 80077f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80077f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007800:	e01f      	b.n	8007842 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007804:	891b      	ldrh	r3, [r3, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <find_volume+0x3c2>
 800780a:	230d      	movs	r3, #13
 800780c:	e097      	b.n	800793e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800780e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007810:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007814:	441a      	add	r2, r3
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800781a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800781e:	2b02      	cmp	r3, #2
 8007820:	d103      	bne.n	800782a <find_volume+0x3de>
 8007822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	e00a      	b.n	8007840 <find_volume+0x3f4>
 800782a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	4613      	mov	r3, r2
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	4413      	add	r3, r2
 8007834:	085a      	lsrs	r2, r3, #1
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007840:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007844:	6a1a      	ldr	r2, [r3, #32]
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	899b      	ldrh	r3, [r3, #12]
 800784a:	4619      	mov	r1, r3
 800784c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800784e:	440b      	add	r3, r1
 8007850:	3b01      	subs	r3, #1
 8007852:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007854:	8989      	ldrh	r1, [r1, #12]
 8007856:	fbb3 f3f1 	udiv	r3, r3, r1
 800785a:	429a      	cmp	r2, r3
 800785c:	d201      	bcs.n	8007862 <find_volume+0x416>
 800785e:	230d      	movs	r3, #13
 8007860:	e06d      	b.n	800793e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007864:	f04f 32ff 	mov.w	r2, #4294967295
 8007868:	619a      	str	r2, [r3, #24]
 800786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786c:	699a      	ldr	r2, [r3, #24]
 800786e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007870:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	2280      	movs	r2, #128	@ 0x80
 8007876:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007878:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800787c:	2b03      	cmp	r3, #3
 800787e:	d149      	bne.n	8007914 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	3338      	adds	r3, #56	@ 0x38
 8007884:	3330      	adds	r3, #48	@ 0x30
 8007886:	4618      	mov	r0, r3
 8007888:	f7fd fe86 	bl	8005598 <ld_word>
 800788c:	4603      	mov	r3, r0
 800788e:	2b01      	cmp	r3, #1
 8007890:	d140      	bne.n	8007914 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007894:	3301      	adds	r3, #1
 8007896:	4619      	mov	r1, r3
 8007898:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800789a:	f7fe f92d 	bl	8005af8 <move_window>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d137      	bne.n	8007914 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80078a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a6:	2200      	movs	r2, #0
 80078a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	3338      	adds	r3, #56	@ 0x38
 80078ae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fd fe70 	bl	8005598 <ld_word>
 80078b8:	4603      	mov	r3, r0
 80078ba:	461a      	mov	r2, r3
 80078bc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d127      	bne.n	8007914 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80078c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c6:	3338      	adds	r3, #56	@ 0x38
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fd fe7d 	bl	80055c8 <ld_dword>
 80078ce:	4603      	mov	r3, r0
 80078d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007948 <find_volume+0x4fc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d11e      	bne.n	8007914 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80078d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d8:	3338      	adds	r3, #56	@ 0x38
 80078da:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fd fe72 	bl	80055c8 <ld_dword>
 80078e4:	4603      	mov	r3, r0
 80078e6:	4a19      	ldr	r2, [pc, #100]	@ (800794c <find_volume+0x500>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d113      	bne.n	8007914 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	3338      	adds	r3, #56	@ 0x38
 80078f0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fd fe67 	bl	80055c8 <ld_dword>
 80078fa:	4602      	mov	r2, r0
 80078fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	3338      	adds	r3, #56	@ 0x38
 8007904:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007908:	4618      	mov	r0, r3
 800790a:	f7fd fe5d 	bl	80055c8 <ld_dword>
 800790e:	4602      	mov	r2, r0
 8007910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007912:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007916:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800791a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800791c:	4b0c      	ldr	r3, [pc, #48]	@ (8007950 <find_volume+0x504>)
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	4b0a      	ldr	r3, [pc, #40]	@ (8007950 <find_volume+0x504>)
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	4b09      	ldr	r3, [pc, #36]	@ (8007950 <find_volume+0x504>)
 800792a:	881a      	ldrh	r2, [r3, #0]
 800792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	4a08      	ldr	r2, [pc, #32]	@ (8007954 <find_volume+0x508>)
 8007934:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007936:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007938:	f7fe f876 	bl	8005a28 <clear_lock>
#endif
	return FR_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3758      	adds	r7, #88	@ 0x58
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	41615252 	.word	0x41615252
 800794c:	61417272 	.word	0x61417272
 8007950:	20003cc0 	.word	0x20003cc0
 8007954:	20003ce4 	.word	0x20003ce4

08007958 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007962:	2309      	movs	r3, #9
 8007964:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01c      	beq.n	80079a6 <validate+0x4e>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d018      	beq.n	80079a6 <validate+0x4e>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d013      	beq.n	80079a6 <validate+0x4e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	889a      	ldrh	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	88db      	ldrh	r3, [r3, #6]
 8007988:	429a      	cmp	r2, r3
 800798a:	d10c      	bne.n	80079a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	4618      	mov	r0, r3
 8007994:	f7fd fd62 	bl	800545c <disk_status>
 8007998:	4603      	mov	r3, r0
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <validate+0x4e>
			res = FR_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <validate+0x5a>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	e000      	b.n	80079b4 <validate+0x5c>
 80079b2:	2300      	movs	r3, #0
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	6013      	str	r3, [r2, #0]
	return res;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80079d6:	f107 0310 	add.w	r3, r7, #16
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff fc9c 	bl	8007318 <get_ldnumber>
 80079e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da01      	bge.n	80079ec <f_mount+0x28>
 80079e8:	230b      	movs	r3, #11
 80079ea:	e02b      	b.n	8007a44 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80079ec:	4a17      	ldr	r2, [pc, #92]	@ (8007a4c <f_mount+0x88>)
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80079fc:	69b8      	ldr	r0, [r7, #24]
 80079fe:	f7fe f813 	bl	8005a28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2200      	movs	r2, #0
 8007a06:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	490d      	ldr	r1, [pc, #52]	@ (8007a4c <f_mount+0x88>)
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <f_mount+0x66>
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d001      	beq.n	8007a2e <f_mount+0x6a>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e00a      	b.n	8007a44 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007a2e:	f107 010c 	add.w	r1, r7, #12
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	2200      	movs	r2, #0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff fd07 	bl	800744c <find_volume>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3720      	adds	r7, #32
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20003cbc 	.word	0x20003cbc

08007a50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b09a      	sub	sp, #104	@ 0x68
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <f_open+0x18>
 8007a64:	2309      	movs	r3, #9
 8007a66:	e1b7      	b.n	8007dd8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a6e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007a70:	79fa      	ldrb	r2, [r7, #7]
 8007a72:	f107 0114 	add.w	r1, r7, #20
 8007a76:	f107 0308 	add.w	r3, r7, #8
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fce6 	bl	800744c <find_volume>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007a86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f040 819b 	bne.w	8007dc6 <f_open+0x376>
		dj.obj.fs = fs;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	f107 0318 	add.w	r3, r7, #24
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff fbc5 	bl	800722c <follow_path>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007aa8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d118      	bne.n	8007ae2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007ab4:	b25b      	sxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	da03      	bge.n	8007ac2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007aba:	2306      	movs	r3, #6
 8007abc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007ac0:	e00f      	b.n	8007ae2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	bf8c      	ite	hi
 8007ac8:	2301      	movhi	r3, #1
 8007aca:	2300      	movls	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f107 0318 	add.w	r3, r7, #24
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fd fe5e 	bl	8005798 <chk_lock>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	f003 031c 	and.w	r3, r3, #28
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d07f      	beq.n	8007bec <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007aec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d017      	beq.n	8007b24 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007af4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d10e      	bne.n	8007b1a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007afc:	f7fd fea8 	bl	8005850 <enq_lock>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d006      	beq.n	8007b14 <f_open+0xc4>
 8007b06:	f107 0318 	add.w	r3, r7, #24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff f800 	bl	8006b10 <dir_register>
 8007b10:	4603      	mov	r3, r0
 8007b12:	e000      	b.n	8007b16 <f_open+0xc6>
 8007b14:	2312      	movs	r3, #18
 8007b16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	f043 0308 	orr.w	r3, r3, #8
 8007b20:	71fb      	strb	r3, [r7, #7]
 8007b22:	e010      	b.n	8007b46 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b24:	7fbb      	ldrb	r3, [r7, #30]
 8007b26:	f003 0311 	and.w	r3, r3, #17
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <f_open+0xe6>
					res = FR_DENIED;
 8007b2e:	2307      	movs	r3, #7
 8007b30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007b34:	e007      	b.n	8007b46 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <f_open+0xf6>
 8007b40:	2308      	movs	r3, #8
 8007b42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007b46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d168      	bne.n	8007c20 <f_open+0x1d0>
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d063      	beq.n	8007c20 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007b58:	f7fd fc20 	bl	800539c <get_fattime>
 8007b5c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b60:	330e      	adds	r3, #14
 8007b62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fd fd6d 	bl	8005644 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6c:	3316      	adds	r3, #22
 8007b6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fd fd67 	bl	8005644 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b78:	330b      	adds	r3, #11
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b82:	4611      	mov	r1, r2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe fd3c 	bl	8006602 <ld_clust>
 8007b8a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007b90:	2200      	movs	r2, #0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fd54 	bl	8006640 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9a:	331c      	adds	r3, #28
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fd fd50 	bl	8005644 <st_dword>
					fs->wflag = 1;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d037      	beq.n	8007c20 <f_open+0x1d0>
						dw = fs->winsect;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007bb6:	f107 0318 	add.w	r3, r7, #24
 8007bba:	2200      	movs	r2, #0
 8007bbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe fa44 	bl	800604c <remove_chain>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007bca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d126      	bne.n	8007c20 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fd ff8e 	bl	8005af8 <move_window>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007be6:	3a01      	subs	r2, #1
 8007be8:	615a      	str	r2, [r3, #20]
 8007bea:	e019      	b.n	8007c20 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007bec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d115      	bne.n	8007c20 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007bf4:	7fbb      	ldrb	r3, [r7, #30]
 8007bf6:	f003 0310 	and.w	r3, r3, #16
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007bfe:	2304      	movs	r3, #4
 8007c00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007c04:	e00c      	b.n	8007c20 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <f_open+0x1d0>
 8007c10:	7fbb      	ldrb	r3, [r7, #30]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <f_open+0x1d0>
						res = FR_DENIED;
 8007c1a:	2307      	movs	r3, #7
 8007c1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007c20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d126      	bne.n	8007c76 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c38:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007c42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	bf8c      	ite	hi
 8007c4e:	2301      	movhi	r3, #1
 8007c50:	2300      	movls	r3, #0
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	f107 0318 	add.w	r3, r7, #24
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fd fe19 	bl	8005894 <inc_lock>
 8007c62:	4602      	mov	r2, r0
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d102      	bne.n	8007c76 <f_open+0x226>
 8007c70:	2302      	movs	r3, #2
 8007c72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007c76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f040 80a3 	bne.w	8007dc6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fcbb 	bl	8006602 <ld_clust>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c94:	331c      	adds	r3, #28
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fd fc96 	bl	80055c8 <ld_dword>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	88da      	ldrh	r2, [r3, #6]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	79fa      	ldrb	r2, [r7, #7]
 8007cba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3330      	adds	r3, #48	@ 0x30
 8007cd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fd fd00 	bl	80056de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d06e      	beq.n	8007dc6 <f_open+0x376>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d06a      	beq.n	8007dc6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	895b      	ldrh	r3, [r3, #10]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	899b      	ldrh	r3, [r3, #12]
 8007d02:	fb02 f303 	mul.w	r3, r2, r3
 8007d06:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d14:	e016      	b.n	8007d44 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fd ffa9 	bl	8005c72 <get_fat>
 8007d20:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007d22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d802      	bhi.n	8007d2e <f_open+0x2de>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d34:	d102      	bne.n	8007d3c <f_open+0x2ec>
 8007d36:	2301      	movs	r3, #1
 8007d38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <f_open+0x304>
 8007d4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d8e0      	bhi.n	8007d16 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d58:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d131      	bne.n	8007dc6 <f_open+0x376>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	899b      	ldrh	r3, [r3, #12]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d6e:	fb01 f202 	mul.w	r2, r1, r2
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d026      	beq.n	8007dc6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fd ff59 	bl	8005c34 <clust2sect>
 8007d82:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d103      	bne.n	8007d92 <f_open+0x342>
						res = FR_INT_ERR;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007d90:	e019      	b.n	8007dc6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	899b      	ldrh	r3, [r3, #12]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007da0:	441a      	add	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	7858      	ldrb	r0, [r3, #1]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1a      	ldr	r2, [r3, #32]
 8007db4:	2301      	movs	r3, #1
 8007db6:	f7fd fb91 	bl	80054dc <disk_read>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <f_open+0x376>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <f_open+0x384>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007dd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3768      	adds	r7, #104	@ 0x68
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08e      	sub	sp, #56	@ 0x38
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f107 0214 	add.w	r2, r7, #20
 8007dfe:	4611      	mov	r1, r2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff fda9 	bl	8007958 <validate>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007e0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d107      	bne.n	8007e24 <f_read+0x44>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	7d5b      	ldrb	r3, [r3, #21]
 8007e18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007e1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <f_read+0x4a>
 8007e24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e28:	e135      	b.n	8008096 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	7d1b      	ldrb	r3, [r3, #20]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <f_read+0x5a>
 8007e36:	2307      	movs	r3, #7
 8007e38:	e12d      	b.n	8008096 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	f240 811e 	bls.w	800808c <f_read+0x2ac>
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007e54:	e11a      	b.n	800808c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	8992      	ldrh	r2, [r2, #12]
 8007e5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e62:	fb01 f202 	mul.w	r2, r1, r2
 8007e66:	1a9b      	subs	r3, r3, r2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f040 80d5 	bne.w	8008018 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	8992      	ldrh	r2, [r2, #12]
 8007e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	8952      	ldrh	r2, [r2, #10]
 8007e7e:	3a01      	subs	r2, #1
 8007e80:	4013      	ands	r3, r2
 8007e82:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d12f      	bne.n	8007eea <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d103      	bne.n	8007e9a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e98:	e013      	b.n	8007ec2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7fe f9cc 	bl	8006246 <clmt_clust>
 8007eae:	6338      	str	r0, [r7, #48]	@ 0x30
 8007eb0:	e007      	b.n	8007ec2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7fd fed9 	bl	8005c72 <get_fat>
 8007ec0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d804      	bhi.n	8007ed2 <f_read+0xf2>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	755a      	strb	r2, [r3, #21]
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e0e1      	b.n	8008096 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed8:	d104      	bne.n	8007ee4 <f_read+0x104>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	755a      	strb	r2, [r3, #21]
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e0d8      	b.n	8008096 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ee8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f7fd fe9e 	bl	8005c34 <clust2sect>
 8007ef8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <f_read+0x12a>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2202      	movs	r2, #2
 8007f04:	755a      	strb	r2, [r3, #21]
 8007f06:	2302      	movs	r3, #2
 8007f08:	e0c5      	b.n	8008096 <f_read+0x2b6>
			sect += csect;
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	4413      	add	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	899b      	ldrh	r3, [r3, #12]
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d041      	beq.n	8007faa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2a:	4413      	add	r3, r2
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	8952      	ldrh	r2, [r2, #10]
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d905      	bls.n	8007f40 <f_read+0x160>
					cc = fs->csize - csect;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	895b      	ldrh	r3, [r3, #10]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	7858      	ldrb	r0, [r3, #1]
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f4a:	f7fd fac7 	bl	80054dc <disk_read>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d004      	beq.n	8007f5e <f_read+0x17e>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	755a      	strb	r2, [r3, #21]
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e09b      	b.n	8008096 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	7d1b      	ldrb	r3, [r3, #20]
 8007f62:	b25b      	sxtb	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	da18      	bge.n	8007f9a <f_read+0x1ba>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a1a      	ldr	r2, [r3, #32]
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d911      	bls.n	8007f9a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a1a      	ldr	r2, [r3, #32]
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	8992      	ldrh	r2, [r2, #12]
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f88:	18d0      	adds	r0, r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	899b      	ldrh	r3, [r3, #12]
 8007f94:	461a      	mov	r2, r3
 8007f96:	f7fd fb81 	bl	800569c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	899b      	ldrh	r3, [r3, #12]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	fb02 f303 	mul.w	r3, r2, r3
 8007fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007fa8:	e05c      	b.n	8008064 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d02e      	beq.n	8008012 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	7d1b      	ldrb	r3, [r3, #20]
 8007fb8:	b25b      	sxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	da18      	bge.n	8007ff0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	7858      	ldrb	r0, [r3, #1]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f7fd faa5 	bl	800551c <disk_write>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <f_read+0x202>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	755a      	strb	r2, [r3, #21]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e059      	b.n	8008096 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	7d1b      	ldrb	r3, [r3, #20]
 8007fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	7858      	ldrb	r0, [r3, #1]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	f7fd fa6d 	bl	80054dc <disk_read>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d004      	beq.n	8008012 <f_read+0x232>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2201      	movs	r2, #1
 800800c:	755a      	strb	r2, [r3, #21]
 800800e:	2301      	movs	r3, #1
 8008010:	e041      	b.n	8008096 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	899b      	ldrh	r3, [r3, #12]
 800801c:	4618      	mov	r0, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	8992      	ldrh	r2, [r2, #12]
 8008026:	fbb3 f1f2 	udiv	r1, r3, r2
 800802a:	fb01 f202 	mul.w	r2, r1, r2
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	1ac3      	subs	r3, r0, r3
 8008032:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	429a      	cmp	r2, r3
 800803a:	d901      	bls.n	8008040 <f_read+0x260>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	8992      	ldrh	r2, [r2, #12]
 800804e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008052:	fb00 f202 	mul.w	r2, r0, r2
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	440b      	add	r3, r1
 800805a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800805c:	4619      	mov	r1, r3
 800805e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008060:	f7fd fb1c 	bl	800569c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008068:	4413      	add	r3, r2
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	699a      	ldr	r2, [r3, #24]
 8008070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008072:	441a      	add	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	619a      	str	r2, [r3, #24]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807e:	441a      	add	r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	f47f aee1 	bne.w	8007e56 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3738      	adds	r7, #56	@ 0x38
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b086      	sub	sp, #24
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f107 0208 	add.w	r2, r7, #8
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff fc52 	bl	8007958 <validate>
 80080b4:	4603      	mov	r3, r0
 80080b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d168      	bne.n	8008190 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	7d1b      	ldrb	r3, [r3, #20]
 80080c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d062      	beq.n	8008190 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7d1b      	ldrb	r3, [r3, #20]
 80080ce:	b25b      	sxtb	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	da15      	bge.n	8008100 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	7858      	ldrb	r0, [r3, #1]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1a      	ldr	r2, [r3, #32]
 80080e2:	2301      	movs	r3, #1
 80080e4:	f7fd fa1a 	bl	800551c <disk_write>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <f_sync+0x54>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e04f      	b.n	8008192 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	7d1b      	ldrb	r3, [r3, #20]
 80080f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008100:	f7fd f94c 	bl	800539c <get_fattime>
 8008104:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810c:	4619      	mov	r1, r3
 800810e:	4610      	mov	r0, r2
 8008110:	f7fd fcf2 	bl	8005af8 <move_window>
 8008114:	4603      	mov	r3, r0
 8008116:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d138      	bne.n	8008190 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008122:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	330b      	adds	r3, #11
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	330b      	adds	r3, #11
 800812e:	f042 0220 	orr.w	r2, r2, #32
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	461a      	mov	r2, r3
 8008140:	68f9      	ldr	r1, [r7, #12]
 8008142:	f7fe fa7d 	bl	8006640 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f103 021c 	add.w	r2, r3, #28
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f7fd fa76 	bl	8005644 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3316      	adds	r3, #22
 800815c:	6939      	ldr	r1, [r7, #16]
 800815e:	4618      	mov	r0, r3
 8008160:	f7fd fa70 	bl	8005644 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3312      	adds	r3, #18
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f7fd fa4f 	bl	800560e <st_word>
					fs->wflag = 1;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2201      	movs	r2, #1
 8008174:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4618      	mov	r0, r3
 800817a:	f7fd fceb 	bl	8005b54 <sync_fs>
 800817e:	4603      	mov	r3, r0
 8008180:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	7d1b      	ldrb	r3, [r3, #20]
 8008186:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800818a:	b2da      	uxtb	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008190:	7dfb      	ldrb	r3, [r7, #23]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff ff7b 	bl	800809e <f_sync>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d118      	bne.n	80081e4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f107 0208 	add.w	r2, r7, #8
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7ff fbcc 	bl	8007958 <validate>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10c      	bne.n	80081e4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fd fbee 	bl	80059b0 <dec_lock>
 80081d4:	4603      	mov	r3, r0
 80081d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d102      	bne.n	80081e4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b090      	sub	sp, #64	@ 0x40
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f107 0208 	add.w	r2, r7, #8
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff fba9 	bl	8007958 <validate>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800820c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008210:	2b00      	cmp	r3, #0
 8008212:	d103      	bne.n	800821c <f_lseek+0x2e>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	7d5b      	ldrb	r3, [r3, #21]
 8008218:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800821c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <f_lseek+0x3c>
 8008224:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008228:	e201      	b.n	800862e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 80d9 	beq.w	80083e6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823a:	d15a      	bne.n	80082f2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008240:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	1d1a      	adds	r2, r3, #4
 8008246:	627a      	str	r2, [r7, #36]	@ 0x24
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	2302      	movs	r3, #2
 800824e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	2b00      	cmp	r3, #0
 800825a:	d03a      	beq.n	80082d2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800825c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	2300      	movs	r3, #0
 8008262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008266:	3302      	adds	r3, #2
 8008268:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008270:	3301      	adds	r3, #1
 8008272:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008278:	4618      	mov	r0, r3
 800827a:	f7fd fcfa 	bl	8005c72 <get_fat>
 800827e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008282:	2b01      	cmp	r3, #1
 8008284:	d804      	bhi.n	8008290 <f_lseek+0xa2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	755a      	strb	r2, [r3, #21]
 800828c:	2302      	movs	r3, #2
 800828e:	e1ce      	b.n	800862e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008296:	d104      	bne.n	80082a2 <f_lseek+0xb4>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	755a      	strb	r2, [r3, #21]
 800829e:	2301      	movs	r3, #1
 80082a0:	e1c5      	b.n	800862e <f_lseek+0x440>
					} while (cl == pcl + 1);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d0de      	beq.n	800826a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80082ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d809      	bhi.n	80082c8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	1d1a      	adds	r2, r3, #4
 80082b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80082ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	1d1a      	adds	r2, r3, #4
 80082c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d3c4      	bcc.n	800825c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082d8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80082da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d803      	bhi.n	80082ea <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	e19f      	b.n	800862a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80082ea:	2311      	movs	r3, #17
 80082ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80082f0:	e19b      	b.n	800862a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d902      	bls.n	8008302 <f_lseek+0x114>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 818d 	beq.w	800862a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	3b01      	subs	r3, #1
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7fd ff95 	bl	8006246 <clmt_clust>
 800831c:	4602      	mov	r2, r0
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	4619      	mov	r1, r3
 800832a:	4610      	mov	r0, r2
 800832c:	f7fd fc82 	bl	8005c34 <clust2sect>
 8008330:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <f_lseek+0x154>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	755a      	strb	r2, [r3, #21]
 800833e:	2302      	movs	r3, #2
 8008340:	e175      	b.n	800862e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	3b01      	subs	r3, #1
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	8992      	ldrh	r2, [r2, #12]
 800834a:	fbb3 f3f2 	udiv	r3, r3, r2
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	8952      	ldrh	r2, [r2, #10]
 8008352:	3a01      	subs	r2, #1
 8008354:	4013      	ands	r3, r2
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	4413      	add	r3, r2
 800835a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	8992      	ldrh	r2, [r2, #12]
 8008364:	fbb3 f1f2 	udiv	r1, r3, r2
 8008368:	fb01 f202 	mul.w	r2, r1, r2
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 815b 	beq.w	800862a <f_lseek+0x43c>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	429a      	cmp	r2, r3
 800837c:	f000 8155 	beq.w	800862a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	7d1b      	ldrb	r3, [r3, #20]
 8008384:	b25b      	sxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	da18      	bge.n	80083bc <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	7858      	ldrb	r0, [r3, #1]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a1a      	ldr	r2, [r3, #32]
 8008398:	2301      	movs	r3, #1
 800839a:	f7fd f8bf 	bl	800551c <disk_write>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <f_lseek+0x1c0>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	755a      	strb	r2, [r3, #21]
 80083aa:	2301      	movs	r3, #1
 80083ac:	e13f      	b.n	800862e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7d1b      	ldrb	r3, [r3, #20]
 80083b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	7858      	ldrb	r0, [r3, #1]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083c6:	2301      	movs	r3, #1
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	f7fd f887 	bl	80054dc <disk_read>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <f_lseek+0x1f0>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	755a      	strb	r2, [r3, #21]
 80083da:	2301      	movs	r3, #1
 80083dc:	e127      	b.n	800862e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	621a      	str	r2, [r3, #32]
 80083e4:	e121      	b.n	800862a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d908      	bls.n	8008402 <f_lseek+0x214>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	7d1b      	ldrb	r3, [r3, #20]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008410:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 80b5 	beq.w	8008584 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	895b      	ldrh	r3, [r3, #10]
 800841e:	461a      	mov	r2, r3
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	899b      	ldrh	r3, [r3, #12]
 8008424:	fb02 f303 	mul.w	r3, r2, r3
 8008428:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01b      	beq.n	8008468 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	1e5a      	subs	r2, r3, #1
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	fbb2 f2f3 	udiv	r2, r2, r3
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	1e59      	subs	r1, r3, #1
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008444:	429a      	cmp	r2, r3
 8008446:	d30f      	bcc.n	8008468 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	1e5a      	subs	r2, r3, #1
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	425b      	negs	r3, r3
 8008450:	401a      	ands	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008466:	e022      	b.n	80084ae <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800846e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008470:	2b00      	cmp	r3, #0
 8008472:	d119      	bne.n	80084a8 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2100      	movs	r1, #0
 8008478:	4618      	mov	r0, r3
 800847a:	f7fd fe4c 	bl	8006116 <create_chain>
 800847e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	2b01      	cmp	r3, #1
 8008484:	d104      	bne.n	8008490 <f_lseek+0x2a2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2202      	movs	r2, #2
 800848a:	755a      	strb	r2, [r3, #21]
 800848c:	2302      	movs	r3, #2
 800848e:	e0ce      	b.n	800862e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008496:	d104      	bne.n	80084a2 <f_lseek+0x2b4>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	755a      	strb	r2, [r3, #21]
 800849e:	2301      	movs	r3, #1
 80084a0:	e0c5      	b.n	800862e <f_lseek+0x440>
					fp->obj.sclust = clst;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084a6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084ac:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80084ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d067      	beq.n	8008584 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80084b4:	e03a      	b.n	800852c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	603b      	str	r3, [r7, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	699a      	ldr	r2, [r3, #24]
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	441a      	add	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7d1b      	ldrb	r3, [r3, #20]
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fd fe1b 	bl	8006116 <create_chain>
 80084e0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80084e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d108      	bne.n	80084fa <f_lseek+0x30c>
							ofs = 0; break;
 80084e8:	2300      	movs	r3, #0
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	e022      	b.n	8008534 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fd fbbd 	bl	8005c72 <get_fat>
 80084f8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d104      	bne.n	800850c <f_lseek+0x31e>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	755a      	strb	r2, [r3, #21]
 8008508:	2301      	movs	r3, #1
 800850a:	e090      	b.n	800862e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800850c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850e:	2b01      	cmp	r3, #1
 8008510:	d904      	bls.n	800851c <f_lseek+0x32e>
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008518:	429a      	cmp	r2, r3
 800851a:	d304      	bcc.n	8008526 <f_lseek+0x338>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	755a      	strb	r2, [r3, #21]
 8008522:	2302      	movs	r3, #2
 8008524:	e083      	b.n	800862e <f_lseek+0x440>
					fp->clust = clst;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800852a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	429a      	cmp	r2, r3
 8008532:	d8c0      	bhi.n	80084b6 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	699a      	ldr	r2, [r3, #24]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	441a      	add	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	899b      	ldrh	r3, [r3, #12]
 8008544:	461a      	mov	r2, r3
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	fbb3 f1f2 	udiv	r1, r3, r2
 800854c:	fb01 f202 	mul.w	r2, r1, r2
 8008550:	1a9b      	subs	r3, r3, r2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d016      	beq.n	8008584 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800855a:	4618      	mov	r0, r3
 800855c:	f7fd fb6a 	bl	8005c34 <clust2sect>
 8008560:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008564:	2b00      	cmp	r3, #0
 8008566:	d104      	bne.n	8008572 <f_lseek+0x384>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	755a      	strb	r2, [r3, #21]
 800856e:	2302      	movs	r3, #2
 8008570:	e05d      	b.n	800862e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	899b      	ldrh	r3, [r3, #12]
 8008576:	461a      	mov	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	fbb3 f3f2 	udiv	r3, r3, r2
 800857e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008580:	4413      	add	r3, r2
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699a      	ldr	r2, [r3, #24]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	429a      	cmp	r2, r3
 800858e:	d90a      	bls.n	80085a6 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699a      	ldr	r2, [r3, #24]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	7d1b      	ldrb	r3, [r3, #20]
 800859c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	8992      	ldrh	r2, [r2, #12]
 80085ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80085b2:	fb01 f202 	mul.w	r2, r1, r2
 80085b6:	1a9b      	subs	r3, r3, r2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d036      	beq.n	800862a <f_lseek+0x43c>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d031      	beq.n	800862a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	7d1b      	ldrb	r3, [r3, #20]
 80085ca:	b25b      	sxtb	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	da18      	bge.n	8008602 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	7858      	ldrb	r0, [r3, #1]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1a      	ldr	r2, [r3, #32]
 80085de:	2301      	movs	r3, #1
 80085e0:	f7fc ff9c 	bl	800551c <disk_write>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <f_lseek+0x406>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	755a      	strb	r2, [r3, #21]
 80085f0:	2301      	movs	r3, #1
 80085f2:	e01c      	b.n	800862e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	7d1b      	ldrb	r3, [r3, #20]
 80085f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	7858      	ldrb	r0, [r3, #1]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800860c:	2301      	movs	r3, #1
 800860e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008610:	f7fc ff64 	bl	80054dc <disk_read>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <f_lseek+0x436>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	755a      	strb	r2, [r3, #21]
 8008620:	2301      	movs	r3, #1
 8008622:	e004      	b.n	800862e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008628:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800862a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800862e:	4618      	mov	r0, r3
 8008630:	3740      	adds	r7, #64	@ 0x40
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b090      	sub	sp, #64	@ 0x40
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008640:	f107 0108 	add.w	r1, r7, #8
 8008644:	1d3b      	adds	r3, r7, #4
 8008646:	2200      	movs	r2, #0
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe feff 	bl	800744c <find_volume>
 800864e:	4603      	mov	r3, r0
 8008650:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8008654:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008658:	2b00      	cmp	r3, #0
 800865a:	d11f      	bne.n	800869c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fde1 	bl	800722c <follow_path>
 800866a:	4603      	mov	r3, r0
 800866c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008670:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008674:	2b00      	cmp	r3, #0
 8008676:	d111      	bne.n	800869c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008678:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800867c:	b25b      	sxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	da03      	bge.n	800868a <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008682:	2306      	movs	r3, #6
 8008684:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008688:	e008      	b.n	800869c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <f_stat+0x66>
 8008690:	f107 0308 	add.w	r3, r7, #8
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fb32 	bl	8006d00 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800869c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3740      	adds	r7, #64	@ 0x40
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80086b6:	2301      	movs	r3, #1
 80086b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80086be:	4b1f      	ldr	r3, [pc, #124]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086c0:	7a5b      	ldrb	r3, [r3, #9]
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d131      	bne.n	800872c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80086c8:	4b1c      	ldr	r3, [pc, #112]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086ca:	7a5b      	ldrb	r3, [r3, #9]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	4b1a      	ldr	r3, [pc, #104]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086d2:	2100      	movs	r1, #0
 80086d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80086d6:	4b19      	ldr	r3, [pc, #100]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086d8:	7a5b      	ldrb	r3, [r3, #9]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	4a17      	ldr	r2, [pc, #92]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80086e6:	4b15      	ldr	r3, [pc, #84]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086e8:	7a5b      	ldrb	r3, [r3, #9]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	4b13      	ldr	r3, [pc, #76]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086f0:	4413      	add	r3, r2
 80086f2:	79fa      	ldrb	r2, [r7, #7]
 80086f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80086f6:	4b11      	ldr	r3, [pc, #68]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086f8:	7a5b      	ldrb	r3, [r3, #9]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	b2d1      	uxtb	r1, r2
 8008700:	4a0e      	ldr	r2, [pc, #56]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 8008702:	7251      	strb	r1, [r2, #9]
 8008704:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008706:	7dbb      	ldrb	r3, [r7, #22]
 8008708:	3330      	adds	r3, #48	@ 0x30
 800870a:	b2da      	uxtb	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	3301      	adds	r3, #1
 8008714:	223a      	movs	r2, #58	@ 0x3a
 8008716:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	3302      	adds	r3, #2
 800871c:	222f      	movs	r2, #47	@ 0x2f
 800871e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3303      	adds	r3, #3
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
}
 800872e:	4618      	mov	r0, r3
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20003ee4 	.word	0x20003ee4

08008740 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800874a:	2200      	movs	r2, #0
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff ffaa 	bl	80086a8 <FATFS_LinkDriverEx>
 8008754:	4603      	mov	r3, r0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	6039      	str	r1, [r7, #0]
 800876a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008770:	d802      	bhi.n	8008778 <ff_convert+0x18>
		c = chr;
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	81fb      	strh	r3, [r7, #14]
 8008776:	e025      	b.n	80087c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00b      	beq.n	8008796 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800877e:	88fb      	ldrh	r3, [r7, #6]
 8008780:	2bff      	cmp	r3, #255	@ 0xff
 8008782:	d805      	bhi.n	8008790 <ff_convert+0x30>
 8008784:	88fb      	ldrh	r3, [r7, #6]
 8008786:	3b80      	subs	r3, #128	@ 0x80
 8008788:	4a12      	ldr	r2, [pc, #72]	@ (80087d4 <ff_convert+0x74>)
 800878a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800878e:	e000      	b.n	8008792 <ff_convert+0x32>
 8008790:	2300      	movs	r3, #0
 8008792:	81fb      	strh	r3, [r7, #14]
 8008794:	e016      	b.n	80087c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008796:	2300      	movs	r3, #0
 8008798:	81fb      	strh	r3, [r7, #14]
 800879a:	e009      	b.n	80087b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800879c:	89fb      	ldrh	r3, [r7, #14]
 800879e:	4a0d      	ldr	r2, [pc, #52]	@ (80087d4 <ff_convert+0x74>)
 80087a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a4:	88fa      	ldrh	r2, [r7, #6]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d006      	beq.n	80087b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80087aa:	89fb      	ldrh	r3, [r7, #14]
 80087ac:	3301      	adds	r3, #1
 80087ae:	81fb      	strh	r3, [r7, #14]
 80087b0:	89fb      	ldrh	r3, [r7, #14]
 80087b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80087b4:	d9f2      	bls.n	800879c <ff_convert+0x3c>
 80087b6:	e000      	b.n	80087ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80087b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80087ba:	89fb      	ldrh	r3, [r7, #14]
 80087bc:	3380      	adds	r3, #128	@ 0x80
 80087be:	b29b      	uxth	r3, r3
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80087c4:	89fb      	ldrh	r3, [r7, #14]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	080098cc 	.word	0x080098cc

080087d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087e8:	d201      	bcs.n	80087ee <ff_wtoupper+0x16>
 80087ea:	4b3e      	ldr	r3, [pc, #248]	@ (80088e4 <ff_wtoupper+0x10c>)
 80087ec:	e000      	b.n	80087f0 <ff_wtoupper+0x18>
 80087ee:	4b3e      	ldr	r3, [pc, #248]	@ (80088e8 <ff_wtoupper+0x110>)
 80087f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	1c9a      	adds	r2, r3, #2
 80087f6:	617a      	str	r2, [r7, #20]
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80087fc:	8a7b      	ldrh	r3, [r7, #18]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d068      	beq.n	80088d4 <ff_wtoupper+0xfc>
 8008802:	88fa      	ldrh	r2, [r7, #6]
 8008804:	8a7b      	ldrh	r3, [r7, #18]
 8008806:	429a      	cmp	r2, r3
 8008808:	d364      	bcc.n	80088d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	1c9a      	adds	r2, r3, #2
 800880e:	617a      	str	r2, [r7, #20]
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	823b      	strh	r3, [r7, #16]
 8008814:	8a3b      	ldrh	r3, [r7, #16]
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	81fb      	strh	r3, [r7, #14]
 800881a:	8a3b      	ldrh	r3, [r7, #16]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008820:	88fa      	ldrh	r2, [r7, #6]
 8008822:	8a79      	ldrh	r1, [r7, #18]
 8008824:	8a3b      	ldrh	r3, [r7, #16]
 8008826:	440b      	add	r3, r1
 8008828:	429a      	cmp	r2, r3
 800882a:	da49      	bge.n	80088c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800882c:	89fb      	ldrh	r3, [r7, #14]
 800882e:	2b08      	cmp	r3, #8
 8008830:	d84f      	bhi.n	80088d2 <ff_wtoupper+0xfa>
 8008832:	a201      	add	r2, pc, #4	@ (adr r2, 8008838 <ff_wtoupper+0x60>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	0800885d 	.word	0x0800885d
 800883c:	0800886f 	.word	0x0800886f
 8008840:	08008885 	.word	0x08008885
 8008844:	0800888d 	.word	0x0800888d
 8008848:	08008895 	.word	0x08008895
 800884c:	0800889d 	.word	0x0800889d
 8008850:	080088a5 	.word	0x080088a5
 8008854:	080088ad 	.word	0x080088ad
 8008858:	080088b5 	.word	0x080088b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800885c:	88fa      	ldrh	r2, [r7, #6]
 800885e:	8a7b      	ldrh	r3, [r7, #18]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4413      	add	r3, r2
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	80fb      	strh	r3, [r7, #6]
 800886c:	e027      	b.n	80088be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800886e:	88fa      	ldrh	r2, [r7, #6]
 8008870:	8a7b      	ldrh	r3, [r7, #18]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	b29b      	uxth	r3, r3
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	b29b      	uxth	r3, r3
 800887c:	88fa      	ldrh	r2, [r7, #6]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	80fb      	strh	r3, [r7, #6]
 8008882:	e01c      	b.n	80088be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	3b10      	subs	r3, #16
 8008888:	80fb      	strh	r3, [r7, #6]
 800888a:	e018      	b.n	80088be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800888c:	88fb      	ldrh	r3, [r7, #6]
 800888e:	3b20      	subs	r3, #32
 8008890:	80fb      	strh	r3, [r7, #6]
 8008892:	e014      	b.n	80088be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008894:	88fb      	ldrh	r3, [r7, #6]
 8008896:	3b30      	subs	r3, #48	@ 0x30
 8008898:	80fb      	strh	r3, [r7, #6]
 800889a:	e010      	b.n	80088be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	3b1a      	subs	r3, #26
 80088a0:	80fb      	strh	r3, [r7, #6]
 80088a2:	e00c      	b.n	80088be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80088a4:	88fb      	ldrh	r3, [r7, #6]
 80088a6:	3308      	adds	r3, #8
 80088a8:	80fb      	strh	r3, [r7, #6]
 80088aa:	e008      	b.n	80088be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80088ac:	88fb      	ldrh	r3, [r7, #6]
 80088ae:	3b50      	subs	r3, #80	@ 0x50
 80088b0:	80fb      	strh	r3, [r7, #6]
 80088b2:	e004      	b.n	80088be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80088ba:	80fb      	strh	r3, [r7, #6]
 80088bc:	bf00      	nop
			}
			break;
 80088be:	e008      	b.n	80088d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80088c0:	89fb      	ldrh	r3, [r7, #14]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d195      	bne.n	80087f2 <ff_wtoupper+0x1a>
 80088c6:	8a3b      	ldrh	r3, [r7, #16]
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4413      	add	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80088d0:	e78f      	b.n	80087f2 <ff_wtoupper+0x1a>
			break;
 80088d2:	bf00      	nop
	}

	return chr;
 80088d4:	88fb      	ldrh	r3, [r7, #6]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	080099cc 	.word	0x080099cc
 80088e8:	08009bc0 	.word	0x08009bc0

080088ec <malloc>:
 80088ec:	4b02      	ldr	r3, [pc, #8]	@ (80088f8 <malloc+0xc>)
 80088ee:	4601      	mov	r1, r0
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	f000 b82d 	b.w	8008950 <_malloc_r>
 80088f6:	bf00      	nop
 80088f8:	20000020 	.word	0x20000020

080088fc <free>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	@ (8008908 <free+0xc>)
 80088fe:	4601      	mov	r1, r0
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	f000 b927 	b.w	8008b54 <_free_r>
 8008906:	bf00      	nop
 8008908:	20000020 	.word	0x20000020

0800890c <sbrk_aligned>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	4e0f      	ldr	r6, [pc, #60]	@ (800894c <sbrk_aligned+0x40>)
 8008910:	460c      	mov	r4, r1
 8008912:	6831      	ldr	r1, [r6, #0]
 8008914:	4605      	mov	r5, r0
 8008916:	b911      	cbnz	r1, 800891e <sbrk_aligned+0x12>
 8008918:	f000 f8e0 	bl	8008adc <_sbrk_r>
 800891c:	6030      	str	r0, [r6, #0]
 800891e:	4621      	mov	r1, r4
 8008920:	4628      	mov	r0, r5
 8008922:	f000 f8db 	bl	8008adc <_sbrk_r>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	d103      	bne.n	8008932 <sbrk_aligned+0x26>
 800892a:	f04f 34ff 	mov.w	r4, #4294967295
 800892e:	4620      	mov	r0, r4
 8008930:	bd70      	pop	{r4, r5, r6, pc}
 8008932:	1cc4      	adds	r4, r0, #3
 8008934:	f024 0403 	bic.w	r4, r4, #3
 8008938:	42a0      	cmp	r0, r4
 800893a:	d0f8      	beq.n	800892e <sbrk_aligned+0x22>
 800893c:	1a21      	subs	r1, r4, r0
 800893e:	4628      	mov	r0, r5
 8008940:	f000 f8cc 	bl	8008adc <_sbrk_r>
 8008944:	3001      	adds	r0, #1
 8008946:	d1f2      	bne.n	800892e <sbrk_aligned+0x22>
 8008948:	e7ef      	b.n	800892a <sbrk_aligned+0x1e>
 800894a:	bf00      	nop
 800894c:	20003ef0 	.word	0x20003ef0

08008950 <_malloc_r>:
 8008950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008954:	1ccd      	adds	r5, r1, #3
 8008956:	f025 0503 	bic.w	r5, r5, #3
 800895a:	3508      	adds	r5, #8
 800895c:	2d0c      	cmp	r5, #12
 800895e:	bf38      	it	cc
 8008960:	250c      	movcc	r5, #12
 8008962:	2d00      	cmp	r5, #0
 8008964:	4606      	mov	r6, r0
 8008966:	db01      	blt.n	800896c <_malloc_r+0x1c>
 8008968:	42a9      	cmp	r1, r5
 800896a:	d904      	bls.n	8008976 <_malloc_r+0x26>
 800896c:	230c      	movs	r3, #12
 800896e:	6033      	str	r3, [r6, #0]
 8008970:	2000      	movs	r0, #0
 8008972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a4c <_malloc_r+0xfc>
 800897a:	f000 f869 	bl	8008a50 <__malloc_lock>
 800897e:	f8d8 3000 	ldr.w	r3, [r8]
 8008982:	461c      	mov	r4, r3
 8008984:	bb44      	cbnz	r4, 80089d8 <_malloc_r+0x88>
 8008986:	4629      	mov	r1, r5
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff ffbf 	bl	800890c <sbrk_aligned>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	4604      	mov	r4, r0
 8008992:	d158      	bne.n	8008a46 <_malloc_r+0xf6>
 8008994:	f8d8 4000 	ldr.w	r4, [r8]
 8008998:	4627      	mov	r7, r4
 800899a:	2f00      	cmp	r7, #0
 800899c:	d143      	bne.n	8008a26 <_malloc_r+0xd6>
 800899e:	2c00      	cmp	r4, #0
 80089a0:	d04b      	beq.n	8008a3a <_malloc_r+0xea>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	4639      	mov	r1, r7
 80089a6:	4630      	mov	r0, r6
 80089a8:	eb04 0903 	add.w	r9, r4, r3
 80089ac:	f000 f896 	bl	8008adc <_sbrk_r>
 80089b0:	4581      	cmp	r9, r0
 80089b2:	d142      	bne.n	8008a3a <_malloc_r+0xea>
 80089b4:	6821      	ldr	r1, [r4, #0]
 80089b6:	1a6d      	subs	r5, r5, r1
 80089b8:	4629      	mov	r1, r5
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7ff ffa6 	bl	800890c <sbrk_aligned>
 80089c0:	3001      	adds	r0, #1
 80089c2:	d03a      	beq.n	8008a3a <_malloc_r+0xea>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	442b      	add	r3, r5
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	f8d8 3000 	ldr.w	r3, [r8]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	bb62      	cbnz	r2, 8008a2c <_malloc_r+0xdc>
 80089d2:	f8c8 7000 	str.w	r7, [r8]
 80089d6:	e00f      	b.n	80089f8 <_malloc_r+0xa8>
 80089d8:	6822      	ldr	r2, [r4, #0]
 80089da:	1b52      	subs	r2, r2, r5
 80089dc:	d420      	bmi.n	8008a20 <_malloc_r+0xd0>
 80089de:	2a0b      	cmp	r2, #11
 80089e0:	d917      	bls.n	8008a12 <_malloc_r+0xc2>
 80089e2:	1961      	adds	r1, r4, r5
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	6025      	str	r5, [r4, #0]
 80089e8:	bf18      	it	ne
 80089ea:	6059      	strne	r1, [r3, #4]
 80089ec:	6863      	ldr	r3, [r4, #4]
 80089ee:	bf08      	it	eq
 80089f0:	f8c8 1000 	streq.w	r1, [r8]
 80089f4:	5162      	str	r2, [r4, r5]
 80089f6:	604b      	str	r3, [r1, #4]
 80089f8:	4630      	mov	r0, r6
 80089fa:	f000 f82f 	bl	8008a5c <__malloc_unlock>
 80089fe:	f104 000b 	add.w	r0, r4, #11
 8008a02:	1d23      	adds	r3, r4, #4
 8008a04:	f020 0007 	bic.w	r0, r0, #7
 8008a08:	1ac2      	subs	r2, r0, r3
 8008a0a:	bf1c      	itt	ne
 8008a0c:	1a1b      	subne	r3, r3, r0
 8008a0e:	50a3      	strne	r3, [r4, r2]
 8008a10:	e7af      	b.n	8008972 <_malloc_r+0x22>
 8008a12:	6862      	ldr	r2, [r4, #4]
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	bf0c      	ite	eq
 8008a18:	f8c8 2000 	streq.w	r2, [r8]
 8008a1c:	605a      	strne	r2, [r3, #4]
 8008a1e:	e7eb      	b.n	80089f8 <_malloc_r+0xa8>
 8008a20:	4623      	mov	r3, r4
 8008a22:	6864      	ldr	r4, [r4, #4]
 8008a24:	e7ae      	b.n	8008984 <_malloc_r+0x34>
 8008a26:	463c      	mov	r4, r7
 8008a28:	687f      	ldr	r7, [r7, #4]
 8008a2a:	e7b6      	b.n	800899a <_malloc_r+0x4a>
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	d1fb      	bne.n	8008a2c <_malloc_r+0xdc>
 8008a34:	2300      	movs	r3, #0
 8008a36:	6053      	str	r3, [r2, #4]
 8008a38:	e7de      	b.n	80089f8 <_malloc_r+0xa8>
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	6033      	str	r3, [r6, #0]
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f000 f80c 	bl	8008a5c <__malloc_unlock>
 8008a44:	e794      	b.n	8008970 <_malloc_r+0x20>
 8008a46:	6005      	str	r5, [r0, #0]
 8008a48:	e7d6      	b.n	80089f8 <_malloc_r+0xa8>
 8008a4a:	bf00      	nop
 8008a4c:	20003ef4 	.word	0x20003ef4

08008a50 <__malloc_lock>:
 8008a50:	4801      	ldr	r0, [pc, #4]	@ (8008a58 <__malloc_lock+0x8>)
 8008a52:	f000 b87d 	b.w	8008b50 <__retarget_lock_acquire_recursive>
 8008a56:	bf00      	nop
 8008a58:	20004034 	.word	0x20004034

08008a5c <__malloc_unlock>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	@ (8008a64 <__malloc_unlock+0x8>)
 8008a5e:	f000 b878 	b.w	8008b52 <__retarget_lock_release_recursive>
 8008a62:	bf00      	nop
 8008a64:	20004034 	.word	0x20004034

08008a68 <siprintf>:
 8008a68:	b40e      	push	{r1, r2, r3}
 8008a6a:	b500      	push	{lr}
 8008a6c:	b09c      	sub	sp, #112	@ 0x70
 8008a6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a70:	9002      	str	r0, [sp, #8]
 8008a72:	9006      	str	r0, [sp, #24]
 8008a74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a78:	4809      	ldr	r0, [pc, #36]	@ (8008aa0 <siprintf+0x38>)
 8008a7a:	9107      	str	r1, [sp, #28]
 8008a7c:	9104      	str	r1, [sp, #16]
 8008a7e:	4909      	ldr	r1, [pc, #36]	@ (8008aa4 <siprintf+0x3c>)
 8008a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a84:	9105      	str	r1, [sp, #20]
 8008a86:	6800      	ldr	r0, [r0, #0]
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	a902      	add	r1, sp, #8
 8008a8c:	f000 f908 	bl	8008ca0 <_svfiprintf_r>
 8008a90:	9b02      	ldr	r3, [sp, #8]
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	b01c      	add	sp, #112	@ 0x70
 8008a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a9c:	b003      	add	sp, #12
 8008a9e:	4770      	bx	lr
 8008aa0:	20000020 	.word	0x20000020
 8008aa4:	ffff0208 	.word	0xffff0208

08008aa8 <memset>:
 8008aa8:	4402      	add	r2, r0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d100      	bne.n	8008ab2 <memset+0xa>
 8008ab0:	4770      	bx	lr
 8008ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ab6:	e7f9      	b.n	8008aac <memset+0x4>

08008ab8 <strncmp>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	b16a      	cbz	r2, 8008ad8 <strncmp+0x20>
 8008abc:	3901      	subs	r1, #1
 8008abe:	1884      	adds	r4, r0, r2
 8008ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ac4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d103      	bne.n	8008ad4 <strncmp+0x1c>
 8008acc:	42a0      	cmp	r0, r4
 8008ace:	d001      	beq.n	8008ad4 <strncmp+0x1c>
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	d1f5      	bne.n	8008ac0 <strncmp+0x8>
 8008ad4:	1ad0      	subs	r0, r2, r3
 8008ad6:	bd10      	pop	{r4, pc}
 8008ad8:	4610      	mov	r0, r2
 8008ada:	e7fc      	b.n	8008ad6 <strncmp+0x1e>

08008adc <_sbrk_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d06      	ldr	r5, [pc, #24]	@ (8008af8 <_sbrk_r+0x1c>)
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	f7f8 fb56 	bl	8001198 <_sbrk>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_sbrk_r+0x1a>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_sbrk_r+0x1a>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	20004030 	.word	0x20004030

08008afc <__errno>:
 8008afc:	4b01      	ldr	r3, [pc, #4]	@ (8008b04 <__errno+0x8>)
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	20000020 	.word	0x20000020

08008b08 <__libc_init_array>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8008b40 <__libc_init_array+0x38>)
 8008b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8008b44 <__libc_init_array+0x3c>)
 8008b0e:	1b64      	subs	r4, r4, r5
 8008b10:	10a4      	asrs	r4, r4, #2
 8008b12:	2600      	movs	r6, #0
 8008b14:	42a6      	cmp	r6, r4
 8008b16:	d109      	bne.n	8008b2c <__libc_init_array+0x24>
 8008b18:	4d0b      	ldr	r5, [pc, #44]	@ (8008b48 <__libc_init_array+0x40>)
 8008b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8008b4c <__libc_init_array+0x44>)
 8008b1c:	f000 fba8 	bl	8009270 <_init>
 8008b20:	1b64      	subs	r4, r4, r5
 8008b22:	10a4      	asrs	r4, r4, #2
 8008b24:	2600      	movs	r6, #0
 8008b26:	42a6      	cmp	r6, r4
 8008b28:	d105      	bne.n	8008b36 <__libc_init_array+0x2e>
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b30:	4798      	blx	r3
 8008b32:	3601      	adds	r6, #1
 8008b34:	e7ee      	b.n	8008b14 <__libc_init_array+0xc>
 8008b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3a:	4798      	blx	r3
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	e7f2      	b.n	8008b26 <__libc_init_array+0x1e>
 8008b40:	08009cb8 	.word	0x08009cb8
 8008b44:	08009cb8 	.word	0x08009cb8
 8008b48:	08009cb8 	.word	0x08009cb8
 8008b4c:	08009cbc 	.word	0x08009cbc

08008b50 <__retarget_lock_acquire_recursive>:
 8008b50:	4770      	bx	lr

08008b52 <__retarget_lock_release_recursive>:
 8008b52:	4770      	bx	lr

08008b54 <_free_r>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4605      	mov	r5, r0
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	d041      	beq.n	8008be0 <_free_r+0x8c>
 8008b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b60:	1f0c      	subs	r4, r1, #4
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	bfb8      	it	lt
 8008b66:	18e4      	addlt	r4, r4, r3
 8008b68:	f7ff ff72 	bl	8008a50 <__malloc_lock>
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008be4 <_free_r+0x90>)
 8008b6e:	6813      	ldr	r3, [r2, #0]
 8008b70:	b933      	cbnz	r3, 8008b80 <_free_r+0x2c>
 8008b72:	6063      	str	r3, [r4, #4]
 8008b74:	6014      	str	r4, [r2, #0]
 8008b76:	4628      	mov	r0, r5
 8008b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7c:	f7ff bf6e 	b.w	8008a5c <__malloc_unlock>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d908      	bls.n	8008b96 <_free_r+0x42>
 8008b84:	6820      	ldr	r0, [r4, #0]
 8008b86:	1821      	adds	r1, r4, r0
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	bf01      	itttt	eq
 8008b8c:	6819      	ldreq	r1, [r3, #0]
 8008b8e:	685b      	ldreq	r3, [r3, #4]
 8008b90:	1809      	addeq	r1, r1, r0
 8008b92:	6021      	streq	r1, [r4, #0]
 8008b94:	e7ed      	b.n	8008b72 <_free_r+0x1e>
 8008b96:	461a      	mov	r2, r3
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	b10b      	cbz	r3, 8008ba0 <_free_r+0x4c>
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	d9fa      	bls.n	8008b96 <_free_r+0x42>
 8008ba0:	6811      	ldr	r1, [r2, #0]
 8008ba2:	1850      	adds	r0, r2, r1
 8008ba4:	42a0      	cmp	r0, r4
 8008ba6:	d10b      	bne.n	8008bc0 <_free_r+0x6c>
 8008ba8:	6820      	ldr	r0, [r4, #0]
 8008baa:	4401      	add	r1, r0
 8008bac:	1850      	adds	r0, r2, r1
 8008bae:	4283      	cmp	r3, r0
 8008bb0:	6011      	str	r1, [r2, #0]
 8008bb2:	d1e0      	bne.n	8008b76 <_free_r+0x22>
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	6053      	str	r3, [r2, #4]
 8008bba:	4408      	add	r0, r1
 8008bbc:	6010      	str	r0, [r2, #0]
 8008bbe:	e7da      	b.n	8008b76 <_free_r+0x22>
 8008bc0:	d902      	bls.n	8008bc8 <_free_r+0x74>
 8008bc2:	230c      	movs	r3, #12
 8008bc4:	602b      	str	r3, [r5, #0]
 8008bc6:	e7d6      	b.n	8008b76 <_free_r+0x22>
 8008bc8:	6820      	ldr	r0, [r4, #0]
 8008bca:	1821      	adds	r1, r4, r0
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf04      	itt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	6063      	str	r3, [r4, #4]
 8008bd6:	bf04      	itt	eq
 8008bd8:	1809      	addeq	r1, r1, r0
 8008bda:	6021      	streq	r1, [r4, #0]
 8008bdc:	6054      	str	r4, [r2, #4]
 8008bde:	e7ca      	b.n	8008b76 <_free_r+0x22>
 8008be0:	bd38      	pop	{r3, r4, r5, pc}
 8008be2:	bf00      	nop
 8008be4:	20003ef4 	.word	0x20003ef4

08008be8 <__ssputs_r>:
 8008be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bec:	688e      	ldr	r6, [r1, #8]
 8008bee:	461f      	mov	r7, r3
 8008bf0:	42be      	cmp	r6, r7
 8008bf2:	680b      	ldr	r3, [r1, #0]
 8008bf4:	4682      	mov	sl, r0
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	4690      	mov	r8, r2
 8008bfa:	d82d      	bhi.n	8008c58 <__ssputs_r+0x70>
 8008bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c04:	d026      	beq.n	8008c54 <__ssputs_r+0x6c>
 8008c06:	6965      	ldr	r5, [r4, #20]
 8008c08:	6909      	ldr	r1, [r1, #16]
 8008c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c0e:	eba3 0901 	sub.w	r9, r3, r1
 8008c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c16:	1c7b      	adds	r3, r7, #1
 8008c18:	444b      	add	r3, r9
 8008c1a:	106d      	asrs	r5, r5, #1
 8008c1c:	429d      	cmp	r5, r3
 8008c1e:	bf38      	it	cc
 8008c20:	461d      	movcc	r5, r3
 8008c22:	0553      	lsls	r3, r2, #21
 8008c24:	d527      	bpl.n	8008c76 <__ssputs_r+0x8e>
 8008c26:	4629      	mov	r1, r5
 8008c28:	f7ff fe92 	bl	8008950 <_malloc_r>
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	b360      	cbz	r0, 8008c8a <__ssputs_r+0xa2>
 8008c30:	6921      	ldr	r1, [r4, #16]
 8008c32:	464a      	mov	r2, r9
 8008c34:	f000 fad8 	bl	80091e8 <memcpy>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	6126      	str	r6, [r4, #16]
 8008c46:	6165      	str	r5, [r4, #20]
 8008c48:	444e      	add	r6, r9
 8008c4a:	eba5 0509 	sub.w	r5, r5, r9
 8008c4e:	6026      	str	r6, [r4, #0]
 8008c50:	60a5      	str	r5, [r4, #8]
 8008c52:	463e      	mov	r6, r7
 8008c54:	42be      	cmp	r6, r7
 8008c56:	d900      	bls.n	8008c5a <__ssputs_r+0x72>
 8008c58:	463e      	mov	r6, r7
 8008c5a:	6820      	ldr	r0, [r4, #0]
 8008c5c:	4632      	mov	r2, r6
 8008c5e:	4641      	mov	r1, r8
 8008c60:	f000 faa8 	bl	80091b4 <memmove>
 8008c64:	68a3      	ldr	r3, [r4, #8]
 8008c66:	1b9b      	subs	r3, r3, r6
 8008c68:	60a3      	str	r3, [r4, #8]
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	4433      	add	r3, r6
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	2000      	movs	r0, #0
 8008c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c76:	462a      	mov	r2, r5
 8008c78:	f000 fac4 	bl	8009204 <_realloc_r>
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d1e0      	bne.n	8008c44 <__ssputs_r+0x5c>
 8008c82:	6921      	ldr	r1, [r4, #16]
 8008c84:	4650      	mov	r0, sl
 8008c86:	f7ff ff65 	bl	8008b54 <_free_r>
 8008c8a:	230c      	movs	r3, #12
 8008c8c:	f8ca 3000 	str.w	r3, [sl]
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	e7e9      	b.n	8008c72 <__ssputs_r+0x8a>
	...

08008ca0 <_svfiprintf_r>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	4698      	mov	r8, r3
 8008ca6:	898b      	ldrh	r3, [r1, #12]
 8008ca8:	061b      	lsls	r3, r3, #24
 8008caa:	b09d      	sub	sp, #116	@ 0x74
 8008cac:	4607      	mov	r7, r0
 8008cae:	460d      	mov	r5, r1
 8008cb0:	4614      	mov	r4, r2
 8008cb2:	d510      	bpl.n	8008cd6 <_svfiprintf_r+0x36>
 8008cb4:	690b      	ldr	r3, [r1, #16]
 8008cb6:	b973      	cbnz	r3, 8008cd6 <_svfiprintf_r+0x36>
 8008cb8:	2140      	movs	r1, #64	@ 0x40
 8008cba:	f7ff fe49 	bl	8008950 <_malloc_r>
 8008cbe:	6028      	str	r0, [r5, #0]
 8008cc0:	6128      	str	r0, [r5, #16]
 8008cc2:	b930      	cbnz	r0, 8008cd2 <_svfiprintf_r+0x32>
 8008cc4:	230c      	movs	r3, #12
 8008cc6:	603b      	str	r3, [r7, #0]
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ccc:	b01d      	add	sp, #116	@ 0x74
 8008cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd2:	2340      	movs	r3, #64	@ 0x40
 8008cd4:	616b      	str	r3, [r5, #20]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cda:	2320      	movs	r3, #32
 8008cdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ce4:	2330      	movs	r3, #48	@ 0x30
 8008ce6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e84 <_svfiprintf_r+0x1e4>
 8008cea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cee:	f04f 0901 	mov.w	r9, #1
 8008cf2:	4623      	mov	r3, r4
 8008cf4:	469a      	mov	sl, r3
 8008cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cfa:	b10a      	cbz	r2, 8008d00 <_svfiprintf_r+0x60>
 8008cfc:	2a25      	cmp	r2, #37	@ 0x25
 8008cfe:	d1f9      	bne.n	8008cf4 <_svfiprintf_r+0x54>
 8008d00:	ebba 0b04 	subs.w	fp, sl, r4
 8008d04:	d00b      	beq.n	8008d1e <_svfiprintf_r+0x7e>
 8008d06:	465b      	mov	r3, fp
 8008d08:	4622      	mov	r2, r4
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f7ff ff6b 	bl	8008be8 <__ssputs_r>
 8008d12:	3001      	adds	r0, #1
 8008d14:	f000 80a7 	beq.w	8008e66 <_svfiprintf_r+0x1c6>
 8008d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d1a:	445a      	add	r2, fp
 8008d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 809f 	beq.w	8008e66 <_svfiprintf_r+0x1c6>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d32:	f10a 0a01 	add.w	sl, sl, #1
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	9307      	str	r3, [sp, #28]
 8008d3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d40:	4654      	mov	r4, sl
 8008d42:	2205      	movs	r2, #5
 8008d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d48:	484e      	ldr	r0, [pc, #312]	@ (8008e84 <_svfiprintf_r+0x1e4>)
 8008d4a:	f7f7 fa81 	bl	8000250 <memchr>
 8008d4e:	9a04      	ldr	r2, [sp, #16]
 8008d50:	b9d8      	cbnz	r0, 8008d8a <_svfiprintf_r+0xea>
 8008d52:	06d0      	lsls	r0, r2, #27
 8008d54:	bf44      	itt	mi
 8008d56:	2320      	movmi	r3, #32
 8008d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d5c:	0711      	lsls	r1, r2, #28
 8008d5e:	bf44      	itt	mi
 8008d60:	232b      	movmi	r3, #43	@ 0x2b
 8008d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d66:	f89a 3000 	ldrb.w	r3, [sl]
 8008d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d6c:	d015      	beq.n	8008d9a <_svfiprintf_r+0xfa>
 8008d6e:	9a07      	ldr	r2, [sp, #28]
 8008d70:	4654      	mov	r4, sl
 8008d72:	2000      	movs	r0, #0
 8008d74:	f04f 0c0a 	mov.w	ip, #10
 8008d78:	4621      	mov	r1, r4
 8008d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d7e:	3b30      	subs	r3, #48	@ 0x30
 8008d80:	2b09      	cmp	r3, #9
 8008d82:	d94b      	bls.n	8008e1c <_svfiprintf_r+0x17c>
 8008d84:	b1b0      	cbz	r0, 8008db4 <_svfiprintf_r+0x114>
 8008d86:	9207      	str	r2, [sp, #28]
 8008d88:	e014      	b.n	8008db4 <_svfiprintf_r+0x114>
 8008d8a:	eba0 0308 	sub.w	r3, r0, r8
 8008d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8008d92:	4313      	orrs	r3, r2
 8008d94:	9304      	str	r3, [sp, #16]
 8008d96:	46a2      	mov	sl, r4
 8008d98:	e7d2      	b.n	8008d40 <_svfiprintf_r+0xa0>
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	1d19      	adds	r1, r3, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	9103      	str	r1, [sp, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bfbb      	ittet	lt
 8008da6:	425b      	neglt	r3, r3
 8008da8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dac:	9307      	strge	r3, [sp, #28]
 8008dae:	9307      	strlt	r3, [sp, #28]
 8008db0:	bfb8      	it	lt
 8008db2:	9204      	strlt	r2, [sp, #16]
 8008db4:	7823      	ldrb	r3, [r4, #0]
 8008db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008db8:	d10a      	bne.n	8008dd0 <_svfiprintf_r+0x130>
 8008dba:	7863      	ldrb	r3, [r4, #1]
 8008dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dbe:	d132      	bne.n	8008e26 <_svfiprintf_r+0x186>
 8008dc0:	9b03      	ldr	r3, [sp, #12]
 8008dc2:	1d1a      	adds	r2, r3, #4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	9203      	str	r2, [sp, #12]
 8008dc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dcc:	3402      	adds	r4, #2
 8008dce:	9305      	str	r3, [sp, #20]
 8008dd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e94 <_svfiprintf_r+0x1f4>
 8008dd4:	7821      	ldrb	r1, [r4, #0]
 8008dd6:	2203      	movs	r2, #3
 8008dd8:	4650      	mov	r0, sl
 8008dda:	f7f7 fa39 	bl	8000250 <memchr>
 8008dde:	b138      	cbz	r0, 8008df0 <_svfiprintf_r+0x150>
 8008de0:	9b04      	ldr	r3, [sp, #16]
 8008de2:	eba0 000a 	sub.w	r0, r0, sl
 8008de6:	2240      	movs	r2, #64	@ 0x40
 8008de8:	4082      	lsls	r2, r0
 8008dea:	4313      	orrs	r3, r2
 8008dec:	3401      	adds	r4, #1
 8008dee:	9304      	str	r3, [sp, #16]
 8008df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df4:	4824      	ldr	r0, [pc, #144]	@ (8008e88 <_svfiprintf_r+0x1e8>)
 8008df6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dfa:	2206      	movs	r2, #6
 8008dfc:	f7f7 fa28 	bl	8000250 <memchr>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d036      	beq.n	8008e72 <_svfiprintf_r+0x1d2>
 8008e04:	4b21      	ldr	r3, [pc, #132]	@ (8008e8c <_svfiprintf_r+0x1ec>)
 8008e06:	bb1b      	cbnz	r3, 8008e50 <_svfiprintf_r+0x1b0>
 8008e08:	9b03      	ldr	r3, [sp, #12]
 8008e0a:	3307      	adds	r3, #7
 8008e0c:	f023 0307 	bic.w	r3, r3, #7
 8008e10:	3308      	adds	r3, #8
 8008e12:	9303      	str	r3, [sp, #12]
 8008e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e16:	4433      	add	r3, r6
 8008e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e1a:	e76a      	b.n	8008cf2 <_svfiprintf_r+0x52>
 8008e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e20:	460c      	mov	r4, r1
 8008e22:	2001      	movs	r0, #1
 8008e24:	e7a8      	b.n	8008d78 <_svfiprintf_r+0xd8>
 8008e26:	2300      	movs	r3, #0
 8008e28:	3401      	adds	r4, #1
 8008e2a:	9305      	str	r3, [sp, #20]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f04f 0c0a 	mov.w	ip, #10
 8008e32:	4620      	mov	r0, r4
 8008e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e38:	3a30      	subs	r2, #48	@ 0x30
 8008e3a:	2a09      	cmp	r2, #9
 8008e3c:	d903      	bls.n	8008e46 <_svfiprintf_r+0x1a6>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0c6      	beq.n	8008dd0 <_svfiprintf_r+0x130>
 8008e42:	9105      	str	r1, [sp, #20]
 8008e44:	e7c4      	b.n	8008dd0 <_svfiprintf_r+0x130>
 8008e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e7f0      	b.n	8008e32 <_svfiprintf_r+0x192>
 8008e50:	ab03      	add	r3, sp, #12
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	462a      	mov	r2, r5
 8008e56:	4b0e      	ldr	r3, [pc, #56]	@ (8008e90 <_svfiprintf_r+0x1f0>)
 8008e58:	a904      	add	r1, sp, #16
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	f3af 8000 	nop.w
 8008e60:	1c42      	adds	r2, r0, #1
 8008e62:	4606      	mov	r6, r0
 8008e64:	d1d6      	bne.n	8008e14 <_svfiprintf_r+0x174>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	065b      	lsls	r3, r3, #25
 8008e6a:	f53f af2d 	bmi.w	8008cc8 <_svfiprintf_r+0x28>
 8008e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e70:	e72c      	b.n	8008ccc <_svfiprintf_r+0x2c>
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	462a      	mov	r2, r5
 8008e78:	4b05      	ldr	r3, [pc, #20]	@ (8008e90 <_svfiprintf_r+0x1f0>)
 8008e7a:	a904      	add	r1, sp, #16
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	f000 f879 	bl	8008f74 <_printf_i>
 8008e82:	e7ed      	b.n	8008e60 <_svfiprintf_r+0x1c0>
 8008e84:	08009c7c 	.word	0x08009c7c
 8008e88:	08009c86 	.word	0x08009c86
 8008e8c:	00000000 	.word	0x00000000
 8008e90:	08008be9 	.word	0x08008be9
 8008e94:	08009c82 	.word	0x08009c82

08008e98 <_printf_common>:
 8008e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e9c:	4616      	mov	r6, r2
 8008e9e:	4698      	mov	r8, r3
 8008ea0:	688a      	ldr	r2, [r1, #8]
 8008ea2:	690b      	ldr	r3, [r1, #16]
 8008ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	bfb8      	it	lt
 8008eac:	4613      	movlt	r3, r2
 8008eae:	6033      	str	r3, [r6, #0]
 8008eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	b10a      	cbz	r2, 8008ebe <_printf_common+0x26>
 8008eba:	3301      	adds	r3, #1
 8008ebc:	6033      	str	r3, [r6, #0]
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	0699      	lsls	r1, r3, #26
 8008ec2:	bf42      	ittt	mi
 8008ec4:	6833      	ldrmi	r3, [r6, #0]
 8008ec6:	3302      	addmi	r3, #2
 8008ec8:	6033      	strmi	r3, [r6, #0]
 8008eca:	6825      	ldr	r5, [r4, #0]
 8008ecc:	f015 0506 	ands.w	r5, r5, #6
 8008ed0:	d106      	bne.n	8008ee0 <_printf_common+0x48>
 8008ed2:	f104 0a19 	add.w	sl, r4, #25
 8008ed6:	68e3      	ldr	r3, [r4, #12]
 8008ed8:	6832      	ldr	r2, [r6, #0]
 8008eda:	1a9b      	subs	r3, r3, r2
 8008edc:	42ab      	cmp	r3, r5
 8008ede:	dc26      	bgt.n	8008f2e <_printf_common+0x96>
 8008ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ee4:	6822      	ldr	r2, [r4, #0]
 8008ee6:	3b00      	subs	r3, #0
 8008ee8:	bf18      	it	ne
 8008eea:	2301      	movne	r3, #1
 8008eec:	0692      	lsls	r2, r2, #26
 8008eee:	d42b      	bmi.n	8008f48 <_printf_common+0xb0>
 8008ef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ef4:	4641      	mov	r1, r8
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	47c8      	blx	r9
 8008efa:	3001      	adds	r0, #1
 8008efc:	d01e      	beq.n	8008f3c <_printf_common+0xa4>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	6922      	ldr	r2, [r4, #16]
 8008f02:	f003 0306 	and.w	r3, r3, #6
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	bf02      	ittt	eq
 8008f0a:	68e5      	ldreq	r5, [r4, #12]
 8008f0c:	6833      	ldreq	r3, [r6, #0]
 8008f0e:	1aed      	subeq	r5, r5, r3
 8008f10:	68a3      	ldr	r3, [r4, #8]
 8008f12:	bf0c      	ite	eq
 8008f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f18:	2500      	movne	r5, #0
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	bfc4      	itt	gt
 8008f1e:	1a9b      	subgt	r3, r3, r2
 8008f20:	18ed      	addgt	r5, r5, r3
 8008f22:	2600      	movs	r6, #0
 8008f24:	341a      	adds	r4, #26
 8008f26:	42b5      	cmp	r5, r6
 8008f28:	d11a      	bne.n	8008f60 <_printf_common+0xc8>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	e008      	b.n	8008f40 <_printf_common+0xa8>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4652      	mov	r2, sl
 8008f32:	4641      	mov	r1, r8
 8008f34:	4638      	mov	r0, r7
 8008f36:	47c8      	blx	r9
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d103      	bne.n	8008f44 <_printf_common+0xac>
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f44:	3501      	adds	r5, #1
 8008f46:	e7c6      	b.n	8008ed6 <_printf_common+0x3e>
 8008f48:	18e1      	adds	r1, r4, r3
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	2030      	movs	r0, #48	@ 0x30
 8008f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f52:	4422      	add	r2, r4
 8008f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	e7c7      	b.n	8008ef0 <_printf_common+0x58>
 8008f60:	2301      	movs	r3, #1
 8008f62:	4622      	mov	r2, r4
 8008f64:	4641      	mov	r1, r8
 8008f66:	4638      	mov	r0, r7
 8008f68:	47c8      	blx	r9
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d0e6      	beq.n	8008f3c <_printf_common+0xa4>
 8008f6e:	3601      	adds	r6, #1
 8008f70:	e7d9      	b.n	8008f26 <_printf_common+0x8e>
	...

08008f74 <_printf_i>:
 8008f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f78:	7e0f      	ldrb	r7, [r1, #24]
 8008f7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f7c:	2f78      	cmp	r7, #120	@ 0x78
 8008f7e:	4691      	mov	r9, r2
 8008f80:	4680      	mov	r8, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	469a      	mov	sl, r3
 8008f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f8a:	d807      	bhi.n	8008f9c <_printf_i+0x28>
 8008f8c:	2f62      	cmp	r7, #98	@ 0x62
 8008f8e:	d80a      	bhi.n	8008fa6 <_printf_i+0x32>
 8008f90:	2f00      	cmp	r7, #0
 8008f92:	f000 80d2 	beq.w	800913a <_printf_i+0x1c6>
 8008f96:	2f58      	cmp	r7, #88	@ 0x58
 8008f98:	f000 80b9 	beq.w	800910e <_printf_i+0x19a>
 8008f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fa4:	e03a      	b.n	800901c <_printf_i+0xa8>
 8008fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008faa:	2b15      	cmp	r3, #21
 8008fac:	d8f6      	bhi.n	8008f9c <_printf_i+0x28>
 8008fae:	a101      	add	r1, pc, #4	@ (adr r1, 8008fb4 <_printf_i+0x40>)
 8008fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fb4:	0800900d 	.word	0x0800900d
 8008fb8:	08009021 	.word	0x08009021
 8008fbc:	08008f9d 	.word	0x08008f9d
 8008fc0:	08008f9d 	.word	0x08008f9d
 8008fc4:	08008f9d 	.word	0x08008f9d
 8008fc8:	08008f9d 	.word	0x08008f9d
 8008fcc:	08009021 	.word	0x08009021
 8008fd0:	08008f9d 	.word	0x08008f9d
 8008fd4:	08008f9d 	.word	0x08008f9d
 8008fd8:	08008f9d 	.word	0x08008f9d
 8008fdc:	08008f9d 	.word	0x08008f9d
 8008fe0:	08009121 	.word	0x08009121
 8008fe4:	0800904b 	.word	0x0800904b
 8008fe8:	080090db 	.word	0x080090db
 8008fec:	08008f9d 	.word	0x08008f9d
 8008ff0:	08008f9d 	.word	0x08008f9d
 8008ff4:	08009143 	.word	0x08009143
 8008ff8:	08008f9d 	.word	0x08008f9d
 8008ffc:	0800904b 	.word	0x0800904b
 8009000:	08008f9d 	.word	0x08008f9d
 8009004:	08008f9d 	.word	0x08008f9d
 8009008:	080090e3 	.word	0x080090e3
 800900c:	6833      	ldr	r3, [r6, #0]
 800900e:	1d1a      	adds	r2, r3, #4
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6032      	str	r2, [r6, #0]
 8009014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800901c:	2301      	movs	r3, #1
 800901e:	e09d      	b.n	800915c <_printf_i+0x1e8>
 8009020:	6833      	ldr	r3, [r6, #0]
 8009022:	6820      	ldr	r0, [r4, #0]
 8009024:	1d19      	adds	r1, r3, #4
 8009026:	6031      	str	r1, [r6, #0]
 8009028:	0606      	lsls	r6, r0, #24
 800902a:	d501      	bpl.n	8009030 <_printf_i+0xbc>
 800902c:	681d      	ldr	r5, [r3, #0]
 800902e:	e003      	b.n	8009038 <_printf_i+0xc4>
 8009030:	0645      	lsls	r5, r0, #25
 8009032:	d5fb      	bpl.n	800902c <_printf_i+0xb8>
 8009034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009038:	2d00      	cmp	r5, #0
 800903a:	da03      	bge.n	8009044 <_printf_i+0xd0>
 800903c:	232d      	movs	r3, #45	@ 0x2d
 800903e:	426d      	negs	r5, r5
 8009040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009044:	4859      	ldr	r0, [pc, #356]	@ (80091ac <_printf_i+0x238>)
 8009046:	230a      	movs	r3, #10
 8009048:	e011      	b.n	800906e <_printf_i+0xfa>
 800904a:	6821      	ldr	r1, [r4, #0]
 800904c:	6833      	ldr	r3, [r6, #0]
 800904e:	0608      	lsls	r0, r1, #24
 8009050:	f853 5b04 	ldr.w	r5, [r3], #4
 8009054:	d402      	bmi.n	800905c <_printf_i+0xe8>
 8009056:	0649      	lsls	r1, r1, #25
 8009058:	bf48      	it	mi
 800905a:	b2ad      	uxthmi	r5, r5
 800905c:	2f6f      	cmp	r7, #111	@ 0x6f
 800905e:	4853      	ldr	r0, [pc, #332]	@ (80091ac <_printf_i+0x238>)
 8009060:	6033      	str	r3, [r6, #0]
 8009062:	bf14      	ite	ne
 8009064:	230a      	movne	r3, #10
 8009066:	2308      	moveq	r3, #8
 8009068:	2100      	movs	r1, #0
 800906a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800906e:	6866      	ldr	r6, [r4, #4]
 8009070:	60a6      	str	r6, [r4, #8]
 8009072:	2e00      	cmp	r6, #0
 8009074:	bfa2      	ittt	ge
 8009076:	6821      	ldrge	r1, [r4, #0]
 8009078:	f021 0104 	bicge.w	r1, r1, #4
 800907c:	6021      	strge	r1, [r4, #0]
 800907e:	b90d      	cbnz	r5, 8009084 <_printf_i+0x110>
 8009080:	2e00      	cmp	r6, #0
 8009082:	d04b      	beq.n	800911c <_printf_i+0x1a8>
 8009084:	4616      	mov	r6, r2
 8009086:	fbb5 f1f3 	udiv	r1, r5, r3
 800908a:	fb03 5711 	mls	r7, r3, r1, r5
 800908e:	5dc7      	ldrb	r7, [r0, r7]
 8009090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009094:	462f      	mov	r7, r5
 8009096:	42bb      	cmp	r3, r7
 8009098:	460d      	mov	r5, r1
 800909a:	d9f4      	bls.n	8009086 <_printf_i+0x112>
 800909c:	2b08      	cmp	r3, #8
 800909e:	d10b      	bne.n	80090b8 <_printf_i+0x144>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	07df      	lsls	r7, r3, #31
 80090a4:	d508      	bpl.n	80090b8 <_printf_i+0x144>
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	6861      	ldr	r1, [r4, #4]
 80090aa:	4299      	cmp	r1, r3
 80090ac:	bfde      	ittt	le
 80090ae:	2330      	movle	r3, #48	@ 0x30
 80090b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090b8:	1b92      	subs	r2, r2, r6
 80090ba:	6122      	str	r2, [r4, #16]
 80090bc:	f8cd a000 	str.w	sl, [sp]
 80090c0:	464b      	mov	r3, r9
 80090c2:	aa03      	add	r2, sp, #12
 80090c4:	4621      	mov	r1, r4
 80090c6:	4640      	mov	r0, r8
 80090c8:	f7ff fee6 	bl	8008e98 <_printf_common>
 80090cc:	3001      	adds	r0, #1
 80090ce:	d14a      	bne.n	8009166 <_printf_i+0x1f2>
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	b004      	add	sp, #16
 80090d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	f043 0320 	orr.w	r3, r3, #32
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	4833      	ldr	r0, [pc, #204]	@ (80091b0 <_printf_i+0x23c>)
 80090e4:	2778      	movs	r7, #120	@ 0x78
 80090e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	6831      	ldr	r1, [r6, #0]
 80090ee:	061f      	lsls	r7, r3, #24
 80090f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80090f4:	d402      	bmi.n	80090fc <_printf_i+0x188>
 80090f6:	065f      	lsls	r7, r3, #25
 80090f8:	bf48      	it	mi
 80090fa:	b2ad      	uxthmi	r5, r5
 80090fc:	6031      	str	r1, [r6, #0]
 80090fe:	07d9      	lsls	r1, r3, #31
 8009100:	bf44      	itt	mi
 8009102:	f043 0320 	orrmi.w	r3, r3, #32
 8009106:	6023      	strmi	r3, [r4, #0]
 8009108:	b11d      	cbz	r5, 8009112 <_printf_i+0x19e>
 800910a:	2310      	movs	r3, #16
 800910c:	e7ac      	b.n	8009068 <_printf_i+0xf4>
 800910e:	4827      	ldr	r0, [pc, #156]	@ (80091ac <_printf_i+0x238>)
 8009110:	e7e9      	b.n	80090e6 <_printf_i+0x172>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	f023 0320 	bic.w	r3, r3, #32
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	e7f6      	b.n	800910a <_printf_i+0x196>
 800911c:	4616      	mov	r6, r2
 800911e:	e7bd      	b.n	800909c <_printf_i+0x128>
 8009120:	6833      	ldr	r3, [r6, #0]
 8009122:	6825      	ldr	r5, [r4, #0]
 8009124:	6961      	ldr	r1, [r4, #20]
 8009126:	1d18      	adds	r0, r3, #4
 8009128:	6030      	str	r0, [r6, #0]
 800912a:	062e      	lsls	r6, r5, #24
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	d501      	bpl.n	8009134 <_printf_i+0x1c0>
 8009130:	6019      	str	r1, [r3, #0]
 8009132:	e002      	b.n	800913a <_printf_i+0x1c6>
 8009134:	0668      	lsls	r0, r5, #25
 8009136:	d5fb      	bpl.n	8009130 <_printf_i+0x1bc>
 8009138:	8019      	strh	r1, [r3, #0]
 800913a:	2300      	movs	r3, #0
 800913c:	6123      	str	r3, [r4, #16]
 800913e:	4616      	mov	r6, r2
 8009140:	e7bc      	b.n	80090bc <_printf_i+0x148>
 8009142:	6833      	ldr	r3, [r6, #0]
 8009144:	1d1a      	adds	r2, r3, #4
 8009146:	6032      	str	r2, [r6, #0]
 8009148:	681e      	ldr	r6, [r3, #0]
 800914a:	6862      	ldr	r2, [r4, #4]
 800914c:	2100      	movs	r1, #0
 800914e:	4630      	mov	r0, r6
 8009150:	f7f7 f87e 	bl	8000250 <memchr>
 8009154:	b108      	cbz	r0, 800915a <_printf_i+0x1e6>
 8009156:	1b80      	subs	r0, r0, r6
 8009158:	6060      	str	r0, [r4, #4]
 800915a:	6863      	ldr	r3, [r4, #4]
 800915c:	6123      	str	r3, [r4, #16]
 800915e:	2300      	movs	r3, #0
 8009160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009164:	e7aa      	b.n	80090bc <_printf_i+0x148>
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	4632      	mov	r2, r6
 800916a:	4649      	mov	r1, r9
 800916c:	4640      	mov	r0, r8
 800916e:	47d0      	blx	sl
 8009170:	3001      	adds	r0, #1
 8009172:	d0ad      	beq.n	80090d0 <_printf_i+0x15c>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	079b      	lsls	r3, r3, #30
 8009178:	d413      	bmi.n	80091a2 <_printf_i+0x22e>
 800917a:	68e0      	ldr	r0, [r4, #12]
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	4298      	cmp	r0, r3
 8009180:	bfb8      	it	lt
 8009182:	4618      	movlt	r0, r3
 8009184:	e7a6      	b.n	80090d4 <_printf_i+0x160>
 8009186:	2301      	movs	r3, #1
 8009188:	4632      	mov	r2, r6
 800918a:	4649      	mov	r1, r9
 800918c:	4640      	mov	r0, r8
 800918e:	47d0      	blx	sl
 8009190:	3001      	adds	r0, #1
 8009192:	d09d      	beq.n	80090d0 <_printf_i+0x15c>
 8009194:	3501      	adds	r5, #1
 8009196:	68e3      	ldr	r3, [r4, #12]
 8009198:	9903      	ldr	r1, [sp, #12]
 800919a:	1a5b      	subs	r3, r3, r1
 800919c:	42ab      	cmp	r3, r5
 800919e:	dcf2      	bgt.n	8009186 <_printf_i+0x212>
 80091a0:	e7eb      	b.n	800917a <_printf_i+0x206>
 80091a2:	2500      	movs	r5, #0
 80091a4:	f104 0619 	add.w	r6, r4, #25
 80091a8:	e7f5      	b.n	8009196 <_printf_i+0x222>
 80091aa:	bf00      	nop
 80091ac:	08009c8d 	.word	0x08009c8d
 80091b0:	08009c9e 	.word	0x08009c9e

080091b4 <memmove>:
 80091b4:	4288      	cmp	r0, r1
 80091b6:	b510      	push	{r4, lr}
 80091b8:	eb01 0402 	add.w	r4, r1, r2
 80091bc:	d902      	bls.n	80091c4 <memmove+0x10>
 80091be:	4284      	cmp	r4, r0
 80091c0:	4623      	mov	r3, r4
 80091c2:	d807      	bhi.n	80091d4 <memmove+0x20>
 80091c4:	1e43      	subs	r3, r0, #1
 80091c6:	42a1      	cmp	r1, r4
 80091c8:	d008      	beq.n	80091dc <memmove+0x28>
 80091ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091d2:	e7f8      	b.n	80091c6 <memmove+0x12>
 80091d4:	4402      	add	r2, r0
 80091d6:	4601      	mov	r1, r0
 80091d8:	428a      	cmp	r2, r1
 80091da:	d100      	bne.n	80091de <memmove+0x2a>
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091e6:	e7f7      	b.n	80091d8 <memmove+0x24>

080091e8 <memcpy>:
 80091e8:	440a      	add	r2, r1
 80091ea:	4291      	cmp	r1, r2
 80091ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80091f0:	d100      	bne.n	80091f4 <memcpy+0xc>
 80091f2:	4770      	bx	lr
 80091f4:	b510      	push	{r4, lr}
 80091f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091fe:	4291      	cmp	r1, r2
 8009200:	d1f9      	bne.n	80091f6 <memcpy+0xe>
 8009202:	bd10      	pop	{r4, pc}

08009204 <_realloc_r>:
 8009204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009208:	4680      	mov	r8, r0
 800920a:	4615      	mov	r5, r2
 800920c:	460c      	mov	r4, r1
 800920e:	b921      	cbnz	r1, 800921a <_realloc_r+0x16>
 8009210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009214:	4611      	mov	r1, r2
 8009216:	f7ff bb9b 	b.w	8008950 <_malloc_r>
 800921a:	b92a      	cbnz	r2, 8009228 <_realloc_r+0x24>
 800921c:	f7ff fc9a 	bl	8008b54 <_free_r>
 8009220:	2400      	movs	r4, #0
 8009222:	4620      	mov	r0, r4
 8009224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009228:	f000 f81a 	bl	8009260 <_malloc_usable_size_r>
 800922c:	4285      	cmp	r5, r0
 800922e:	4606      	mov	r6, r0
 8009230:	d802      	bhi.n	8009238 <_realloc_r+0x34>
 8009232:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009236:	d8f4      	bhi.n	8009222 <_realloc_r+0x1e>
 8009238:	4629      	mov	r1, r5
 800923a:	4640      	mov	r0, r8
 800923c:	f7ff fb88 	bl	8008950 <_malloc_r>
 8009240:	4607      	mov	r7, r0
 8009242:	2800      	cmp	r0, #0
 8009244:	d0ec      	beq.n	8009220 <_realloc_r+0x1c>
 8009246:	42b5      	cmp	r5, r6
 8009248:	462a      	mov	r2, r5
 800924a:	4621      	mov	r1, r4
 800924c:	bf28      	it	cs
 800924e:	4632      	movcs	r2, r6
 8009250:	f7ff ffca 	bl	80091e8 <memcpy>
 8009254:	4621      	mov	r1, r4
 8009256:	4640      	mov	r0, r8
 8009258:	f7ff fc7c 	bl	8008b54 <_free_r>
 800925c:	463c      	mov	r4, r7
 800925e:	e7e0      	b.n	8009222 <_realloc_r+0x1e>

08009260 <_malloc_usable_size_r>:
 8009260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009264:	1f18      	subs	r0, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfbc      	itt	lt
 800926a:	580b      	ldrlt	r3, [r1, r0]
 800926c:	18c0      	addlt	r0, r0, r3
 800926e:	4770      	bx	lr

08009270 <_init>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr

0800927c <_fini>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	bf00      	nop
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr
